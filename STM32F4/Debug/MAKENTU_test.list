
MAKENTU_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005684  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b718  0800b718  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b718  0800b718  0001b718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b720  0800b720  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b720  0800b720  0001b720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b724  0800b724  0001b724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800b728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000668  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006c4  200006c4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f833  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002819  00000000  00000000  0002f902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001038  00000000  00000000  00032120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c89  00000000  00000000  00033158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025196  00000000  00000000  00033de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000150fb  00000000  00000000  00058f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dcf60  00000000  00000000  0006e072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004b58  00000000  00000000  0014afd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0014fb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800607c 	.word	0x0800607c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	0800607c 	.word	0x0800607c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a47      	ldr	r2, [pc, #284]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b45      	ldr	r3, [pc, #276]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a40      	ldr	r2, [pc, #256]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a39      	ldr	r2, [pc, #228]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a32      	ldr	r2, [pc, #200]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a2b      	ldr	r2, [pc, #172]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <MX_GPIO_Init+0x13c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2174      	movs	r1, #116	; 0x74
 8000e1e:	4826      	ldr	r0, [pc, #152]	; (8000eb8 <MX_GPIO_Init+0x140>)
 8000e20:	f002 f9a6 	bl	8003170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e2a:	4824      	ldr	r0, [pc, #144]	; (8000ebc <MX_GPIO_Init+0x144>)
 8000e2c:	f002 f9a0 	bl	8003170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_Res_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	21e0      	movs	r1, #224	; 0xe0
 8000e34:	4822      	ldr	r0, [pc, #136]	; (8000ec0 <MX_GPIO_Init+0x148>)
 8000e36:	f002 f99b 	bl	8003170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e3a:	2374      	movs	r3, #116	; 0x74
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <MX_GPIO_Init+0x140>)
 8000e52:	f001 ffe1 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000e56:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4813      	ldr	r0, [pc, #76]	; (8000ebc <MX_GPIO_Init+0x144>)
 8000e70:	f001 ffd2 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_Res_Pin;
 8000e74:	2320      	movs	r3, #32
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_Res_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <MX_GPIO_Init+0x148>)
 8000e8c:	f001 ffc4 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_CS_Pin;
 8000e90:	23c0      	movs	r3, #192	; 0xc0
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <MX_GPIO_Init+0x148>)
 8000ea8:	f001 ffb6 	bl	8002e18 <HAL_GPIO_Init>

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000eca:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <MX_I2C1_Init+0x78>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <MX_I2C1_Init+0x7c>)
 8000ed2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ee6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000f02:	f002 f94f 	bl	80031a4 <HAL_I2C_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f0c:	f000 f8e4 	bl	80010d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000f14:	f002 fdf3 	bl	8003afe <HAL_I2CEx_ConfigAnalogFilter>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000f1e:	f000 f8db 	bl	80010d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_I2C1_Init+0x74>)
 8000f26:	f002 fe26 	bl	8003b76 <HAL_I2CEx_ConfigDigitalFilter>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f30:	f000 f8d2 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000078 	.word	0x20000078
 8000f3c:	40005400 	.word	0x40005400
 8000f40:	00061a80 	.word	0x00061a80

08000f44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <HAL_I2C_MspInit+0x84>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d12c      	bne.n	8000fc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_I2C_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <HAL_I2C_MspInit+0x88>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_I2C_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f88:	2312      	movs	r3, #18
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f94:	2304      	movs	r3, #4
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <HAL_I2C_MspInit+0x8c>)
 8000fa0:	f001 ff3a 	bl	8002e18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_I2C_MspInit+0x88>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_I2C_MspInit+0x88>)
 8000fae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_I2C_MspInit+0x88>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020400 	.word	0x40020400

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f001 fda2 	bl	8002b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f812 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f7ff feca 	bl	8000d78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fe4:	f7ff ff6e 	bl	8000ec4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fe8:	f000 f87c 	bl	80010e4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000fec:	f001 fd02 	bl	80029f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000ff0:	f000 f930 	bl	8001254 <ssd1306_Init>
  HAL_TIM_Base_Start(&htim2);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <main+0x2c>)
 8000ff6:	f003 fb19 	bl	800462c <HAL_TIM_Base_Start>
    // HAL_Delay(delaytime);
    // stepCV(70, 1000, &htim2);  // 256 half revolution
    // HAL_Delay(1000);
    // stepCCV(70, 1000, &htim2); // 128 quarter revolution
    // HAL_Delay(1000);
    ssd1306_TestAll();
 8000ffa:	f001 fc03 	bl	8002804 <ssd1306_TestAll>
 8000ffe:	e7fc      	b.n	8000ffa <main+0x26>
 8001000:	20000530 	.word	0x20000530

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2230      	movs	r2, #48	; 0x30
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f003 fe4a 	bl	8004cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <SystemClock_Config+0xcc>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <SystemClock_Config+0xcc>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <SystemClock_Config+0xcc>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <SystemClock_Config+0xd0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001050:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <SystemClock_Config+0xd0>)
 8001052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <SystemClock_Config+0xd0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001068:	2301      	movs	r3, #1
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106c:	2310      	movs	r3, #16
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001074:	2300      	movs	r3, #0
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001078:	2308      	movs	r3, #8
 800107a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800107c:	2348      	movs	r3, #72	; 0x48
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001080:	2302      	movs	r3, #2
 8001082:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001084:	2304      	movs	r3, #4
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fdb1 	bl	8003bf4 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001098:	f000 f81e 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a0:	2302      	movs	r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2102      	movs	r1, #2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f813 	bl	80040e4 <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010c4:	f000 f808 	bl	80010d8 <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3750      	adds	r7, #80	; 0x50
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_SPI1_Init+0x64>)
 80010ea:	4a18      	ldr	r2, [pc, #96]	; (800114c <MX_SPI1_Init+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_SPI1_Init+0x64>)
 80010f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_SPI1_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_SPI1_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_SPI1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_SPI1_Init+0x64>)
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_SPI1_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_SPI1_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_SPI1_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_SPI1_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_SPI1_Init+0x64>)
 8001130:	220a      	movs	r2, #10
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_SPI1_Init+0x64>)
 8001136:	f003 f9a1 	bl	800447c <HAL_SPI_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001140:	f7ff ffca 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000cc 	.word	0x200000cc
 800114c:	40013000 	.word	0x40013000

08001150 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_SPI_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12b      	bne.n	80011ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_SPI_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_SPI_MspInit+0x88>)
 800117c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_SPI_MspInit+0x88>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_SPI_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_SPI_MspInit+0x88>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_SPI_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011aa:	23e0      	movs	r3, #224	; 0xe0
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ba:	2305      	movs	r3, #5
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_SPI_MspInit+0x8c>)
 80011c6:	f001 fe27 	bl	8002e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40013000 	.word	0x40013000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af04      	add	r7, sp, #16
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2301      	movs	r3, #1
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	2200      	movs	r2, #0
 800120c:	2178      	movs	r1, #120	; 0x78
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <ssd1306_WriteCommand+0x2c>)
 8001210:	f002 f90c 	bl	800342c <HAL_I2C_Mem_Write>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000078 	.word	0x20000078

08001220 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af04      	add	r7, sp, #16
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	f04f 32ff 	mov.w	r2, #4294967295
 8001232:	9202      	str	r2, [sp, #8]
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2240      	movs	r2, #64	; 0x40
 800123e:	2178      	movs	r1, #120	; 0x78
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <ssd1306_WriteData+0x30>)
 8001242:	f002 f8f3 	bl	800342c <HAL_I2C_Mem_Write>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000078 	.word	0x20000078

08001254 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001258:	f7ff ffc2 	bl	80011e0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	; 0x64
 800125e:	f001 fcd1 	bl	8002c04 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001262:	2000      	movs	r0, #0
 8001264:	f000 ff7a 	bl	800215c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001268:	2020      	movs	r0, #32
 800126a:	f7ff ffc1 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff ffbe 	bl	80011f0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001274:	20b0      	movs	r0, #176	; 0xb0
 8001276:	f7ff ffbb 	bl	80011f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800127a:	20c8      	movs	r0, #200	; 0xc8
 800127c:	f7ff ffb8 	bl	80011f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff ffb5 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001286:	2010      	movs	r0, #16
 8001288:	f7ff ffb2 	bl	80011f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800128c:	2040      	movs	r0, #64	; 0x40
 800128e:	f7ff ffaf 	bl	80011f0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001292:	20ff      	movs	r0, #255	; 0xff
 8001294:	f000 ff4f 	bl	8002136 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001298:	20a1      	movs	r0, #161	; 0xa1
 800129a:	f7ff ffa9 	bl	80011f0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800129e:	20a6      	movs	r0, #166	; 0xa6
 80012a0:	f7ff ffa6 	bl	80011f0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012a4:	20a8      	movs	r0, #168	; 0xa8
 80012a6:	f7ff ffa3 	bl	80011f0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012aa:	203f      	movs	r0, #63	; 0x3f
 80012ac:	f7ff ffa0 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012b0:	20a4      	movs	r0, #164	; 0xa4
 80012b2:	f7ff ff9d 	bl	80011f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012b6:	20d3      	movs	r0, #211	; 0xd3
 80012b8:	f7ff ff9a 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff97 	bl	80011f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012c2:	20d5      	movs	r0, #213	; 0xd5
 80012c4:	f7ff ff94 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012c8:	20f0      	movs	r0, #240	; 0xf0
 80012ca:	f7ff ff91 	bl	80011f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012ce:	20d9      	movs	r0, #217	; 0xd9
 80012d0:	f7ff ff8e 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012d4:	2022      	movs	r0, #34	; 0x22
 80012d6:	f7ff ff8b 	bl	80011f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012da:	20da      	movs	r0, #218	; 0xda
 80012dc:	f7ff ff88 	bl	80011f0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012e0:	2012      	movs	r0, #18
 80012e2:	f7ff ff85 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012e6:	20db      	movs	r0, #219	; 0xdb
 80012e8:	f7ff ff82 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012ec:	2020      	movs	r0, #32
 80012ee:	f7ff ff7f 	bl	80011f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012f2:	208d      	movs	r0, #141	; 0x8d
 80012f4:	f7ff ff7c 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012f8:	2014      	movs	r0, #20
 80012fa:	f7ff ff79 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012fe:	2001      	movs	r0, #1
 8001300:	f000 ff2c 	bl	800215c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001304:	2000      	movs	r0, #0
 8001306:	f000 f80f 	bl	8001328 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800130a:	f000 f825 	bl	8001358 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <ssd1306_Init+0xd0>)
 8001310:	2200      	movs	r2, #0
 8001312:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <ssd1306_Init+0xd0>)
 8001316:	2200      	movs	r2, #0
 8001318:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800131a:	4b02      	ldr	r3, [pc, #8]	; (8001324 <ssd1306_Init+0xd0>)
 800131c:	2201      	movs	r2, #1
 800131e:	711a      	strb	r2, [r3, #4]
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000524 	.word	0x20000524

08001328 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <ssd1306_Fill+0x14>
 8001338:	2300      	movs	r3, #0
 800133a:	e000      	b.n	800133e <ssd1306_Fill+0x16>
 800133c:	23ff      	movs	r3, #255	; 0xff
 800133e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001342:	4619      	mov	r1, r3
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <ssd1306_Fill+0x2c>)
 8001346:	f003 fcb1 	bl	8004cac <memset>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000124 	.word	0x20000124

08001358 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800135e:	2300      	movs	r3, #0
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	e016      	b.n	8001392 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	3b50      	subs	r3, #80	; 0x50
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff40 	bl	80011f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ff3d 	bl	80011f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001376:	2010      	movs	r0, #16
 8001378:	f7ff ff3a 	bl	80011f0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	01db      	lsls	r3, r3, #7
 8001380:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <ssd1306_UpdateScreen+0x4c>)
 8001382:	4413      	add	r3, r2
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff4a 	bl	8001220 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	3301      	adds	r3, #1
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b07      	cmp	r3, #7
 8001396:	d9e5      	bls.n	8001364 <ssd1306_UpdateScreen+0xc>
    }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000124 	.word	0x20000124

080013a8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	460b      	mov	r3, r1
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	4613      	mov	r3, r2
 80013b8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db3d      	blt.n	800143e <ssd1306_DrawPixel+0x96>
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	2b3f      	cmp	r3, #63	; 0x3f
 80013c6:	d83a      	bhi.n	800143e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80013c8:	797b      	ldrb	r3, [r7, #5]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d11a      	bne.n	8001404 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	08db      	lsrs	r3, r3, #3
 80013d4:	b2d8      	uxtb	r0, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	01db      	lsls	r3, r3, #7
 80013da:	4413      	add	r3, r2
 80013dc:	4a1b      	ldr	r2, [pc, #108]	; (800144c <ssd1306_DrawPixel+0xa4>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	b25a      	sxtb	r2, r3
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	2101      	movs	r1, #1
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b259      	sxtb	r1, r3
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	4603      	mov	r3, r0
 80013f8:	01db      	lsls	r3, r3, #7
 80013fa:	4413      	add	r3, r2
 80013fc:	b2c9      	uxtb	r1, r1
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <ssd1306_DrawPixel+0xa4>)
 8001400:	54d1      	strb	r1, [r2, r3]
 8001402:	e01d      	b.n	8001440 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001404:	79fa      	ldrb	r2, [r7, #7]
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	b2d8      	uxtb	r0, r3
 800140c:	4603      	mov	r3, r0
 800140e:	01db      	lsls	r3, r3, #7
 8001410:	4413      	add	r3, r2
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <ssd1306_DrawPixel+0xa4>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	b25a      	sxtb	r2, r3
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	2101      	movs	r1, #1
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	b25b      	sxtb	r3, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	b25b      	sxtb	r3, r3
 800142a:	4013      	ands	r3, r2
 800142c:	b259      	sxtb	r1, r3
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	4603      	mov	r3, r0
 8001432:	01db      	lsls	r3, r3, #7
 8001434:	4413      	add	r3, r2
 8001436:	b2c9      	uxtb	r1, r1
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <ssd1306_DrawPixel+0xa4>)
 800143a:	54d1      	strb	r1, [r2, r3]
 800143c:	e000      	b.n	8001440 <ssd1306_DrawPixel+0x98>
        return;
 800143e:	bf00      	nop
    }
}
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000124 	.word	0x20000124

08001450 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	4604      	mov	r4, r0
 8001458:	4638      	mov	r0, r7
 800145a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800145e:	4623      	mov	r3, r4
 8001460:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b1f      	cmp	r3, #31
 8001466:	d902      	bls.n	800146e <ssd1306_WriteChar+0x1e>
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b7e      	cmp	r3, #126	; 0x7e
 800146c:	d901      	bls.n	8001472 <ssd1306_WriteChar+0x22>
        return 0;
 800146e:	2300      	movs	r3, #0
 8001470:	e079      	b.n	8001566 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <ssd1306_WriteChar+0x120>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	783b      	ldrb	r3, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	2b80      	cmp	r3, #128	; 0x80
 800147e:	dc06      	bgt.n	800148e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001480:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <ssd1306_WriteChar+0x120>)
 8001482:	885b      	ldrh	r3, [r3, #2]
 8001484:	461a      	mov	r2, r3
 8001486:	787b      	ldrb	r3, [r7, #1]
 8001488:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800148a:	2b40      	cmp	r3, #64	; 0x40
 800148c:	dd01      	ble.n	8001492 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800148e:	2300      	movs	r3, #0
 8001490:	e069      	b.n	8001566 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e04e      	b.n	8001536 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	3b20      	subs	r3, #32
 800149e:	7879      	ldrb	r1, [r7, #1]
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	4619      	mov	r1, r3
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	440b      	add	r3, r1
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	e036      	b.n	8001526 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d013      	beq.n	80014f0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <ssd1306_WriteChar+0x120>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	b2d8      	uxtb	r0, r3
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <ssd1306_WriteChar+0x120>)
 80014d8:	885b      	ldrh	r3, [r3, #2]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <ssd1306_DrawPixel>
 80014ee:	e017      	b.n	8001520 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <ssd1306_WriteChar+0x120>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	b2d8      	uxtb	r0, r3
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <ssd1306_WriteChar+0x120>)
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4413      	add	r3, r2
 800150a:	b2d9      	uxtb	r1, r3
 800150c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	f7ff ff44 	bl	80013a8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	3301      	adds	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	783b      	ldrb	r3, [r7, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4293      	cmp	r3, r2
 800152e:	d3c3      	bcc.n	80014b8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	3301      	adds	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	787b      	ldrb	r3, [r7, #1]
 8001538:	461a      	mov	r2, r3
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	4293      	cmp	r3, r2
 800153e:	d3ab      	bcc.n	8001498 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <ssd1306_WriteChar+0x120>)
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d006      	beq.n	8001558 <ssd1306_WriteChar+0x108>
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	3b20      	subs	r3, #32
 8001550:	440b      	add	r3, r1
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	e001      	b.n	800155c <ssd1306_WriteChar+0x10c>
 8001558:	783b      	ldrb	r3, [r7, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <ssd1306_WriteChar+0x120>)
 8001562:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	bf00      	nop
 8001570:	20000524 	.word	0x20000524

08001574 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	4638      	mov	r0, r7
 800157e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001582:	e013      	b.n	80015ac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	7818      	ldrb	r0, [r3, #0]
 8001588:	7e3b      	ldrb	r3, [r7, #24]
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	463b      	mov	r3, r7
 800158e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001590:	f7ff ff5e 	bl	8001450 <ssd1306_WriteChar>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d002      	beq.n	80015a6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	e008      	b.n	80015b8 <ssd1306_WriteString+0x44>
        }
        str++;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1e7      	bne.n	8001584 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	781b      	ldrb	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	460a      	mov	r2, r1
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	4613      	mov	r3, r2
 80015ce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <ssd1306_SetCursor+0x2c>)
 80015d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <ssd1306_SetCursor+0x2c>)
 80015de:	805a      	strh	r2, [r3, #2]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	20000524 	.word	0x20000524

080015f0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4604      	mov	r4, r0
 80015f8:	4608      	mov	r0, r1
 80015fa:	4611      	mov	r1, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	4623      	mov	r3, r4
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	4603      	mov	r3, r0
 8001604:	71bb      	strb	r3, [r7, #6]
 8001606:	460b      	mov	r3, r1
 8001608:	717b      	strb	r3, [r7, #5]
 800160a:	4613      	mov	r3, r2
 800160c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800160e:	797a      	ldrb	r2, [r7, #5]
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	bfb8      	it	lt
 8001618:	425b      	neglt	r3, r3
 800161a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800161c:	793a      	ldrb	r2, [r7, #4]
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfb8      	it	lt
 8001626:	425b      	neglt	r3, r3
 8001628:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	797b      	ldrb	r3, [r7, #5]
 800162e:	429a      	cmp	r2, r3
 8001630:	d201      	bcs.n	8001636 <ssd1306_Line+0x46>
 8001632:	2301      	movs	r3, #1
 8001634:	e001      	b.n	800163a <ssd1306_Line+0x4a>
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800163c:	79ba      	ldrb	r2, [r7, #6]
 800163e:	793b      	ldrb	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	d201      	bcs.n	8001648 <ssd1306_Line+0x58>
 8001644:	2301      	movs	r3, #1
 8001646:	e001      	b.n	800164c <ssd1306_Line+0x5c>
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001656:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800165a:	7939      	ldrb	r1, [r7, #4]
 800165c:	797b      	ldrb	r3, [r7, #5]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fea2 	bl	80013a8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001664:	e024      	b.n	80016b0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001666:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800166a:	79b9      	ldrb	r1, [r7, #6]
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fe9a 	bl	80013a8 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	425b      	negs	r3, r3
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	dd08      	ble.n	8001696 <ssd1306_Line+0xa6>
            error -= deltaY;
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	4413      	add	r3, r2
 8001694:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	429a      	cmp	r2, r3
 800169c:	da08      	bge.n	80016b0 <ssd1306_Line+0xc0>
            error += deltaX;
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	4413      	add	r3, r2
 80016a4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	4413      	add	r3, r2
 80016ae:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	797b      	ldrb	r3, [r7, #5]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1d6      	bne.n	8001666 <ssd1306_Line+0x76>
 80016b8:	79ba      	ldrb	r2, [r7, #6]
 80016ba:	793b      	ldrb	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d1d2      	bne.n	8001666 <ssd1306_Line+0x76>
        }
    }
    return;
 80016c0:	bf00      	nop
}
 80016c2:	3724      	adds	r7, #36	; 0x24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}

080016c8 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d02a      	beq.n	8001734 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 80016de:	2301      	movs	r3, #1
 80016e0:	81fb      	strh	r3, [r7, #14]
 80016e2:	e022      	b.n	800172a <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 80016e4:	89fb      	ldrh	r3, [r7, #14]
 80016e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80016ea:	3b01      	subs	r3, #1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	7818      	ldrb	r0, [r3, #0]
 80016f4:	89fb      	ldrh	r3, [r7, #14]
 80016f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80016fa:	3b01      	subs	r3, #1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	7859      	ldrb	r1, [r3, #1]
 8001704:	89fb      	ldrh	r3, [r7, #14]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	781c      	ldrb	r4, [r3, #0]
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	785a      	ldrb	r2, [r3, #1]
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4613      	mov	r3, r2
 800171e:	4622      	mov	r2, r4
 8001720:	f7ff ff66 	bl	80015f0 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	3301      	adds	r3, #1
 8001728:	81fb      	strh	r3, [r7, #14]
 800172a:	89fa      	ldrh	r2, [r7, #14]
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	429a      	cmp	r2, r3
 8001730:	d3d8      	bcc.n	80016e4 <ssd1306_Polyline+0x1c>
    }

    return;
 8001732:	e000      	b.n	8001736 <ssd1306_Polyline+0x6e>
        return;
 8001734:	bf00      	nop
}
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bd90      	pop	{r4, r7, pc}

0800173c <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 8001746:	edd7 7a01 	vldr	s15, [r7, #4]
 800174a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001760 <ssd1306_DegToRad+0x24>
 800174e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	3c8ee7a7 	.word	0x3c8ee7a7

08001764 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001774:	d802      	bhi.n	800177c <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	e013      	b.n	80017a4 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <ssd1306_NormalizeTo0_360+0x50>)
 8001782:	fba1 1202 	umull	r1, r2, r1, r2
 8001786:	0892      	lsrs	r2, r2, #2
 8001788:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800178c:	fb01 f202 	mul.w	r2, r1, r2
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <ssd1306_NormalizeTo0_360+0x3a>
 800179a:	89fb      	ldrh	r3, [r7, #14]
 800179c:	e001      	b.n	80017a2 <ssd1306_NormalizeTo0_360+0x3e>
 800179e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80017a2:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 80017a4:	89fb      	ldrh	r3, [r7, #14]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	16c16c17 	.word	0x16c16c17

080017b8 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b08d      	sub	sp, #52	; 0x34
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4604      	mov	r4, r0
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4623      	mov	r3, r4
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	4603      	mov	r3, r0
 80017cc:	73bb      	strb	r3, [r7, #14]
 80017ce:	460b      	mov	r3, r1
 80017d0:	737b      	strb	r3, [r7, #13]
 80017d2:	4613      	mov	r3, r2
 80017d4:	817b      	strh	r3, [r7, #10]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80017d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ffc3 	bl	8001764 <ssd1306_NormalizeTo0_360>
 80017de:	4603      	mov	r3, r0
 80017e0:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80017e2:	897b      	ldrh	r3, [r7, #10]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ffbd 	bl	8001764 <ssd1306_NormalizeTo0_360>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <ssd1306_DrawArc+0x1c4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	4a62      	ldr	r2, [pc, #392]	; (8001980 <ssd1306_DrawArc+0x1c8>)
 80017f8:	fb82 1203 	smull	r1, r2, r2, r3
 80017fc:	441a      	add	r2, r3
 80017fe:	1212      	asrs	r2, r2, #8
 8001800:	17db      	asrs	r3, r3, #31
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <ssd1306_DrawArc+0x1c4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	08db      	lsrs	r3, r3, #3
 8001814:	4a5b      	ldr	r2, [pc, #364]	; (8001984 <ssd1306_DrawArc+0x1cc>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001836:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 800183a:	e096      	b.n	800196a <ssd1306_DrawArc+0x1b2>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001846:	edd7 7a05 	vldr	s15, [r7, #20]
 800184a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184e:	eeb0 0a67 	vmov.f32	s0, s15
 8001852:	f7ff ff73 	bl	800173c <ssd1306_DegToRad>
 8001856:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 800185a:	ed97 0a08 	vldr	s0, [r7, #32]
 800185e:	f003 fed3 	bl	8005608 <sinf>
 8001862:	eeb0 7a40 	vmov.f32	s14, s0
 8001866:	7b7b      	ldrb	r3, [r7, #13]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001878:	edc7 7a01 	vstr	s15, [r7, #4]
 800187c:	793b      	ldrb	r3, [r7, #4]
 800187e:	b25b      	sxtb	r3, r3
 8001880:	b2da      	uxtb	r2, r3
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	4413      	add	r3, r2
 8001886:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 8001888:	ed97 0a08 	vldr	s0, [r7, #32]
 800188c:	f003 fe78 	bl	8005580 <cosf>
 8001890:	eeb0 7a40 	vmov.f32	s14, s0
 8001894:	7b7b      	ldrb	r3, [r7, #13]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80018aa:	793b      	ldrb	r3, [r7, #4]
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
 80018b2:	4413      	add	r3, r2
 80018b4:	74bb      	strb	r3, [r7, #18]
        count++;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	3301      	adds	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
        if(count != approx_segments) {
 80018bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d00f      	beq.n	80018e4 <ssd1306_DrawArc+0x12c>
            rad = ssd1306_DegToRad(count*approx_degree);
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	f7ff ff2f 	bl	800173c <ssd1306_DegToRad>
 80018de:	ed87 0a08 	vstr	s0, [r7, #32]
 80018e2:	e00a      	b.n	80018fa <ssd1306_DrawArc+0x142>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ee:	eeb0 0a67 	vmov.f32	s0, s15
 80018f2:	f7ff ff23 	bl	800173c <ssd1306_DegToRad>
 80018f6:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 80018fa:	ed97 0a08 	vldr	s0, [r7, #32]
 80018fe:	f003 fe83 	bl	8005608 <sinf>
 8001902:	eeb0 7a40 	vmov.f32	s14, s0
 8001906:	7b7b      	ldrb	r3, [r7, #13]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001918:	edc7 7a01 	vstr	s15, [r7, #4]
 800191c:	793b      	ldrb	r3, [r7, #4]
 800191e:	b25b      	sxtb	r3, r3
 8001920:	b2da      	uxtb	r2, r3
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	4413      	add	r3, r2
 8001926:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8001928:	ed97 0a08 	vldr	s0, [r7, #32]
 800192c:	f003 fe28 	bl	8005580 <cosf>
 8001930:	eeb0 7a40 	vmov.f32	s14, s0
 8001934:	7b7b      	ldrb	r3, [r7, #13]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001946:	edc7 7a01 	vstr	s15, [r7, #4]
 800194a:	793b      	ldrb	r3, [r7, #4]
 800194c:	b25b      	sxtb	r3, r3
 800194e:	b2da      	uxtb	r2, r3
 8001950:	7bbb      	ldrb	r3, [r7, #14]
 8001952:	4413      	add	r3, r2
 8001954:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001956:	7c3c      	ldrb	r4, [r7, #16]
 8001958:	7c7a      	ldrb	r2, [r7, #17]
 800195a:	7cb9      	ldrb	r1, [r7, #18]
 800195c:	7cf8      	ldrb	r0, [r7, #19]
 800195e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4623      	mov	r3, r4
 8001966:	f7ff fe43 	bl	80015f0 <ssd1306_Line>
    while(count < approx_segments)
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	429a      	cmp	r2, r3
 8001970:	f4ff af64 	bcc.w	800183c <ssd1306_DrawArc+0x84>
    }
    
    return;
 8001974:	bf00      	nop
}
 8001976:	372c      	adds	r7, #44	; 0x2c
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	0800615a 	.word	0x0800615a
 8001980:	b60b60b7 	.word	0xb60b60b7
 8001984:	16c16c17 	.word	0x16c16c17

08001988 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b08f      	sub	sp, #60	; 0x3c
 800198c:	af02      	add	r7, sp, #8
 800198e:	4604      	mov	r4, r0
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	461a      	mov	r2, r3
 8001996:	4623      	mov	r3, r4
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	4603      	mov	r3, r0
 800199c:	73bb      	strb	r3, [r7, #14]
 800199e:	460b      	mov	r3, r1
 80019a0:	737b      	strb	r3, [r7, #13]
 80019a2:	4613      	mov	r3, r2
 80019a4:	817b      	strh	r3, [r7, #10]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 80019a6:	2324      	movs	r3, #36	; 0x24
 80019a8:	623b      	str	r3, [r7, #32]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t yp1;
    uint8_t yp2 = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80019b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fed2 	bl	8001764 <ssd1306_NormalizeTo0_360>
 80019c0:	4603      	mov	r3, r0
 80019c2:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80019c4:	897b      	ldrh	r3, [r7, #10]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fecc 	bl	8001764 <ssd1306_NormalizeTo0_360>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	08db      	lsrs	r3, r3, #3
 80019d8:	4a8a      	ldr	r2, [pc, #552]	; (8001c04 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	6a3a      	ldr	r2, [r7, #32]
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	08db      	lsrs	r3, r3, #3
 80019ec:	4a85      	ldr	r2, [pc, #532]	; (8001c04 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0e:	edc7 7a05 	vstr	s15, [r7, #20]

    rad = ssd1306_DegToRad(count*approx_degree);
 8001a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a24:	eeb0 0a67 	vmov.f32	s0, s15
 8001a28:	f7ff fe88 	bl	800173c <ssd1306_DegToRad>
 8001a2c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 8001a30:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001a34:	f003 fde8 	bl	8005608 <sinf>
 8001a38:	eeb0 7a40 	vmov.f32	s14, s0
 8001a3c:	7b7b      	ldrb	r3, [r7, #13]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a52:	793b      	ldrb	r3, [r7, #4]
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	74fb      	strb	r3, [r7, #19]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 8001a5e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001a62:	f003 fd8d 	bl	8005580 <cosf>
 8001a66:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6a:	7b7b      	ldrb	r3, [r7, #13]
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a80:	793b      	ldrb	r3, [r7, #4]
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	7bbb      	ldrb	r3, [r7, #14]
 8001a88:	4413      	add	r3, r2
 8001a8a:	74bb      	strb	r3, [r7, #18]
    while (count < approx_segments) {
 8001a8c:	e09a      	b.n	8001bc4 <ssd1306_DrawArcWithRadiusLine+0x23c>
        rad = ssd1306_DegToRad(count*approx_degree);
 8001a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a98:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa4:	f7ff fe4a 	bl	800173c <ssd1306_DegToRad>
 8001aa8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
        xp1 = x + (int8_t)(sinf(rad)*radius);
 8001aac:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001ab0:	f003 fdaa 	bl	8005608 <sinf>
 8001ab4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab8:	7b7b      	ldrb	r3, [r7, #13]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aca:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ace:	793b      	ldrb	r3, [r7, #4]
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	747b      	strb	r3, [r7, #17]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 8001ada:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001ade:	f003 fd4f 	bl	8005580 <cosf>
 8001ae2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ae6:	7b7b      	ldrb	r3, [r7, #13]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001afc:	793b      	ldrb	r3, [r7, #4]
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	4413      	add	r3, r2
 8001b06:	743b      	strb	r3, [r7, #16]
        count++;
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (count != approx_segments) {
 8001b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d00f      	beq.n	8001b36 <ssd1306_DrawArcWithRadiusLine+0x1ae>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2c:	f7ff fe06 	bl	800173c <ssd1306_DegToRad>
 8001b30:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001b34:	e00a      	b.n	8001b4c <ssd1306_DrawArcWithRadiusLine+0x1c4>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b40:	eeb0 0a67 	vmov.f32	s0, s15
 8001b44:	f7ff fdfa 	bl	800173c <ssd1306_DegToRad>
 8001b48:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8001b4c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001b50:	f003 fd5a 	bl	8005608 <sinf>
 8001b54:	eeb0 7a40 	vmov.f32	s14, s0
 8001b58:	7b7b      	ldrb	r3, [r7, #13]
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b6e:	793b      	ldrb	r3, [r7, #4]
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	4413      	add	r3, r2
 8001b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8001b7c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001b80:	f003 fcfe 	bl	8005580 <cosf>
 8001b84:	eeb0 7a40 	vmov.f32	s14, s0
 8001b88:	7b7b      	ldrb	r3, [r7, #13]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b9e:	793b      	ldrb	r3, [r7, #4]
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001bac:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8001bb0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001bb4:	7c39      	ldrb	r1, [r7, #16]
 8001bb6:	7c78      	ldrb	r0, [r7, #17]
 8001bb8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	f7ff fd16 	bl	80015f0 <ssd1306_Line>
    while (count < approx_segments) {
 8001bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f4ff af60 	bcc.w	8001a8e <ssd1306_DrawArcWithRadiusLine+0x106>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8001bce:	7cbc      	ldrb	r4, [r7, #18]
 8001bd0:	7cfa      	ldrb	r2, [r7, #19]
 8001bd2:	7bb9      	ldrb	r1, [r7, #14]
 8001bd4:	7bf8      	ldrb	r0, [r7, #15]
 8001bd6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	4623      	mov	r3, r4
 8001bde:	f7ff fd07 	bl	80015f0 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8001be2:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8001be6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001bea:	7bb9      	ldrb	r1, [r7, #14]
 8001bec:	7bf8      	ldrb	r0, [r7, #15]
 8001bee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4623      	mov	r3, r4
 8001bf6:	f7ff fcfb 	bl	80015f0 <ssd1306_Line>
    return;
 8001bfa:	bf00      	nop
}
 8001bfc:	3734      	adds	r7, #52	; 0x34
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	16c16c17 	.word	0x16c16c17

08001c08 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4604      	mov	r4, r0
 8001c10:	4608      	mov	r0, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	71fb      	strb	r3, [r7, #7]
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71bb      	strb	r3, [r7, #6]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	717b      	strb	r3, [r7, #5]
 8001c22:	4613      	mov	r3, r2
 8001c24:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001c26:	797b      	ldrb	r3, [r7, #5]
 8001c28:	425b      	negs	r3, r3
 8001c2a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8001c30:	797b      	ldrb	r3, [r7, #5]
 8001c32:	f1c3 0301 	rsb	r3, r3, #1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db65      	blt.n	8001d0e <ssd1306_DrawCircle+0x106>
 8001c42:	79bb      	ldrb	r3, [r7, #6]
 8001c44:	2b3f      	cmp	r3, #63	; 0x3f
 8001c46:	d862      	bhi.n	8001d0e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	b2d8      	uxtb	r0, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	4413      	add	r3, r2
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	793a      	ldrb	r2, [r7, #4]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f7ff fba2 	bl	80013a8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b2d8      	uxtb	r0, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	4413      	add	r3, r2
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	793a      	ldrb	r2, [r7, #4]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7ff fb94 	bl	80013a8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4413      	add	r3, r2
 8001c88:	b2d8      	uxtb	r0, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	79ba      	ldrb	r2, [r7, #6]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	793a      	ldrb	r2, [r7, #4]
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7ff fb86 	bl	80013a8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	79fa      	ldrb	r2, [r7, #7]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b2d8      	uxtb	r0, r3
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	79ba      	ldrb	r2, [r7, #6]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	793a      	ldrb	r2, [r7, #4]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7ff fb78 	bl	80013a8 <ssd1306_DrawPixel>
        e2 = err;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dc13      	bgt.n	8001cec <ssd1306_DrawCircle+0xe4>
            y++;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	3301      	adds	r3, #1
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	425b      	negs	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d105      	bne.n	8001cec <ssd1306_DrawCircle+0xe4>
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dc01      	bgt.n	8001cec <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dd08      	ble.n	8001d06 <ssd1306_DrawCircle+0xfe>
            x++;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	3301      	adds	r3, #1
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	dd9d      	ble.n	8001c48 <ssd1306_DrawCircle+0x40>

    return;
 8001d0c:	e000      	b.n	8001d10 <ssd1306_DrawCircle+0x108>
        return;
 8001d0e:	bf00      	nop
}
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd90      	pop	{r4, r7, pc}

08001d16 <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001d16:	b590      	push	{r4, r7, lr}
 8001d18:	b089      	sub	sp, #36	; 0x24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	4608      	mov	r0, r1
 8001d20:	4611      	mov	r1, r2
 8001d22:	461a      	mov	r2, r3
 8001d24:	4623      	mov	r3, r4
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	4603      	mov	r3, r0
 8001d2a:	71bb      	strb	r3, [r7, #6]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	717b      	strb	r3, [r7, #5]
 8001d30:	4613      	mov	r3, r2
 8001d32:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001d34:	797b      	ldrb	r3, [r7, #5]
 8001d36:	425b      	negs	r3, r3
 8001d38:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8001d3e:	797b      	ldrb	r3, [r7, #5]
 8001d40:	f1c3 0301 	rsb	r3, r3, #1
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db51      	blt.n	8001df4 <ssd1306_FillCircle+0xde>
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	2b3f      	cmp	r3, #63	; 0x3f
 8001d54:	d84e      	bhi.n	8001df4 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e017      	b.n	8001d92 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	79fa      	ldrb	r2, [r7, #7]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	73bb      	strb	r3, [r7, #14]
 8001d6c:	e008      	b.n	8001d80 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8001d6e:	793a      	ldrb	r2, [r7, #4]
 8001d70:	7bf9      	ldrb	r1, [r7, #15]
 8001d72:	7bbb      	ldrb	r3, [r7, #14]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fb17 	bl	80013a8 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001d7a:	7bbb      	ldrb	r3, [r7, #14]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	73bb      	strb	r3, [r7, #14]
 8001d80:	7bba      	ldrb	r2, [r7, #14]
 8001d82:	79f9      	ldrb	r1, [r7, #7]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	440b      	add	r3, r1
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	daf0      	bge.n	8001d6e <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	79b9      	ldrb	r1, [r7, #6]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1acb      	subs	r3, r1, r3
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	dae1      	bge.n	8001d62 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dc13      	bgt.n	8001dd2 <ssd1306_FillCircle+0xbc>
            y++;
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	3301      	adds	r3, #1
 8001dae:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	3301      	adds	r3, #1
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4413      	add	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	425b      	negs	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d105      	bne.n	8001dd2 <ssd1306_FillCircle+0xbc>
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dc01      	bgt.n	8001dd2 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dd08      	ble.n	8001dec <ssd1306_FillCircle+0xd6>
            x++;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	3301      	adds	r3, #1
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4413      	add	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	ddb1      	ble.n	8001d56 <ssd1306_FillCircle+0x40>

    return;
 8001df2:	e000      	b.n	8001df6 <ssd1306_FillCircle+0xe0>
        return;
 8001df4:	bf00      	nop
}
 8001df6:	3724      	adds	r7, #36	; 0x24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd90      	pop	{r4, r7, pc}

08001dfc <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	4604      	mov	r4, r0
 8001e04:	4608      	mov	r0, r1
 8001e06:	4611      	mov	r1, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	71fb      	strb	r3, [r7, #7]
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71bb      	strb	r3, [r7, #6]
 8001e12:	460b      	mov	r3, r1
 8001e14:	717b      	strb	r3, [r7, #5]
 8001e16:	4613      	mov	r3, r2
 8001e18:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8001e1a:	79bc      	ldrb	r4, [r7, #6]
 8001e1c:	797a      	ldrb	r2, [r7, #5]
 8001e1e:	79b9      	ldrb	r1, [r7, #6]
 8001e20:	79f8      	ldrb	r0, [r7, #7]
 8001e22:	7e3b      	ldrb	r3, [r7, #24]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4623      	mov	r3, r4
 8001e28:	f7ff fbe2 	bl	80015f0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8001e2c:	793c      	ldrb	r4, [r7, #4]
 8001e2e:	797a      	ldrb	r2, [r7, #5]
 8001e30:	79b9      	ldrb	r1, [r7, #6]
 8001e32:	7978      	ldrb	r0, [r7, #5]
 8001e34:	7e3b      	ldrb	r3, [r7, #24]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4623      	mov	r3, r4
 8001e3a:	f7ff fbd9 	bl	80015f0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001e3e:	793c      	ldrb	r4, [r7, #4]
 8001e40:	79fa      	ldrb	r2, [r7, #7]
 8001e42:	7939      	ldrb	r1, [r7, #4]
 8001e44:	7978      	ldrb	r0, [r7, #5]
 8001e46:	7e3b      	ldrb	r3, [r7, #24]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	f7ff fbd0 	bl	80015f0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001e50:	79bc      	ldrb	r4, [r7, #6]
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	7939      	ldrb	r1, [r7, #4]
 8001e56:	79f8      	ldrb	r0, [r7, #7]
 8001e58:	7e3b      	ldrb	r3, [r7, #24]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	4623      	mov	r3, r4
 8001e5e:	f7ff fbc7 	bl	80015f0 <ssd1306_Line>

    return;
 8001e62:	bf00      	nop
}
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd90      	pop	{r4, r7, pc}

08001e6a <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001e6a:	b590      	push	{r4, r7, lr}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4604      	mov	r4, r0
 8001e72:	4608      	mov	r0, r1
 8001e74:	4611      	mov	r1, r2
 8001e76:	461a      	mov	r2, r3
 8001e78:	4623      	mov	r3, r4
 8001e7a:	71fb      	strb	r3, [r7, #7]
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71bb      	strb	r3, [r7, #6]
 8001e80:	460b      	mov	r3, r1
 8001e82:	717b      	strb	r3, [r7, #5]
 8001e84:	4613      	mov	r3, r2
 8001e86:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001e88:	79fa      	ldrb	r2, [r7, #7]
 8001e8a:	797b      	ldrb	r3, [r7, #5]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bf28      	it	cs
 8001e90:	4613      	movcs	r3, r2
 8001e92:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001e94:	797a      	ldrb	r2, [r7, #5]
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	bf38      	it	cc
 8001e9c:	4613      	movcc	r3, r2
 8001e9e:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001ea0:	79ba      	ldrb	r2, [r7, #6]
 8001ea2:	793b      	ldrb	r3, [r7, #4]
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	bf28      	it	cs
 8001ea8:	4613      	movcs	r3, r2
 8001eaa:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001eac:	793a      	ldrb	r2, [r7, #4]
 8001eae:	79bb      	ldrb	r3, [r7, #6]
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	bf38      	it	cc
 8001eb4:	4613      	movcc	r3, r2
 8001eb6:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	e017      	b.n	8001eee <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001ebe:	7b7b      	ldrb	r3, [r7, #13]
 8001ec0:	73bb      	strb	r3, [r7, #14]
 8001ec2:	e009      	b.n	8001ed8 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001ec4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ec8:	7bf9      	ldrb	r1, [r7, #15]
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fa6b 	bl	80013a8 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73bb      	strb	r3, [r7, #14]
 8001ed8:	7bba      	ldrb	r2, [r7, #14]
 8001eda:	7b3b      	ldrb	r3, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d803      	bhi.n	8001ee8 <ssd1306_FillRectangle+0x7e>
 8001ee0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	daed      	bge.n	8001ec4 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	7abb      	ldrb	r3, [r7, #10]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d803      	bhi.n	8001efe <ssd1306_FillRectangle+0x94>
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2b3f      	cmp	r3, #63	; 0x3f
 8001efa:	d9e0      	bls.n	8001ebe <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
}
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}
	...

08001f08 <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001f08:	b490      	push	{r4, r7}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4604      	mov	r4, r0
 8001f10:	4608      	mov	r0, r1
 8001f12:	4611      	mov	r1, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	4623      	mov	r3, r4
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71bb      	strb	r3, [r7, #6]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	717b      	strb	r3, [r7, #5]
 8001f22:	4613      	mov	r3, r2
 8001f24:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 8001f26:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db02      	blt.n	8001f34 <ssd1306_InvertRectangle+0x2c>
 8001f2e:	793b      	ldrb	r3, [r7, #4]
 8001f30:	2b3f      	cmp	r3, #63	; 0x3f
 8001f32:	d901      	bls.n	8001f38 <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e09c      	b.n	8002072 <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 8001f38:	79fa      	ldrb	r2, [r7, #7]
 8001f3a:	797b      	ldrb	r3, [r7, #5]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d803      	bhi.n	8001f48 <ssd1306_InvertRectangle+0x40>
 8001f40:	79ba      	ldrb	r2, [r7, #6]
 8001f42:	793b      	ldrb	r3, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d901      	bls.n	8001f4c <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e092      	b.n	8002072 <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 8001f4c:	79bb      	ldrb	r3, [r7, #6]
 8001f4e:	08db      	lsrs	r3, r3, #3
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	793b      	ldrb	r3, [r7, #4]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d057      	beq.n	800200c <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e04f      	b.n	8002002 <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 8001f62:	79bb      	ldrb	r3, [r7, #6]
 8001f64:	08db      	lsrs	r3, r3, #3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	01db      	lsls	r3, r3, #7
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 8001f72:	4a42      	ldr	r2, [pc, #264]	; (800207c <ssd1306_InvertRectangle+0x174>)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	4413      	add	r3, r2
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b25a      	sxtb	r2, r3
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	21ff      	movs	r1, #255	; 0xff
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	4053      	eors	r3, r2
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	b2d9      	uxtb	r1, r3
 8001f90:	4a3a      	ldr	r2, [pc, #232]	; (800207c <ssd1306_InvertRectangle+0x174>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	4413      	add	r3, r2
 8001f96:	460a      	mov	r2, r1
 8001f98:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3380      	adds	r3, #128	; 0x80
 8001f9e:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8001fa0:	e00d      	b.n	8001fbe <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 8001fa2:	4a36      	ldr	r2, [pc, #216]	; (800207c <ssd1306_InvertRectangle+0x174>)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	b2d9      	uxtb	r1, r3
 8001fae:	4a33      	ldr	r2, [pc, #204]	; (800207c <ssd1306_InvertRectangle+0x174>)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3380      	adds	r3, #128	; 0x80
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	793b      	ldrb	r3, [r7, #4]
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	01db      	lsls	r3, r3, #7
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d3e7      	bcc.n	8001fa2 <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 8001fd2:	4a2a      	ldr	r2, [pc, #168]	; (800207c <ssd1306_InvertRectangle+0x174>)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b25a      	sxtb	r2, r3
 8001fdc:	793b      	ldrb	r3, [r7, #4]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	21ff      	movs	r1, #255	; 0xff
 8001fe6:	fa41 f303 	asr.w	r3, r1, r3
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	4053      	eors	r3, r2
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	b2d9      	uxtb	r1, r3
 8001ff2:	4a22      	ldr	r2, [pc, #136]	; (800207c <ssd1306_InvertRectangle+0x174>)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	460a      	mov	r2, r1
 8001ffa:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	3301      	adds	r3, #1
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	797b      	ldrb	r3, [r7, #5]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	429a      	cmp	r2, r3
 8002008:	d9ab      	bls.n	8001f62 <ssd1306_InvertRectangle+0x5a>
 800200a:	e031      	b.n	8002070 <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 800200c:	79bb      	ldrb	r3, [r7, #6]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	22ff      	movs	r2, #255	; 0xff
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	b25a      	sxtb	r2, r3
 800201a:	793b      	ldrb	r3, [r7, #4]
 800201c:	43db      	mvns	r3, r3
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	21ff      	movs	r1, #255	; 0xff
 8002024:	fa41 f303 	asr.w	r3, r1, r3
 8002028:	b25b      	sxtb	r3, r3
 800202a:	4013      	ands	r3, r2
 800202c:	b25b      	sxtb	r3, r3
 800202e:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	79bb      	ldrb	r3, [r7, #6]
 8002034:	08db      	lsrs	r3, r3, #3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	01db      	lsls	r3, r3, #7
 800203a:	4413      	add	r3, r2
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e00e      	b.n	800205e <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <ssd1306_InvertRectangle+0x174>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	4413      	add	r3, r2
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	4053      	eors	r3, r2
 800204c:	b2d9      	uxtb	r1, r3
 800204e:	4a0b      	ldr	r2, [pc, #44]	; (800207c <ssd1306_InvertRectangle+0x174>)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	4413      	add	r3, r2
 8002054:	460a      	mov	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	797b      	ldrb	r3, [r7, #5]
 8002060:	793a      	ldrb	r2, [r7, #4]
 8002062:	08d2      	lsrs	r2, r2, #3
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	01d2      	lsls	r2, r2, #7
 8002068:	4413      	add	r3, r2
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	d9e7      	bls.n	8002040 <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bc90      	pop	{r4, r7}
 800207a:	4770      	bx	lr
 800207c:	20000124 	.word	0x20000124

08002080 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	603a      	str	r2, [r7, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
 800208e:	460b      	mov	r3, r1
 8002090:	71bb      	strb	r3, [r7, #6]
 8002092:	4613      	mov	r3, r2
 8002094:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002096:	797b      	ldrb	r3, [r7, #5]
 8002098:	3307      	adds	r3, #7
 800209a:	2b00      	cmp	r3, #0
 800209c:	da00      	bge.n	80020a0 <ssd1306_DrawBitmap+0x20>
 800209e:	3307      	adds	r3, #7
 80020a0:	10db      	asrs	r3, r3, #3
 80020a2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db3e      	blt.n	800212e <ssd1306_DrawBitmap+0xae>
 80020b0:	79bb      	ldrb	r3, [r7, #6]
 80020b2:	2b3f      	cmp	r3, #63	; 0x3f
 80020b4:	d83b      	bhi.n	800212e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	73bb      	strb	r3, [r7, #14]
 80020ba:	e033      	b.n	8002124 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80020bc:	2300      	movs	r3, #0
 80020be:	737b      	strb	r3, [r7, #13]
 80020c0:	e026      	b.n	8002110 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80020c2:	7b7b      	ldrb	r3, [r7, #13]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	e00d      	b.n	80020f0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	7b7a      	ldrb	r2, [r7, #13]
 80020e0:	08d2      	lsrs	r2, r2, #3
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	4413      	add	r3, r2
 80020e6:	461a      	mov	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80020f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	da08      	bge.n	800210a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80020f8:	79fa      	ldrb	r2, [r7, #7]
 80020fa:	7b7b      	ldrb	r3, [r7, #13]
 80020fc:	4413      	add	r3, r2
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	7f3a      	ldrb	r2, [r7, #28]
 8002102:	79b9      	ldrb	r1, [r7, #6]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff f94f 	bl	80013a8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800210a:	7b7b      	ldrb	r3, [r7, #13]
 800210c:	3301      	adds	r3, #1
 800210e:	737b      	strb	r3, [r7, #13]
 8002110:	7b7a      	ldrb	r2, [r7, #13]
 8002112:	797b      	ldrb	r3, [r7, #5]
 8002114:	429a      	cmp	r2, r3
 8002116:	d3d4      	bcc.n	80020c2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002118:	7bbb      	ldrb	r3, [r7, #14]
 800211a:	3301      	adds	r3, #1
 800211c:	73bb      	strb	r3, [r7, #14]
 800211e:	79bb      	ldrb	r3, [r7, #6]
 8002120:	3301      	adds	r3, #1
 8002122:	71bb      	strb	r3, [r7, #6]
 8002124:	7bba      	ldrb	r2, [r7, #14]
 8002126:	7e3b      	ldrb	r3, [r7, #24]
 8002128:	429a      	cmp	r2, r3
 800212a:	d3c7      	bcc.n	80020bc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800212c:	e000      	b.n	8002130 <ssd1306_DrawBitmap+0xb0>
        return;
 800212e:	bf00      	nop
}
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002140:	2381      	movs	r3, #129	; 0x81
 8002142:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f852 	bl	80011f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff f84e 	bl	80011f0 <ssd1306_WriteCommand>
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800216c:	23af      	movs	r3, #175	; 0xaf
 800216e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <ssd1306_SetDisplayOn+0x38>)
 8002172:	2201      	movs	r2, #1
 8002174:	715a      	strb	r2, [r3, #5]
 8002176:	e004      	b.n	8002182 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002178:	23ae      	movs	r3, #174	; 0xae
 800217a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <ssd1306_SetDisplayOn+0x38>)
 800217e:	2200      	movs	r2, #0
 8002180:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff f833 	bl	80011f0 <ssd1306_WriteCommand>
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000524 	.word	0x20000524

08002198 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800219e:	2000      	movs	r0, #0
 80021a0:	f7ff f8c2 	bl	8001328 <ssd1306_Fill>
   
    uint8_t x = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 80021ac:	79b9      	ldrb	r1, [r7, #6]
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2200      	movs	r2, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f8f8 	bl	80013a8 <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 80021b8:	79bb      	ldrb	r3, [r7, #6]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <ssd1306_TestBorder+0x34>
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2b7e      	cmp	r3, #126	; 0x7e
 80021c2:	d803      	bhi.n	80021cc <ssd1306_TestBorder+0x34>
            x++;
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	3301      	adds	r3, #1
 80021c8:	71fb      	strb	r3, [r7, #7]
 80021ca:	e016      	b.n	80021fa <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b7f      	cmp	r3, #127	; 0x7f
 80021d0:	d106      	bne.n	80021e0 <ssd1306_TestBorder+0x48>
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	2b3e      	cmp	r3, #62	; 0x3e
 80021d6:	d803      	bhi.n	80021e0 <ssd1306_TestBorder+0x48>
            y++;
 80021d8:	79bb      	ldrb	r3, [r7, #6]
 80021da:	3301      	adds	r3, #1
 80021dc:	71bb      	strb	r3, [r7, #6]
 80021de:	e00c      	b.n	80021fa <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 80021e0:	79bb      	ldrb	r3, [r7, #6]
 80021e2:	2b3f      	cmp	r3, #63	; 0x3f
 80021e4:	d106      	bne.n	80021f4 <ssd1306_TestBorder+0x5c>
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <ssd1306_TestBorder+0x5c>
            x--;
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	71fb      	strb	r3, [r7, #7]
 80021f2:	e002      	b.n	80021fa <ssd1306_TestBorder+0x62>
        else
            y--;
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 80021fa:	79b9      	ldrb	r1, [r7, #6]
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	2201      	movs	r2, #1
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff f8d1 	bl	80013a8 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8002206:	f7ff f8a7 	bl	8001358 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 800220a:	2005      	movs	r0, #5
 800220c:	f000 fcfa 	bl	8002c04 <HAL_Delay>
    } while(x > 0 || y > 0);
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1ca      	bne.n	80021ac <ssd1306_TestBorder+0x14>
 8002216:	79bb      	ldrb	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1c7      	bne.n	80021ac <ssd1306_TestBorder+0x14>
   
    HAL_Delay(1000);
 800221c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002220:	f000 fcf0 	bl	8002c04 <HAL_Delay>
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff f876 	bl	8001328 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4619      	mov	r1, r3
 8002240:	2002      	movs	r0, #2
 8002242:	f7ff f9bd 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <ssd1306_TestFonts1+0x90>)
 8002248:	2201      	movs	r2, #1
 800224a:	9200      	str	r2, [sp, #0]
 800224c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800224e:	481c      	ldr	r0, [pc, #112]	; (80022c0 <ssd1306_TestFonts1+0x94>)
 8002250:	f7ff f990 	bl	8001574 <ssd1306_WriteString>
    y += 26;
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	331a      	adds	r3, #26
 8002258:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	4619      	mov	r1, r3
 800225e:	2002      	movs	r0, #2
 8002260:	f7ff f9ae 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <ssd1306_TestFonts1+0x98>)
 8002266:	2201      	movs	r2, #1
 8002268:	9200      	str	r2, [sp, #0]
 800226a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226c:	4816      	ldr	r0, [pc, #88]	; (80022c8 <ssd1306_TestFonts1+0x9c>)
 800226e:	f7ff f981 	bl	8001574 <ssd1306_WriteString>
    y += 18;
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	3312      	adds	r3, #18
 8002276:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	4619      	mov	r1, r3
 800227c:	2002      	movs	r0, #2
 800227e:	f7ff f99f 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <ssd1306_TestFonts1+0xa0>)
 8002284:	2201      	movs	r2, #1
 8002286:	9200      	str	r2, [sp, #0]
 8002288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228a:	4811      	ldr	r0, [pc, #68]	; (80022d0 <ssd1306_TestFonts1+0xa4>)
 800228c:	f7ff f972 	bl	8001574 <ssd1306_WriteString>
    y += 10;
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	330a      	adds	r3, #10
 8002294:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	4619      	mov	r1, r3
 800229a:	2002      	movs	r0, #2
 800229c:	f7ff f990 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <ssd1306_TestFonts1+0xa8>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	9200      	str	r2, [sp, #0]
 80022a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a8:	480b      	ldr	r0, [pc, #44]	; (80022d8 <ssd1306_TestFonts1+0xac>)
 80022aa:	f7ff f963 	bl	8001574 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 80022ae:	f7ff f853 	bl	8001358 <ssd1306_UpdateScreen>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	0800acd8 	.word	0x0800acd8
 80022c0:	08006094 	.word	0x08006094
 80022c4:	0800accc 	.word	0x0800accc
 80022c8:	080060a0 	.word	0x080060a0
 80022cc:	0800acc0 	.word	0x0800acc0
 80022d0:	080060ac 	.word	0x080060ac
 80022d4:	0800acb4 	.word	0x0800acb4
 80022d8:	080060b8 	.word	0x080060b8

080022dc <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b085      	sub	sp, #20
 80022e0:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff f820 	bl	8001328 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 80022e8:	2104      	movs	r1, #4
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff f968 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <ssd1306_TestFonts2+0x68>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	9200      	str	r2, [sp, #0]
 80022f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f8:	4813      	ldr	r0, [pc, #76]	; (8002348 <ssd1306_TestFonts2+0x6c>)
 80022fa:	f7ff f93b 	bl	8001574 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 80022fe:	2124      	movs	r1, #36	; 0x24
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff f95d 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <ssd1306_TestFonts2+0x68>)
 8002308:	2201      	movs	r2, #1
 800230a:	9200      	str	r2, [sp, #0]
 800230c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230e:	480f      	ldr	r0, [pc, #60]	; (800234c <ssd1306_TestFonts2+0x70>)
 8002310:	f7ff f930 	bl	8001574 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8002314:	2360      	movs	r3, #96	; 0x60
 8002316:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8002318:	233c      	movs	r3, #60	; 0x3c
 800231a:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	3310      	adds	r3, #16
 8002320:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 8002322:	79bb      	ldrb	r3, [r7, #6]
 8002324:	3302      	adds	r3, #2
 8002326:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8002328:	793b      	ldrb	r3, [r7, #4]
 800232a:	797a      	ldrb	r2, [r7, #5]
 800232c:	79b9      	ldrb	r1, [r7, #6]
 800232e:	79f8      	ldrb	r0, [r7, #7]
 8002330:	2401      	movs	r4, #1
 8002332:	9400      	str	r4, [sp, #0]
 8002334:	f7ff fd99 	bl	8001e6a <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8002338:	f7ff f80e 	bl	8001358 <ssd1306_UpdateScreen>
#endif
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	0800ace4 	.word	0x0800ace4
 8002348:	080060c4 	.word	0x080060c4
 800234c:	080060d0 	.word	0x080060d0

08002350 <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8002356:	2000      	movs	r0, #0
 8002358:	f7fe ffe6 	bl	8001328 <ssd1306_Fill>
#ifdef SSD1306_INCLUDE_FONT_16x15
    ssd1306_SetCursor(4, 4);
 800235c:	2104      	movs	r1, #4
 800235e:	2004      	movs	r0, #4
 8002360:	f7ff f92e 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("Proportional", Font_16x15, White);
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <ssd1306_TestFonts3+0x58>)
 8002366:	2201      	movs	r2, #1
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236c:	480f      	ldr	r0, [pc, #60]	; (80023ac <ssd1306_TestFonts3+0x5c>)
 800236e:	f7ff f901 	bl	8001574 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 8002372:	2118      	movs	r1, #24
 8002374:	2004      	movs	r0, #4
 8002376:	f7ff f923 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <ssd1306_TestFonts3+0x58>)
 800237c:	2201      	movs	r2, #1
 800237e:	9200      	str	r2, [sp, #0]
 8002380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002382:	480b      	ldr	r0, [pc, #44]	; (80023b0 <ssd1306_TestFonts3+0x60>)
 8002384:	f7ff f8f6 	bl	8001574 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	2004      	movs	r0, #4
 800238c:	f7ff f918 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <ssd1306_TestFonts3+0x58>)
 8002392:	2201      	movs	r2, #1
 8002394:	9200      	str	r2, [sp, #0]
 8002396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002398:	4806      	ldr	r0, [pc, #24]	; (80023b4 <ssd1306_TestFonts3+0x64>)
 800239a:	f7ff f8eb 	bl	8001574 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("Font not", Font_11x18, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("included!", Font_11x18, White);
#endif
    ssd1306_UpdateScreen();
 800239e:	f7fe ffdb 	bl	8001358 <ssd1306_UpdateScreen>
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	0800acf0 	.word	0x0800acf0
 80023ac:	080060dc 	.word	0x080060dc
 80023b0:	080060ec 	.word	0x080060ec
 80023b4:	080060fc 	.word	0x080060fc

080023b8 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 80023b8:	b5b0      	push	{r4, r5, r7, lr}
 80023ba:	b09a      	sub	sp, #104	; 0x68
 80023bc:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80023be:	2001      	movs	r0, #1
 80023c0:	f7fe ffb2 	bl	8001328 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80023c4:	f000 fc12 	bl	8002bec <HAL_GetTick>
 80023c8:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 80023ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023cc:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 80023d2:	4a45      	ldr	r2, [pc, #276]	; (80024e8 <ssd1306_TestFPS+0x130>)
 80023d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 80023de:	2100      	movs	r1, #0
 80023e0:	2002      	movs	r0, #2
 80023e2:	f7ff f8ed 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <ssd1306_TestFPS+0x134>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	9200      	str	r2, [sp, #0]
 80023ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ee:	4840      	ldr	r0, [pc, #256]	; (80024f0 <ssd1306_TestFPS+0x138>)
 80023f0:	f7ff f8c0 	bl	8001574 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 80023f4:	2124      	movs	r1, #36	; 0x24
 80023f6:	2002      	movs	r0, #2
 80023f8:	f7ff f8e2 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 80023fc:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <ssd1306_TestFPS+0x134>)
 80023fe:	2200      	movs	r2, #0
 8002400:	9200      	str	r2, [sp, #0]
 8002402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002404:	483b      	ldr	r0, [pc, #236]	; (80024f4 <ssd1306_TestFPS+0x13c>)
 8002406:	f7ff f8b5 	bl	8001574 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 800240a:	2112      	movs	r1, #18
 800240c:	2002      	movs	r0, #2
 800240e:	f7ff f8d7 	bl	80015c0 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8002412:	4b36      	ldr	r3, [pc, #216]	; (80024ec <ssd1306_TestFPS+0x134>)
 8002414:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002418:	2200      	movs	r2, #0
 800241a:	9200      	str	r2, [sp, #0]
 800241c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241e:	f7ff f8a9 	bl	8001574 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002422:	f7fe ff99 	bl	8001358 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8002426:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800242a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 800242e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002432:	3301      	adds	r3, #1
 8002434:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002438:	220a      	movs	r2, #10
 800243a:	4619      	mov	r1, r3
 800243c:	f002 fc1c 	bl	8004c78 <memmove>
        message[sizeof(message)-2] = ch;
 8002440:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002444:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 8002448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800244a:	3301      	adds	r3, #1
 800244c:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 800244e:	f000 fbcd 	bl	8002bec <HAL_GetTick>
 8002452:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8002454:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3287 	movw	r2, #4999	; 0x1387
 800245e:	4293      	cmp	r3, r2
 8002460:	d9d3      	bls.n	800240a <ssd1306_TestFPS+0x52>
   
    HAL_Delay(5000);
 8002462:	f241 3088 	movw	r0, #5000	; 0x1388
 8002466:	f000 fbcd 	bl	8002c04 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 800246a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002474:	ee17 0a90 	vmov	r0, s15
 8002478:	f7fe f86e 	bl	8000558 <__aeabi_f2d>
 800247c:	4604      	mov	r4, r0
 800247e:	460d      	mov	r5, r1
 8002480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f844 	bl	8000514 <__aeabi_ui2d>
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <ssd1306_TestFPS+0x140>)
 8002492:	f7fe f9e3 	bl	800085c <__aeabi_ddiv>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4620      	mov	r0, r4
 800249c:	4629      	mov	r1, r5
 800249e:	f7fe f9dd 	bl	800085c <__aeabi_ddiv>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7fe fabf 	bl	8000a2c <__aeabi_d2iz>
 80024ae:	4603      	mov	r3, r0
 80024b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 80024b2:	1d38      	adds	r0, r7, #4
 80024b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b6:	4a11      	ldr	r2, [pc, #68]	; (80024fc <ssd1306_TestFPS+0x144>)
 80024b8:	2140      	movs	r1, #64	; 0x40
 80024ba:	f002 fba9 	bl	8004c10 <sniprintf>
   
    ssd1306_Fill(White);
 80024be:	2001      	movs	r0, #1
 80024c0:	f7fe ff32 	bl	8001328 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 80024c4:	2102      	movs	r1, #2
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7ff f87a 	bl	80015c0 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <ssd1306_TestFPS+0x134>)
 80024ce:	1d38      	adds	r0, r7, #4
 80024d0:	2200      	movs	r2, #0
 80024d2:	9200      	str	r2, [sp, #0]
 80024d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d6:	f7ff f84d 	bl	8001574 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80024da:	f7fe ff3d 	bl	8001358 <ssd1306_UpdateScreen>
}
 80024de:	bf00      	nop
 80024e0:	3760      	adds	r7, #96	; 0x60
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdb0      	pop	{r4, r5, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	0800612c 	.word	0x0800612c
 80024ec:	0800accc 	.word	0x0800accc
 80024f0:	0800610c 	.word	0x0800610c
 80024f4:	08006118 	.word	0x08006118
 80024f8:	408f4000 	.word	0x408f4000
 80024fc:	08006124 	.word	0x08006124

08002500 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8002506:	2301      	movs	r3, #1
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	233f      	movs	r3, #63	; 0x3f
 800250c:	227f      	movs	r2, #127	; 0x7f
 800250e:	2101      	movs	r1, #1
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff f86d 	bl	80015f0 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8002516:	2301      	movs	r3, #1
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	233f      	movs	r3, #63	; 0x3f
 800251c:	2201      	movs	r2, #1
 800251e:	2101      	movs	r1, #1
 8002520:	207f      	movs	r0, #127	; 0x7f
 8002522:	f7ff f865 	bl	80015f0 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8002526:	f7fe ff17 	bl	8001358 <ssd1306_UpdateScreen>
  return;
 800252a:	bf00      	nop
}
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b085      	sub	sp, #20
 8002534:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	e028      	b.n	800258e <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	0092      	lsls	r2, r2, #2
 8002544:	4413      	add	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	b2d8      	uxtb	r0, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	4413      	add	r3, r2
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3301      	adds	r3, #1
 800255a:	b2d9      	uxtb	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	0092      	lsls	r2, r2, #2
 8002564:	4413      	add	r3, r2
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800256c:	b2da      	uxtb	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461c      	mov	r4, r3
 8002574:	00a4      	lsls	r4, r4, #2
 8002576:	4423      	add	r3, r4
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2401      	movs	r4, #1
 8002582:	9400      	str	r4, [sp, #0]
 8002584:	f7ff fc3a 	bl	8001dfc <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3301      	adds	r3, #1
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d9d3      	bls.n	800253c <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8002594:	f7fe fee0 	bl	8001358 <ssd1306_UpdateScreen>
  return;
 8002598:	bf00      	nop
}
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bd90      	pop	{r4, r7, pc}

080025a0 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 80025a6:	2301      	movs	r3, #1
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	2323      	movs	r3, #35	; 0x23
 80025ac:	2241      	movs	r2, #65	; 0x41
 80025ae:	2101      	movs	r1, #1
 80025b0:	201f      	movs	r0, #31
 80025b2:	f7ff fc5a 	bl	8001e6a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 80025b6:	2301      	movs	r3, #1
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	233c      	movs	r3, #60	; 0x3c
 80025bc:	2246      	movs	r2, #70	; 0x46
 80025be:	212d      	movs	r1, #45	; 0x2d
 80025c0:	200a      	movs	r0, #10
 80025c2:	f7ff fc52 	bl	8001e6a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 80025c6:	2301      	movs	r3, #1
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	232d      	movs	r3, #45	; 0x2d
 80025cc:	2264      	movs	r2, #100	; 0x64
 80025ce:	210a      	movs	r1, #10
 80025d0:	204b      	movs	r0, #75	; 0x4b
 80025d2:	f7ff fc4a 	bl	8001e6a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 80025d6:	2300      	movs	r3, #0
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2337      	movs	r3, #55	; 0x37
 80025dc:	2250      	movs	r2, #80	; 0x50
 80025de:	211e      	movs	r1, #30
 80025e0:	2037      	movs	r0, #55	; 0x37
 80025e2:	f7ff fc42 	bl	8001e6a <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 80025e6:	f7fe feb7 	bl	8001358 <ssd1306_UpdateScreen>
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 80025f6:	2100      	movs	r1, #0
 80025f8:	2002      	movs	r0, #2
 80025fa:	f7fe ffe1 	bl	80015c0 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 80025fe:	4b27      	ldr	r3, [pc, #156]	; (800269c <ssd1306_TestRectangleInvert+0xac>)
 8002600:	2201      	movs	r2, #1
 8002602:	9200      	str	r2, [sp, #0]
 8002604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002606:	4826      	ldr	r0, [pc, #152]	; (80026a0 <ssd1306_TestRectangleInvert+0xb0>)
 8002608:	f7fe ffb4 	bl	8001574 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 800260c:	2114      	movs	r1, #20
 800260e:	2002      	movs	r0, #2
 8002610:	f7fe ffd6 	bl	80015c0 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002614:	4b21      	ldr	r3, [pc, #132]	; (800269c <ssd1306_TestRectangleInvert+0xac>)
 8002616:	2201      	movs	r2, #1
 8002618:	9200      	str	r2, [sp, #0]
 800261a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261c:	4821      	ldr	r0, [pc, #132]	; (80026a4 <ssd1306_TestRectangleInvert+0xb4>)
 800261e:	f7fe ffa9 	bl	8001574 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 8002622:	2128      	movs	r1, #40	; 0x28
 8002624:	2002      	movs	r0, #2
 8002626:	f7fe ffcb 	bl	80015c0 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <ssd1306_TestRectangleInvert+0xac>)
 800262c:	2201      	movs	r2, #1
 800262e:	9200      	str	r2, [sp, #0]
 8002630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002632:	481d      	ldr	r0, [pc, #116]	; (80026a8 <ssd1306_TestRectangleInvert+0xb8>)
 8002634:	f7fe ff9e 	bl	8001574 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 8002638:	2100      	movs	r1, #0
 800263a:	2042      	movs	r0, #66	; 0x42
 800263c:	f7fe ffc0 	bl	80015c0 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8002640:	4b16      	ldr	r3, [pc, #88]	; (800269c <ssd1306_TestRectangleInvert+0xac>)
 8002642:	2201      	movs	r2, #1
 8002644:	9200      	str	r2, [sp, #0]
 8002646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002648:	4817      	ldr	r0, [pc, #92]	; (80026a8 <ssd1306_TestRectangleInvert+0xb8>)
 800264a:	f7fe ff93 	bl	8001574 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 800264e:	2114      	movs	r1, #20
 8002650:	2042      	movs	r0, #66	; 0x42
 8002652:	f7fe ffb5 	bl	80015c0 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <ssd1306_TestRectangleInvert+0xac>)
 8002658:	2201      	movs	r2, #1
 800265a:	9200      	str	r2, [sp, #0]
 800265c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800265e:	4811      	ldr	r0, [pc, #68]	; (80026a4 <ssd1306_TestRectangleInvert+0xb4>)
 8002660:	f7fe ff88 	bl	8001574 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8002664:	2128      	movs	r1, #40	; 0x28
 8002666:	2042      	movs	r0, #66	; 0x42
 8002668:	f7fe ffaa 	bl	80015c0 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <ssd1306_TestRectangleInvert+0xac>)
 800266e:	2201      	movs	r2, #1
 8002670:	9200      	str	r2, [sp, #0]
 8002672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002674:	480a      	ldr	r0, [pc, #40]	; (80026a0 <ssd1306_TestRectangleInvert+0xb0>)
 8002676:	f7fe ff7d 	bl	8001574 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 800267a:	233f      	movs	r3, #63	; 0x3f
 800267c:	223f      	movs	r2, #63	; 0x3f
 800267e:	2100      	movs	r1, #0
 8002680:	2000      	movs	r0, #0
 8002682:	f7ff fc41 	bl	8001f08 <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 8002686:	233c      	movs	r3, #60	; 0x3c
 8002688:	227d      	movs	r2, #125	; 0x7d
 800268a:	213a      	movs	r1, #58	; 0x3a
 800268c:	2002      	movs	r0, #2
 800268e:	f7ff fc3b 	bl	8001f08 <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 8002692:	f7fe fe61 	bl	8001358 <ssd1306_UpdateScreen>
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	0800accc 	.word	0x0800accc
 80026a0:	08006138 	.word	0x08006138
 80026a4:	08006140 	.word	0x08006140
 80026a8:	08006144 	.word	0x08006144

080026ac <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	e010      	b.n	80026da <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	331e      	adds	r3, #30
 80026c8:	b2d8      	uxtb	r0, r3
 80026ca:	2301      	movs	r3, #1
 80026cc:	220a      	movs	r2, #10
 80026ce:	210f      	movs	r1, #15
 80026d0:	f7ff fa9a 	bl	8001c08 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3301      	adds	r3, #1
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d9eb      	bls.n	80026b8 <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 80026e0:	2300      	movs	r3, #0
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	e011      	b.n	800270a <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	0052      	lsls	r2, r2, #1
 80026ee:	441a      	add	r2, r3
 80026f0:	00d2      	lsls	r2, r2, #3
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	330f      	adds	r3, #15
 80026f8:	b2d8      	uxtb	r0, r3
 80026fa:	2301      	movs	r3, #1
 80026fc:	220a      	movs	r2, #10
 80026fe:	2128      	movs	r1, #40	; 0x28
 8002700:	f7ff fb09 	bl	8001d16 <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3301      	adds	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d9ea      	bls.n	80026e6 <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8002710:	f7fe fe22 	bl	8001358 <ssd1306_UpdateScreen>
  return;
 8002714:	bf00      	nop
}
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <ssd1306_TestArc>:

void ssd1306_TestArc() {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8002722:	2301      	movs	r3, #1
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2314      	movs	r3, #20
 800272e:	221e      	movs	r2, #30
 8002730:	211e      	movs	r1, #30
 8002732:	201e      	movs	r0, #30
 8002734:	f7ff f840 	bl	80017b8 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 8002738:	2301      	movs	r3, #1
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	231e      	movs	r3, #30
 8002744:	220a      	movs	r2, #10
 8002746:	2137      	movs	r1, #55	; 0x37
 8002748:	2050      	movs	r0, #80	; 0x50
 800274a:	f7ff f91d 	bl	8001988 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 800274e:	f7fe fe03 	bl	8001358 <ssd1306_UpdateScreen>
  return;
 8002752:	bf00      	nop
}
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <ssd1306_TestPolyline+0x28>)
 8002760:	463c      	mov	r4, r7
 8002762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002764:	c407      	stmia	r4!, {r0, r1, r2}
 8002766:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8002768:	463b      	mov	r3, r7
 800276a:	2201      	movs	r2, #1
 800276c:	2107      	movs	r1, #7
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe ffaa 	bl	80016c8 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002774:	f7fe fdf0 	bl	8001358 <ssd1306_UpdateScreen>
  return;
 8002778:	bf00      	nop
}
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	0800614c 	.word	0x0800614c

08002784 <ssd1306_TestDrawBitmap>:
  ssd1306_DrawBitmap(0,0, logo_bmp, 128, 64, Black);
  ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmap()
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 800278a:	2001      	movs	r0, #1
 800278c:	f7fe fdcc 	bl	8001328 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8002790:	2300      	movs	r3, #0
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2340      	movs	r3, #64	; 0x40
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	4a18      	ldr	r2, [pc, #96]	; (80027fc <ssd1306_TestDrawBitmap+0x78>)
 800279c:	2100      	movs	r1, #0
 800279e:	2000      	movs	r0, #0
 80027a0:	f7ff fc6e 	bl	8002080 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80027a4:	f7fe fdd8 	bl	8001358 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80027a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80027ac:	f000 fa2a 	bl	8002c04 <HAL_Delay>
    ssd1306_Fill(Black);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe fdb9 	bl	8001328 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 80027b6:	2301      	movs	r3, #1
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	2340      	movs	r3, #64	; 0x40
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2340      	movs	r3, #64	; 0x40
 80027c0:	4a0f      	ldr	r2, [pc, #60]	; (8002800 <ssd1306_TestDrawBitmap+0x7c>)
 80027c2:	2100      	movs	r1, #0
 80027c4:	2020      	movs	r0, #32
 80027c6:	f7ff fc5b 	bl	8002080 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80027ca:	f7fe fdc5 	bl	8001358 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80027ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80027d2:	f000 fa17 	bl	8002c04 <HAL_Delay>
    ssd1306_Fill(White);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f7fe fda6 	bl	8001328 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 80027dc:	2300      	movs	r3, #0
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	2340      	movs	r3, #64	; 0x40
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2340      	movs	r3, #64	; 0x40
 80027e6:	4a06      	ldr	r2, [pc, #24]	; (8002800 <ssd1306_TestDrawBitmap+0x7c>)
 80027e8:	2100      	movs	r1, #0
 80027ea:	2020      	movs	r0, #32
 80027ec:	f7ff fc48 	bl	8002080 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80027f0:	f7fe fdb2 	bl	8001358 <ssd1306_UpdateScreen>
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	0800acfc 	.word	0x0800acfc
 8002800:	0800b0fc 	.word	0x0800b0fc

08002804 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8002808:	f7fe fd24 	bl	8001254 <ssd1306_Init>

    ssd1306_TestFPS();
 800280c:	f7ff fdd4 	bl	80023b8 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8002810:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002814:	f000 f9f6 	bl	8002c04 <HAL_Delay>
    ssd1306_TestBorder();
 8002818:	f7ff fcbe 	bl	8002198 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 800281c:	f7ff fd06 	bl	800222c <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8002820:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002824:	f000 f9ee 	bl	8002c04 <HAL_Delay>
    ssd1306_TestFonts2();
 8002828:	f7ff fd58 	bl	80022dc <ssd1306_TestFonts2>
    HAL_Delay(3000);
 800282c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002830:	f000 f9e8 	bl	8002c04 <HAL_Delay>
    ssd1306_TestFonts3();
 8002834:	f7ff fd8c 	bl	8002350 <ssd1306_TestFonts3>
    HAL_Delay(3000);
 8002838:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800283c:	f000 f9e2 	bl	8002c04 <HAL_Delay>
    ssd1306_Fill(Black);
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe fd71 	bl	8001328 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8002846:	f7ff fe73 	bl	8002530 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 800284a:	f7ff fe59 	bl	8002500 <ssd1306_TestLine>
    HAL_Delay(3000);
 800284e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002852:	f000 f9d7 	bl	8002c04 <HAL_Delay>
    ssd1306_Fill(Black);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe fd66 	bl	8001328 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 800285c:	f7ff fea0 	bl	80025a0 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8002860:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002864:	f000 f9ce 	bl	8002c04 <HAL_Delay>
    ssd1306_Fill(Black);
 8002868:	2000      	movs	r0, #0
 800286a:	f7fe fd5d 	bl	8001328 <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 800286e:	f7ff febf 	bl	80025f0 <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 8002872:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002876:	f000 f9c5 	bl	8002c04 <HAL_Delay>
    ssd1306_Fill(Black);
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe fd54 	bl	8001328 <ssd1306_Fill>
    ssd1306_TestPolyline();
 8002880:	f7ff ff6a 	bl	8002758 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8002884:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002888:	f000 f9bc 	bl	8002c04 <HAL_Delay>
    ssd1306_Fill(Black);
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe fd4b 	bl	8001328 <ssd1306_Fill>
    ssd1306_TestArc();
 8002892:	f7ff ff43 	bl	800271c <ssd1306_TestArc>
    HAL_Delay(3000);
 8002896:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800289a:	f000 f9b3 	bl	8002c04 <HAL_Delay>
    ssd1306_Fill(Black);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe fd42 	bl	8001328 <ssd1306_Fill>
    ssd1306_TestCircle();
 80028a4:	f7ff ff02 	bl	80026ac <ssd1306_TestCircle>
    HAL_Delay(3000);
 80028a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028ac:	f000 f9aa 	bl	8002c04 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 80028b0:	f7ff ff68 	bl	8002784 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 80028b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028b8:	f000 f9a4 	bl	8002c04 <HAL_Delay>
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_MspInit+0x4c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_MspInit+0x4c>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_MspInit+0x4c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_MspInit+0x4c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_MspInit+0x4c>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_MspInit+0x4c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002914:	e7fe      	b.n	8002914 <NMI_Handler+0x4>

08002916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <HardFault_Handler+0x4>

0800291c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <MemManage_Handler+0x4>

08002922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <UsageFault_Handler+0x4>

0800292e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295c:	f000 f932 	bl	8002bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <_sbrk+0x5c>)
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <_sbrk+0x60>)
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <_sbrk+0x64>)
 8002982:	4a12      	ldr	r2, [pc, #72]	; (80029cc <_sbrk+0x68>)
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <_sbrk+0x64>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	429a      	cmp	r2, r3
 8002992:	d207      	bcs.n	80029a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002994:	f002 f992 	bl	8004cbc <__errno>
 8002998:	4603      	mov	r3, r0
 800299a:	220c      	movs	r2, #12
 800299c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	e009      	b.n	80029b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <_sbrk+0x64>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <_sbrk+0x64>)
 80029b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b6:	68fb      	ldr	r3, [r7, #12]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20030000 	.word	0x20030000
 80029c4:	00000400 	.word	0x00000400
 80029c8:	2000052c 	.word	0x2000052c
 80029cc:	200006c8 	.word	0x200006c8

080029d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <SystemInit+0x20>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <SystemInit+0x20>)
 80029dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fa:	f107 0308 	add.w	r3, r7, #8
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a08:	463b      	mov	r3, r7
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a1a:	2247      	movs	r2, #71	; 0x47
 8002a1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a26:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2c:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a38:	4813      	ldr	r0, [pc, #76]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a3a:	f001 fda8 	bl	800458e <HAL_TIM_Base_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a44:	f7fe fb48 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	4619      	mov	r1, r3
 8002a54:	480c      	ldr	r0, [pc, #48]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a56:	f001 fe51 	bl	80046fc <HAL_TIM_ConfigClockSource>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a60:	f7fe fb3a 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a64:	2300      	movs	r3, #0
 8002a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a72:	f002 f851 	bl	8004b18 <HAL_TIMEx_MasterConfigSynchronization>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a7c:	f7fe fb2c 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000530 	.word	0x20000530

08002a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d10d      	bne.n	8002aba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ad0:	f7ff ff7e 	bl	80029d0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ad4:	480c      	ldr	r0, [pc, #48]	; (8002b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ad6:	490d      	ldr	r1, [pc, #52]	; (8002b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002adc:	e002      	b.n	8002ae4 <LoopCopyDataInit>

08002ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae2:	3304      	adds	r3, #4

08002ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae8:	d3f9      	bcc.n	8002ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002aec:	4c0a      	ldr	r4, [pc, #40]	; (8002b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af0:	e001      	b.n	8002af6 <LoopFillZerobss>

08002af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af4:	3204      	adds	r2, #4

08002af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af8:	d3fb      	bcc.n	8002af2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002afa:	f002 f8e5 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002afe:	f7fe fa69 	bl	8000fd4 <main>
  bx  lr    
 8002b02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b04:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b0c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002b10:	0800b728 	.word	0x0800b728
  ldr r2, =_sbss
 8002b14:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002b18:	200006c4 	.word	0x200006c4

08002b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b1c:	e7fe      	b.n	8002b1c <ADC_IRQHandler>
	...

08002b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_Init+0x40>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <HAL_Init+0x40>)
 8002b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_Init+0x40>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <HAL_Init+0x40>)
 8002b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_Init+0x40>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_Init+0x40>)
 8002b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f000 f931 	bl	8002db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b4e:	200f      	movs	r0, #15
 8002b50:	f000 f808 	bl	8002b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b54:	f7ff feb4 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023c00 	.word	0x40023c00

08002b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_InitTick+0x54>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_InitTick+0x58>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4619      	mov	r1, r3
 8002b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f93b 	bl	8002dfe <HAL_SYSTICK_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00e      	b.n	8002bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b0f      	cmp	r3, #15
 8002b96:	d80a      	bhi.n	8002bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	f000 f911 	bl	8002dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <HAL_InitTick+0x5c>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e000      	b.n	8002bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000008 	.word	0x20000008
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_IncTick+0x20>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000008 	.word	0x20000008
 8002be8:	20000578 	.word	0x20000578

08002bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_GetTick+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000578 	.word	0x20000578

08002c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c0c:	f7ff ffee 	bl	8002bec <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d005      	beq.n	8002c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_Delay+0x44>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c2a:	bf00      	nop
 8002c2c:	f7ff ffde 	bl	8002bec <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d8f7      	bhi.n	8002c2c <HAL_Delay+0x28>
  {
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000008 	.word	0x20000008

08002c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7e:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	60d3      	str	r3, [r2, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <__NVIC_GetPriorityGrouping+0x18>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db0a      	blt.n	8002cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	490c      	ldr	r1, [pc, #48]	; (8002cfc <__NVIC_SetPriority+0x4c>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd8:	e00a      	b.n	8002cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4908      	ldr	r1, [pc, #32]	; (8002d00 <__NVIC_SetPriority+0x50>)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	761a      	strb	r2, [r3, #24]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f1c3 0307 	rsb	r3, r3, #7
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf28      	it	cs
 8002d22:	2304      	movcs	r3, #4
 8002d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d902      	bls.n	8002d34 <NVIC_EncodePriority+0x30>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3b03      	subs	r3, #3
 8002d32:	e000      	b.n	8002d36 <NVIC_EncodePriority+0x32>
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	401a      	ands	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43d9      	mvns	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	4313      	orrs	r3, r2
         );
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d7c:	d301      	bcc.n	8002d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00f      	b.n	8002da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <SysTick_Config+0x40>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8a:	210f      	movs	r1, #15
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	f7ff ff8e 	bl	8002cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <SysTick_Config+0x40>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <SysTick_Config+0x40>)
 8002d9c:	2207      	movs	r2, #7
 8002d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	e000e010 	.word	0xe000e010

08002db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ff47 	bl	8002c4c <__NVIC_SetPriorityGrouping>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd8:	f7ff ff5c 	bl	8002c94 <__NVIC_GetPriorityGrouping>
 8002ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	6978      	ldr	r0, [r7, #20]
 8002de4:	f7ff ff8e 	bl	8002d04 <NVIC_EncodePriority>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff5d 	bl	8002cb0 <__NVIC_SetPriority>
}
 8002df6:	bf00      	nop
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ffb0 	bl	8002d6c <SysTick_Config>
 8002e0c:	4603      	mov	r3, r0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e177      	b.n	8003124 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e34:	2201      	movs	r2, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f040 8166 	bne.w	800311e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d005      	beq.n	8002e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d130      	bne.n	8002ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 0201 	and.w	r2, r3, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d017      	beq.n	8002f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d123      	bne.n	8002f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0203 	and.w	r2, r3, #3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80c0 	beq.w	800311e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b66      	ldr	r3, [pc, #408]	; (800313c <HAL_GPIO_Init+0x324>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	4a65      	ldr	r2, [pc, #404]	; (800313c <HAL_GPIO_Init+0x324>)
 8002fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fac:	6453      	str	r3, [r2, #68]	; 0x44
 8002fae:	4b63      	ldr	r3, [pc, #396]	; (800313c <HAL_GPIO_Init+0x324>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fba:	4a61      	ldr	r2, [pc, #388]	; (8003140 <HAL_GPIO_Init+0x328>)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a58      	ldr	r2, [pc, #352]	; (8003144 <HAL_GPIO_Init+0x32c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d037      	beq.n	8003056 <HAL_GPIO_Init+0x23e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a57      	ldr	r2, [pc, #348]	; (8003148 <HAL_GPIO_Init+0x330>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d031      	beq.n	8003052 <HAL_GPIO_Init+0x23a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a56      	ldr	r2, [pc, #344]	; (800314c <HAL_GPIO_Init+0x334>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d02b      	beq.n	800304e <HAL_GPIO_Init+0x236>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a55      	ldr	r2, [pc, #340]	; (8003150 <HAL_GPIO_Init+0x338>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d025      	beq.n	800304a <HAL_GPIO_Init+0x232>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a54      	ldr	r2, [pc, #336]	; (8003154 <HAL_GPIO_Init+0x33c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01f      	beq.n	8003046 <HAL_GPIO_Init+0x22e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a53      	ldr	r2, [pc, #332]	; (8003158 <HAL_GPIO_Init+0x340>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d019      	beq.n	8003042 <HAL_GPIO_Init+0x22a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a52      	ldr	r2, [pc, #328]	; (800315c <HAL_GPIO_Init+0x344>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_GPIO_Init+0x226>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a51      	ldr	r2, [pc, #324]	; (8003160 <HAL_GPIO_Init+0x348>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00d      	beq.n	800303a <HAL_GPIO_Init+0x222>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a50      	ldr	r2, [pc, #320]	; (8003164 <HAL_GPIO_Init+0x34c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d007      	beq.n	8003036 <HAL_GPIO_Init+0x21e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4f      	ldr	r2, [pc, #316]	; (8003168 <HAL_GPIO_Init+0x350>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_GPIO_Init+0x21a>
 800302e:	2309      	movs	r3, #9
 8003030:	e012      	b.n	8003058 <HAL_GPIO_Init+0x240>
 8003032:	230a      	movs	r3, #10
 8003034:	e010      	b.n	8003058 <HAL_GPIO_Init+0x240>
 8003036:	2308      	movs	r3, #8
 8003038:	e00e      	b.n	8003058 <HAL_GPIO_Init+0x240>
 800303a:	2307      	movs	r3, #7
 800303c:	e00c      	b.n	8003058 <HAL_GPIO_Init+0x240>
 800303e:	2306      	movs	r3, #6
 8003040:	e00a      	b.n	8003058 <HAL_GPIO_Init+0x240>
 8003042:	2305      	movs	r3, #5
 8003044:	e008      	b.n	8003058 <HAL_GPIO_Init+0x240>
 8003046:	2304      	movs	r3, #4
 8003048:	e006      	b.n	8003058 <HAL_GPIO_Init+0x240>
 800304a:	2303      	movs	r3, #3
 800304c:	e004      	b.n	8003058 <HAL_GPIO_Init+0x240>
 800304e:	2302      	movs	r3, #2
 8003050:	e002      	b.n	8003058 <HAL_GPIO_Init+0x240>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_GPIO_Init+0x240>
 8003056:	2300      	movs	r3, #0
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	f002 0203 	and.w	r2, r2, #3
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	4093      	lsls	r3, r2
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003068:	4935      	ldr	r1, [pc, #212]	; (8003140 <HAL_GPIO_Init+0x328>)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	3302      	adds	r3, #2
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_GPIO_Init+0x354>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800309a:	4a34      	ldr	r2, [pc, #208]	; (800316c <HAL_GPIO_Init+0x354>)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <HAL_GPIO_Init+0x354>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c4:	4a29      	ldr	r2, [pc, #164]	; (800316c <HAL_GPIO_Init+0x354>)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ca:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_GPIO_Init+0x354>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ee:	4a1f      	ldr	r2, [pc, #124]	; (800316c <HAL_GPIO_Init+0x354>)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f4:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_GPIO_Init+0x354>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003118:	4a14      	ldr	r2, [pc, #80]	; (800316c <HAL_GPIO_Init+0x354>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3301      	adds	r3, #1
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2b0f      	cmp	r3, #15
 8003128:	f67f ae84 	bls.w	8002e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	40013800 	.word	0x40013800
 8003144:	40020000 	.word	0x40020000
 8003148:	40020400 	.word	0x40020400
 800314c:	40020800 	.word	0x40020800
 8003150:	40020c00 	.word	0x40020c00
 8003154:	40021000 	.word	0x40021000
 8003158:	40021400 	.word	0x40021400
 800315c:	40021800 	.word	0x40021800
 8003160:	40021c00 	.word	0x40021c00
 8003164:	40022000 	.word	0x40022000
 8003168:	40022400 	.word	0x40022400
 800316c:	40013c00 	.word	0x40013c00

08003170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	807b      	strh	r3, [r7, #2]
 800317c:	4613      	mov	r3, r2
 800317e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003180:	787b      	ldrb	r3, [r7, #1]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800318c:	e003      	b.n	8003196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800318e:	887b      	ldrh	r3, [r7, #2]
 8003190:	041a      	lsls	r2, r3, #16
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	619a      	str	r2, [r3, #24]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e12b      	b.n	800340e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd feba 	bl	8000f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003206:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003208:	f001 f924 	bl	8004454 <HAL_RCC_GetPCLK1Freq>
 800320c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4a81      	ldr	r2, [pc, #516]	; (8003418 <HAL_I2C_Init+0x274>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d807      	bhi.n	8003228 <HAL_I2C_Init+0x84>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a80      	ldr	r2, [pc, #512]	; (800341c <HAL_I2C_Init+0x278>)
 800321c:	4293      	cmp	r3, r2
 800321e:	bf94      	ite	ls
 8003220:	2301      	movls	r3, #1
 8003222:	2300      	movhi	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e006      	b.n	8003236 <HAL_I2C_Init+0x92>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a7d      	ldr	r2, [pc, #500]	; (8003420 <HAL_I2C_Init+0x27c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	bf94      	ite	ls
 8003230:	2301      	movls	r3, #1
 8003232:	2300      	movhi	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e0e7      	b.n	800340e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a78      	ldr	r2, [pc, #480]	; (8003424 <HAL_I2C_Init+0x280>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	0c9b      	lsrs	r3, r3, #18
 8003248:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <HAL_I2C_Init+0x274>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d802      	bhi.n	8003278 <HAL_I2C_Init+0xd4>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3301      	adds	r3, #1
 8003276:	e009      	b.n	800328c <HAL_I2C_Init+0xe8>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	4a69      	ldr	r2, [pc, #420]	; (8003428 <HAL_I2C_Init+0x284>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	3301      	adds	r3, #1
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	430b      	orrs	r3, r1
 8003292:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800329e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	495c      	ldr	r1, [pc, #368]	; (8003418 <HAL_I2C_Init+0x274>)
 80032a8:	428b      	cmp	r3, r1
 80032aa:	d819      	bhi.n	80032e0 <HAL_I2C_Init+0x13c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1e59      	subs	r1, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ba:	1c59      	adds	r1, r3, #1
 80032bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032c0:	400b      	ands	r3, r1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_I2C_Init+0x138>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1e59      	subs	r1, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032da:	e051      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 80032dc:	2304      	movs	r3, #4
 80032de:	e04f      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d111      	bne.n	800330c <HAL_I2C_Init+0x168>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e58      	subs	r0, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	440b      	add	r3, r1
 80032f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e012      	b.n	8003332 <HAL_I2C_Init+0x18e>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1e58      	subs	r0, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	0099      	lsls	r1, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003322:	3301      	adds	r3, #1
 8003324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Init+0x196>
 8003336:	2301      	movs	r3, #1
 8003338:	e022      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10e      	bne.n	8003360 <HAL_I2C_Init+0x1bc>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1e58      	subs	r0, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6859      	ldr	r1, [r3, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	440b      	add	r3, r1
 8003350:	fbb0 f3f3 	udiv	r3, r0, r3
 8003354:	3301      	adds	r3, #1
 8003356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335e:	e00f      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1e58      	subs	r0, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	0099      	lsls	r1, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	fbb0 f3f3 	udiv	r3, r0, r3
 8003376:	3301      	adds	r3, #1
 8003378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	6809      	ldr	r1, [r1, #0]
 8003384:	4313      	orrs	r3, r2
 8003386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6911      	ldr	r1, [r2, #16]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68d2      	ldr	r2, [r2, #12]
 80033ba:	4311      	orrs	r1, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	000186a0 	.word	0x000186a0
 800341c:	001e847f 	.word	0x001e847f
 8003420:	003d08ff 	.word	0x003d08ff
 8003424:	431bde83 	.word	0x431bde83
 8003428:	10624dd3 	.word	0x10624dd3

0800342c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	4608      	mov	r0, r1
 8003436:	4611      	mov	r1, r2
 8003438:	461a      	mov	r2, r3
 800343a:	4603      	mov	r3, r0
 800343c:	817b      	strh	r3, [r7, #10]
 800343e:	460b      	mov	r3, r1
 8003440:	813b      	strh	r3, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003446:	f7ff fbd1 	bl	8002bec <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b20      	cmp	r3, #32
 8003456:	f040 80d9 	bne.w	800360c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2319      	movs	r3, #25
 8003460:	2201      	movs	r2, #1
 8003462:	496d      	ldr	r1, [pc, #436]	; (8003618 <HAL_I2C_Mem_Write+0x1ec>)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f971 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
 8003472:	e0cc      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_I2C_Mem_Write+0x56>
 800347e:	2302      	movs	r3, #2
 8003480:	e0c5      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d007      	beq.n	80034a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2221      	movs	r2, #33	; 0x21
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2240      	movs	r2, #64	; 0x40
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a4d      	ldr	r2, [pc, #308]	; (800361c <HAL_I2C_Mem_Write+0x1f0>)
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ea:	88f8      	ldrh	r0, [r7, #6]
 80034ec:	893a      	ldrh	r2, [r7, #8]
 80034ee:	8979      	ldrh	r1, [r7, #10]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4603      	mov	r3, r0
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f890 	bl	8003620 <I2C_RequestMemoryWrite>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d052      	beq.n	80035ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e081      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fa36 	bl	8003980 <I2C_WaitOnTXEFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b04      	cmp	r3, #4
 8003520:	d107      	bne.n	8003532 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e06b      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d11b      	bne.n	80035ac <HAL_I2C_Mem_Write+0x180>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	2b00      	cmp	r3, #0
 800357a:	d017      	beq.n	80035ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1aa      	bne.n	800350a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fa29 	bl	8003a10 <I2C_WaitOnBTFFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00d      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d107      	bne.n	80035dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e016      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	00100002 	.word	0x00100002
 800361c:	ffff0000 	.word	0xffff0000

08003620 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003648:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	2200      	movs	r2, #0
 8003652:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f878 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00d      	beq.n	800367e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003670:	d103      	bne.n	800367a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e05f      	b.n	800373e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800367e:	897b      	ldrh	r3, [r7, #10]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800368c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	6a3a      	ldr	r2, [r7, #32]
 8003692:	492d      	ldr	r1, [pc, #180]	; (8003748 <I2C_RequestMemoryWrite+0x128>)
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f8d3 	bl	8003840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e04c      	b.n	800373e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	6a39      	ldr	r1, [r7, #32]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f95e 	bl	8003980 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00d      	beq.n	80036e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d107      	bne.n	80036e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e02b      	b.n	800373e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036ec:	893b      	ldrh	r3, [r7, #8]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	611a      	str	r2, [r3, #16]
 80036f6:	e021      	b.n	800373c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036f8:	893b      	ldrh	r3, [r7, #8]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003708:	6a39      	ldr	r1, [r7, #32]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f938 	bl	8003980 <I2C_WaitOnTXEFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b04      	cmp	r3, #4
 800371c:	d107      	bne.n	800372e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e005      	b.n	800373e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003732:	893b      	ldrh	r3, [r7, #8]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	00010002 	.word	0x00010002

0800374c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800375c:	e048      	b.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d044      	beq.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003766:	f7ff fa41 	bl	8002bec <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d302      	bcc.n	800377c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d139      	bne.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	0c1b      	lsrs	r3, r3, #16
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d10d      	bne.n	80037a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	43da      	mvns	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4013      	ands	r3, r2
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	e00c      	b.n	80037bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	43da      	mvns	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4013      	ands	r3, r2
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d116      	bne.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e023      	b.n	8003838 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	0c1b      	lsrs	r3, r3, #16
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10d      	bne.n	8003816 <I2C_WaitOnFlagUntilTimeout+0xca>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	43da      	mvns	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4013      	ands	r3, r2
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	e00c      	b.n	8003830 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	43da      	mvns	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4013      	ands	r3, r2
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	429a      	cmp	r2, r3
 8003834:	d093      	beq.n	800375e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800384e:	e071      	b.n	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	d123      	bne.n	80038a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003878:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e067      	b.n	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ae:	d041      	beq.n	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b0:	f7ff f99c 	bl	8002bec <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d302      	bcc.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d136      	bne.n	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10c      	bne.n	80038ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4013      	ands	r3, r2
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf14      	ite	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	2300      	moveq	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e00b      	b.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	43da      	mvns	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4013      	ands	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d016      	beq.n	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e021      	b.n	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	0c1b      	lsrs	r3, r3, #16
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d10c      	bne.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	43da      	mvns	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4013      	ands	r3, r2
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e00b      	b.n	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	43da      	mvns	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4013      	ands	r3, r2
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	bf14      	ite	ne
 800396a:	2301      	movne	r3, #1
 800396c:	2300      	moveq	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	f47f af6d 	bne.w	8003850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800398c:	e034      	b.n	80039f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f886 	bl	8003aa0 <I2C_IsAcknowledgeFailed>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e034      	b.n	8003a08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d028      	beq.n	80039f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7ff f921 	bl	8002bec <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11d      	bne.n	80039f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b80      	cmp	r3, #128	; 0x80
 80039c8:	d016      	beq.n	80039f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e007      	b.n	8003a08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d1c3      	bne.n	800398e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a1c:	e034      	b.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f83e 	bl	8003aa0 <I2C_IsAcknowledgeFailed>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e034      	b.n	8003a98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d028      	beq.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a36:	f7ff f8d9 	bl	8002bec <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d302      	bcc.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11d      	bne.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d016      	beq.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e007      	b.n	8003a98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d1c3      	bne.n	8003a1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab6:	d11b      	bne.n	8003af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	f043 0204 	orr.w	r2, r3, #4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d129      	bne.n	8003b68 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2224      	movs	r2, #36	; 0x24
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0210 	bic.w	r2, r2, #16
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	e000      	b.n	8003b6a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b68:	2302      	movs	r3, #2
  }
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d12a      	bne.n	8003be6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	; 0x24
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003bb0:	89fb      	ldrh	r3, [r7, #14]
 8003bb2:	f023 030f 	bic.w	r3, r3, #15
 8003bb6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	89fb      	ldrh	r3, [r7, #14]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	89fa      	ldrh	r2, [r7, #14]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e000      	b.n	8003be8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
  }
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e267      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d075      	beq.n	8003cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c12:	4b88      	ldr	r3, [pc, #544]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d00c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1e:	4b85      	ldr	r3, [pc, #532]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d112      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2a:	4b82      	ldr	r3, [pc, #520]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	4b7e      	ldr	r3, [pc, #504]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d05b      	beq.n	8003cfc <HAL_RCC_OscConfig+0x108>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d157      	bne.n	8003cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e242      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d106      	bne.n	8003c68 <HAL_RCC_OscConfig+0x74>
 8003c5a:	4b76      	ldr	r3, [pc, #472]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a75      	ldr	r2, [pc, #468]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x98>
 8003c72:	4b70      	ldr	r3, [pc, #448]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6f      	ldr	r2, [pc, #444]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b6d      	ldr	r3, [pc, #436]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6c      	ldr	r2, [pc, #432]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c8c:	4b69      	ldr	r3, [pc, #420]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a68      	ldr	r2, [pc, #416]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b66      	ldr	r3, [pc, #408]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a65      	ldr	r2, [pc, #404]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe ff9e 	bl	8002bec <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe ff9a 	bl	8002bec <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e207      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b5b      	ldr	r3, [pc, #364]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xc0>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe ff8a 	bl	8002bec <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe ff86 	bl	8002bec <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1f3      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b51      	ldr	r3, [pc, #324]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0xe8>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0a:	4b4a      	ldr	r3, [pc, #296]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d22:	4b44      	ldr	r3, [pc, #272]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b41      	ldr	r3, [pc, #260]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1c7      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4937      	ldr	r1, [pc, #220]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e03a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <HAL_RCC_OscConfig+0x244>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fe ff3f 	bl	8002bec <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fe ff3b 	bl	8002bec <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1a8      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4925      	ldr	r1, [pc, #148]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_OscConfig+0x244>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe ff1e 	bl	8002bec <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db4:	f7fe ff1a 	bl	8002bec <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e187      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d036      	beq.n	8003e4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_RCC_OscConfig+0x248>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fe fefe 	bl	8002bec <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe fefa 	bl	8002bec <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e167      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x200>
 8003e12:	e01b      	b.n	8003e4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_OscConfig+0x248>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe fee7 	bl	8002bec <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	e00e      	b.n	8003e40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e22:	f7fe fee3 	bl	8002bec <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d907      	bls.n	8003e40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e150      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
 8003e34:	40023800 	.word	0x40023800
 8003e38:	42470000 	.word	0x42470000
 8003e3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ea      	bne.n	8003e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8097 	beq.w	8003f88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5e:	4b81      	ldr	r3, [pc, #516]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	4b7d      	ldr	r3, [pc, #500]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a7c      	ldr	r2, [pc, #496]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7a:	4b7a      	ldr	r3, [pc, #488]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	4b77      	ldr	r3, [pc, #476]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d118      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e96:	4b74      	ldr	r3, [pc, #464]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a73      	ldr	r2, [pc, #460]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea2:	f7fe fea3 	bl	8002bec <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eaa:	f7fe fe9f 	bl	8002bec <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e10c      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x2ea>
 8003ed0:	4b64      	ldr	r3, [pc, #400]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a63      	ldr	r2, [pc, #396]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
 8003edc:	e01c      	b.n	8003f18 <HAL_RCC_OscConfig+0x324>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x30c>
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a5e      	ldr	r2, [pc, #376]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	4b5c      	ldr	r3, [pc, #368]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a5b      	ldr	r2, [pc, #364]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0x324>
 8003f00:	4b58      	ldr	r3, [pc, #352]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a57      	ldr	r2, [pc, #348]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	4b55      	ldr	r3, [pc, #340]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a54      	ldr	r2, [pc, #336]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f023 0304 	bic.w	r3, r3, #4
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d015      	beq.n	8003f4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fe fe64 	bl	8002bec <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fe fe60 	bl	8002bec <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0cb      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	4b49      	ldr	r3, [pc, #292]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ee      	beq.n	8003f28 <HAL_RCC_OscConfig+0x334>
 8003f4a:	e014      	b.n	8003f76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4c:	f7fe fe4e 	bl	8002bec <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f54:	f7fe fe4a 	bl	8002bec <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e0b5      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6a:	4b3e      	ldr	r3, [pc, #248]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ee      	bne.n	8003f54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7c:	4b39      	ldr	r3, [pc, #228]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	4a38      	ldr	r2, [pc, #224]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a1 	beq.w	80040d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f92:	4b34      	ldr	r3, [pc, #208]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d05c      	beq.n	8004058 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d141      	bne.n	800402a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b31      	ldr	r3, [pc, #196]	; (800406c <HAL_RCC_OscConfig+0x478>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe fe1e 	bl	8002bec <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fe fe1a 	bl	8002bec <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e087      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	4b27      	ldr	r3, [pc, #156]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	3b01      	subs	r3, #1
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	491b      	ldr	r1, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_RCC_OscConfig+0x478>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe fdf3 	bl	8002bec <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400a:	f7fe fdef 	bl	8002bec <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e05c      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x416>
 8004028:	e054      	b.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_RCC_OscConfig+0x478>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe fddc 	bl	8002bec <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004038:	f7fe fdd8 	bl	8002bec <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e045      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x444>
 8004056:	e03d      	b.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d107      	bne.n	8004070 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e038      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
 8004064:	40023800 	.word	0x40023800
 8004068:	40007000 	.word	0x40007000
 800406c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCC_OscConfig+0x4ec>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d028      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d121      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d11a      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d111      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	3b01      	subs	r3, #1
 80040ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800

080040e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0cc      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b68      	ldr	r3, [pc, #416]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d90c      	bls.n	8004120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b65      	ldr	r3, [pc, #404]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b63      	ldr	r3, [pc, #396]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0b8      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004138:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a58      	ldr	r2, [pc, #352]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004150:	4b53      	ldr	r3, [pc, #332]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a52      	ldr	r2, [pc, #328]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	494d      	ldr	r1, [pc, #308]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d044      	beq.n	8004204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b47      	ldr	r3, [pc, #284]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d119      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e07f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e067      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4934      	ldr	r1, [pc, #208]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d4:	f7fe fd0a 	bl	8002bec <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fe fd06 	bl	8002bec <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b25      	ldr	r3, [pc, #148]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d20c      	bcs.n	800422c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e032      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4916      	ldr	r1, [pc, #88]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	490e      	ldr	r1, [pc, #56]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426a:	f000 f821 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 800426e:	4602      	mov	r2, r0
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	490a      	ldr	r1, [pc, #40]	; (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	5ccb      	ldrb	r3, [r1, r3]
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004286:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fc6a 	bl	8002b64 <HAL_InitTick>

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023c00 	.word	0x40023c00
 80042a0:	40023800 	.word	0x40023800
 80042a4:	0800b2fc 	.word	0x0800b2fc
 80042a8:	20000000 	.word	0x20000000
 80042ac:	20000004 	.word	0x20000004

080042b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b4:	b090      	sub	sp, #64	; 0x40
 80042b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34
 80042bc:	2300      	movs	r3, #0
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c0:	2300      	movs	r3, #0
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c8:	4b59      	ldr	r3, [pc, #356]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d00d      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x40>
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	f200 80a1 	bhi.w	800441c <HAL_RCC_GetSysClockFreq+0x16c>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x34>
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x3a>
 80042e2:	e09b      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b53      	ldr	r3, [pc, #332]	; (8004434 <HAL_RCC_GetSysClockFreq+0x184>)
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80042e8:	e09b      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ea:	4b53      	ldr	r3, [pc, #332]	; (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ee:	e098      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f0:	4b4f      	ldr	r3, [pc, #316]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fa:	4b4d      	ldr	r3, [pc, #308]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d028      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004306:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	2200      	movs	r2, #0
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	627a      	str	r2, [r7, #36]	; 0x24
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004318:	2100      	movs	r1, #0
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 800431c:	fb03 f201 	mul.w	r2, r3, r1
 8004320:	2300      	movs	r3, #0
 8004322:	fb00 f303 	mul.w	r3, r0, r3
 8004326:	4413      	add	r3, r2
 8004328:	4a43      	ldr	r2, [pc, #268]	; (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 800432a:	fba0 1202 	umull	r1, r2, r0, r2
 800432e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004330:	460a      	mov	r2, r1
 8004332:	62ba      	str	r2, [r7, #40]	; 0x28
 8004334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004336:	4413      	add	r3, r2
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433c:	2200      	movs	r2, #0
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	61fa      	str	r2, [r7, #28]
 8004342:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004346:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800434a:	f7fc fb97 	bl	8000a7c <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4613      	mov	r3, r2
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004356:	e053      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004358:	4b35      	ldr	r3, [pc, #212]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	2200      	movs	r2, #0
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	617a      	str	r2, [r7, #20]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800436a:	f04f 0b00 	mov.w	fp, #0
 800436e:	4652      	mov	r2, sl
 8004370:	465b      	mov	r3, fp
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	0159      	lsls	r1, r3, #5
 800437c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004380:	0150      	lsls	r0, r2, #5
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	ebb2 080a 	subs.w	r8, r2, sl
 800438a:	eb63 090b 	sbc.w	r9, r3, fp
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800439a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800439e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043a2:	ebb2 0408 	subs.w	r4, r2, r8
 80043a6:	eb63 0509 	sbc.w	r5, r3, r9
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	00eb      	lsls	r3, r5, #3
 80043b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b8:	00e2      	lsls	r2, r4, #3
 80043ba:	4614      	mov	r4, r2
 80043bc:	461d      	mov	r5, r3
 80043be:	eb14 030a 	adds.w	r3, r4, sl
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	eb45 030b 	adc.w	r3, r5, fp
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043d6:	4629      	mov	r1, r5
 80043d8:	028b      	lsls	r3, r1, #10
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e0:	4621      	mov	r1, r4
 80043e2:	028a      	lsls	r2, r1, #10
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	2200      	movs	r2, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	60fa      	str	r2, [r7, #12]
 80043f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f4:	f7fc fb42 	bl	8000a7c <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	3301      	adds	r3, #1
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800441a:	e002      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_GetSysClockFreq+0x184>)
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004424:	4618      	mov	r0, r3
 8004426:	3740      	adds	r7, #64	; 0x40
 8004428:	46bd      	mov	sp, r7
 800442a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	00f42400 	.word	0x00f42400
 8004438:	017d7840 	.word	0x017d7840

0800443c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004440:	4b03      	ldr	r3, [pc, #12]	; (8004450 <HAL_RCC_GetHCLKFreq+0x14>)
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000000 	.word	0x20000000

08004454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004458:	f7ff fff0 	bl	800443c <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	0a9b      	lsrs	r3, r3, #10
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4903      	ldr	r1, [pc, #12]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40023800 	.word	0x40023800
 8004478:	0800b30c 	.word	0x0800b30c

0800447c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e07b      	b.n	8004586 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d108      	bne.n	80044a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449e:	d009      	beq.n	80044b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	61da      	str	r2, [r3, #28]
 80044a6:	e005      	b.n	80044b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fc fe3e 	bl	8001150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	ea42 0103 	orr.w	r1, r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	f003 0104 	and.w	r1, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	f003 0210 	and.w	r2, r3, #16
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004574:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e041      	b.n	8004624 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fe fa69 	bl	8002a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f000 f95d 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d001      	beq.n	8004644 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e046      	b.n	80046d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <HAL_TIM_Base_Start+0xb4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d022      	beq.n	800469c <HAL_TIM_Base_Start+0x70>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465e:	d01d      	beq.n	800469c <HAL_TIM_Base_Start+0x70>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <HAL_TIM_Base_Start+0xb8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d018      	beq.n	800469c <HAL_TIM_Base_Start+0x70>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <HAL_TIM_Base_Start+0xbc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <HAL_TIM_Base_Start+0x70>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <HAL_TIM_Base_Start+0xc0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00e      	beq.n	800469c <HAL_TIM_Base_Start+0x70>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <HAL_TIM_Base_Start+0xc4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d009      	beq.n	800469c <HAL_TIM_Base_Start+0x70>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <HAL_TIM_Base_Start+0xc8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_TIM_Base_Start+0x70>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a18      	ldr	r2, [pc, #96]	; (80046f8 <HAL_TIM_Base_Start+0xcc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d111      	bne.n	80046c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d010      	beq.n	80046d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046be:	e007      	b.n	80046d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40000800 	.word	0x40000800
 80046ec:	40000c00 	.word	0x40000c00
 80046f0:	40010400 	.word	0x40010400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40001800 	.word	0x40001800

080046fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIM_ConfigClockSource+0x1c>
 8004714:	2302      	movs	r3, #2
 8004716:	e0b4      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x186>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004750:	d03e      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004756:	f200 8087 	bhi.w	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	f000 8086 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x172>
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	d87f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d01a      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0xa6>
 800476c:	2b70      	cmp	r3, #112	; 0x70
 800476e:	d87b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d050      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x11a>
 8004774:	2b60      	cmp	r3, #96	; 0x60
 8004776:	d877      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d03c      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0xfa>
 800477c:	2b50      	cmp	r3, #80	; 0x50
 800477e:	d873      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d058      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x13a>
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d86f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d064      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b30      	cmp	r3, #48	; 0x30
 800478e:	d86b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d060      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d867      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d05c      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 800479c:	2b10      	cmp	r3, #16
 800479e:	d05a      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	e062      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047b2:	f000 f991 	bl	8004ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	609a      	str	r2, [r3, #8]
      break;
 80047ce:	e04f      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047e0:	f000 f97a 	bl	8004ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f2:	609a      	str	r2, [r3, #8]
      break;
 80047f4:	e03c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	461a      	mov	r2, r3
 8004804:	f000 f8ee 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2150      	movs	r1, #80	; 0x50
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f947 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004814:	e02c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004822:	461a      	mov	r2, r3
 8004824:	f000 f90d 	bl	8004a42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2160      	movs	r1, #96	; 0x60
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f937 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004834:	e01c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004842:	461a      	mov	r2, r3
 8004844:	f000 f8ce 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2140      	movs	r1, #64	; 0x40
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f927 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004854:	e00c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 f91e 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004866:	e003      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	e000      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800486e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a46      	ldr	r2, [pc, #280]	; (80049b8 <TIM_Base_SetConfig+0x12c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a43      	ldr	r2, [pc, #268]	; (80049bc <TIM_Base_SetConfig+0x130>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a42      	ldr	r2, [pc, #264]	; (80049c0 <TIM_Base_SetConfig+0x134>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a41      	ldr	r2, [pc, #260]	; (80049c4 <TIM_Base_SetConfig+0x138>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a40      	ldr	r2, [pc, #256]	; (80049c8 <TIM_Base_SetConfig+0x13c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a35      	ldr	r2, [pc, #212]	; (80049b8 <TIM_Base_SetConfig+0x12c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d027      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a32      	ldr	r2, [pc, #200]	; (80049bc <TIM_Base_SetConfig+0x130>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d023      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a31      	ldr	r2, [pc, #196]	; (80049c0 <TIM_Base_SetConfig+0x134>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a30      	ldr	r2, [pc, #192]	; (80049c4 <TIM_Base_SetConfig+0x138>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2f      	ldr	r2, [pc, #188]	; (80049c8 <TIM_Base_SetConfig+0x13c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d017      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2e      	ldr	r2, [pc, #184]	; (80049cc <TIM_Base_SetConfig+0x140>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2d      	ldr	r2, [pc, #180]	; (80049d0 <TIM_Base_SetConfig+0x144>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <TIM_Base_SetConfig+0x148>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <TIM_Base_SetConfig+0x14c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <TIM_Base_SetConfig+0x150>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <TIM_Base_SetConfig+0x154>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a10      	ldr	r2, [pc, #64]	; (80049b8 <TIM_Base_SetConfig+0x12c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0xf8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <TIM_Base_SetConfig+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d103      	bne.n	800498c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d105      	bne.n	80049aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f023 0201 	bic.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	611a      	str	r2, [r3, #16]
  }
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40010400 	.word	0x40010400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800
 80049d8:	40001800 	.word	0x40001800
 80049dc:	40001c00 	.word	0x40001c00
 80049e0:	40002000 	.word	0x40002000

080049e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f023 0201 	bic.w	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f023 030a 	bic.w	r3, r3, #10
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b087      	sub	sp, #28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f023 0210 	bic.w	r2, r3, #16
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	031b      	lsls	r3, r3, #12
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f043 0307 	orr.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	021a      	lsls	r2, r3, #8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	609a      	str	r2, [r3, #8]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e05a      	b.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d022      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7c:	d01d      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1d      	ldr	r2, [pc, #116]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d018      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00e      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d009      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d004      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40000c00 	.word	0x40000c00
 8004c04:	40010400 	.word	0x40010400
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40001800 	.word	0x40001800

08004c10 <sniprintf>:
 8004c10:	b40c      	push	{r2, r3}
 8004c12:	b530      	push	{r4, r5, lr}
 8004c14:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <sniprintf+0x64>)
 8004c16:	1e0c      	subs	r4, r1, #0
 8004c18:	681d      	ldr	r5, [r3, #0]
 8004c1a:	b09d      	sub	sp, #116	; 0x74
 8004c1c:	da08      	bge.n	8004c30 <sniprintf+0x20>
 8004c1e:	238b      	movs	r3, #139	; 0x8b
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	f04f 30ff 	mov.w	r0, #4294967295
 8004c26:	b01d      	add	sp, #116	; 0x74
 8004c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c2c:	b002      	add	sp, #8
 8004c2e:	4770      	bx	lr
 8004c30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004c34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c38:	bf14      	ite	ne
 8004c3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c3e:	4623      	moveq	r3, r4
 8004c40:	9304      	str	r3, [sp, #16]
 8004c42:	9307      	str	r3, [sp, #28]
 8004c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c48:	9002      	str	r0, [sp, #8]
 8004c4a:	9006      	str	r0, [sp, #24]
 8004c4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c52:	ab21      	add	r3, sp, #132	; 0x84
 8004c54:	a902      	add	r1, sp, #8
 8004c56:	4628      	mov	r0, r5
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	f000 f9bb 	bl	8004fd4 <_svfiprintf_r>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	bfbc      	itt	lt
 8004c62:	238b      	movlt	r3, #139	; 0x8b
 8004c64:	602b      	strlt	r3, [r5, #0]
 8004c66:	2c00      	cmp	r4, #0
 8004c68:	d0dd      	beq.n	8004c26 <sniprintf+0x16>
 8004c6a:	9b02      	ldr	r3, [sp, #8]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e7d9      	b.n	8004c26 <sniprintf+0x16>
 8004c72:	bf00      	nop
 8004c74:	20000058 	.word	0x20000058

08004c78 <memmove>:
 8004c78:	4288      	cmp	r0, r1
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	eb01 0402 	add.w	r4, r1, r2
 8004c80:	d902      	bls.n	8004c88 <memmove+0x10>
 8004c82:	4284      	cmp	r4, r0
 8004c84:	4623      	mov	r3, r4
 8004c86:	d807      	bhi.n	8004c98 <memmove+0x20>
 8004c88:	1e43      	subs	r3, r0, #1
 8004c8a:	42a1      	cmp	r1, r4
 8004c8c:	d008      	beq.n	8004ca0 <memmove+0x28>
 8004c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c96:	e7f8      	b.n	8004c8a <memmove+0x12>
 8004c98:	4402      	add	r2, r0
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	428a      	cmp	r2, r1
 8004c9e:	d100      	bne.n	8004ca2 <memmove+0x2a>
 8004ca0:	bd10      	pop	{r4, pc}
 8004ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004caa:	e7f7      	b.n	8004c9c <memmove+0x24>

08004cac <memset>:
 8004cac:	4402      	add	r2, r0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d100      	bne.n	8004cb6 <memset+0xa>
 8004cb4:	4770      	bx	lr
 8004cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cba:	e7f9      	b.n	8004cb0 <memset+0x4>

08004cbc <__errno>:
 8004cbc:	4b01      	ldr	r3, [pc, #4]	; (8004cc4 <__errno+0x8>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000058 	.word	0x20000058

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	; (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	; (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	; (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	; (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f001 f9ce 	bl	800607c <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	0800b720 	.word	0x0800b720
 8004d04:	0800b720 	.word	0x0800b720
 8004d08:	0800b720 	.word	0x0800b720
 8004d0c:	0800b724 	.word	0x0800b724

08004d10 <__retarget_lock_acquire_recursive>:
 8004d10:	4770      	bx	lr

08004d12 <__retarget_lock_release_recursive>:
 8004d12:	4770      	bx	lr

08004d14 <memcpy>:
 8004d14:	440a      	add	r2, r1
 8004d16:	4291      	cmp	r1, r2
 8004d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d1c:	d100      	bne.n	8004d20 <memcpy+0xc>
 8004d1e:	4770      	bx	lr
 8004d20:	b510      	push	{r4, lr}
 8004d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d2a:	4291      	cmp	r1, r2
 8004d2c:	d1f9      	bne.n	8004d22 <memcpy+0xe>
 8004d2e:	bd10      	pop	{r4, pc}

08004d30 <_free_r>:
 8004d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d32:	2900      	cmp	r1, #0
 8004d34:	d044      	beq.n	8004dc0 <_free_r+0x90>
 8004d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3a:	9001      	str	r0, [sp, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d42:	bfb8      	it	lt
 8004d44:	18e4      	addlt	r4, r4, r3
 8004d46:	f000 f8df 	bl	8004f08 <__malloc_lock>
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <_free_r+0x94>)
 8004d4c:	9801      	ldr	r0, [sp, #4]
 8004d4e:	6813      	ldr	r3, [r2, #0]
 8004d50:	b933      	cbnz	r3, 8004d60 <_free_r+0x30>
 8004d52:	6063      	str	r3, [r4, #4]
 8004d54:	6014      	str	r4, [r2, #0]
 8004d56:	b003      	add	sp, #12
 8004d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d5c:	f000 b8da 	b.w	8004f14 <__malloc_unlock>
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	d908      	bls.n	8004d76 <_free_r+0x46>
 8004d64:	6825      	ldr	r5, [r4, #0]
 8004d66:	1961      	adds	r1, r4, r5
 8004d68:	428b      	cmp	r3, r1
 8004d6a:	bf01      	itttt	eq
 8004d6c:	6819      	ldreq	r1, [r3, #0]
 8004d6e:	685b      	ldreq	r3, [r3, #4]
 8004d70:	1949      	addeq	r1, r1, r5
 8004d72:	6021      	streq	r1, [r4, #0]
 8004d74:	e7ed      	b.n	8004d52 <_free_r+0x22>
 8004d76:	461a      	mov	r2, r3
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	b10b      	cbz	r3, 8004d80 <_free_r+0x50>
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	d9fa      	bls.n	8004d76 <_free_r+0x46>
 8004d80:	6811      	ldr	r1, [r2, #0]
 8004d82:	1855      	adds	r5, r2, r1
 8004d84:	42a5      	cmp	r5, r4
 8004d86:	d10b      	bne.n	8004da0 <_free_r+0x70>
 8004d88:	6824      	ldr	r4, [r4, #0]
 8004d8a:	4421      	add	r1, r4
 8004d8c:	1854      	adds	r4, r2, r1
 8004d8e:	42a3      	cmp	r3, r4
 8004d90:	6011      	str	r1, [r2, #0]
 8004d92:	d1e0      	bne.n	8004d56 <_free_r+0x26>
 8004d94:	681c      	ldr	r4, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	6053      	str	r3, [r2, #4]
 8004d9a:	440c      	add	r4, r1
 8004d9c:	6014      	str	r4, [r2, #0]
 8004d9e:	e7da      	b.n	8004d56 <_free_r+0x26>
 8004da0:	d902      	bls.n	8004da8 <_free_r+0x78>
 8004da2:	230c      	movs	r3, #12
 8004da4:	6003      	str	r3, [r0, #0]
 8004da6:	e7d6      	b.n	8004d56 <_free_r+0x26>
 8004da8:	6825      	ldr	r5, [r4, #0]
 8004daa:	1961      	adds	r1, r4, r5
 8004dac:	428b      	cmp	r3, r1
 8004dae:	bf04      	itt	eq
 8004db0:	6819      	ldreq	r1, [r3, #0]
 8004db2:	685b      	ldreq	r3, [r3, #4]
 8004db4:	6063      	str	r3, [r4, #4]
 8004db6:	bf04      	itt	eq
 8004db8:	1949      	addeq	r1, r1, r5
 8004dba:	6021      	streq	r1, [r4, #0]
 8004dbc:	6054      	str	r4, [r2, #4]
 8004dbe:	e7ca      	b.n	8004d56 <_free_r+0x26>
 8004dc0:	b003      	add	sp, #12
 8004dc2:	bd30      	pop	{r4, r5, pc}
 8004dc4:	200006bc 	.word	0x200006bc

08004dc8 <sbrk_aligned>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	4e0e      	ldr	r6, [pc, #56]	; (8004e04 <sbrk_aligned+0x3c>)
 8004dcc:	460c      	mov	r4, r1
 8004dce:	6831      	ldr	r1, [r6, #0]
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	b911      	cbnz	r1, 8004dda <sbrk_aligned+0x12>
 8004dd4:	f000 fb8c 	bl	80054f0 <_sbrk_r>
 8004dd8:	6030      	str	r0, [r6, #0]
 8004dda:	4621      	mov	r1, r4
 8004ddc:	4628      	mov	r0, r5
 8004dde:	f000 fb87 	bl	80054f0 <_sbrk_r>
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	d00a      	beq.n	8004dfc <sbrk_aligned+0x34>
 8004de6:	1cc4      	adds	r4, r0, #3
 8004de8:	f024 0403 	bic.w	r4, r4, #3
 8004dec:	42a0      	cmp	r0, r4
 8004dee:	d007      	beq.n	8004e00 <sbrk_aligned+0x38>
 8004df0:	1a21      	subs	r1, r4, r0
 8004df2:	4628      	mov	r0, r5
 8004df4:	f000 fb7c 	bl	80054f0 <_sbrk_r>
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d101      	bne.n	8004e00 <sbrk_aligned+0x38>
 8004dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8004e00:	4620      	mov	r0, r4
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	200006c0 	.word	0x200006c0

08004e08 <_malloc_r>:
 8004e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e0c:	1ccd      	adds	r5, r1, #3
 8004e0e:	f025 0503 	bic.w	r5, r5, #3
 8004e12:	3508      	adds	r5, #8
 8004e14:	2d0c      	cmp	r5, #12
 8004e16:	bf38      	it	cc
 8004e18:	250c      	movcc	r5, #12
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	db01      	blt.n	8004e24 <_malloc_r+0x1c>
 8004e20:	42a9      	cmp	r1, r5
 8004e22:	d905      	bls.n	8004e30 <_malloc_r+0x28>
 8004e24:	230c      	movs	r3, #12
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	2600      	movs	r6, #0
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f04 <_malloc_r+0xfc>
 8004e34:	f000 f868 	bl	8004f08 <__malloc_lock>
 8004e38:	f8d8 3000 	ldr.w	r3, [r8]
 8004e3c:	461c      	mov	r4, r3
 8004e3e:	bb5c      	cbnz	r4, 8004e98 <_malloc_r+0x90>
 8004e40:	4629      	mov	r1, r5
 8004e42:	4638      	mov	r0, r7
 8004e44:	f7ff ffc0 	bl	8004dc8 <sbrk_aligned>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	d155      	bne.n	8004efa <_malloc_r+0xf2>
 8004e4e:	f8d8 4000 	ldr.w	r4, [r8]
 8004e52:	4626      	mov	r6, r4
 8004e54:	2e00      	cmp	r6, #0
 8004e56:	d145      	bne.n	8004ee4 <_malloc_r+0xdc>
 8004e58:	2c00      	cmp	r4, #0
 8004e5a:	d048      	beq.n	8004eee <_malloc_r+0xe6>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4638      	mov	r0, r7
 8004e62:	eb04 0903 	add.w	r9, r4, r3
 8004e66:	f000 fb43 	bl	80054f0 <_sbrk_r>
 8004e6a:	4581      	cmp	r9, r0
 8004e6c:	d13f      	bne.n	8004eee <_malloc_r+0xe6>
 8004e6e:	6821      	ldr	r1, [r4, #0]
 8004e70:	1a6d      	subs	r5, r5, r1
 8004e72:	4629      	mov	r1, r5
 8004e74:	4638      	mov	r0, r7
 8004e76:	f7ff ffa7 	bl	8004dc8 <sbrk_aligned>
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d037      	beq.n	8004eee <_malloc_r+0xe6>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	442b      	add	r3, r5
 8004e82:	6023      	str	r3, [r4, #0]
 8004e84:	f8d8 3000 	ldr.w	r3, [r8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d038      	beq.n	8004efe <_malloc_r+0xf6>
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	42a2      	cmp	r2, r4
 8004e90:	d12b      	bne.n	8004eea <_malloc_r+0xe2>
 8004e92:	2200      	movs	r2, #0
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	e00f      	b.n	8004eb8 <_malloc_r+0xb0>
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	1b52      	subs	r2, r2, r5
 8004e9c:	d41f      	bmi.n	8004ede <_malloc_r+0xd6>
 8004e9e:	2a0b      	cmp	r2, #11
 8004ea0:	d917      	bls.n	8004ed2 <_malloc_r+0xca>
 8004ea2:	1961      	adds	r1, r4, r5
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	6025      	str	r5, [r4, #0]
 8004ea8:	bf18      	it	ne
 8004eaa:	6059      	strne	r1, [r3, #4]
 8004eac:	6863      	ldr	r3, [r4, #4]
 8004eae:	bf08      	it	eq
 8004eb0:	f8c8 1000 	streq.w	r1, [r8]
 8004eb4:	5162      	str	r2, [r4, r5]
 8004eb6:	604b      	str	r3, [r1, #4]
 8004eb8:	4638      	mov	r0, r7
 8004eba:	f104 060b 	add.w	r6, r4, #11
 8004ebe:	f000 f829 	bl	8004f14 <__malloc_unlock>
 8004ec2:	f026 0607 	bic.w	r6, r6, #7
 8004ec6:	1d23      	adds	r3, r4, #4
 8004ec8:	1af2      	subs	r2, r6, r3
 8004eca:	d0ae      	beq.n	8004e2a <_malloc_r+0x22>
 8004ecc:	1b9b      	subs	r3, r3, r6
 8004ece:	50a3      	str	r3, [r4, r2]
 8004ed0:	e7ab      	b.n	8004e2a <_malloc_r+0x22>
 8004ed2:	42a3      	cmp	r3, r4
 8004ed4:	6862      	ldr	r2, [r4, #4]
 8004ed6:	d1dd      	bne.n	8004e94 <_malloc_r+0x8c>
 8004ed8:	f8c8 2000 	str.w	r2, [r8]
 8004edc:	e7ec      	b.n	8004eb8 <_malloc_r+0xb0>
 8004ede:	4623      	mov	r3, r4
 8004ee0:	6864      	ldr	r4, [r4, #4]
 8004ee2:	e7ac      	b.n	8004e3e <_malloc_r+0x36>
 8004ee4:	4634      	mov	r4, r6
 8004ee6:	6876      	ldr	r6, [r6, #4]
 8004ee8:	e7b4      	b.n	8004e54 <_malloc_r+0x4c>
 8004eea:	4613      	mov	r3, r2
 8004eec:	e7cc      	b.n	8004e88 <_malloc_r+0x80>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	f000 f80e 	bl	8004f14 <__malloc_unlock>
 8004ef8:	e797      	b.n	8004e2a <_malloc_r+0x22>
 8004efa:	6025      	str	r5, [r4, #0]
 8004efc:	e7dc      	b.n	8004eb8 <_malloc_r+0xb0>
 8004efe:	605b      	str	r3, [r3, #4]
 8004f00:	deff      	udf	#255	; 0xff
 8004f02:	bf00      	nop
 8004f04:	200006bc 	.word	0x200006bc

08004f08 <__malloc_lock>:
 8004f08:	4801      	ldr	r0, [pc, #4]	; (8004f10 <__malloc_lock+0x8>)
 8004f0a:	f7ff bf01 	b.w	8004d10 <__retarget_lock_acquire_recursive>
 8004f0e:	bf00      	nop
 8004f10:	200006b8 	.word	0x200006b8

08004f14 <__malloc_unlock>:
 8004f14:	4801      	ldr	r0, [pc, #4]	; (8004f1c <__malloc_unlock+0x8>)
 8004f16:	f7ff befc 	b.w	8004d12 <__retarget_lock_release_recursive>
 8004f1a:	bf00      	nop
 8004f1c:	200006b8 	.word	0x200006b8

08004f20 <__ssputs_r>:
 8004f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f24:	688e      	ldr	r6, [r1, #8]
 8004f26:	461f      	mov	r7, r3
 8004f28:	42be      	cmp	r6, r7
 8004f2a:	680b      	ldr	r3, [r1, #0]
 8004f2c:	4682      	mov	sl, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4690      	mov	r8, r2
 8004f32:	d82c      	bhi.n	8004f8e <__ssputs_r+0x6e>
 8004f34:	898a      	ldrh	r2, [r1, #12]
 8004f36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f3a:	d026      	beq.n	8004f8a <__ssputs_r+0x6a>
 8004f3c:	6965      	ldr	r5, [r4, #20]
 8004f3e:	6909      	ldr	r1, [r1, #16]
 8004f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f44:	eba3 0901 	sub.w	r9, r3, r1
 8004f48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f4c:	1c7b      	adds	r3, r7, #1
 8004f4e:	444b      	add	r3, r9
 8004f50:	106d      	asrs	r5, r5, #1
 8004f52:	429d      	cmp	r5, r3
 8004f54:	bf38      	it	cc
 8004f56:	461d      	movcc	r5, r3
 8004f58:	0553      	lsls	r3, r2, #21
 8004f5a:	d527      	bpl.n	8004fac <__ssputs_r+0x8c>
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	f7ff ff53 	bl	8004e08 <_malloc_r>
 8004f62:	4606      	mov	r6, r0
 8004f64:	b360      	cbz	r0, 8004fc0 <__ssputs_r+0xa0>
 8004f66:	6921      	ldr	r1, [r4, #16]
 8004f68:	464a      	mov	r2, r9
 8004f6a:	f7ff fed3 	bl	8004d14 <memcpy>
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	6126      	str	r6, [r4, #16]
 8004f7c:	6165      	str	r5, [r4, #20]
 8004f7e:	444e      	add	r6, r9
 8004f80:	eba5 0509 	sub.w	r5, r5, r9
 8004f84:	6026      	str	r6, [r4, #0]
 8004f86:	60a5      	str	r5, [r4, #8]
 8004f88:	463e      	mov	r6, r7
 8004f8a:	42be      	cmp	r6, r7
 8004f8c:	d900      	bls.n	8004f90 <__ssputs_r+0x70>
 8004f8e:	463e      	mov	r6, r7
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	4632      	mov	r2, r6
 8004f94:	4641      	mov	r1, r8
 8004f96:	f7ff fe6f 	bl	8004c78 <memmove>
 8004f9a:	68a3      	ldr	r3, [r4, #8]
 8004f9c:	1b9b      	subs	r3, r3, r6
 8004f9e:	60a3      	str	r3, [r4, #8]
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	4433      	add	r3, r6
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fac:	462a      	mov	r2, r5
 8004fae:	f000 faaf 	bl	8005510 <_realloc_r>
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d1e0      	bne.n	8004f7a <__ssputs_r+0x5a>
 8004fb8:	6921      	ldr	r1, [r4, #16]
 8004fba:	4650      	mov	r0, sl
 8004fbc:	f7ff feb8 	bl	8004d30 <_free_r>
 8004fc0:	230c      	movs	r3, #12
 8004fc2:	f8ca 3000 	str.w	r3, [sl]
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fcc:	81a3      	strh	r3, [r4, #12]
 8004fce:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd2:	e7e9      	b.n	8004fa8 <__ssputs_r+0x88>

08004fd4 <_svfiprintf_r>:
 8004fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd8:	4698      	mov	r8, r3
 8004fda:	898b      	ldrh	r3, [r1, #12]
 8004fdc:	061b      	lsls	r3, r3, #24
 8004fde:	b09d      	sub	sp, #116	; 0x74
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	460d      	mov	r5, r1
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	d50e      	bpl.n	8005006 <_svfiprintf_r+0x32>
 8004fe8:	690b      	ldr	r3, [r1, #16]
 8004fea:	b963      	cbnz	r3, 8005006 <_svfiprintf_r+0x32>
 8004fec:	2140      	movs	r1, #64	; 0x40
 8004fee:	f7ff ff0b 	bl	8004e08 <_malloc_r>
 8004ff2:	6028      	str	r0, [r5, #0]
 8004ff4:	6128      	str	r0, [r5, #16]
 8004ff6:	b920      	cbnz	r0, 8005002 <_svfiprintf_r+0x2e>
 8004ff8:	230c      	movs	r3, #12
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	e0d0      	b.n	80051a4 <_svfiprintf_r+0x1d0>
 8005002:	2340      	movs	r3, #64	; 0x40
 8005004:	616b      	str	r3, [r5, #20]
 8005006:	2300      	movs	r3, #0
 8005008:	9309      	str	r3, [sp, #36]	; 0x24
 800500a:	2320      	movs	r3, #32
 800500c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005010:	f8cd 800c 	str.w	r8, [sp, #12]
 8005014:	2330      	movs	r3, #48	; 0x30
 8005016:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051bc <_svfiprintf_r+0x1e8>
 800501a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800501e:	f04f 0901 	mov.w	r9, #1
 8005022:	4623      	mov	r3, r4
 8005024:	469a      	mov	sl, r3
 8005026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800502a:	b10a      	cbz	r2, 8005030 <_svfiprintf_r+0x5c>
 800502c:	2a25      	cmp	r2, #37	; 0x25
 800502e:	d1f9      	bne.n	8005024 <_svfiprintf_r+0x50>
 8005030:	ebba 0b04 	subs.w	fp, sl, r4
 8005034:	d00b      	beq.n	800504e <_svfiprintf_r+0x7a>
 8005036:	465b      	mov	r3, fp
 8005038:	4622      	mov	r2, r4
 800503a:	4629      	mov	r1, r5
 800503c:	4638      	mov	r0, r7
 800503e:	f7ff ff6f 	bl	8004f20 <__ssputs_r>
 8005042:	3001      	adds	r0, #1
 8005044:	f000 80a9 	beq.w	800519a <_svfiprintf_r+0x1c6>
 8005048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800504a:	445a      	add	r2, fp
 800504c:	9209      	str	r2, [sp, #36]	; 0x24
 800504e:	f89a 3000 	ldrb.w	r3, [sl]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80a1 	beq.w	800519a <_svfiprintf_r+0x1c6>
 8005058:	2300      	movs	r3, #0
 800505a:	f04f 32ff 	mov.w	r2, #4294967295
 800505e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005062:	f10a 0a01 	add.w	sl, sl, #1
 8005066:	9304      	str	r3, [sp, #16]
 8005068:	9307      	str	r3, [sp, #28]
 800506a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800506e:	931a      	str	r3, [sp, #104]	; 0x68
 8005070:	4654      	mov	r4, sl
 8005072:	2205      	movs	r2, #5
 8005074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005078:	4850      	ldr	r0, [pc, #320]	; (80051bc <_svfiprintf_r+0x1e8>)
 800507a:	f7fb f8b9 	bl	80001f0 <memchr>
 800507e:	9a04      	ldr	r2, [sp, #16]
 8005080:	b9d8      	cbnz	r0, 80050ba <_svfiprintf_r+0xe6>
 8005082:	06d0      	lsls	r0, r2, #27
 8005084:	bf44      	itt	mi
 8005086:	2320      	movmi	r3, #32
 8005088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800508c:	0711      	lsls	r1, r2, #28
 800508e:	bf44      	itt	mi
 8005090:	232b      	movmi	r3, #43	; 0x2b
 8005092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005096:	f89a 3000 	ldrb.w	r3, [sl]
 800509a:	2b2a      	cmp	r3, #42	; 0x2a
 800509c:	d015      	beq.n	80050ca <_svfiprintf_r+0xf6>
 800509e:	9a07      	ldr	r2, [sp, #28]
 80050a0:	4654      	mov	r4, sl
 80050a2:	2000      	movs	r0, #0
 80050a4:	f04f 0c0a 	mov.w	ip, #10
 80050a8:	4621      	mov	r1, r4
 80050aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ae:	3b30      	subs	r3, #48	; 0x30
 80050b0:	2b09      	cmp	r3, #9
 80050b2:	d94d      	bls.n	8005150 <_svfiprintf_r+0x17c>
 80050b4:	b1b0      	cbz	r0, 80050e4 <_svfiprintf_r+0x110>
 80050b6:	9207      	str	r2, [sp, #28]
 80050b8:	e014      	b.n	80050e4 <_svfiprintf_r+0x110>
 80050ba:	eba0 0308 	sub.w	r3, r0, r8
 80050be:	fa09 f303 	lsl.w	r3, r9, r3
 80050c2:	4313      	orrs	r3, r2
 80050c4:	9304      	str	r3, [sp, #16]
 80050c6:	46a2      	mov	sl, r4
 80050c8:	e7d2      	b.n	8005070 <_svfiprintf_r+0x9c>
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	1d19      	adds	r1, r3, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	9103      	str	r1, [sp, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bfbb      	ittet	lt
 80050d6:	425b      	neglt	r3, r3
 80050d8:	f042 0202 	orrlt.w	r2, r2, #2
 80050dc:	9307      	strge	r3, [sp, #28]
 80050de:	9307      	strlt	r3, [sp, #28]
 80050e0:	bfb8      	it	lt
 80050e2:	9204      	strlt	r2, [sp, #16]
 80050e4:	7823      	ldrb	r3, [r4, #0]
 80050e6:	2b2e      	cmp	r3, #46	; 0x2e
 80050e8:	d10c      	bne.n	8005104 <_svfiprintf_r+0x130>
 80050ea:	7863      	ldrb	r3, [r4, #1]
 80050ec:	2b2a      	cmp	r3, #42	; 0x2a
 80050ee:	d134      	bne.n	800515a <_svfiprintf_r+0x186>
 80050f0:	9b03      	ldr	r3, [sp, #12]
 80050f2:	1d1a      	adds	r2, r3, #4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	9203      	str	r2, [sp, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bfb8      	it	lt
 80050fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005100:	3402      	adds	r4, #2
 8005102:	9305      	str	r3, [sp, #20]
 8005104:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80051cc <_svfiprintf_r+0x1f8>
 8005108:	7821      	ldrb	r1, [r4, #0]
 800510a:	2203      	movs	r2, #3
 800510c:	4650      	mov	r0, sl
 800510e:	f7fb f86f 	bl	80001f0 <memchr>
 8005112:	b138      	cbz	r0, 8005124 <_svfiprintf_r+0x150>
 8005114:	9b04      	ldr	r3, [sp, #16]
 8005116:	eba0 000a 	sub.w	r0, r0, sl
 800511a:	2240      	movs	r2, #64	; 0x40
 800511c:	4082      	lsls	r2, r0
 800511e:	4313      	orrs	r3, r2
 8005120:	3401      	adds	r4, #1
 8005122:	9304      	str	r3, [sp, #16]
 8005124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005128:	4825      	ldr	r0, [pc, #148]	; (80051c0 <_svfiprintf_r+0x1ec>)
 800512a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800512e:	2206      	movs	r2, #6
 8005130:	f7fb f85e 	bl	80001f0 <memchr>
 8005134:	2800      	cmp	r0, #0
 8005136:	d038      	beq.n	80051aa <_svfiprintf_r+0x1d6>
 8005138:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <_svfiprintf_r+0x1f0>)
 800513a:	bb1b      	cbnz	r3, 8005184 <_svfiprintf_r+0x1b0>
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	3307      	adds	r3, #7
 8005140:	f023 0307 	bic.w	r3, r3, #7
 8005144:	3308      	adds	r3, #8
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514a:	4433      	add	r3, r6
 800514c:	9309      	str	r3, [sp, #36]	; 0x24
 800514e:	e768      	b.n	8005022 <_svfiprintf_r+0x4e>
 8005150:	fb0c 3202 	mla	r2, ip, r2, r3
 8005154:	460c      	mov	r4, r1
 8005156:	2001      	movs	r0, #1
 8005158:	e7a6      	b.n	80050a8 <_svfiprintf_r+0xd4>
 800515a:	2300      	movs	r3, #0
 800515c:	3401      	adds	r4, #1
 800515e:	9305      	str	r3, [sp, #20]
 8005160:	4619      	mov	r1, r3
 8005162:	f04f 0c0a 	mov.w	ip, #10
 8005166:	4620      	mov	r0, r4
 8005168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800516c:	3a30      	subs	r2, #48	; 0x30
 800516e:	2a09      	cmp	r2, #9
 8005170:	d903      	bls.n	800517a <_svfiprintf_r+0x1a6>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0c6      	beq.n	8005104 <_svfiprintf_r+0x130>
 8005176:	9105      	str	r1, [sp, #20]
 8005178:	e7c4      	b.n	8005104 <_svfiprintf_r+0x130>
 800517a:	fb0c 2101 	mla	r1, ip, r1, r2
 800517e:	4604      	mov	r4, r0
 8005180:	2301      	movs	r3, #1
 8005182:	e7f0      	b.n	8005166 <_svfiprintf_r+0x192>
 8005184:	ab03      	add	r3, sp, #12
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	462a      	mov	r2, r5
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <_svfiprintf_r+0x1f4>)
 800518c:	a904      	add	r1, sp, #16
 800518e:	4638      	mov	r0, r7
 8005190:	f3af 8000 	nop.w
 8005194:	1c42      	adds	r2, r0, #1
 8005196:	4606      	mov	r6, r0
 8005198:	d1d6      	bne.n	8005148 <_svfiprintf_r+0x174>
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	065b      	lsls	r3, r3, #25
 800519e:	f53f af2d 	bmi.w	8004ffc <_svfiprintf_r+0x28>
 80051a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051a4:	b01d      	add	sp, #116	; 0x74
 80051a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051aa:	ab03      	add	r3, sp, #12
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	462a      	mov	r2, r5
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <_svfiprintf_r+0x1f4>)
 80051b2:	a904      	add	r1, sp, #16
 80051b4:	4638      	mov	r0, r7
 80051b6:	f000 f879 	bl	80052ac <_printf_i>
 80051ba:	e7eb      	b.n	8005194 <_svfiprintf_r+0x1c0>
 80051bc:	0800b314 	.word	0x0800b314
 80051c0:	0800b31e 	.word	0x0800b31e
 80051c4:	00000000 	.word	0x00000000
 80051c8:	08004f21 	.word	0x08004f21
 80051cc:	0800b31a 	.word	0x0800b31a

080051d0 <_printf_common>:
 80051d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d4:	4616      	mov	r6, r2
 80051d6:	4699      	mov	r9, r3
 80051d8:	688a      	ldr	r2, [r1, #8]
 80051da:	690b      	ldr	r3, [r1, #16]
 80051dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051e0:	4293      	cmp	r3, r2
 80051e2:	bfb8      	it	lt
 80051e4:	4613      	movlt	r3, r2
 80051e6:	6033      	str	r3, [r6, #0]
 80051e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051ec:	4607      	mov	r7, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	b10a      	cbz	r2, 80051f6 <_printf_common+0x26>
 80051f2:	3301      	adds	r3, #1
 80051f4:	6033      	str	r3, [r6, #0]
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	0699      	lsls	r1, r3, #26
 80051fa:	bf42      	ittt	mi
 80051fc:	6833      	ldrmi	r3, [r6, #0]
 80051fe:	3302      	addmi	r3, #2
 8005200:	6033      	strmi	r3, [r6, #0]
 8005202:	6825      	ldr	r5, [r4, #0]
 8005204:	f015 0506 	ands.w	r5, r5, #6
 8005208:	d106      	bne.n	8005218 <_printf_common+0x48>
 800520a:	f104 0a19 	add.w	sl, r4, #25
 800520e:	68e3      	ldr	r3, [r4, #12]
 8005210:	6832      	ldr	r2, [r6, #0]
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	42ab      	cmp	r3, r5
 8005216:	dc26      	bgt.n	8005266 <_printf_common+0x96>
 8005218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800521c:	1e13      	subs	r3, r2, #0
 800521e:	6822      	ldr	r2, [r4, #0]
 8005220:	bf18      	it	ne
 8005222:	2301      	movne	r3, #1
 8005224:	0692      	lsls	r2, r2, #26
 8005226:	d42b      	bmi.n	8005280 <_printf_common+0xb0>
 8005228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800522c:	4649      	mov	r1, r9
 800522e:	4638      	mov	r0, r7
 8005230:	47c0      	blx	r8
 8005232:	3001      	adds	r0, #1
 8005234:	d01e      	beq.n	8005274 <_printf_common+0xa4>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	6922      	ldr	r2, [r4, #16]
 800523a:	f003 0306 	and.w	r3, r3, #6
 800523e:	2b04      	cmp	r3, #4
 8005240:	bf02      	ittt	eq
 8005242:	68e5      	ldreq	r5, [r4, #12]
 8005244:	6833      	ldreq	r3, [r6, #0]
 8005246:	1aed      	subeq	r5, r5, r3
 8005248:	68a3      	ldr	r3, [r4, #8]
 800524a:	bf0c      	ite	eq
 800524c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005250:	2500      	movne	r5, #0
 8005252:	4293      	cmp	r3, r2
 8005254:	bfc4      	itt	gt
 8005256:	1a9b      	subgt	r3, r3, r2
 8005258:	18ed      	addgt	r5, r5, r3
 800525a:	2600      	movs	r6, #0
 800525c:	341a      	adds	r4, #26
 800525e:	42b5      	cmp	r5, r6
 8005260:	d11a      	bne.n	8005298 <_printf_common+0xc8>
 8005262:	2000      	movs	r0, #0
 8005264:	e008      	b.n	8005278 <_printf_common+0xa8>
 8005266:	2301      	movs	r3, #1
 8005268:	4652      	mov	r2, sl
 800526a:	4649      	mov	r1, r9
 800526c:	4638      	mov	r0, r7
 800526e:	47c0      	blx	r8
 8005270:	3001      	adds	r0, #1
 8005272:	d103      	bne.n	800527c <_printf_common+0xac>
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527c:	3501      	adds	r5, #1
 800527e:	e7c6      	b.n	800520e <_printf_common+0x3e>
 8005280:	18e1      	adds	r1, r4, r3
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	2030      	movs	r0, #48	; 0x30
 8005286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800528a:	4422      	add	r2, r4
 800528c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005294:	3302      	adds	r3, #2
 8005296:	e7c7      	b.n	8005228 <_printf_common+0x58>
 8005298:	2301      	movs	r3, #1
 800529a:	4622      	mov	r2, r4
 800529c:	4649      	mov	r1, r9
 800529e:	4638      	mov	r0, r7
 80052a0:	47c0      	blx	r8
 80052a2:	3001      	adds	r0, #1
 80052a4:	d0e6      	beq.n	8005274 <_printf_common+0xa4>
 80052a6:	3601      	adds	r6, #1
 80052a8:	e7d9      	b.n	800525e <_printf_common+0x8e>
	...

080052ac <_printf_i>:
 80052ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b0:	7e0f      	ldrb	r7, [r1, #24]
 80052b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052b4:	2f78      	cmp	r7, #120	; 0x78
 80052b6:	4691      	mov	r9, r2
 80052b8:	4680      	mov	r8, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	469a      	mov	sl, r3
 80052be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052c2:	d807      	bhi.n	80052d4 <_printf_i+0x28>
 80052c4:	2f62      	cmp	r7, #98	; 0x62
 80052c6:	d80a      	bhi.n	80052de <_printf_i+0x32>
 80052c8:	2f00      	cmp	r7, #0
 80052ca:	f000 80d4 	beq.w	8005476 <_printf_i+0x1ca>
 80052ce:	2f58      	cmp	r7, #88	; 0x58
 80052d0:	f000 80c0 	beq.w	8005454 <_printf_i+0x1a8>
 80052d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052dc:	e03a      	b.n	8005354 <_printf_i+0xa8>
 80052de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052e2:	2b15      	cmp	r3, #21
 80052e4:	d8f6      	bhi.n	80052d4 <_printf_i+0x28>
 80052e6:	a101      	add	r1, pc, #4	; (adr r1, 80052ec <_printf_i+0x40>)
 80052e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052ec:	08005345 	.word	0x08005345
 80052f0:	08005359 	.word	0x08005359
 80052f4:	080052d5 	.word	0x080052d5
 80052f8:	080052d5 	.word	0x080052d5
 80052fc:	080052d5 	.word	0x080052d5
 8005300:	080052d5 	.word	0x080052d5
 8005304:	08005359 	.word	0x08005359
 8005308:	080052d5 	.word	0x080052d5
 800530c:	080052d5 	.word	0x080052d5
 8005310:	080052d5 	.word	0x080052d5
 8005314:	080052d5 	.word	0x080052d5
 8005318:	0800545d 	.word	0x0800545d
 800531c:	08005385 	.word	0x08005385
 8005320:	08005417 	.word	0x08005417
 8005324:	080052d5 	.word	0x080052d5
 8005328:	080052d5 	.word	0x080052d5
 800532c:	0800547f 	.word	0x0800547f
 8005330:	080052d5 	.word	0x080052d5
 8005334:	08005385 	.word	0x08005385
 8005338:	080052d5 	.word	0x080052d5
 800533c:	080052d5 	.word	0x080052d5
 8005340:	0800541f 	.word	0x0800541f
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	1d1a      	adds	r2, r3, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	602a      	str	r2, [r5, #0]
 800534c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005354:	2301      	movs	r3, #1
 8005356:	e09f      	b.n	8005498 <_printf_i+0x1ec>
 8005358:	6820      	ldr	r0, [r4, #0]
 800535a:	682b      	ldr	r3, [r5, #0]
 800535c:	0607      	lsls	r7, r0, #24
 800535e:	f103 0104 	add.w	r1, r3, #4
 8005362:	6029      	str	r1, [r5, #0]
 8005364:	d501      	bpl.n	800536a <_printf_i+0xbe>
 8005366:	681e      	ldr	r6, [r3, #0]
 8005368:	e003      	b.n	8005372 <_printf_i+0xc6>
 800536a:	0646      	lsls	r6, r0, #25
 800536c:	d5fb      	bpl.n	8005366 <_printf_i+0xba>
 800536e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005372:	2e00      	cmp	r6, #0
 8005374:	da03      	bge.n	800537e <_printf_i+0xd2>
 8005376:	232d      	movs	r3, #45	; 0x2d
 8005378:	4276      	negs	r6, r6
 800537a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800537e:	485a      	ldr	r0, [pc, #360]	; (80054e8 <_printf_i+0x23c>)
 8005380:	230a      	movs	r3, #10
 8005382:	e012      	b.n	80053aa <_printf_i+0xfe>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	6820      	ldr	r0, [r4, #0]
 8005388:	1d19      	adds	r1, r3, #4
 800538a:	6029      	str	r1, [r5, #0]
 800538c:	0605      	lsls	r5, r0, #24
 800538e:	d501      	bpl.n	8005394 <_printf_i+0xe8>
 8005390:	681e      	ldr	r6, [r3, #0]
 8005392:	e002      	b.n	800539a <_printf_i+0xee>
 8005394:	0641      	lsls	r1, r0, #25
 8005396:	d5fb      	bpl.n	8005390 <_printf_i+0xe4>
 8005398:	881e      	ldrh	r6, [r3, #0]
 800539a:	4853      	ldr	r0, [pc, #332]	; (80054e8 <_printf_i+0x23c>)
 800539c:	2f6f      	cmp	r7, #111	; 0x6f
 800539e:	bf0c      	ite	eq
 80053a0:	2308      	moveq	r3, #8
 80053a2:	230a      	movne	r3, #10
 80053a4:	2100      	movs	r1, #0
 80053a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053aa:	6865      	ldr	r5, [r4, #4]
 80053ac:	60a5      	str	r5, [r4, #8]
 80053ae:	2d00      	cmp	r5, #0
 80053b0:	bfa2      	ittt	ge
 80053b2:	6821      	ldrge	r1, [r4, #0]
 80053b4:	f021 0104 	bicge.w	r1, r1, #4
 80053b8:	6021      	strge	r1, [r4, #0]
 80053ba:	b90e      	cbnz	r6, 80053c0 <_printf_i+0x114>
 80053bc:	2d00      	cmp	r5, #0
 80053be:	d04b      	beq.n	8005458 <_printf_i+0x1ac>
 80053c0:	4615      	mov	r5, r2
 80053c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053c6:	fb03 6711 	mls	r7, r3, r1, r6
 80053ca:	5dc7      	ldrb	r7, [r0, r7]
 80053cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053d0:	4637      	mov	r7, r6
 80053d2:	42bb      	cmp	r3, r7
 80053d4:	460e      	mov	r6, r1
 80053d6:	d9f4      	bls.n	80053c2 <_printf_i+0x116>
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d10b      	bne.n	80053f4 <_printf_i+0x148>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	07de      	lsls	r6, r3, #31
 80053e0:	d508      	bpl.n	80053f4 <_printf_i+0x148>
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	6861      	ldr	r1, [r4, #4]
 80053e6:	4299      	cmp	r1, r3
 80053e8:	bfde      	ittt	le
 80053ea:	2330      	movle	r3, #48	; 0x30
 80053ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053f4:	1b52      	subs	r2, r2, r5
 80053f6:	6122      	str	r2, [r4, #16]
 80053f8:	f8cd a000 	str.w	sl, [sp]
 80053fc:	464b      	mov	r3, r9
 80053fe:	aa03      	add	r2, sp, #12
 8005400:	4621      	mov	r1, r4
 8005402:	4640      	mov	r0, r8
 8005404:	f7ff fee4 	bl	80051d0 <_printf_common>
 8005408:	3001      	adds	r0, #1
 800540a:	d14a      	bne.n	80054a2 <_printf_i+0x1f6>
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	b004      	add	sp, #16
 8005412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	f043 0320 	orr.w	r3, r3, #32
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	4833      	ldr	r0, [pc, #204]	; (80054ec <_printf_i+0x240>)
 8005420:	2778      	movs	r7, #120	; 0x78
 8005422:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	6829      	ldr	r1, [r5, #0]
 800542a:	061f      	lsls	r7, r3, #24
 800542c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005430:	d402      	bmi.n	8005438 <_printf_i+0x18c>
 8005432:	065f      	lsls	r7, r3, #25
 8005434:	bf48      	it	mi
 8005436:	b2b6      	uxthmi	r6, r6
 8005438:	07df      	lsls	r7, r3, #31
 800543a:	bf48      	it	mi
 800543c:	f043 0320 	orrmi.w	r3, r3, #32
 8005440:	6029      	str	r1, [r5, #0]
 8005442:	bf48      	it	mi
 8005444:	6023      	strmi	r3, [r4, #0]
 8005446:	b91e      	cbnz	r6, 8005450 <_printf_i+0x1a4>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	f023 0320 	bic.w	r3, r3, #32
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	2310      	movs	r3, #16
 8005452:	e7a7      	b.n	80053a4 <_printf_i+0xf8>
 8005454:	4824      	ldr	r0, [pc, #144]	; (80054e8 <_printf_i+0x23c>)
 8005456:	e7e4      	b.n	8005422 <_printf_i+0x176>
 8005458:	4615      	mov	r5, r2
 800545a:	e7bd      	b.n	80053d8 <_printf_i+0x12c>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	6826      	ldr	r6, [r4, #0]
 8005460:	6961      	ldr	r1, [r4, #20]
 8005462:	1d18      	adds	r0, r3, #4
 8005464:	6028      	str	r0, [r5, #0]
 8005466:	0635      	lsls	r5, r6, #24
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	d501      	bpl.n	8005470 <_printf_i+0x1c4>
 800546c:	6019      	str	r1, [r3, #0]
 800546e:	e002      	b.n	8005476 <_printf_i+0x1ca>
 8005470:	0670      	lsls	r0, r6, #25
 8005472:	d5fb      	bpl.n	800546c <_printf_i+0x1c0>
 8005474:	8019      	strh	r1, [r3, #0]
 8005476:	2300      	movs	r3, #0
 8005478:	6123      	str	r3, [r4, #16]
 800547a:	4615      	mov	r5, r2
 800547c:	e7bc      	b.n	80053f8 <_printf_i+0x14c>
 800547e:	682b      	ldr	r3, [r5, #0]
 8005480:	1d1a      	adds	r2, r3, #4
 8005482:	602a      	str	r2, [r5, #0]
 8005484:	681d      	ldr	r5, [r3, #0]
 8005486:	6862      	ldr	r2, [r4, #4]
 8005488:	2100      	movs	r1, #0
 800548a:	4628      	mov	r0, r5
 800548c:	f7fa feb0 	bl	80001f0 <memchr>
 8005490:	b108      	cbz	r0, 8005496 <_printf_i+0x1ea>
 8005492:	1b40      	subs	r0, r0, r5
 8005494:	6060      	str	r0, [r4, #4]
 8005496:	6863      	ldr	r3, [r4, #4]
 8005498:	6123      	str	r3, [r4, #16]
 800549a:	2300      	movs	r3, #0
 800549c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a0:	e7aa      	b.n	80053f8 <_printf_i+0x14c>
 80054a2:	6923      	ldr	r3, [r4, #16]
 80054a4:	462a      	mov	r2, r5
 80054a6:	4649      	mov	r1, r9
 80054a8:	4640      	mov	r0, r8
 80054aa:	47d0      	blx	sl
 80054ac:	3001      	adds	r0, #1
 80054ae:	d0ad      	beq.n	800540c <_printf_i+0x160>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	079b      	lsls	r3, r3, #30
 80054b4:	d413      	bmi.n	80054de <_printf_i+0x232>
 80054b6:	68e0      	ldr	r0, [r4, #12]
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	4298      	cmp	r0, r3
 80054bc:	bfb8      	it	lt
 80054be:	4618      	movlt	r0, r3
 80054c0:	e7a6      	b.n	8005410 <_printf_i+0x164>
 80054c2:	2301      	movs	r3, #1
 80054c4:	4632      	mov	r2, r6
 80054c6:	4649      	mov	r1, r9
 80054c8:	4640      	mov	r0, r8
 80054ca:	47d0      	blx	sl
 80054cc:	3001      	adds	r0, #1
 80054ce:	d09d      	beq.n	800540c <_printf_i+0x160>
 80054d0:	3501      	adds	r5, #1
 80054d2:	68e3      	ldr	r3, [r4, #12]
 80054d4:	9903      	ldr	r1, [sp, #12]
 80054d6:	1a5b      	subs	r3, r3, r1
 80054d8:	42ab      	cmp	r3, r5
 80054da:	dcf2      	bgt.n	80054c2 <_printf_i+0x216>
 80054dc:	e7eb      	b.n	80054b6 <_printf_i+0x20a>
 80054de:	2500      	movs	r5, #0
 80054e0:	f104 0619 	add.w	r6, r4, #25
 80054e4:	e7f5      	b.n	80054d2 <_printf_i+0x226>
 80054e6:	bf00      	nop
 80054e8:	0800b325 	.word	0x0800b325
 80054ec:	0800b336 	.word	0x0800b336

080054f0 <_sbrk_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4d06      	ldr	r5, [pc, #24]	; (800550c <_sbrk_r+0x1c>)
 80054f4:	2300      	movs	r3, #0
 80054f6:	4604      	mov	r4, r0
 80054f8:	4608      	mov	r0, r1
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	f7fd fa32 	bl	8002964 <_sbrk>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_sbrk_r+0x1a>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_sbrk_r+0x1a>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	200006b4 	.word	0x200006b4

08005510 <_realloc_r>:
 8005510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005514:	4680      	mov	r8, r0
 8005516:	4614      	mov	r4, r2
 8005518:	460e      	mov	r6, r1
 800551a:	b921      	cbnz	r1, 8005526 <_realloc_r+0x16>
 800551c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005520:	4611      	mov	r1, r2
 8005522:	f7ff bc71 	b.w	8004e08 <_malloc_r>
 8005526:	b92a      	cbnz	r2, 8005534 <_realloc_r+0x24>
 8005528:	f7ff fc02 	bl	8004d30 <_free_r>
 800552c:	4625      	mov	r5, r4
 800552e:	4628      	mov	r0, r5
 8005530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005534:	f000 f81b 	bl	800556e <_malloc_usable_size_r>
 8005538:	4284      	cmp	r4, r0
 800553a:	4607      	mov	r7, r0
 800553c:	d802      	bhi.n	8005544 <_realloc_r+0x34>
 800553e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005542:	d812      	bhi.n	800556a <_realloc_r+0x5a>
 8005544:	4621      	mov	r1, r4
 8005546:	4640      	mov	r0, r8
 8005548:	f7ff fc5e 	bl	8004e08 <_malloc_r>
 800554c:	4605      	mov	r5, r0
 800554e:	2800      	cmp	r0, #0
 8005550:	d0ed      	beq.n	800552e <_realloc_r+0x1e>
 8005552:	42bc      	cmp	r4, r7
 8005554:	4622      	mov	r2, r4
 8005556:	4631      	mov	r1, r6
 8005558:	bf28      	it	cs
 800555a:	463a      	movcs	r2, r7
 800555c:	f7ff fbda 	bl	8004d14 <memcpy>
 8005560:	4631      	mov	r1, r6
 8005562:	4640      	mov	r0, r8
 8005564:	f7ff fbe4 	bl	8004d30 <_free_r>
 8005568:	e7e1      	b.n	800552e <_realloc_r+0x1e>
 800556a:	4635      	mov	r5, r6
 800556c:	e7df      	b.n	800552e <_realloc_r+0x1e>

0800556e <_malloc_usable_size_r>:
 800556e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005572:	1f18      	subs	r0, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	bfbc      	itt	lt
 8005578:	580b      	ldrlt	r3, [r1, r0]
 800557a:	18c0      	addlt	r0, r0, r3
 800557c:	4770      	bx	lr
	...

08005580 <cosf>:
 8005580:	ee10 3a10 	vmov	r3, s0
 8005584:	b507      	push	{r0, r1, r2, lr}
 8005586:	4a1e      	ldr	r2, [pc, #120]	; (8005600 <cosf+0x80>)
 8005588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800558c:	4293      	cmp	r3, r2
 800558e:	dc06      	bgt.n	800559e <cosf+0x1e>
 8005590:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8005604 <cosf+0x84>
 8005594:	b003      	add	sp, #12
 8005596:	f85d eb04 	ldr.w	lr, [sp], #4
 800559a:	f000 b87b 	b.w	8005694 <__kernel_cosf>
 800559e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80055a2:	db04      	blt.n	80055ae <cosf+0x2e>
 80055a4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80055a8:	b003      	add	sp, #12
 80055aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80055ae:	4668      	mov	r0, sp
 80055b0:	f000 f916 	bl	80057e0 <__ieee754_rem_pio2f>
 80055b4:	f000 0003 	and.w	r0, r0, #3
 80055b8:	2801      	cmp	r0, #1
 80055ba:	d009      	beq.n	80055d0 <cosf+0x50>
 80055bc:	2802      	cmp	r0, #2
 80055be:	d010      	beq.n	80055e2 <cosf+0x62>
 80055c0:	b9b0      	cbnz	r0, 80055f0 <cosf+0x70>
 80055c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80055c6:	ed9d 0a00 	vldr	s0, [sp]
 80055ca:	f000 f863 	bl	8005694 <__kernel_cosf>
 80055ce:	e7eb      	b.n	80055a8 <cosf+0x28>
 80055d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80055d4:	ed9d 0a00 	vldr	s0, [sp]
 80055d8:	f000 f8ba 	bl	8005750 <__kernel_sinf>
 80055dc:	eeb1 0a40 	vneg.f32	s0, s0
 80055e0:	e7e2      	b.n	80055a8 <cosf+0x28>
 80055e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80055e6:	ed9d 0a00 	vldr	s0, [sp]
 80055ea:	f000 f853 	bl	8005694 <__kernel_cosf>
 80055ee:	e7f5      	b.n	80055dc <cosf+0x5c>
 80055f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80055f4:	ed9d 0a00 	vldr	s0, [sp]
 80055f8:	2001      	movs	r0, #1
 80055fa:	f000 f8a9 	bl	8005750 <__kernel_sinf>
 80055fe:	e7d3      	b.n	80055a8 <cosf+0x28>
 8005600:	3f490fd8 	.word	0x3f490fd8
 8005604:	00000000 	.word	0x00000000

08005608 <sinf>:
 8005608:	ee10 3a10 	vmov	r3, s0
 800560c:	b507      	push	{r0, r1, r2, lr}
 800560e:	4a1f      	ldr	r2, [pc, #124]	; (800568c <sinf+0x84>)
 8005610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005614:	4293      	cmp	r3, r2
 8005616:	dc07      	bgt.n	8005628 <sinf+0x20>
 8005618:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8005690 <sinf+0x88>
 800561c:	2000      	movs	r0, #0
 800561e:	b003      	add	sp, #12
 8005620:	f85d eb04 	ldr.w	lr, [sp], #4
 8005624:	f000 b894 	b.w	8005750 <__kernel_sinf>
 8005628:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800562c:	db04      	blt.n	8005638 <sinf+0x30>
 800562e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005632:	b003      	add	sp, #12
 8005634:	f85d fb04 	ldr.w	pc, [sp], #4
 8005638:	4668      	mov	r0, sp
 800563a:	f000 f8d1 	bl	80057e0 <__ieee754_rem_pio2f>
 800563e:	f000 0003 	and.w	r0, r0, #3
 8005642:	2801      	cmp	r0, #1
 8005644:	d00a      	beq.n	800565c <sinf+0x54>
 8005646:	2802      	cmp	r0, #2
 8005648:	d00f      	beq.n	800566a <sinf+0x62>
 800564a:	b9c0      	cbnz	r0, 800567e <sinf+0x76>
 800564c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005650:	ed9d 0a00 	vldr	s0, [sp]
 8005654:	2001      	movs	r0, #1
 8005656:	f000 f87b 	bl	8005750 <__kernel_sinf>
 800565a:	e7ea      	b.n	8005632 <sinf+0x2a>
 800565c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005660:	ed9d 0a00 	vldr	s0, [sp]
 8005664:	f000 f816 	bl	8005694 <__kernel_cosf>
 8005668:	e7e3      	b.n	8005632 <sinf+0x2a>
 800566a:	eddd 0a01 	vldr	s1, [sp, #4]
 800566e:	ed9d 0a00 	vldr	s0, [sp]
 8005672:	2001      	movs	r0, #1
 8005674:	f000 f86c 	bl	8005750 <__kernel_sinf>
 8005678:	eeb1 0a40 	vneg.f32	s0, s0
 800567c:	e7d9      	b.n	8005632 <sinf+0x2a>
 800567e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005682:	ed9d 0a00 	vldr	s0, [sp]
 8005686:	f000 f805 	bl	8005694 <__kernel_cosf>
 800568a:	e7f5      	b.n	8005678 <sinf+0x70>
 800568c:	3f490fd8 	.word	0x3f490fd8
 8005690:	00000000 	.word	0x00000000

08005694 <__kernel_cosf>:
 8005694:	ee10 3a10 	vmov	r3, s0
 8005698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800569c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80056a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a4:	da05      	bge.n	80056b2 <__kernel_cosf+0x1e>
 80056a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80056aa:	ee17 2a90 	vmov	r2, s15
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	d03b      	beq.n	800572a <__kernel_cosf+0x96>
 80056b2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80056b6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8005730 <__kernel_cosf+0x9c>
 80056ba:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8005734 <__kernel_cosf+0xa0>
 80056be:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <__kernel_cosf+0xa4>)
 80056c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80056c4:	4293      	cmp	r3, r2
 80056c6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800573c <__kernel_cosf+0xa8>
 80056ca:	eee6 7a07 	vfma.f32	s15, s12, s14
 80056ce:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8005740 <__kernel_cosf+0xac>
 80056d2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80056d6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8005744 <__kernel_cosf+0xb0>
 80056da:	eee6 7a07 	vfma.f32	s15, s12, s14
 80056de:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8005748 <__kernel_cosf+0xb4>
 80056e2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80056e6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80056ea:	ee26 6a07 	vmul.f32	s12, s12, s14
 80056ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80056f2:	eee7 0a06 	vfma.f32	s1, s14, s12
 80056f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fa:	dc04      	bgt.n	8005706 <__kernel_cosf+0x72>
 80056fc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005700:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8005704:	4770      	bx	lr
 8005706:	4a11      	ldr	r2, [pc, #68]	; (800574c <__kernel_cosf+0xb8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	bfda      	itte	le
 800570c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8005710:	ee07 3a10 	vmovle	s14, r3
 8005714:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8005718:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800571c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8005720:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005724:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005728:	4770      	bx	lr
 800572a:	eeb0 0a66 	vmov.f32	s0, s13
 800572e:	4770      	bx	lr
 8005730:	ad47d74e 	.word	0xad47d74e
 8005734:	310f74f6 	.word	0x310f74f6
 8005738:	3e999999 	.word	0x3e999999
 800573c:	b493f27c 	.word	0xb493f27c
 8005740:	37d00d01 	.word	0x37d00d01
 8005744:	bab60b61 	.word	0xbab60b61
 8005748:	3d2aaaab 	.word	0x3d2aaaab
 800574c:	3f480000 	.word	0x3f480000

08005750 <__kernel_sinf>:
 8005750:	ee10 3a10 	vmov	r3, s0
 8005754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005758:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800575c:	da04      	bge.n	8005768 <__kernel_sinf+0x18>
 800575e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005762:	ee17 3a90 	vmov	r3, s15
 8005766:	b35b      	cbz	r3, 80057c0 <__kernel_sinf+0x70>
 8005768:	ee20 7a00 	vmul.f32	s14, s0, s0
 800576c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80057c4 <__kernel_sinf+0x74>
 8005770:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80057c8 <__kernel_sinf+0x78>
 8005774:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005778:	eddf 7a14 	vldr	s15, [pc, #80]	; 80057cc <__kernel_sinf+0x7c>
 800577c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005780:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80057d0 <__kernel_sinf+0x80>
 8005784:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005788:	eddf 7a12 	vldr	s15, [pc, #72]	; 80057d4 <__kernel_sinf+0x84>
 800578c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005790:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005794:	b930      	cbnz	r0, 80057a4 <__kernel_sinf+0x54>
 8005796:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80057d8 <__kernel_sinf+0x88>
 800579a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800579e:	eea6 0a26 	vfma.f32	s0, s12, s13
 80057a2:	4770      	bx	lr
 80057a4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80057a8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80057ac:	eee0 7a86 	vfma.f32	s15, s1, s12
 80057b0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80057b4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80057dc <__kernel_sinf+0x8c>
 80057b8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80057bc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	2f2ec9d3 	.word	0x2f2ec9d3
 80057c8:	b2d72f34 	.word	0xb2d72f34
 80057cc:	3638ef1b 	.word	0x3638ef1b
 80057d0:	b9500d01 	.word	0xb9500d01
 80057d4:	3c088889 	.word	0x3c088889
 80057d8:	be2aaaab 	.word	0xbe2aaaab
 80057dc:	3e2aaaab 	.word	0x3e2aaaab

080057e0 <__ieee754_rem_pio2f>:
 80057e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e2:	ee10 6a10 	vmov	r6, s0
 80057e6:	4b86      	ldr	r3, [pc, #536]	; (8005a00 <__ieee754_rem_pio2f+0x220>)
 80057e8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80057ec:	429d      	cmp	r5, r3
 80057ee:	b087      	sub	sp, #28
 80057f0:	4604      	mov	r4, r0
 80057f2:	dc05      	bgt.n	8005800 <__ieee754_rem_pio2f+0x20>
 80057f4:	2300      	movs	r3, #0
 80057f6:	ed80 0a00 	vstr	s0, [r0]
 80057fa:	6043      	str	r3, [r0, #4]
 80057fc:	2000      	movs	r0, #0
 80057fe:	e020      	b.n	8005842 <__ieee754_rem_pio2f+0x62>
 8005800:	4b80      	ldr	r3, [pc, #512]	; (8005a04 <__ieee754_rem_pio2f+0x224>)
 8005802:	429d      	cmp	r5, r3
 8005804:	dc38      	bgt.n	8005878 <__ieee754_rem_pio2f+0x98>
 8005806:	2e00      	cmp	r6, #0
 8005808:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8005a08 <__ieee754_rem_pio2f+0x228>
 800580c:	4b7f      	ldr	r3, [pc, #508]	; (8005a0c <__ieee754_rem_pio2f+0x22c>)
 800580e:	f025 050f 	bic.w	r5, r5, #15
 8005812:	dd18      	ble.n	8005846 <__ieee754_rem_pio2f+0x66>
 8005814:	429d      	cmp	r5, r3
 8005816:	ee70 7a47 	vsub.f32	s15, s0, s14
 800581a:	bf09      	itett	eq
 800581c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8005a10 <__ieee754_rem_pio2f+0x230>
 8005820:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8005a14 <__ieee754_rem_pio2f+0x234>
 8005824:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005828:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8005a18 <__ieee754_rem_pio2f+0x238>
 800582c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005830:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005834:	edc0 6a00 	vstr	s13, [r0]
 8005838:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800583c:	edc0 7a01 	vstr	s15, [r0, #4]
 8005840:	2001      	movs	r0, #1
 8005842:	b007      	add	sp, #28
 8005844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005846:	429d      	cmp	r5, r3
 8005848:	ee70 7a07 	vadd.f32	s15, s0, s14
 800584c:	bf09      	itett	eq
 800584e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8005a10 <__ieee754_rem_pio2f+0x230>
 8005852:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8005a14 <__ieee754_rem_pio2f+0x234>
 8005856:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800585a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8005a18 <__ieee754_rem_pio2f+0x238>
 800585e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005862:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005866:	edc0 6a00 	vstr	s13, [r0]
 800586a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800586e:	edc0 7a01 	vstr	s15, [r0, #4]
 8005872:	f04f 30ff 	mov.w	r0, #4294967295
 8005876:	e7e4      	b.n	8005842 <__ieee754_rem_pio2f+0x62>
 8005878:	4b68      	ldr	r3, [pc, #416]	; (8005a1c <__ieee754_rem_pio2f+0x23c>)
 800587a:	429d      	cmp	r5, r3
 800587c:	dc71      	bgt.n	8005962 <__ieee754_rem_pio2f+0x182>
 800587e:	f000 f8db 	bl	8005a38 <fabsf>
 8005882:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005a20 <__ieee754_rem_pio2f+0x240>
 8005886:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800588a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800588e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005892:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005896:	ee17 0a90 	vmov	r0, s15
 800589a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005a08 <__ieee754_rem_pio2f+0x228>
 800589e:	eea7 0a67 	vfms.f32	s0, s14, s15
 80058a2:	281f      	cmp	r0, #31
 80058a4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005a14 <__ieee754_rem_pio2f+0x234>
 80058a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ac:	eeb1 6a47 	vneg.f32	s12, s14
 80058b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80058b4:	ee16 2a90 	vmov	r2, s13
 80058b8:	dc1c      	bgt.n	80058f4 <__ieee754_rem_pio2f+0x114>
 80058ba:	495a      	ldr	r1, [pc, #360]	; (8005a24 <__ieee754_rem_pio2f+0x244>)
 80058bc:	1e47      	subs	r7, r0, #1
 80058be:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80058c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80058c6:	428b      	cmp	r3, r1
 80058c8:	d014      	beq.n	80058f4 <__ieee754_rem_pio2f+0x114>
 80058ca:	6022      	str	r2, [r4, #0]
 80058cc:	ed94 7a00 	vldr	s14, [r4]
 80058d0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80058d4:	2e00      	cmp	r6, #0
 80058d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80058da:	ed84 0a01 	vstr	s0, [r4, #4]
 80058de:	dab0      	bge.n	8005842 <__ieee754_rem_pio2f+0x62>
 80058e0:	eeb1 7a47 	vneg.f32	s14, s14
 80058e4:	eeb1 0a40 	vneg.f32	s0, s0
 80058e8:	ed84 7a00 	vstr	s14, [r4]
 80058ec:	ed84 0a01 	vstr	s0, [r4, #4]
 80058f0:	4240      	negs	r0, r0
 80058f2:	e7a6      	b.n	8005842 <__ieee754_rem_pio2f+0x62>
 80058f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80058f8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80058fc:	2908      	cmp	r1, #8
 80058fe:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005902:	dde2      	ble.n	80058ca <__ieee754_rem_pio2f+0xea>
 8005904:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005a10 <__ieee754_rem_pio2f+0x230>
 8005908:	eef0 6a40 	vmov.f32	s13, s0
 800590c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005910:	ee70 7a66 	vsub.f32	s15, s0, s13
 8005914:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005918:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a18 <__ieee754_rem_pio2f+0x238>
 800591c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005920:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005924:	ee15 2a90 	vmov	r2, s11
 8005928:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800592c:	1a5b      	subs	r3, r3, r1
 800592e:	2b19      	cmp	r3, #25
 8005930:	dc04      	bgt.n	800593c <__ieee754_rem_pio2f+0x15c>
 8005932:	edc4 5a00 	vstr	s11, [r4]
 8005936:	eeb0 0a66 	vmov.f32	s0, s13
 800593a:	e7c7      	b.n	80058cc <__ieee754_rem_pio2f+0xec>
 800593c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005a28 <__ieee754_rem_pio2f+0x248>
 8005940:	eeb0 0a66 	vmov.f32	s0, s13
 8005944:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005948:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800594c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005a2c <__ieee754_rem_pio2f+0x24c>
 8005950:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005954:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005958:	ee30 7a67 	vsub.f32	s14, s0, s15
 800595c:	ed84 7a00 	vstr	s14, [r4]
 8005960:	e7b4      	b.n	80058cc <__ieee754_rem_pio2f+0xec>
 8005962:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005966:	db06      	blt.n	8005976 <__ieee754_rem_pio2f+0x196>
 8005968:	ee70 7a40 	vsub.f32	s15, s0, s0
 800596c:	edc0 7a01 	vstr	s15, [r0, #4]
 8005970:	edc0 7a00 	vstr	s15, [r0]
 8005974:	e742      	b.n	80057fc <__ieee754_rem_pio2f+0x1c>
 8005976:	15ea      	asrs	r2, r5, #23
 8005978:	3a86      	subs	r2, #134	; 0x86
 800597a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005986:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8005a30 <__ieee754_rem_pio2f+0x250>
 800598a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800598e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005992:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005996:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800599a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800599e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80059a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059a6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80059aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80059ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80059b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b6:	edcd 7a05 	vstr	s15, [sp, #20]
 80059ba:	d11e      	bne.n	80059fa <__ieee754_rem_pio2f+0x21a>
 80059bc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80059c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c4:	bf14      	ite	ne
 80059c6:	2302      	movne	r3, #2
 80059c8:	2301      	moveq	r3, #1
 80059ca:	491a      	ldr	r1, [pc, #104]	; (8005a34 <__ieee754_rem_pio2f+0x254>)
 80059cc:	9101      	str	r1, [sp, #4]
 80059ce:	2102      	movs	r1, #2
 80059d0:	9100      	str	r1, [sp, #0]
 80059d2:	a803      	add	r0, sp, #12
 80059d4:	4621      	mov	r1, r4
 80059d6:	f000 f837 	bl	8005a48 <__kernel_rem_pio2f>
 80059da:	2e00      	cmp	r6, #0
 80059dc:	f6bf af31 	bge.w	8005842 <__ieee754_rem_pio2f+0x62>
 80059e0:	edd4 7a00 	vldr	s15, [r4]
 80059e4:	eef1 7a67 	vneg.f32	s15, s15
 80059e8:	edc4 7a00 	vstr	s15, [r4]
 80059ec:	edd4 7a01 	vldr	s15, [r4, #4]
 80059f0:	eef1 7a67 	vneg.f32	s15, s15
 80059f4:	edc4 7a01 	vstr	s15, [r4, #4]
 80059f8:	e77a      	b.n	80058f0 <__ieee754_rem_pio2f+0x110>
 80059fa:	2303      	movs	r3, #3
 80059fc:	e7e5      	b.n	80059ca <__ieee754_rem_pio2f+0x1ea>
 80059fe:	bf00      	nop
 8005a00:	3f490fd8 	.word	0x3f490fd8
 8005a04:	4016cbe3 	.word	0x4016cbe3
 8005a08:	3fc90f80 	.word	0x3fc90f80
 8005a0c:	3fc90fd0 	.word	0x3fc90fd0
 8005a10:	37354400 	.word	0x37354400
 8005a14:	37354443 	.word	0x37354443
 8005a18:	2e85a308 	.word	0x2e85a308
 8005a1c:	43490f80 	.word	0x43490f80
 8005a20:	3f22f984 	.word	0x3f22f984
 8005a24:	0800b348 	.word	0x0800b348
 8005a28:	2e85a300 	.word	0x2e85a300
 8005a2c:	248d3132 	.word	0x248d3132
 8005a30:	43800000 	.word	0x43800000
 8005a34:	0800b3c8 	.word	0x0800b3c8

08005a38 <fabsf>:
 8005a38:	ee10 3a10 	vmov	r3, s0
 8005a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a40:	ee00 3a10 	vmov	s0, r3
 8005a44:	4770      	bx	lr
	...

08005a48 <__kernel_rem_pio2f>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	ed2d 8b04 	vpush	{d8-d9}
 8005a50:	b0d9      	sub	sp, #356	; 0x164
 8005a52:	4688      	mov	r8, r1
 8005a54:	9002      	str	r0, [sp, #8]
 8005a56:	49b8      	ldr	r1, [pc, #736]	; (8005d38 <__kernel_rem_pio2f+0x2f0>)
 8005a58:	9866      	ldr	r0, [sp, #408]	; 0x198
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8005a60:	9901      	ldr	r1, [sp, #4]
 8005a62:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8005a64:	f101 3bff 	add.w	fp, r1, #4294967295
 8005a68:	1d11      	adds	r1, r2, #4
 8005a6a:	db25      	blt.n	8005ab8 <__kernel_rem_pio2f+0x70>
 8005a6c:	1ed0      	subs	r0, r2, #3
 8005a6e:	bf48      	it	mi
 8005a70:	1d10      	addmi	r0, r2, #4
 8005a72:	10c0      	asrs	r0, r0, #3
 8005a74:	1c45      	adds	r5, r0, #1
 8005a76:	00e9      	lsls	r1, r5, #3
 8005a78:	eba0 070b 	sub.w	r7, r0, fp
 8005a7c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8005d48 <__kernel_rem_pio2f+0x300>
 8005a80:	9103      	str	r1, [sp, #12]
 8005a82:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8005a86:	eb0a 0c0b 	add.w	ip, sl, fp
 8005a8a:	ae1c      	add	r6, sp, #112	; 0x70
 8005a8c:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8005a90:	2400      	movs	r4, #0
 8005a92:	4564      	cmp	r4, ip
 8005a94:	dd12      	ble.n	8005abc <__kernel_rem_pio2f+0x74>
 8005a96:	9901      	ldr	r1, [sp, #4]
 8005a98:	ac1c      	add	r4, sp, #112	; 0x70
 8005a9a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005a9e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8005aa2:	f04f 0c00 	mov.w	ip, #0
 8005aa6:	45d4      	cmp	ip, sl
 8005aa8:	dc27      	bgt.n	8005afa <__kernel_rem_pio2f+0xb2>
 8005aaa:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005aae:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8005d48 <__kernel_rem_pio2f+0x300>
 8005ab2:	4627      	mov	r7, r4
 8005ab4:	2600      	movs	r6, #0
 8005ab6:	e016      	b.n	8005ae6 <__kernel_rem_pio2f+0x9e>
 8005ab8:	2000      	movs	r0, #0
 8005aba:	e7db      	b.n	8005a74 <__kernel_rem_pio2f+0x2c>
 8005abc:	42e7      	cmn	r7, r4
 8005abe:	bf5d      	ittte	pl
 8005ac0:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8005ac4:	ee07 1a90 	vmovpl	s15, r1
 8005ac8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005acc:	eef0 7a47 	vmovmi.f32	s15, s14
 8005ad0:	ece6 7a01 	vstmia	r6!, {s15}
 8005ad4:	3401      	adds	r4, #1
 8005ad6:	e7dc      	b.n	8005a92 <__kernel_rem_pio2f+0x4a>
 8005ad8:	ecfe 6a01 	vldmia	lr!, {s13}
 8005adc:	ed97 7a00 	vldr	s14, [r7]
 8005ae0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	455e      	cmp	r6, fp
 8005ae8:	f1a7 0704 	sub.w	r7, r7, #4
 8005aec:	ddf4      	ble.n	8005ad8 <__kernel_rem_pio2f+0x90>
 8005aee:	ece9 7a01 	vstmia	r9!, {s15}
 8005af2:	f10c 0c01 	add.w	ip, ip, #1
 8005af6:	3404      	adds	r4, #4
 8005af8:	e7d5      	b.n	8005aa6 <__kernel_rem_pio2f+0x5e>
 8005afa:	a908      	add	r1, sp, #32
 8005afc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b00:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005b04:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8005d44 <__kernel_rem_pio2f+0x2fc>
 8005b08:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8005d40 <__kernel_rem_pio2f+0x2f8>
 8005b0c:	9105      	str	r1, [sp, #20]
 8005b0e:	9304      	str	r3, [sp, #16]
 8005b10:	4656      	mov	r6, sl
 8005b12:	00b3      	lsls	r3, r6, #2
 8005b14:	9306      	str	r3, [sp, #24]
 8005b16:	ab58      	add	r3, sp, #352	; 0x160
 8005b18:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8005b1c:	ac08      	add	r4, sp, #32
 8005b1e:	ab44      	add	r3, sp, #272	; 0x110
 8005b20:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8005b24:	46a4      	mov	ip, r4
 8005b26:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8005b2a:	4637      	mov	r7, r6
 8005b2c:	2f00      	cmp	r7, #0
 8005b2e:	f1a0 0004 	sub.w	r0, r0, #4
 8005b32:	dc4a      	bgt.n	8005bca <__kernel_rem_pio2f+0x182>
 8005b34:	4628      	mov	r0, r5
 8005b36:	9207      	str	r2, [sp, #28]
 8005b38:	f000 f9f8 	bl	8005f2c <scalbnf>
 8005b3c:	eeb0 8a40 	vmov.f32	s16, s0
 8005b40:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8005b44:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005b48:	f000 fa56 	bl	8005ff8 <floorf>
 8005b4c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005b50:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005b54:	2d00      	cmp	r5, #0
 8005b56:	9a07      	ldr	r2, [sp, #28]
 8005b58:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005b5c:	ee17 9a90 	vmov	r9, s15
 8005b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b64:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005b68:	dd41      	ble.n	8005bee <__kernel_rem_pio2f+0x1a6>
 8005b6a:	f106 3cff 	add.w	ip, r6, #4294967295
 8005b6e:	ab08      	add	r3, sp, #32
 8005b70:	f1c5 0e08 	rsb	lr, r5, #8
 8005b74:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8005b78:	fa47 f00e 	asr.w	r0, r7, lr
 8005b7c:	4481      	add	r9, r0
 8005b7e:	fa00 f00e 	lsl.w	r0, r0, lr
 8005b82:	1a3f      	subs	r7, r7, r0
 8005b84:	f1c5 0007 	rsb	r0, r5, #7
 8005b88:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8005b8c:	4107      	asrs	r7, r0
 8005b8e:	2f00      	cmp	r7, #0
 8005b90:	dd3c      	ble.n	8005c0c <__kernel_rem_pio2f+0x1c4>
 8005b92:	f04f 0e00 	mov.w	lr, #0
 8005b96:	f109 0901 	add.w	r9, r9, #1
 8005b9a:	4671      	mov	r1, lr
 8005b9c:	4576      	cmp	r6, lr
 8005b9e:	dc67      	bgt.n	8005c70 <__kernel_rem_pio2f+0x228>
 8005ba0:	2d00      	cmp	r5, #0
 8005ba2:	dd03      	ble.n	8005bac <__kernel_rem_pio2f+0x164>
 8005ba4:	2d01      	cmp	r5, #1
 8005ba6:	d074      	beq.n	8005c92 <__kernel_rem_pio2f+0x24a>
 8005ba8:	2d02      	cmp	r5, #2
 8005baa:	d07b      	beq.n	8005ca4 <__kernel_rem_pio2f+0x25c>
 8005bac:	2f02      	cmp	r7, #2
 8005bae:	d12d      	bne.n	8005c0c <__kernel_rem_pio2f+0x1c4>
 8005bb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005bb4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005bb8:	b341      	cbz	r1, 8005c0c <__kernel_rem_pio2f+0x1c4>
 8005bba:	4628      	mov	r0, r5
 8005bbc:	9207      	str	r2, [sp, #28]
 8005bbe:	f000 f9b5 	bl	8005f2c <scalbnf>
 8005bc2:	9a07      	ldr	r2, [sp, #28]
 8005bc4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005bc8:	e020      	b.n	8005c0c <__kernel_rem_pio2f+0x1c4>
 8005bca:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005bce:	3f01      	subs	r7, #1
 8005bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bd8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005bdc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005be0:	ecac 0a01 	vstmia	ip!, {s0}
 8005be4:	ed90 0a00 	vldr	s0, [r0]
 8005be8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005bec:	e79e      	b.n	8005b2c <__kernel_rem_pio2f+0xe4>
 8005bee:	d105      	bne.n	8005bfc <__kernel_rem_pio2f+0x1b4>
 8005bf0:	1e70      	subs	r0, r6, #1
 8005bf2:	ab08      	add	r3, sp, #32
 8005bf4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8005bf8:	11ff      	asrs	r7, r7, #7
 8005bfa:	e7c8      	b.n	8005b8e <__kernel_rem_pio2f+0x146>
 8005bfc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005c00:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c08:	da30      	bge.n	8005c6c <__kernel_rem_pio2f+0x224>
 8005c0a:	2700      	movs	r7, #0
 8005c0c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c14:	f040 809a 	bne.w	8005d4c <__kernel_rem_pio2f+0x304>
 8005c18:	1e74      	subs	r4, r6, #1
 8005c1a:	46a4      	mov	ip, r4
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	45d4      	cmp	ip, sl
 8005c20:	da47      	bge.n	8005cb2 <__kernel_rem_pio2f+0x26a>
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d063      	beq.n	8005cee <__kernel_rem_pio2f+0x2a6>
 8005c26:	ab08      	add	r3, sp, #32
 8005c28:	3d08      	subs	r5, #8
 8005c2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d07f      	beq.n	8005d32 <__kernel_rem_pio2f+0x2ea>
 8005c32:	4628      	mov	r0, r5
 8005c34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005c38:	f000 f978 	bl	8005f2c <scalbnf>
 8005c3c:	1c63      	adds	r3, r4, #1
 8005c3e:	aa44      	add	r2, sp, #272	; 0x110
 8005c40:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8005d44 <__kernel_rem_pio2f+0x2fc>
 8005c44:	0099      	lsls	r1, r3, #2
 8005c46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f280 80ad 	bge.w	8005dac <__kernel_rem_pio2f+0x364>
 8005c52:	4623      	mov	r3, r4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f2c0 80cb 	blt.w	8005df0 <__kernel_rem_pio2f+0x3a8>
 8005c5a:	aa44      	add	r2, sp, #272	; 0x110
 8005c5c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005c60:	4e36      	ldr	r6, [pc, #216]	; (8005d3c <__kernel_rem_pio2f+0x2f4>)
 8005c62:	eddf 7a39 	vldr	s15, [pc, #228]	; 8005d48 <__kernel_rem_pio2f+0x300>
 8005c66:	2000      	movs	r0, #0
 8005c68:	1ae2      	subs	r2, r4, r3
 8005c6a:	e0b6      	b.n	8005dda <__kernel_rem_pio2f+0x392>
 8005c6c:	2702      	movs	r7, #2
 8005c6e:	e790      	b.n	8005b92 <__kernel_rem_pio2f+0x14a>
 8005c70:	6820      	ldr	r0, [r4, #0]
 8005c72:	b949      	cbnz	r1, 8005c88 <__kernel_rem_pio2f+0x240>
 8005c74:	b118      	cbz	r0, 8005c7e <__kernel_rem_pio2f+0x236>
 8005c76:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8005c7a:	6020      	str	r0, [r4, #0]
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f10e 0e01 	add.w	lr, lr, #1
 8005c82:	3404      	adds	r4, #4
 8005c84:	4601      	mov	r1, r0
 8005c86:	e789      	b.n	8005b9c <__kernel_rem_pio2f+0x154>
 8005c88:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8005c8c:	6020      	str	r0, [r4, #0]
 8005c8e:	4608      	mov	r0, r1
 8005c90:	e7f5      	b.n	8005c7e <__kernel_rem_pio2f+0x236>
 8005c92:	1e74      	subs	r4, r6, #1
 8005c94:	ab08      	add	r3, sp, #32
 8005c96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005c9a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005c9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005ca2:	e783      	b.n	8005bac <__kernel_rem_pio2f+0x164>
 8005ca4:	1e74      	subs	r4, r6, #1
 8005ca6:	ab08      	add	r3, sp, #32
 8005ca8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005cac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005cb0:	e7f5      	b.n	8005c9e <__kernel_rem_pio2f+0x256>
 8005cb2:	ab08      	add	r3, sp, #32
 8005cb4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8005cb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005cbc:	4301      	orrs	r1, r0
 8005cbe:	e7ae      	b.n	8005c1e <__kernel_rem_pio2f+0x1d6>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8005cc6:	2f00      	cmp	r7, #0
 8005cc8:	d0fa      	beq.n	8005cc0 <__kernel_rem_pio2f+0x278>
 8005cca:	9b06      	ldr	r3, [sp, #24]
 8005ccc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005cd0:	eb0d 0403 	add.w	r4, sp, r3
 8005cd4:	9b01      	ldr	r3, [sp, #4]
 8005cd6:	18f7      	adds	r7, r6, r3
 8005cd8:	ab1c      	add	r3, sp, #112	; 0x70
 8005cda:	f106 0c01 	add.w	ip, r6, #1
 8005cde:	3c4c      	subs	r4, #76	; 0x4c
 8005ce0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ce4:	4430      	add	r0, r6
 8005ce6:	4560      	cmp	r0, ip
 8005ce8:	da04      	bge.n	8005cf4 <__kernel_rem_pio2f+0x2ac>
 8005cea:	4606      	mov	r6, r0
 8005cec:	e711      	b.n	8005b12 <__kernel_rem_pio2f+0xca>
 8005cee:	9c05      	ldr	r4, [sp, #20]
 8005cf0:	2001      	movs	r0, #1
 8005cf2:	e7e6      	b.n	8005cc2 <__kernel_rem_pio2f+0x27a>
 8005cf4:	9b04      	ldr	r3, [sp, #16]
 8005cf6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005cfa:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005cfe:	9306      	str	r3, [sp, #24]
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d08:	2600      	movs	r6, #0
 8005d0a:	ece7 7a01 	vstmia	r7!, {s15}
 8005d0e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005d48 <__kernel_rem_pio2f+0x300>
 8005d12:	46b9      	mov	r9, r7
 8005d14:	455e      	cmp	r6, fp
 8005d16:	dd04      	ble.n	8005d22 <__kernel_rem_pio2f+0x2da>
 8005d18:	ece4 7a01 	vstmia	r4!, {s15}
 8005d1c:	f10c 0c01 	add.w	ip, ip, #1
 8005d20:	e7e1      	b.n	8005ce6 <__kernel_rem_pio2f+0x29e>
 8005d22:	ecfe 6a01 	vldmia	lr!, {s13}
 8005d26:	ed39 7a01 	vldmdb	r9!, {s14}
 8005d2a:	3601      	adds	r6, #1
 8005d2c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005d30:	e7f0      	b.n	8005d14 <__kernel_rem_pio2f+0x2cc>
 8005d32:	3c01      	subs	r4, #1
 8005d34:	e777      	b.n	8005c26 <__kernel_rem_pio2f+0x1de>
 8005d36:	bf00      	nop
 8005d38:	0800b70c 	.word	0x0800b70c
 8005d3c:	0800b6e0 	.word	0x0800b6e0
 8005d40:	43800000 	.word	0x43800000
 8005d44:	3b800000 	.word	0x3b800000
 8005d48:	00000000 	.word	0x00000000
 8005d4c:	9b03      	ldr	r3, [sp, #12]
 8005d4e:	eeb0 0a48 	vmov.f32	s0, s16
 8005d52:	1a98      	subs	r0, r3, r2
 8005d54:	f000 f8ea 	bl	8005f2c <scalbnf>
 8005d58:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8005d40 <__kernel_rem_pio2f+0x2f8>
 8005d5c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d64:	db19      	blt.n	8005d9a <__kernel_rem_pio2f+0x352>
 8005d66:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005d44 <__kernel_rem_pio2f+0x2fc>
 8005d6a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005d6e:	aa08      	add	r2, sp, #32
 8005d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d74:	1c74      	adds	r4, r6, #1
 8005d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d7a:	3508      	adds	r5, #8
 8005d7c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d88:	ee10 3a10 	vmov	r3, s0
 8005d8c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005d90:	ee17 3a90 	vmov	r3, s15
 8005d94:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005d98:	e74b      	b.n	8005c32 <__kernel_rem_pio2f+0x1ea>
 8005d9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d9e:	aa08      	add	r2, sp, #32
 8005da0:	ee10 3a10 	vmov	r3, s0
 8005da4:	4634      	mov	r4, r6
 8005da6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005daa:	e742      	b.n	8005c32 <__kernel_rem_pio2f+0x1ea>
 8005dac:	a808      	add	r0, sp, #32
 8005dae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005db2:	9001      	str	r0, [sp, #4]
 8005db4:	ee07 0a90 	vmov	s15, r0
 8005db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005dc2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005dc6:	ed62 7a01 	vstmdb	r2!, {s15}
 8005dca:	e73f      	b.n	8005c4c <__kernel_rem_pio2f+0x204>
 8005dcc:	ecf6 6a01 	vldmia	r6!, {s13}
 8005dd0:	ecb5 7a01 	vldmia	r5!, {s14}
 8005dd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005dd8:	3001      	adds	r0, #1
 8005dda:	4550      	cmp	r0, sl
 8005ddc:	dc01      	bgt.n	8005de2 <__kernel_rem_pio2f+0x39a>
 8005dde:	4290      	cmp	r0, r2
 8005de0:	ddf4      	ble.n	8005dcc <__kernel_rem_pio2f+0x384>
 8005de2:	a858      	add	r0, sp, #352	; 0x160
 8005de4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005de8:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8005dec:	3b01      	subs	r3, #1
 8005dee:	e731      	b.n	8005c54 <__kernel_rem_pio2f+0x20c>
 8005df0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	dc09      	bgt.n	8005e0a <__kernel_rem_pio2f+0x3c2>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	dc2b      	bgt.n	8005e52 <__kernel_rem_pio2f+0x40a>
 8005dfa:	d044      	beq.n	8005e86 <__kernel_rem_pio2f+0x43e>
 8005dfc:	f009 0007 	and.w	r0, r9, #7
 8005e00:	b059      	add	sp, #356	; 0x164
 8005e02:	ecbd 8b04 	vpop	{d8-d9}
 8005e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d1f5      	bne.n	8005dfc <__kernel_rem_pio2f+0x3b4>
 8005e10:	aa30      	add	r2, sp, #192	; 0xc0
 8005e12:	1f0b      	subs	r3, r1, #4
 8005e14:	4413      	add	r3, r2
 8005e16:	461a      	mov	r2, r3
 8005e18:	4620      	mov	r0, r4
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	f1a2 0204 	sub.w	r2, r2, #4
 8005e20:	dc52      	bgt.n	8005ec8 <__kernel_rem_pio2f+0x480>
 8005e22:	4622      	mov	r2, r4
 8005e24:	2a01      	cmp	r2, #1
 8005e26:	f1a3 0304 	sub.w	r3, r3, #4
 8005e2a:	dc5d      	bgt.n	8005ee8 <__kernel_rem_pio2f+0x4a0>
 8005e2c:	ab30      	add	r3, sp, #192	; 0xc0
 8005e2e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8005d48 <__kernel_rem_pio2f+0x300>
 8005e32:	440b      	add	r3, r1
 8005e34:	2c01      	cmp	r4, #1
 8005e36:	dc67      	bgt.n	8005f08 <__kernel_rem_pio2f+0x4c0>
 8005e38:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8005e3c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8005e40:	2f00      	cmp	r7, #0
 8005e42:	d167      	bne.n	8005f14 <__kernel_rem_pio2f+0x4cc>
 8005e44:	edc8 6a00 	vstr	s13, [r8]
 8005e48:	ed88 7a01 	vstr	s14, [r8, #4]
 8005e4c:	edc8 7a02 	vstr	s15, [r8, #8]
 8005e50:	e7d4      	b.n	8005dfc <__kernel_rem_pio2f+0x3b4>
 8005e52:	ab30      	add	r3, sp, #192	; 0xc0
 8005e54:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8005d48 <__kernel_rem_pio2f+0x300>
 8005e58:	440b      	add	r3, r1
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	2a00      	cmp	r2, #0
 8005e5e:	da24      	bge.n	8005eaa <__kernel_rem_pio2f+0x462>
 8005e60:	b34f      	cbz	r7, 8005eb6 <__kernel_rem_pio2f+0x46e>
 8005e62:	eef1 7a47 	vneg.f32	s15, s14
 8005e66:	edc8 7a00 	vstr	s15, [r8]
 8005e6a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8005e6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e72:	aa31      	add	r2, sp, #196	; 0xc4
 8005e74:	2301      	movs	r3, #1
 8005e76:	429c      	cmp	r4, r3
 8005e78:	da20      	bge.n	8005ebc <__kernel_rem_pio2f+0x474>
 8005e7a:	b10f      	cbz	r7, 8005e80 <__kernel_rem_pio2f+0x438>
 8005e7c:	eef1 7a67 	vneg.f32	s15, s15
 8005e80:	edc8 7a01 	vstr	s15, [r8, #4]
 8005e84:	e7ba      	b.n	8005dfc <__kernel_rem_pio2f+0x3b4>
 8005e86:	ab30      	add	r3, sp, #192	; 0xc0
 8005e88:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8005d48 <__kernel_rem_pio2f+0x300>
 8005e8c:	440b      	add	r3, r1
 8005e8e:	2c00      	cmp	r4, #0
 8005e90:	da05      	bge.n	8005e9e <__kernel_rem_pio2f+0x456>
 8005e92:	b10f      	cbz	r7, 8005e98 <__kernel_rem_pio2f+0x450>
 8005e94:	eef1 7a67 	vneg.f32	s15, s15
 8005e98:	edc8 7a00 	vstr	s15, [r8]
 8005e9c:	e7ae      	b.n	8005dfc <__kernel_rem_pio2f+0x3b4>
 8005e9e:	ed33 7a01 	vldmdb	r3!, {s14}
 8005ea2:	3c01      	subs	r4, #1
 8005ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ea8:	e7f1      	b.n	8005e8e <__kernel_rem_pio2f+0x446>
 8005eaa:	ed73 7a01 	vldmdb	r3!, {s15}
 8005eae:	3a01      	subs	r2, #1
 8005eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005eb4:	e7d2      	b.n	8005e5c <__kernel_rem_pio2f+0x414>
 8005eb6:	eef0 7a47 	vmov.f32	s15, s14
 8005eba:	e7d4      	b.n	8005e66 <__kernel_rem_pio2f+0x41e>
 8005ebc:	ecb2 7a01 	vldmia	r2!, {s14}
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ec6:	e7d6      	b.n	8005e76 <__kernel_rem_pio2f+0x42e>
 8005ec8:	edd2 7a00 	vldr	s15, [r2]
 8005ecc:	edd2 6a01 	vldr	s13, [r2, #4]
 8005ed0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005ed4:	3801      	subs	r0, #1
 8005ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005eda:	ed82 7a00 	vstr	s14, [r2]
 8005ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee2:	edc2 7a01 	vstr	s15, [r2, #4]
 8005ee6:	e798      	b.n	8005e1a <__kernel_rem_pio2f+0x3d2>
 8005ee8:	edd3 7a00 	vldr	s15, [r3]
 8005eec:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ef0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005ef4:	3a01      	subs	r2, #1
 8005ef6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005efa:	ed83 7a00 	vstr	s14, [r3]
 8005efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f02:	edc3 7a01 	vstr	s15, [r3, #4]
 8005f06:	e78d      	b.n	8005e24 <__kernel_rem_pio2f+0x3dc>
 8005f08:	ed33 7a01 	vldmdb	r3!, {s14}
 8005f0c:	3c01      	subs	r4, #1
 8005f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f12:	e78f      	b.n	8005e34 <__kernel_rem_pio2f+0x3ec>
 8005f14:	eef1 6a66 	vneg.f32	s13, s13
 8005f18:	eeb1 7a47 	vneg.f32	s14, s14
 8005f1c:	edc8 6a00 	vstr	s13, [r8]
 8005f20:	ed88 7a01 	vstr	s14, [r8, #4]
 8005f24:	eef1 7a67 	vneg.f32	s15, s15
 8005f28:	e790      	b.n	8005e4c <__kernel_rem_pio2f+0x404>
 8005f2a:	bf00      	nop

08005f2c <scalbnf>:
 8005f2c:	ee10 3a10 	vmov	r3, s0
 8005f30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005f34:	d02b      	beq.n	8005f8e <scalbnf+0x62>
 8005f36:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005f3a:	d302      	bcc.n	8005f42 <scalbnf+0x16>
 8005f3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005f40:	4770      	bx	lr
 8005f42:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005f46:	d123      	bne.n	8005f90 <scalbnf+0x64>
 8005f48:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <scalbnf+0xb0>)
 8005f4a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8005fe0 <scalbnf+0xb4>
 8005f4e:	4298      	cmp	r0, r3
 8005f50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005f54:	db17      	blt.n	8005f86 <scalbnf+0x5a>
 8005f56:	ee10 3a10 	vmov	r3, s0
 8005f5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005f5e:	3a19      	subs	r2, #25
 8005f60:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005f64:	4288      	cmp	r0, r1
 8005f66:	dd15      	ble.n	8005f94 <scalbnf+0x68>
 8005f68:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8005fe4 <scalbnf+0xb8>
 8005f6c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005fe8 <scalbnf+0xbc>
 8005f70:	ee10 3a10 	vmov	r3, s0
 8005f74:	eeb0 7a67 	vmov.f32	s14, s15
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	bfb8      	it	lt
 8005f7c:	eef0 7a66 	vmovlt.f32	s15, s13
 8005f80:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005f84:	4770      	bx	lr
 8005f86:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005fec <scalbnf+0xc0>
 8005f8a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005f8e:	4770      	bx	lr
 8005f90:	0dd2      	lsrs	r2, r2, #23
 8005f92:	e7e5      	b.n	8005f60 <scalbnf+0x34>
 8005f94:	4410      	add	r0, r2
 8005f96:	28fe      	cmp	r0, #254	; 0xfe
 8005f98:	dce6      	bgt.n	8005f68 <scalbnf+0x3c>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	dd06      	ble.n	8005fac <scalbnf+0x80>
 8005f9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005fa2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005fa6:	ee00 3a10 	vmov	s0, r3
 8005faa:	4770      	bx	lr
 8005fac:	f110 0f16 	cmn.w	r0, #22
 8005fb0:	da09      	bge.n	8005fc6 <scalbnf+0x9a>
 8005fb2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005fec <scalbnf+0xc0>
 8005fb6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8005ff0 <scalbnf+0xc4>
 8005fba:	ee10 3a10 	vmov	r3, s0
 8005fbe:	eeb0 7a67 	vmov.f32	s14, s15
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	e7d9      	b.n	8005f7a <scalbnf+0x4e>
 8005fc6:	3019      	adds	r0, #25
 8005fc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005fcc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005fd0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005ff4 <scalbnf+0xc8>
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	e7d7      	b.n	8005f8a <scalbnf+0x5e>
 8005fda:	bf00      	nop
 8005fdc:	ffff3cb0 	.word	0xffff3cb0
 8005fe0:	4c000000 	.word	0x4c000000
 8005fe4:	7149f2ca 	.word	0x7149f2ca
 8005fe8:	f149f2ca 	.word	0xf149f2ca
 8005fec:	0da24260 	.word	0x0da24260
 8005ff0:	8da24260 	.word	0x8da24260
 8005ff4:	33000000 	.word	0x33000000

08005ff8 <floorf>:
 8005ff8:	ee10 3a10 	vmov	r3, s0
 8005ffc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006000:	3a7f      	subs	r2, #127	; 0x7f
 8006002:	2a16      	cmp	r2, #22
 8006004:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006008:	dc2a      	bgt.n	8006060 <floorf+0x68>
 800600a:	2a00      	cmp	r2, #0
 800600c:	da11      	bge.n	8006032 <floorf+0x3a>
 800600e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006070 <floorf+0x78>
 8006012:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006016:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800601a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601e:	dd05      	ble.n	800602c <floorf+0x34>
 8006020:	2b00      	cmp	r3, #0
 8006022:	da23      	bge.n	800606c <floorf+0x74>
 8006024:	4a13      	ldr	r2, [pc, #76]	; (8006074 <floorf+0x7c>)
 8006026:	2900      	cmp	r1, #0
 8006028:	bf18      	it	ne
 800602a:	4613      	movne	r3, r2
 800602c:	ee00 3a10 	vmov	s0, r3
 8006030:	4770      	bx	lr
 8006032:	4911      	ldr	r1, [pc, #68]	; (8006078 <floorf+0x80>)
 8006034:	4111      	asrs	r1, r2
 8006036:	420b      	tst	r3, r1
 8006038:	d0fa      	beq.n	8006030 <floorf+0x38>
 800603a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006070 <floorf+0x78>
 800603e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006042:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604a:	ddef      	ble.n	800602c <floorf+0x34>
 800604c:	2b00      	cmp	r3, #0
 800604e:	bfbe      	ittt	lt
 8006050:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006054:	fa40 f202 	asrlt.w	r2, r0, r2
 8006058:	189b      	addlt	r3, r3, r2
 800605a:	ea23 0301 	bic.w	r3, r3, r1
 800605e:	e7e5      	b.n	800602c <floorf+0x34>
 8006060:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006064:	d3e4      	bcc.n	8006030 <floorf+0x38>
 8006066:	ee30 0a00 	vadd.f32	s0, s0, s0
 800606a:	4770      	bx	lr
 800606c:	2300      	movs	r3, #0
 800606e:	e7dd      	b.n	800602c <floorf+0x34>
 8006070:	7149f2ca 	.word	0x7149f2ca
 8006074:	bf800000 	.word	0xbf800000
 8006078:	007fffff 	.word	0x007fffff

0800607c <_init>:
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	bf00      	nop
 8006080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006082:	bc08      	pop	{r3}
 8006084:	469e      	mov	lr, r3
 8006086:	4770      	bx	lr

08006088 <_fini>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	bf00      	nop
 800608c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608e:	bc08      	pop	{r3}
 8006090:	469e      	mov	lr, r3
 8006092:	4770      	bx	lr
