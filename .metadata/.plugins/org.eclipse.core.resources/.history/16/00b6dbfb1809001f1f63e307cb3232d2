/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdbool.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim14;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
#define DEFAULT_INTERVAL 1000
#define QUEUE_SIZE 32

typedef enum
{
	FULL,
	HALF,
	QUARTER,
	EIGHTH,
	SIXTEENTH
}Microstep;

typedef struct
{
	int steps; //how many steps
	unsigned int interval; //the interval between steps in micro seconds
}Step_Task;

typedef struct
{
	//Ports and Pins
	GPIO_TypeDef* STEP_PORT;
	uint16_t STEP_PIN;
	GPIO_TypeDef* DIR_PORT;
	uint16_t DIR_PIN;
	GPIO_TypeDef* MS_PORT[3]; //MS1, MS2, MS3
	uint16_t MS_PIN[3];

	//Task Queue
	Step_Task Task_Queue[QUEUE_SIZE];
	unsigned short index_shift;
	unsigned short size;

	unsigned int time; //the time after last step in microseconds
	//bool status; //the HIGH/LOW of step pin
}Stepper_Motor;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM14_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned int cnt14 = 0;
int checkpoint;
Stepper_Motor stepper;

void Stepper_Init(Stepper_Motor* motor, GPIO_TypeDef* step_port, uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin,
					GPIO_TypeDef* *ms_port, uint16_t *ms_pin, Microstep step_reso)
{
	motor->STEP_PORT = step_port;
	motor->STEP_PIN = step_pin;
	motor->DIR_PORT = dir_port;
	motor->DIR_PIN = dir_pin;
	for(int i=0; i<3; i++)
	{
		motor->MS_PORT[i] = ms_port[i];
		motor->MS_PIN[i] = ms_pin[i];
	}
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, RESET);
	HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, SET);
	switch(step_reso)
	{
		case FULL:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
			break;
		case HALF:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
			break;
		case QUARTER:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
			break;
		case EIGHTH:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
			break;
		case SIXTEENTH:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], SET);
			break;
		default:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
			break;
	}
	motor->index_shift = 0;
	motor->size = 0;
	motor->time = 1000000; //1 second
	//motor->status = 0;
}

bool Stepper_Add_Task(Stepper_Motor* motor, Step_Task insert)
{
	if(motor->size >= QUEUE_SIZE)
	{
		return false;
	}
	motor->size++;
	motor->Task_Queue[(motor->size -1 +motor->index_shift)%QUEUE_SIZE] = insert;
	return true;
}

bool Stepper_Add_Steps(Stepper_Motor* motor, unsigned int steps)
{
	if(motor->size >= QUEUE_SIZE)
		return false;
	Step_Task tmp = {steps, DEFAULT_INTERVAL};
	Stepper_Add_Task(motor, tmp);
	return true;
}

bool Stepper_Empty(Stepper_Motor* motor)
{
	return motor->size <= 0;
}

Step_Task Stepper_Get_Task(Stepper_Motor* motor)
{
	if(motor->size <= 0)
	{
		Step_Task tmp = {0, 0};
		return tmp;
	}
	Step_Task tmp = motor->Task_Queue[motor->index_shift];
	motor->size --;
	motor->index_shift ++;
	motor->index_shift %= QUEUE_SIZE;
	return tmp;
}

Step_Task Stepper_Peek_Task(Stepper_Motor* motor)
{
	if(motor->size <= 0)
	{
		Step_Task tmp = {0, 0};
		return tmp;
	}
	return motor->Task_Queue[motor->index_shift];
}

void Stepper_Pop_Task(Stepper_Motor* motor) //delete a task
{
	if(motor->size <= 0)
		return;
	motor->size --;
	motor->index_shift ++;
	motor->index_shift %= QUEUE_SIZE;
}

unsigned int Stepper_Current_Interval(Stepper_Motor* motor)
{
	if(motor->size <= 0)
		return 0;
	return motor->Task_Queue[motor->index_shift].interval;
}

bool Stepper_Go_One_Step(Stepper_Motor* motor)
{
	if(motor->size <= 0)
		return false;
	if(motor->Task_Queue[motor->index_shift].steps > 0)
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, SET);
		motor->Task_Queue[motor->index_shift].steps --;
	}
	if(motor->Task_Queue[motor->index_shift].steps < 0)
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, RESET);
		motor->Task_Queue[motor->index_shift].steps ++;
	}
	unsigned short t = __HAL_TIM_GET_COUNTER(&htim14);
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, SET);
	if(motor->Task_Queue[motor->index_shift].steps == 0)
	{
		Stepper_Pop_Task(motor);
	}
	while(__HAL_TIM_GET_COUNTER(&htim14)-t <= 1000 || t+__HAL_TIM_GET_COUNTER(&htim14) <= 1000+__HAL_TIM_GET_AUTORELOAD(&htim14))
	{}
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, RESET);

	return true;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART2_UART_Init();
  MX_TIM14_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);

	GPIO_TypeDef* ms_port[3] = {GPIOB, GPIOB, GPIOA};
	uint16_t ms_pin[3] = {GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_15};
	Stepper_Init(&stepper, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0, ms_port, ms_pin, FULL);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		Stepper_Add_Steps(&stepper, 1000);
		HAL_Delay(2000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x20303E5D;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
  htim14.Init.Prescaler = 47;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 100;
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
	if(htim->Instance == TIM14)
	{
		if(!Stepper_Empty(&stepper))
		{
			checkpoint = 10-checkpoint;
			if(cnt14 < 10000000)
				cnt14 ++;
			else
				cnt14 = 0;
			if(stepper.time >= Stepper_Current_Interval(&stepper))
			{
				Stepper_Go_One_Step(&stepper);
				stepper.time = 0;
			}
			else
			{
				stepper.time ++;
			}
		}
	}

}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
