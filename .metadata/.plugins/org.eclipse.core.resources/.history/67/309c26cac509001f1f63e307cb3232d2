/*
 * stepper_motor.h
 *
 *  Created on: May 4, 2024
 *      Author: choua
 */

#ifndef INC_STEPPER_MOTOR_H_
#define INC_STEPPER_MOTOR_H_

#define DEFAULT_INTERVAL 1000
#define QUEUE_SIZE 32

typedef enum
{
	FULL,
	HALF,
	QUARTER,
	EIGHTH,
	SIXTEENTH
}Microstep;

typedef struct
{
	int steps; //how many steps
	unsigned int interval; //the interval between steps in micro seconds
}Step_Task;

typedef struct
{
	//Ports and Pins
	GPIO_TypeDef* STEP_PORT;
	uint16_t STEP_PIN;
	GPIO_TypeDef* DIR_PORT;
	uint16_t DIR_PIN;
	GPIO_TypeDef* MS_PORT[3]; //MS1, MS2, MS3
	uint16_t MS_PIN[3];

	//Task Queue
	Step_Task Task_Queue[QUEUE_SIZE];
	unsigned short index_shift;
	unsigned short size;

	unsigned int time; //the time after last step in microseconds
	//bool status; //the HIGH/LOW of step pin
}Stepper_Motor;

void Stepper_Init(Stepper_Motor* motor, GPIO_TypeDef* step_port, uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin,
					GPIO_TypeDef* *ms_port, uint16_t *ms_pin, Microstep step_reso)
{
	motor->STEP_PORT = step_port;
	motor->STEP_PIN = step_pin;
	motor->DIR_PORT = dir_port;
	motor->DIR_PIN = dir_pin;
	for(int i=0; i<3; i++)
	{
		motor->MS_PORT[i] = ms_port[i];
		motor->MS_PIN[i] = ms_pin[i];
	}
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, RESET);
	HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, SET);
	switch(step_reso)
	{
		case FULL:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
			break;
		case HALF:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
			break;
		case QUARTER:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
			break;
		case EIGHTH:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
			break;
		case SIXTEENTH:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], SET);
			break;
		default:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
			break;
	}
	motor->index_shift = 0;
	motor->size = 0;
	motor->time = 1000000; //1 second
	//motor->status = 0;
}




#endif /* INC_STEPPER_MOTOR_H_ */
