
servo_lib_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f80  08003f80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f80  08003f80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f80  08003f80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f80  08003f80  00013f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08003f94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003f94  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011667  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000221d  00000000  00000000  000316de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00033900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c85  00000000  00000000  000348b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013d66  00000000  00000000  0003553d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cc2  00000000  00000000  000492a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f179  00000000  00000000  0005cf65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039a0  00000000  00000000  000dc0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dfa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e9c 	.word	0x08003e9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003e9c 	.word	0x08003e9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc03 	bl	8000a2e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81a 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9c4 	bl	80005b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f9a4 	bl	800057c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000234:	f000 f96e 	bl	8000514 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000238:	f000 f856 	bl	80002e8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800023c:	f000 f894 	bl	8000368 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_TIM_Base_Start(&htim1);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <main+0x38>)
 8000242:	2104      	movs	r1, #4
 8000244:	0018      	movs	r0, r3
 8000246:	f001 ffa3 	bl	8002190 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, &pwm1, 1);
 800024a:	4a04      	ldr	r2, [pc, #16]	; (800025c <main+0x3c>)
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <main+0x38>)
 800024e:	2301      	movs	r3, #1
 8000250:	2100      	movs	r1, #0
 8000252:	f002 f875 	bl	8002340 <HAL_TIM_PWM_Start_DMA>
  while (1)
 8000256:	e7fe      	b.n	8000256 <main+0x36>
 8000258:	2000007c 	.word	0x2000007c
 800025c:	200001b8 	.word	0x200001b8

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b08d      	sub	sp, #52	; 0x34
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2414      	movs	r4, #20
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	231c      	movs	r3, #28
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f003 fde7 	bl	8003e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	003b      	movs	r3, r7
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f003 fde0 	bl	8003e44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	2202      	movs	r2, #2
 8000288:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	0052      	lsls	r2, r2, #1
 8000290:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000292:	193b      	adds	r3, r7, r4
 8000294:	2200      	movs	r2, #0
 8000296:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000298:	193b      	adds	r3, r7, r4
 800029a:	2240      	movs	r2, #64	; 0x40
 800029c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 fa7f 	bl	80017a4 <HAL_RCC_OscConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002aa:	f000 f9fd 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	003b      	movs	r3, r7
 80002b0:	2207      	movs	r2, #7
 80002b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b4:	003b      	movs	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	003b      	movs	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002c0:	003b      	movs	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002c6:	003b      	movs	r3, r7
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002cc:	003b      	movs	r3, r7
 80002ce:	2101      	movs	r1, #1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 fc4b 	bl	8001b6c <HAL_RCC_ClockConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002da:	f000 f9e5 	bl	80006a8 <Error_Handler>
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b00d      	add	sp, #52	; 0x34
 80002e4:	bd90      	pop	{r4, r7, pc}
	...

080002e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_I2C1_Init+0x74>)
 80002ee:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <MX_I2C1_Init+0x78>)
 80002f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <MX_I2C1_Init+0x74>)
 80002f4:	4a1b      	ldr	r2, [pc, #108]	; (8000364 <MX_I2C1_Init+0x7c>)
 80002f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_I2C1_Init+0x74>)
 8000300:	2201      	movs	r2, #1
 8000302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_I2C1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_I2C1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_I2C1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_I2C1_Init+0x74>)
 8000324:	0018      	movs	r0, r3
 8000326:	f001 f8ff 	bl	8001528 <HAL_I2C_Init>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d001      	beq.n	8000332 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800032e:	f000 f9bb 	bl	80006a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <MX_I2C1_Init+0x74>)
 8000334:	2100      	movs	r1, #0
 8000336:	0018      	movs	r0, r3
 8000338:	f001 f99c 	bl	8001674 <HAL_I2CEx_ConfigAnalogFilter>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000340:	f000 f9b2 	bl	80006a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <MX_I2C1_Init+0x74>)
 8000346:	2100      	movs	r1, #0
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f9df 	bl	800170c <HAL_I2CEx_ConfigDigitalFilter>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000352:	f000 f9a9 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000028 	.word	0x20000028
 8000360:	40005400 	.word	0x40005400
 8000364:	20303e5d 	.word	0x20303e5d

08000368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b09c      	sub	sp, #112	; 0x70
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036e:	2360      	movs	r3, #96	; 0x60
 8000370:	18fb      	adds	r3, r7, r3
 8000372:	0018      	movs	r0, r3
 8000374:	2310      	movs	r3, #16
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f003 fd63 	bl	8003e44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037e:	2354      	movs	r3, #84	; 0x54
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	0018      	movs	r0, r3
 8000384:	230c      	movs	r3, #12
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f003 fd5b 	bl	8003e44 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800038e:	2338      	movs	r3, #56	; 0x38
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	0018      	movs	r0, r3
 8000394:	231c      	movs	r3, #28
 8000396:	001a      	movs	r2, r3
 8000398:	2100      	movs	r1, #0
 800039a:	f003 fd53 	bl	8003e44 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	0018      	movs	r0, r3
 80003a2:	2334      	movs	r3, #52	; 0x34
 80003a4:	001a      	movs	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	f003 fd4c 	bl	8003e44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ac:	4b57      	ldr	r3, [pc, #348]	; (800050c <MX_TIM1_Init+0x1a4>)
 80003ae:	4a58      	ldr	r2, [pc, #352]	; (8000510 <MX_TIM1_Init+0x1a8>)
 80003b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80003b2:	4b56      	ldr	r3, [pc, #344]	; (800050c <MX_TIM1_Init+0x1a4>)
 80003b4:	222f      	movs	r2, #47	; 0x2f
 80003b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b8:	4b54      	ldr	r3, [pc, #336]	; (800050c <MX_TIM1_Init+0x1a4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 80003be:	4b53      	ldr	r3, [pc, #332]	; (800050c <MX_TIM1_Init+0x1a4>)
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	0152      	lsls	r2, r2, #5
 80003c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c6:	4b51      	ldr	r3, [pc, #324]	; (800050c <MX_TIM1_Init+0x1a4>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003cc:	4b4f      	ldr	r3, [pc, #316]	; (800050c <MX_TIM1_Init+0x1a4>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d2:	4b4e      	ldr	r3, [pc, #312]	; (800050c <MX_TIM1_Init+0x1a4>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003d8:	4b4c      	ldr	r3, [pc, #304]	; (800050c <MX_TIM1_Init+0x1a4>)
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 fe20 	bl	8002020 <HAL_TIM_Base_Init>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80003e4:	f000 f960 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e8:	2160      	movs	r1, #96	; 0x60
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2280      	movs	r2, #128	; 0x80
 80003ee:	0152      	lsls	r2, r2, #5
 80003f0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003f2:	187a      	adds	r2, r7, r1
 80003f4:	4b45      	ldr	r3, [pc, #276]	; (800050c <MX_TIM1_Init+0x1a4>)
 80003f6:	0011      	movs	r1, r2
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 fa8f 	bl	800291c <HAL_TIM_ConfigClockSource>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000402:	f000 f951 	bl	80006a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000406:	4b41      	ldr	r3, [pc, #260]	; (800050c <MX_TIM1_Init+0x1a4>)
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fe61 	bl	80020d0 <HAL_TIM_PWM_Init>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000412:	f000 f949 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000416:	2154      	movs	r1, #84	; 0x54
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800042a:	187a      	adds	r2, r7, r1
 800042c:	4b37      	ldr	r3, [pc, #220]	; (800050c <MX_TIM1_Init+0x1a4>)
 800042e:	0011      	movs	r1, r2
 8000430:	0018      	movs	r0, r3
 8000432:	f002 fffd 	bl	8003430 <HAL_TIMEx_MasterConfigSynchronization>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800043a:	f000 f935 	bl	80006a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800043e:	2138      	movs	r1, #56	; 0x38
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2260      	movs	r2, #96	; 0x60
 8000444:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2592;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	22a2      	movs	r2, #162	; 0xa2
 800044a:	0112      	lsls	r2, r2, #4
 800044c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800046c:	1879      	adds	r1, r7, r1
 800046e:	4b27      	ldr	r3, [pc, #156]	; (800050c <MX_TIM1_Init+0x1a4>)
 8000470:	2200      	movs	r2, #0
 8000472:	0018      	movs	r0, r3
 8000474:	f002 f952 	bl	800271c <HAL_TIM_PWM_ConfigChannel>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800047c:	f000 f914 	bl	80006a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000480:	2338      	movs	r3, #56	; 0x38
 8000482:	18f9      	adds	r1, r7, r3
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <MX_TIM1_Init+0x1a4>)
 8000486:	2204      	movs	r2, #4
 8000488:	0018      	movs	r0, r3
 800048a:	f002 f947 	bl	800271c <HAL_TIM_PWM_ConfigChannel>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000492:	f000 f909 	bl	80006a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	0192      	lsls	r2, r2, #6
 80004ba:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2200      	movs	r2, #0
 80004c0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2200      	movs	r2, #0
 80004c6:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	0492      	lsls	r2, r2, #18
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004e8:	1d3a      	adds	r2, r7, #4
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_TIM1_Init+0x1a4>)
 80004ec:	0011      	movs	r1, r2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 f800 	bl	80034f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 80004f8:	f000 f8d6 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <MX_TIM1_Init+0x1a4>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 f9ac 	bl	800085c <HAL_TIM_MspPostInit>

}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b01c      	add	sp, #112	; 0x70
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000007c 	.word	0x2000007c
 8000510:	40012c00 	.word	0x40012c00

08000514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_USART2_UART_Init+0x60>)
 800051a:	4a17      	ldr	r2, [pc, #92]	; (8000578 <MX_USART2_UART_Init+0x64>)
 800051c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_USART2_UART_Init+0x60>)
 8000520:	22e1      	movs	r2, #225	; 0xe1
 8000522:	0252      	lsls	r2, r2, #9
 8000524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_USART2_UART_Init+0x60>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_USART2_UART_Init+0x60>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_USART2_UART_Init+0x60>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_USART2_UART_Init+0x60>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_USART2_UART_Init+0x60>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_USART2_UART_Init+0x60>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_USART2_UART_Init+0x60>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_USART2_UART_Init+0x60>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_USART2_UART_Init+0x60>)
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <MX_USART2_UART_Init+0x60>)
 800055e:	0018      	movs	r0, r3
 8000560:	f003 f86e 	bl	8003640 <HAL_UART_Init>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000568:	f000 f89e 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	20000124 	.word	0x20000124
 8000578:	40004400 	.word	0x40004400

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_DMA_Init+0x38>)
 8000584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <MX_DMA_Init+0x38>)
 8000588:	2101      	movs	r1, #1
 800058a:	430a      	orrs	r2, r1
 800058c:	639a      	str	r2, [r3, #56]	; 0x38
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_DMA_Init+0x38>)
 8000590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000592:	2201      	movs	r2, #1
 8000594:	4013      	ands	r3, r2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	2009      	movs	r0, #9
 80005a0:	f000 fb6e 	bl	8000c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a4:	2009      	movs	r0, #9
 80005a6:	f000 fb80 	bl	8000caa <HAL_NVIC_EnableIRQ>

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b002      	add	sp, #8
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b08b      	sub	sp, #44	; 0x2c
 80005bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	2414      	movs	r4, #20
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2314      	movs	r3, #20
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f003 fc3b 	bl	8003e44 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b33      	ldr	r3, [pc, #204]	; (800069c <MX_GPIO_Init+0xe4>)
 80005d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <MX_GPIO_Init+0xe4>)
 80005d4:	2104      	movs	r1, #4
 80005d6:	430a      	orrs	r2, r1
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
 80005da:	4b30      	ldr	r3, [pc, #192]	; (800069c <MX_GPIO_Init+0xe4>)
 80005dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005de:	2204      	movs	r2, #4
 80005e0:	4013      	ands	r3, r2
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b2d      	ldr	r3, [pc, #180]	; (800069c <MX_GPIO_Init+0xe4>)
 80005e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <MX_GPIO_Init+0xe4>)
 80005ec:	2120      	movs	r1, #32
 80005ee:	430a      	orrs	r2, r1
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
 80005f2:	4b2a      	ldr	r3, [pc, #168]	; (800069c <MX_GPIO_Init+0xe4>)
 80005f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f6:	2220      	movs	r2, #32
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b27      	ldr	r3, [pc, #156]	; (800069c <MX_GPIO_Init+0xe4>)
 8000600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <MX_GPIO_Init+0xe4>)
 8000604:	2101      	movs	r1, #1
 8000606:	430a      	orrs	r2, r1
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_GPIO_Init+0xe4>)
 800060c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060e:	2201      	movs	r2, #1
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_GPIO_Init+0xe4>)
 8000618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <MX_GPIO_Init+0xe4>)
 800061c:	2102      	movs	r1, #2
 800061e:	430a      	orrs	r2, r1
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_GPIO_Init+0xe4>)
 8000624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000626:	2202      	movs	r2, #2
 8000628:	4013      	ands	r3, r2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 800062e:	23a0      	movs	r3, #160	; 0xa0
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	2201      	movs	r2, #1
 8000634:	2120      	movs	r1, #32
 8000636:	0018      	movs	r0, r3
 8000638:	f000 ff1a 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	0192      	lsls	r2, r2, #6
 8000642:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <MX_GPIO_Init+0xe8>)
 8000648:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000650:	193b      	adds	r3, r7, r4
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_GPIO_Init+0xec>)
 8000654:	0019      	movs	r1, r3
 8000656:	0010      	movs	r0, r2
 8000658:	f000 fd98 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 800065c:	0021      	movs	r1, r4
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2220      	movs	r2, #32
 8000662:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2201      	movs	r2, #1
 8000668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2203      	movs	r2, #3
 8000674:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000676:	187a      	adds	r2, r7, r1
 8000678:	23a0      	movs	r3, #160	; 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	0011      	movs	r1, r2
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fd84 	bl	800118c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	2007      	movs	r0, #7
 800068a:	f000 faf9 	bl	8000c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fb0b 	bl	8000caa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b00b      	add	sp, #44	; 0x2c
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	10110000 	.word	0x10110000
 80006a4:	50000800 	.word	0x50000800

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x44>)
 80006bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <HAL_MspInit+0x44>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_MspInit+0x44>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x44>)
 80006d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_MspInit+0x44>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0549      	lsls	r1, r1, #21
 80006dc:	430a      	orrs	r2, r1
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_MspInit+0x44>)
 80006e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	055b      	lsls	r3, r3, #21
 80006e8:	4013      	ands	r3, r2
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b091      	sub	sp, #68	; 0x44
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	232c      	movs	r3, #44	; 0x2c
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	0018      	movs	r0, r3
 800070a:	2314      	movs	r3, #20
 800070c:	001a      	movs	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f003 fb98 	bl	8003e44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	2410      	movs	r4, #16
 8000716:	193b      	adds	r3, r7, r4
 8000718:	0018      	movs	r0, r3
 800071a:	231c      	movs	r3, #28
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f003 fb90 	bl	8003e44 <memset>
  if(hi2c->Instance==I2C1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <HAL_I2C_MspInit+0xb8>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d13e      	bne.n	80007ac <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2240      	movs	r2, #64	; 0x40
 8000732:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	193b      	adds	r3, r7, r4
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fb81 	bl	8001e44 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000746:	f7ff ffaf 	bl	80006a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 800074c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 8000750:	2102      	movs	r1, #2
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075a:	2202      	movs	r2, #2
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000762:	212c      	movs	r1, #44	; 0x2c
 8000764:	187b      	adds	r3, r7, r1
 8000766:	22c0      	movs	r2, #192	; 0xc0
 8000768:	0092      	lsls	r2, r2, #2
 800076a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2212      	movs	r2, #18
 8000770:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2206      	movs	r2, #6
 8000782:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	187b      	adds	r3, r7, r1
 8000786:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <HAL_I2C_MspInit+0xc0>)
 8000788:	0019      	movs	r1, r3
 800078a:	0010      	movs	r0, r2
 800078c:	f000 fcfe 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 8000792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	0389      	lsls	r1, r1, #14
 800079a:	430a      	orrs	r2, r1
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 80007a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	039b      	lsls	r3, r3, #14
 80007a6:	4013      	ands	r3, r2
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b011      	add	sp, #68	; 0x44
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	40005400 	.word	0x40005400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	50000400 	.word	0x50000400

080007c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a1f      	ldr	r2, [pc, #124]	; (800084c <HAL_TIM_Base_MspInit+0x8c>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d138      	bne.n	8000844 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <HAL_TIM_Base_MspInit+0x90>)
 80007d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <HAL_TIM_Base_MspInit+0x90>)
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	0109      	lsls	r1, r1, #4
 80007dc:	430a      	orrs	r2, r1
 80007de:	641a      	str	r2, [r3, #64]	; 0x40
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <HAL_TIM_Base_MspInit+0x90>)
 80007e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4013      	ands	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <HAL_TIM_Base_MspInit+0x98>)
 80007f2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 80007f6:	2214      	movs	r2, #20
 80007f8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 80007fc:	2210      	movs	r2, #16
 80007fe:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	0052      	lsls	r2, r2, #1
 8000812:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	00d2      	lsls	r2, r2, #3
 800081a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 800081e:	2220      	movs	r2, #32
 8000820:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fa5a 	bl	8000ce4 <HAL_DMA_Init>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 8000834:	f7ff ff38 	bl	80006a8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_TIM_Base_MspInit+0x94>)
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b004      	add	sp, #16
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40012c00 	.word	0x40012c00
 8000850:	40021000 	.word	0x40021000
 8000854:	200000c8 	.word	0x200000c8
 8000858:	40020008 	.word	0x40020008

0800085c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	240c      	movs	r4, #12
 8000866:	193b      	adds	r3, r7, r4
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f003 fae8 	bl	8003e44 <memset>
  if(htim->Instance==TIM1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <HAL_TIM_MspPostInit+0x70>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d122      	bne.n	80008c4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_TIM_MspPostInit+0x74>)
 8000880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_TIM_MspPostInit+0x74>)
 8000884:	2101      	movs	r1, #1
 8000886:	430a      	orrs	r2, r1
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_TIM_MspPostInit+0x74>)
 800088c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088e:	2201      	movs	r2, #1
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA0     ------> TIM1_CH1
    PA1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000896:	0021      	movs	r1, r4
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2203      	movs	r2, #3
 800089c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2202      	movs	r2, #2
 80008a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2205      	movs	r2, #5
 80008b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	187a      	adds	r2, r7, r1
 80008b8:	23a0      	movs	r3, #160	; 0xa0
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fc64 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b009      	add	sp, #36	; 0x24
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	40012c00 	.word	0x40012c00
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b08b      	sub	sp, #44	; 0x2c
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	2414      	movs	r4, #20
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0018      	movs	r0, r3
 80008e2:	2314      	movs	r3, #20
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f003 faac 	bl	8003e44 <memset>
  if(huart->Instance==USART2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <HAL_UART_MspInit+0x8c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d130      	bne.n	8000958 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <HAL_UART_MspInit+0x90>)
 80008f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <HAL_UART_MspInit+0x90>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0289      	lsls	r1, r1, #10
 8000900:	430a      	orrs	r2, r1
 8000902:	63da      	str	r2, [r3, #60]	; 0x3c
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <HAL_UART_MspInit+0x90>)
 8000906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	029b      	lsls	r3, r3, #10
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_UART_MspInit+0x90>)
 8000914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_UART_MspInit+0x90>)
 8000918:	2101      	movs	r1, #1
 800091a:	430a      	orrs	r2, r1
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_UART_MspInit+0x90>)
 8000920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000922:	2201      	movs	r2, #1
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800092a:	0021      	movs	r1, r4
 800092c:	187b      	adds	r3, r7, r1
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2202      	movs	r2, #2
 8000936:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2201      	movs	r2, #1
 8000948:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	187a      	adds	r2, r7, r1
 800094c:	23a0      	movs	r3, #160	; 0xa0
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	0011      	movs	r1, r2
 8000952:	0018      	movs	r0, r3
 8000954:	f000 fc1a 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b00b      	add	sp, #44	; 0x2c
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	40004400 	.word	0x40004400
 8000964:	40021000 	.word	0x40021000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f8b0 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	019b      	lsls	r3, r3, #6
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fd84 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <DMA1_Channel1_IRQHandler+0x14>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 faa8 	bl	8000f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	200000c8 	.word	0x200000c8

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <SystemInit+0x14>)
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	0512      	lsls	r2, r2, #20
 80009ce:	609a      	str	r2, [r3, #8]
#endif
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e0:	f7ff fff0 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009e6:	e003      	b.n	80009f0 <LoopCopyDataInit>

080009e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009ee:	3104      	adds	r1, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009f0:	480a      	ldr	r0, [pc, #40]	; (8000a1c <LoopForever+0xa>)
  ldr r3, =_edata
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <LoopForever+0xe>)
  adds r2, r0, r1
 80009f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009f8:	d3f6      	bcc.n	80009e8 <CopyDataInit>
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <LoopForever+0x12>)
  b LoopFillZerobss
 80009fc:	e002      	b.n	8000a04 <LoopFillZerobss>

080009fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a00:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a02:	3204      	adds	r2, #4

08000a04 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <LoopForever+0x16>)
  cmp r2, r3
 8000a06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a08:	d3f9      	bcc.n	80009fe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a0a:	f003 fa23 	bl	8003e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff fc07 	bl	8000220 <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   r0, =_estack
 8000a14:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000a18:	08003f88 	.word	0x08003f88
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a20:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a24:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a28:	200001c0 	.word	0x200001c0

08000a2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_IRQHandler>

08000a2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f000 f80e 	bl	8000a5c <HAL_InitTick>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	e001      	b.n	8000a50 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a4c:	f7ff fe32 	bl	80006b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a64:	230f      	movs	r3, #15
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <HAL_InitTick+0x88>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d02b      	beq.n	8000acc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_InitTick+0x8c>)
 8000a76:	681c      	ldr	r4, [r3, #0]
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <HAL_InitTick+0x88>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	23fa      	movs	r3, #250	; 0xfa
 8000a80:	0098      	lsls	r0, r3, #2
 8000a82:	f7ff fb41 	bl	8000108 <__udivsi3>
 8000a86:	0003      	movs	r3, r0
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0020      	movs	r0, r4
 8000a8c:	f7ff fb3c 	bl	8000108 <__udivsi3>
 8000a90:	0003      	movs	r3, r0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 f919 	bl	8000cca <HAL_SYSTICK_Config>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d112      	bne.n	8000ac2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d80a      	bhi.n	8000ab8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 f8e8 	bl	8000c80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_InitTick+0x90>)
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e00d      	b.n	8000ad4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ab8:	230f      	movs	r3, #15
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e008      	b.n	8000ad4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e003      	b.n	8000ad4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000acc:	230f      	movs	r3, #15
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	781b      	ldrb	r3, [r3, #0]
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b005      	add	sp, #20
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001a      	movs	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	18d2      	adds	r2, r2, r3
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_IncTick+0x20>)
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	200001bc 	.word	0x200001bc

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	200001bc 	.word	0x200001bc

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	0002      	movs	r2, r0
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3a:	d809      	bhi.n	8000b50 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	231f      	movs	r3, #31
 8000b44:	401a      	ands	r2, r3
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_EnableIRQ+0x30>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	000a      	movs	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	e000e100 	.word	0xe000e100

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	0002      	movs	r2, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b70:	d828      	bhi.n	8000bc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <__NVIC_SetPriority+0xd4>)
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	33c0      	adds	r3, #192	; 0xc0
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	589b      	ldr	r3, [r3, r2]
 8000b82:	1dfa      	adds	r2, r7, #7
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	0011      	movs	r1, r2
 8000b88:	2203      	movs	r2, #3
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	21ff      	movs	r1, #255	; 0xff
 8000b90:	4091      	lsls	r1, r2
 8000b92:	000a      	movs	r2, r1
 8000b94:	43d2      	mvns	r2, r2
 8000b96:	401a      	ands	r2, r3
 8000b98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	019b      	lsls	r3, r3, #6
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2303      	movs	r3, #3
 8000baa:	4003      	ands	r3, r0
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb0:	481f      	ldr	r0, [pc, #124]	; (8000c30 <__NVIC_SetPriority+0xd4>)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	33c0      	adds	r3, #192	; 0xc0
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bc2:	e031      	b.n	8000c28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <__NVIC_SetPriority+0xd8>)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	0019      	movs	r1, r3
 8000bcc:	230f      	movs	r3, #15
 8000bce:	400b      	ands	r3, r1
 8000bd0:	3b08      	subs	r3, #8
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	3306      	adds	r3, #6
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	3304      	adds	r3, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1dfa      	adds	r2, r7, #7
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	0011      	movs	r1, r2
 8000be4:	2203      	movs	r2, #3
 8000be6:	400a      	ands	r2, r1
 8000be8:	00d2      	lsls	r2, r2, #3
 8000bea:	21ff      	movs	r1, #255	; 0xff
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	43d2      	mvns	r2, r2
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	2303      	movs	r3, #3
 8000c06:	4003      	ands	r3, r0
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <__NVIC_SetPriority+0xd8>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	001c      	movs	r4, r3
 8000c14:	230f      	movs	r3, #15
 8000c16:	4023      	ands	r3, r4
 8000c18:	3b08      	subs	r3, #8
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	3306      	adds	r3, #6
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	18c3      	adds	r3, r0, r3
 8000c24:	3304      	adds	r3, #4
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b003      	add	sp, #12
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	045b      	lsls	r3, r3, #17
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d301      	bcc.n	8000c50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e010      	b.n	8000c72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <SysTick_Config+0x44>)
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	3a01      	subs	r2, #1
 8000c56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c58:	2301      	movs	r3, #1
 8000c5a:	425b      	negs	r3, r3
 8000c5c:	2103      	movs	r1, #3
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff ff7c 	bl	8000b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x44>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x44>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	1c02      	adds	r2, r0, #0
 8000c90:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ff5d 	bl	8000b5c <__NVIC_SetPriority>
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b004      	add	sp, #16
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	0002      	movs	r2, r0
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ff33 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ffaf 	bl	8000c38 <SysTick_Config>
 8000cda:	0003      	movs	r3, r0
}
 8000cdc:	0018      	movs	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b002      	add	sp, #8
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e077      	b.n	8000de6 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a3d      	ldr	r2, [pc, #244]	; (8000df0 <HAL_DMA_Init+0x10c>)
 8000cfc:	4694      	mov	ip, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	2114      	movs	r1, #20
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fa00 	bl	8000108 <__udivsi3>
 8000d08:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000d0a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2225      	movs	r2, #37	; 0x25
 8000d14:	2102      	movs	r1, #2
 8000d16:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4934      	ldr	r1, [pc, #208]	; (8000df4 <HAL_DMA_Init+0x110>)
 8000d24:	400a      	ands	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6819      	ldr	r1, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 f9c3 	bl	80010ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	01db      	lsls	r3, r3, #7
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d102      	bne.n	8000d78 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d80:	21ff      	movs	r1, #255	; 0xff
 8000d82:	400a      	ands	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000d8e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d011      	beq.n	8000dbc <HAL_DMA_Init+0xd8>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d80d      	bhi.n	8000dbc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 f9ce 	bl	8001144 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	e008      	b.n	8000dce <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2225      	movs	r2, #37	; 0x25
 8000dd8:	2101      	movs	r1, #1
 8000dda:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2224      	movs	r2, #36	; 0x24
 8000de0:	2100      	movs	r1, #0
 8000de2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	bffdfff8 	.word	0xbffdfff8
 8000df4:	ffff800f 	.word	0xffff800f

08000df8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e06:	2317      	movs	r3, #23
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2224      	movs	r2, #36	; 0x24
 8000e12:	5c9b      	ldrb	r3, [r3, r2]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d101      	bne.n	8000e1c <HAL_DMA_Start_IT+0x24>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e070      	b.n	8000efe <HAL_DMA_Start_IT+0x106>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2224      	movs	r2, #36	; 0x24
 8000e20:	2101      	movs	r1, #1
 8000e22:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2225      	movs	r2, #37	; 0x25
 8000e28:	5c9b      	ldrb	r3, [r3, r2]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d157      	bne.n	8000ee0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2225      	movs	r2, #37	; 0x25
 8000e34:	2102      	movs	r1, #2
 8000e36:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	438a      	bics	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	68b9      	ldr	r1, [r7, #8]
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f000 f909 	bl	800106c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d008      	beq.n	8000e74 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	210e      	movs	r1, #14
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e00f      	b.n	8000e94 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2104      	movs	r1, #4
 8000e80:	438a      	bics	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	210a      	movs	r1, #10
 8000e90:	430a      	orrs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	025b      	lsls	r3, r3, #9
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d008      	beq.n	8000eb4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	0049      	lsls	r1, r1, #1
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d008      	beq.n	8000ece <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	0049      	lsls	r1, r1, #1
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e007      	b.n	8000ef0 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2224      	movs	r2, #36	; 0x24
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ee8:	2317      	movs	r3, #23
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2202      	movs	r2, #2
 8000eee:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2224      	movs	r2, #36	; 0x24
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	5499      	strb	r1, [r3, r2]

  return status;
 8000ef8:	2317      	movs	r3, #23
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	781b      	ldrb	r3, [r3, #0]
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b006      	add	sp, #24
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8000f10:	4b55      	ldr	r3, [pc, #340]	; (8001068 <HAL_DMA_IRQHandler+0x160>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	221c      	movs	r2, #28
 8000f24:	4013      	ands	r3, r2
 8000f26:	2204      	movs	r2, #4
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d027      	beq.n	8000f82 <HAL_DMA_IRQHandler+0x7a>
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2204      	movs	r2, #4
 8000f36:	4013      	ands	r3, r2
 8000f38:	d023      	beq.n	8000f82 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2220      	movs	r2, #32
 8000f42:	4013      	ands	r3, r2
 8000f44:	d107      	bne.n	8000f56 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2104      	movs	r1, #4
 8000f52:	438a      	bics	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000f56:	4b44      	ldr	r3, [pc, #272]	; (8001068 <HAL_DMA_IRQHandler+0x160>)
 8000f58:	6859      	ldr	r1, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	221c      	movs	r2, #28
 8000f60:	4013      	ands	r3, r2
 8000f62:	2204      	movs	r2, #4
 8000f64:	409a      	lsls	r2, r3
 8000f66:	4b40      	ldr	r3, [pc, #256]	; (8001068 <HAL_DMA_IRQHandler+0x160>)
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d100      	bne.n	8000f76 <HAL_DMA_IRQHandler+0x6e>
 8000f74:	e073      	b.n	800105e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	0010      	movs	r0, r2
 8000f7e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f80:	e06d      	b.n	800105e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	221c      	movs	r2, #28
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	0013      	movs	r3, r2
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4013      	ands	r3, r2
 8000f94:	d02e      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0xec>
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2202      	movs	r2, #2
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d02a      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	210a      	movs	r1, #10
 8000fb6:	438a      	bics	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2225      	movs	r2, #37	; 0x25
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <HAL_DMA_IRQHandler+0x160>)
 8000fc4:	6859      	ldr	r1, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	221c      	movs	r2, #28
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2202      	movs	r2, #2
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <HAL_DMA_IRQHandler+0x160>)
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2224      	movs	r2, #36	; 0x24
 8000fdc:	2100      	movs	r1, #0
 8000fde:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d03a      	beq.n	800105e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	0010      	movs	r0, r2
 8000ff0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000ff2:	e034      	b.n	800105e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	221c      	movs	r2, #28
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4013      	ands	r3, r2
 8001006:	d02b      	beq.n	8001060 <HAL_DMA_IRQHandler+0x158>
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2208      	movs	r2, #8
 800100c:	4013      	ands	r3, r2
 800100e:	d027      	beq.n	8001060 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	210e      	movs	r1, #14
 800101c:	438a      	bics	r2, r1
 800101e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_DMA_IRQHandler+0x160>)
 8001022:	6859      	ldr	r1, [r3, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	221c      	movs	r2, #28
 800102a:	4013      	ands	r3, r2
 800102c:	2201      	movs	r2, #1
 800102e:	409a      	lsls	r2, r3
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_DMA_IRQHandler+0x160>)
 8001032:	430a      	orrs	r2, r1
 8001034:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2225      	movs	r2, #37	; 0x25
 8001040:	2101      	movs	r1, #1
 8001042:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2224      	movs	r2, #36	; 0x24
 8001048:	2100      	movs	r1, #0
 800104a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	0010      	movs	r0, r2
 800105c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46c0      	nop			; (mov r8, r8)
}
 8001062:	46bd      	mov	sp, r7
 8001064:	b004      	add	sp, #16
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020000 	.word	0x40020000

0800106c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001082:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001094:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <DMA_SetConfig+0x7c>)
 8001098:	6859      	ldr	r1, [r3, #4]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	221c      	movs	r2, #28
 80010a0:	4013      	ands	r3, r2
 80010a2:	2201      	movs	r2, #1
 80010a4:	409a      	lsls	r2, r3
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <DMA_SetConfig+0x7c>)
 80010a8:	430a      	orrs	r2, r1
 80010aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b10      	cmp	r3, #16
 80010ba:	d108      	bne.n	80010ce <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010cc:	e007      	b.n	80010de <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	60da      	str	r2, [r3, #12]
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b004      	add	sp, #16
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	40020000 	.word	0x40020000

080010ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	001a      	movs	r2, r3
 80010fa:	23ff      	movs	r3, #255	; 0xff
 80010fc:	4013      	ands	r3, r2
 80010fe:	3b08      	subs	r3, #8
 8001100:	2114      	movs	r1, #20
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff f800 	bl	8000108 <__udivsi3>
 8001108:	0003      	movs	r3, r0
 800110a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001114:	4694      	mov	ip, r2
 8001116:	4463      	add	r3, ip
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	001a      	movs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001124:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	221c      	movs	r2, #28
 800112a:	4013      	ands	r3, r2
 800112c:	2201      	movs	r2, #1
 800112e:	409a      	lsls	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bd80      	pop	{r7, pc}
 800113c:	10008200 	.word	0x10008200
 8001140:	40020880 	.word	0x40020880

08001144 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	22ff      	movs	r2, #255	; 0xff
 8001152:	4013      	ands	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800115a:	4694      	mov	ip, r2
 800115c:	4463      	add	r3, ip
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	001a      	movs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800116a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3b01      	subs	r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	4013      	ands	r3, r2
 8001174:	2201      	movs	r2, #1
 8001176:	409a      	lsls	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b004      	add	sp, #16
 8001182:	bd80      	pop	{r7, pc}
 8001184:	1000823f 	.word	0x1000823f
 8001188:	40020940 	.word	0x40020940

0800118c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800119a:	e153      	b.n	8001444 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4091      	lsls	r1, r2
 80011a6:	000a      	movs	r2, r1
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d100      	bne.n	80011b4 <HAL_GPIO_Init+0x28>
 80011b2:	e144      	b.n	800143e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x38>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b12      	cmp	r3, #18
 80011c2:	d125      	bne.n	8001210 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	58d3      	ldr	r3, [r2, r3]
 80011d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	2207      	movs	r2, #7
 80011d6:	4013      	ands	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	409a      	lsls	r2, r3
 80011de:	0013      	movs	r3, r2
 80011e0:	43da      	mvns	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	4013      	ands	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	220f      	movs	r2, #15
 80011ee:	401a      	ands	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	2107      	movs	r1, #7
 80011f4:	400b      	ands	r3, r1
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	409a      	lsls	r2, r3
 80011fa:	0013      	movs	r3, r2
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	4313      	orrs	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	08da      	lsrs	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	6979      	ldr	r1, [r7, #20]
 800120e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	409a      	lsls	r2, r3
 800121e:	0013      	movs	r3, r2
 8001220:	43da      	mvns	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	401a      	ands	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	4313      	orrs	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d00b      	beq.n	8001264 <HAL_GPIO_Init+0xd8>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d007      	beq.n	8001264 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001258:	2b11      	cmp	r3, #17
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b12      	cmp	r3, #18
 8001262:	d130      	bne.n	80012c6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	43da      	mvns	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	409a      	lsls	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	4313      	orrs	r3, r2
 800128c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800129a:	2201      	movs	r2, #1
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	43da      	mvns	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	4013      	ands	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	2201      	movs	r2, #1
 80012b2:	401a      	ands	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d017      	beq.n	80012fe <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	43da      	mvns	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	4013      	ands	r3, r2
 80012e4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	055b      	lsls	r3, r3, #21
 8001306:	4013      	ands	r3, r2
 8001308:	d100      	bne.n	800130c <HAL_GPIO_Init+0x180>
 800130a:	e098      	b.n	800143e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800130c:	4a53      	ldr	r2, [pc, #332]	; (800145c <HAL_GPIO_Init+0x2d0>)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3318      	adds	r3, #24
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	589b      	ldr	r3, [r3, r2]
 8001318:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	2203      	movs	r2, #3
 800131e:	4013      	ands	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	220f      	movs	r2, #15
 8001324:	409a      	lsls	r2, r3
 8001326:	0013      	movs	r3, r2
 8001328:	43da      	mvns	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	4013      	ands	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	23a0      	movs	r3, #160	; 0xa0
 8001334:	05db      	lsls	r3, r3, #23
 8001336:	429a      	cmp	r2, r3
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x1e2>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a48      	ldr	r2, [pc, #288]	; (8001460 <HAL_GPIO_Init+0x2d4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x1de>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_GPIO_Init+0x2d8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x1da>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a46      	ldr	r2, [pc, #280]	; (8001468 <HAL_GPIO_Init+0x2dc>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x1d6>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a45      	ldr	r2, [pc, #276]	; (800146c <HAL_GPIO_Init+0x2e0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x1d2>
 800135a:	2305      	movs	r3, #5
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x1e4>
 800135e:	2306      	movs	r3, #6
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x1e4>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x1e4>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x1e4>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x1e4>
 800136e:	2300      	movs	r3, #0
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	2103      	movs	r1, #3
 8001374:	400a      	ands	r2, r1
 8001376:	00d2      	lsls	r2, r2, #3
 8001378:	4093      	lsls	r3, r2
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4313      	orrs	r3, r2
 800137e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001380:	4936      	ldr	r1, [pc, #216]	; (800145c <HAL_GPIO_Init+0x2d0>)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3318      	adds	r3, #24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800138e:	4a33      	ldr	r2, [pc, #204]	; (800145c <HAL_GPIO_Init+0x2d0>)
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	58d3      	ldr	r3, [r2, r3]
 8001394:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43da      	mvns	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	4013      	ands	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	025b      	lsls	r3, r3, #9
 80013a8:	4013      	ands	r3, r2
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80013b4:	4929      	ldr	r1, [pc, #164]	; (800145c <HAL_GPIO_Init+0x2d0>)
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_GPIO_Init+0x2d0>)
 80013be:	2384      	movs	r3, #132	; 0x84
 80013c0:	58d3      	ldr	r3, [r2, r3]
 80013c2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43da      	mvns	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4013      	ands	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	029b      	lsls	r3, r3, #10
 80013d6:	4013      	ands	r3, r2
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80013e2:	491e      	ldr	r1, [pc, #120]	; (800145c <HAL_GPIO_Init+0x2d0>)
 80013e4:	2284      	movs	r2, #132	; 0x84
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_GPIO_Init+0x2d0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43da      	mvns	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	4013      	ands	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	035b      	lsls	r3, r3, #13
 8001402:	4013      	ands	r3, r2
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_GPIO_Init+0x2d0>)
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_GPIO_Init+0x2d0>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43da      	mvns	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	039b      	lsls	r3, r3, #14
 800142c:	4013      	ands	r3, r2
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_GPIO_Init+0x2d0>)
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	3301      	adds	r3, #1
 8001442:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	40da      	lsrs	r2, r3
 800144c:	1e13      	subs	r3, r2, #0
 800144e:	d000      	beq.n	8001452 <HAL_GPIO_Init+0x2c6>
 8001450:	e6a4      	b.n	800119c <HAL_GPIO_Init+0x10>
  }
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b006      	add	sp, #24
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021800 	.word	0x40021800
 8001460:	50000400 	.word	0x50000400
 8001464:	50000800 	.word	0x50000800
 8001468:	50000c00 	.word	0x50000c00
 800146c:	50001400 	.word	0x50001400

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	0008      	movs	r0, r1
 800147a:	0011      	movs	r1, r2
 800147c:	1cbb      	adds	r3, r7, #2
 800147e:	1c02      	adds	r2, r0, #0
 8001480:	801a      	strh	r2, [r3, #0]
 8001482:	1c7b      	adds	r3, r7, #1
 8001484:	1c0a      	adds	r2, r1, #0
 8001486:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001488:	1c7b      	adds	r3, r7, #1
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001490:	1cbb      	adds	r3, r7, #2
 8001492:	881a      	ldrh	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149a:	1cbb      	adds	r3, r7, #2
 800149c:	881a      	ldrh	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	0002      	movs	r2, r0
 80014b4:	1dbb      	adds	r3, r7, #6
 80014b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	1dba      	adds	r2, r7, #6
 80014be:	8812      	ldrh	r2, [r2, #0]
 80014c0:	4013      	ands	r3, r2
 80014c2:	d008      	beq.n	80014d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80014c6:	1dba      	adds	r2, r7, #6
 80014c8:	8812      	ldrh	r2, [r2, #0]
 80014ca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80014cc:	1dbb      	adds	r3, r7, #6
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 f815 	bl	8001500 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	1dba      	adds	r2, r7, #6
 80014dc:	8812      	ldrh	r2, [r2, #0]
 80014de:	4013      	ands	r3, r2
 80014e0:	d008      	beq.n	80014f4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80014e4:	1dba      	adds	r2, r7, #6
 80014e6:	8812      	ldrh	r2, [r2, #0]
 80014e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80014ea:	1dbb      	adds	r3, r7, #6
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 f810 	bl	8001514 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021800 	.word	0x40021800

08001500 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	0002      	movs	r2, r0
 8001508:	1dbb      	adds	r3, r7, #6
 800150a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	0002      	movs	r2, r0
 800151c:	1dbb      	adds	r3, r7, #6
 800151e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e08f      	b.n	800165a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2241      	movs	r2, #65	; 0x41
 800153e:	5c9b      	ldrb	r3, [r3, r2]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d107      	bne.n	8001556 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2240      	movs	r2, #64	; 0x40
 800154a:	2100      	movs	r1, #0
 800154c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff f8d3 	bl	80006fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2241      	movs	r2, #65	; 0x41
 800155a:	2124      	movs	r1, #36	; 0x24
 800155c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	438a      	bics	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	493b      	ldr	r1, [pc, #236]	; (8001664 <HAL_I2C_Init+0x13c>)
 8001578:	400a      	ands	r2, r1
 800157a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4938      	ldr	r1, [pc, #224]	; (8001668 <HAL_I2C_Init+0x140>)
 8001588:	400a      	ands	r2, r1
 800158a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d108      	bne.n	80015a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	0209      	lsls	r1, r1, #8
 80015a0:	430a      	orrs	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	e007      	b.n	80015b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2184      	movs	r1, #132	; 0x84
 80015b0:	0209      	lsls	r1, r1, #8
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d109      	bne.n	80015d2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0109      	lsls	r1, r1, #4
 80015cc:	430a      	orrs	r2, r1
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	e007      	b.n	80015e2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4923      	ldr	r1, [pc, #140]	; (800166c <HAL_I2C_Init+0x144>)
 80015de:	400a      	ands	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4920      	ldr	r1, [pc, #128]	; (8001670 <HAL_I2C_Init+0x148>)
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	491a      	ldr	r1, [pc, #104]	; (8001668 <HAL_I2C_Init+0x140>)
 80015fe:	400a      	ands	r2, r1
 8001600:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	431a      	orrs	r2, r3
 800160c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69d9      	ldr	r1, [r3, #28]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2101      	movs	r1, #1
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2241      	movs	r2, #65	; 0x41
 8001646:	2120      	movs	r1, #32
 8001648:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2242      	movs	r2, #66	; 0x42
 8001654:	2100      	movs	r1, #0
 8001656:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	f0ffffff 	.word	0xf0ffffff
 8001668:	ffff7fff 	.word	0xffff7fff
 800166c:	fffff7ff 	.word	0xfffff7ff
 8001670:	02008000 	.word	0x02008000

08001674 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2241      	movs	r2, #65	; 0x41
 8001682:	5c9b      	ldrb	r3, [r3, r2]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b20      	cmp	r3, #32
 8001688:	d138      	bne.n	80016fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001694:	2302      	movs	r3, #2
 8001696:	e032      	b.n	80016fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2240      	movs	r2, #64	; 0x40
 800169c:	2101      	movs	r1, #1
 800169e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2241      	movs	r2, #65	; 0x41
 80016a4:	2124      	movs	r1, #36	; 0x24
 80016a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4911      	ldr	r1, [pc, #68]	; (8001708 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2101      	movs	r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2241      	movs	r2, #65	; 0x41
 80016ec:	2120      	movs	r1, #32
 80016ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2240      	movs	r2, #64	; 0x40
 80016f4:	2100      	movs	r1, #0
 80016f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e000      	b.n	80016fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016fc:	2302      	movs	r3, #2
  }
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	ffffefff 	.word	0xffffefff

0800170c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2241      	movs	r2, #65	; 0x41
 800171a:	5c9b      	ldrb	r3, [r3, r2]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b20      	cmp	r3, #32
 8001720:	d139      	bne.n	8001796 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2240      	movs	r2, #64	; 0x40
 8001726:	5c9b      	ldrb	r3, [r3, r2]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800172c:	2302      	movs	r3, #2
 800172e:	e033      	b.n	8001798 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	2101      	movs	r1, #1
 8001736:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2241      	movs	r2, #65	; 0x41
 800173c:	2124      	movs	r1, #36	; 0x24
 800173e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2101      	movs	r1, #1
 800174c:	438a      	bics	r2, r1
 800174e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2241      	movs	r2, #65	; 0x41
 8001786:	2120      	movs	r1, #32
 8001788:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2240      	movs	r2, #64	; 0x40
 800178e:	2100      	movs	r1, #0
 8001790:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001796:	2302      	movs	r3, #2
  }
}
 8001798:	0018      	movs	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	b004      	add	sp, #16
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	fffff0ff 	.word	0xfffff0ff

080017a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e1d0      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	d100      	bne.n	80017c2 <HAL_RCC_OscConfig+0x1e>
 80017c0:	e069      	b.n	8001896 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	4bc8      	ldr	r3, [pc, #800]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2238      	movs	r2, #56	; 0x38
 80017c8:	4013      	ands	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d105      	bne.n	80017de <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d15d      	bne.n	8001896 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e1bc      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	025b      	lsls	r3, r3, #9
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_OscConfig+0x56>
 80017ea:	4bbe      	ldr	r3, [pc, #760]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4bbd      	ldr	r3, [pc, #756]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	0249      	lsls	r1, r1, #9
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e020      	b.n	800183c <HAL_RCC_OscConfig+0x98>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	23a0      	movs	r3, #160	; 0xa0
 8001800:	02db      	lsls	r3, r3, #11
 8001802:	429a      	cmp	r2, r3
 8001804:	d10e      	bne.n	8001824 <HAL_RCC_OscConfig+0x80>
 8001806:	4bb7      	ldr	r3, [pc, #732]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4bb6      	ldr	r3, [pc, #728]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	02c9      	lsls	r1, r1, #11
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	4bb3      	ldr	r3, [pc, #716]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4bb2      	ldr	r3, [pc, #712]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	0249      	lsls	r1, r1, #9
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0x98>
 8001824:	4baf      	ldr	r3, [pc, #700]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4bae      	ldr	r3, [pc, #696]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 800182a:	49af      	ldr	r1, [pc, #700]	; (8001ae8 <HAL_RCC_OscConfig+0x344>)
 800182c:	400a      	ands	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	4bac      	ldr	r3, [pc, #688]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4bab      	ldr	r3, [pc, #684]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001836:	49ad      	ldr	r1, [pc, #692]	; (8001aec <HAL_RCC_OscConfig+0x348>)
 8001838:	400a      	ands	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d014      	beq.n	800186e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff f966 	bl	8000b14 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800184e:	f7ff f961 	bl	8000b14 <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b64      	cmp	r3, #100	; 0x64
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e17b      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001860:	4ba0      	ldr	r3, [pc, #640]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	029b      	lsls	r3, r3, #10
 8001868:	4013      	ands	r3, r2
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0xaa>
 800186c:	e013      	b.n	8001896 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	f7ff f951 	bl	8000b14 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001878:	f7ff f94c 	bl	8000b14 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e166      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	4b96      	ldr	r3, [pc, #600]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	029b      	lsls	r3, r3, #10
 8001892:	4013      	ands	r3, r2
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d100      	bne.n	80018a2 <HAL_RCC_OscConfig+0xfe>
 80018a0:	e086      	b.n	80019b0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a2:	4b90      	ldr	r3, [pc, #576]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2238      	movs	r2, #56	; 0x38
 80018a8:	4013      	ands	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d12f      	bne.n	8001912 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e14c      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b89      	ldr	r3, [pc, #548]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a8b      	ldr	r2, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x34c>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	0019      	movs	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	021a      	lsls	r2, r3, #8
 80018ce:	4b85      	ldr	r3, [pc, #532]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d112      	bne.n	8001900 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018da:	4b82      	ldr	r3, [pc, #520]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a85      	ldr	r2, [pc, #532]	; (8001af4 <HAL_RCC_OscConfig+0x350>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	4b7e      	ldr	r3, [pc, #504]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018ee:	4b7d      	ldr	r3, [pc, #500]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	0adb      	lsrs	r3, r3, #11
 80018f4:	2207      	movs	r2, #7
 80018f6:	4013      	ands	r3, r2
 80018f8:	4a7f      	ldr	r2, [pc, #508]	; (8001af8 <HAL_RCC_OscConfig+0x354>)
 80018fa:	40da      	lsrs	r2, r3
 80018fc:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <HAL_RCC_OscConfig+0x358>)
 80018fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001900:	4b7f      	ldr	r3, [pc, #508]	; (8001b00 <HAL_RCC_OscConfig+0x35c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0018      	movs	r0, r3
 8001906:	f7ff f8a9 	bl	8000a5c <HAL_InitTick>
 800190a:	1e03      	subs	r3, r0, #0
 800190c:	d050      	beq.n	80019b0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e122      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d030      	beq.n	800197c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800191a:	4b72      	ldr	r3, [pc, #456]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a75      	ldr	r2, [pc, #468]	; (8001af4 <HAL_RCC_OscConfig+0x350>)
 8001920:	4013      	ands	r3, r2
 8001922:	0019      	movs	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	4b6e      	ldr	r3, [pc, #440]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 800192a:	430a      	orrs	r2, r1
 800192c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800192e:	4b6d      	ldr	r3, [pc, #436]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b6c      	ldr	r3, [pc, #432]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	0049      	lsls	r1, r1, #1
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff f8ea 	bl	8000b14 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001946:	f7ff f8e5 	bl	8000b14 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e0ff      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001958:	4b62      	ldr	r3, [pc, #392]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4013      	ands	r3, r2
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4a61      	ldr	r2, [pc, #388]	; (8001af0 <HAL_RCC_OscConfig+0x34c>)
 800196a:	4013      	ands	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	021a      	lsls	r2, r3, #8
 8001974:	4b5b      	ldr	r3, [pc, #364]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	e019      	b.n	80019b0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800197c:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001982:	4960      	ldr	r1, [pc, #384]	; (8001b04 <HAL_RCC_OscConfig+0x360>)
 8001984:	400a      	ands	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f8c4 	bl	8000b14 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001992:	f7ff f8bf 	bl	8000b14 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0d9      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a4:	4b4f      	ldr	r3, [pc, #316]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4013      	ands	r3, r2
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2208      	movs	r2, #8
 80019b6:	4013      	ands	r3, r2
 80019b8:	d042      	beq.n	8001a40 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80019ba:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2238      	movs	r2, #56	; 0x38
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b18      	cmp	r3, #24
 80019c4:	d105      	bne.n	80019d2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d138      	bne.n	8001a40 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0c2      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d019      	beq.n	8001a0e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019da:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80019dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019de:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f895 	bl	8000b14 <HAL_GetTick>
 80019ea:	0003      	movs	r3, r0
 80019ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80019f0:	f7ff f890 	bl	8000b14 <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e0aa      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a06:	2202      	movs	r2, #2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d0f1      	beq.n	80019f0 <HAL_RCC_OscConfig+0x24c>
 8001a0c:	e018      	b.n	8001a40 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a0e:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a14:	2101      	movs	r1, #1
 8001a16:	438a      	bics	r2, r1
 8001a18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f87b 	bl	8000b14 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a24:	f7ff f876 	bl	8000b14 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e090      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d1f1      	bne.n	8001a24 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2204      	movs	r2, #4
 8001a46:	4013      	ands	r3, r2
 8001a48:	d100      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2a8>
 8001a4a:	e084      	b.n	8001b56 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2238      	movs	r2, #56	; 0x38
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d000      	beq.n	8001a6a <HAL_RCC_OscConfig+0x2c6>
 8001a68:	e075      	b.n	8001b56 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e074      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2e0>
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a82:	e01c      	b.n	8001abe <HAL_RCC_OscConfig+0x31a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x302>
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a92:	2104      	movs	r1, #4
 8001a94:	430a      	orrs	r2, r1
 8001a96:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aa4:	e00b      	b.n	8001abe <HAL_RCC_OscConfig+0x31a>
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001aac:	2101      	movs	r1, #1
 8001aae:	438a      	bics	r2, r1
 8001ab0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_OscConfig+0x340>)
 8001ab8:	2104      	movs	r1, #4
 8001aba:	438a      	bics	r2, r1
 8001abc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d028      	beq.n	8001b18 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f825 	bl	8000b14 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f820 	bl	8000b14 <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <HAL_RCC_OscConfig+0x364>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d915      	bls.n	8001b0c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e039      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	fffeffff 	.word	0xfffeffff
 8001aec:	fffbffff 	.word	0xfffbffff
 8001af0:	ffff80ff 	.word	0xffff80ff
 8001af4:	ffffc7ff 	.word	0xffffc7ff
 8001af8:	02dc6c00 	.word	0x02dc6c00
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004
 8001b04:	fffffeff 	.word	0xfffffeff
 8001b08:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_RCC_OscConfig+0x3bc>)
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d0dc      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x32c>
 8001b16:	e013      	b.n	8001b40 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7fe fffc 	bl	8000b14 <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001b20:	e009      	b.n	8001b36 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7fe fff7 	bl	8000b14 <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <HAL_RCC_OscConfig+0x3c0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e010      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_RCC_OscConfig+0x3bc>)
 8001b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b40:	230f      	movs	r3, #15
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d105      	bne.n	8001b56 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_OscConfig+0x3bc>)
 8001b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_RCC_OscConfig+0x3bc>)
 8001b50:	4905      	ldr	r1, [pc, #20]	; (8001b68 <HAL_RCC_OscConfig+0x3c4>)
 8001b52:	400a      	ands	r2, r1
 8001b54:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b006      	add	sp, #24
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	00001388 	.word	0x00001388
 8001b68:	efffffff 	.word	0xefffffff

08001b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0e9      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2207      	movs	r2, #7
 8001b86:	4013      	ands	r3, r2
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d91e      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b73      	ldr	r3, [pc, #460]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2207      	movs	r2, #7
 8001b94:	4393      	bics	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	4b70      	ldr	r3, [pc, #448]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ba0:	f7fe ffb8 	bl	8000b14 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001baa:	f7fe ffb3 	bl	8000b14 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4a6a      	ldr	r2, [pc, #424]	; (8001d60 <HAL_RCC_ClockConfig+0x1f4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0ca      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bbe:	4b67      	ldr	r3, [pc, #412]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1ee      	bne.n	8001baa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d017      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2204      	movs	r2, #4
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001be0:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a60      	ldr	r2, [pc, #384]	; (8001d68 <HAL_RCC_ClockConfig+0x1fc>)
 8001be6:	401a      	ands	r2, r3
 8001be8:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001bea:	21b0      	movs	r1, #176	; 0xb0
 8001bec:	0109      	lsls	r1, r1, #4
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf2:	4b5c      	ldr	r3, [pc, #368]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	4a5d      	ldr	r2, [pc, #372]	; (8001d6c <HAL_RCC_ClockConfig+0x200>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4b58      	ldr	r3, [pc, #352]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c02:	430a      	orrs	r2, r1
 8001c04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d055      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001c10:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	221c      	movs	r2, #28
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	4b51      	ldr	r3, [pc, #324]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2c:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	4013      	ands	r3, r2
 8001c36:	d11f      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e08b      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c44:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d113      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e07f      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c5c:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c60:	2202      	movs	r2, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	d108      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e074      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c6a:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	2202      	movs	r2, #2
 8001c70:	4013      	ands	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e06d      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	4393      	bics	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c8c:	f7fe ff42 	bl	8000b14 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c94:	e009      	b.n	8001caa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c96:	f7fe ff3d 	bl	8000b14 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	4a2f      	ldr	r2, [pc, #188]	; (8001d60 <HAL_RCC_ClockConfig+0x1f4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e054      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2238      	movs	r2, #56	; 0x38
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1ec      	bne.n	8001c96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d21e      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2207      	movs	r2, #7
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cdc:	f7fe ff1a 	bl	8000b14 <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce4:	e009      	b.n	8001cfa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce6:	f7fe ff15 	bl	8000b14 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_RCC_ClockConfig+0x1f4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e02c      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2207      	movs	r2, #7
 8001d00:	4013      	ands	r3, r2
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1ee      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d009      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <HAL_RCC_ClockConfig+0x204>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d26:	f000 f82b 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d2a:	0001      	movs	r1, r0
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	220f      	movs	r2, #15
 8001d34:	401a      	ands	r2, r3
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_RCC_ClockConfig+0x208>)
 8001d38:	0092      	lsls	r2, r2, #2
 8001d3a:	58d3      	ldr	r3, [r2, r3]
 8001d3c:	221f      	movs	r2, #31
 8001d3e:	4013      	ands	r3, r2
 8001d40:	000a      	movs	r2, r1
 8001d42:	40da      	lsrs	r2, r3
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_RCC_ClockConfig+0x20c>)
 8001d46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_RCC_ClockConfig+0x210>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7fe fe85 	bl	8000a5c <HAL_InitTick>
 8001d52:	0003      	movs	r3, r0
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b004      	add	sp, #16
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	00001388 	.word	0x00001388
 8001d64:	40021000 	.word	0x40021000
 8001d68:	ffff84ff 	.word	0xffff84ff
 8001d6c:	fffff0ff 	.word	0xfffff0ff
 8001d70:	ffff8fff 	.word	0xffff8fff
 8001d74:	08003eb4 	.word	0x08003eb4
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2238      	movs	r2, #56	; 0x38
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d10f      	bne.n	8001db0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0adb      	lsrs	r3, r3, #11
 8001d96:	2207      	movs	r2, #7
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	0013      	movs	r3, r2
 8001da0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001da2:	6839      	ldr	r1, [r7, #0]
 8001da4:	4815      	ldr	r0, [pc, #84]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x7c>)
 8001da6:	f7fe f9af 	bl	8000108 <__udivsi3>
 8001daa:	0003      	movs	r3, r0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	e01e      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2238      	movs	r2, #56	; 0x38
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d102      	bne.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x7c>)
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2238      	movs	r2, #56	; 0x38
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d103      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	e00b      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2238      	movs	r2, #56	; 0x38
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b18      	cmp	r3, #24
 8001de0:	d103      	bne.n	8001dea <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001de2:	23fa      	movs	r3, #250	; 0xfa
 8001de4:	01db      	lsls	r3, r3, #7
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	e001      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001dee:	687b      	ldr	r3, [r7, #4]
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	02dc6c00 	.word	0x02dc6c00

08001e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	20000000 	.word	0x20000000

08001e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001e18:	f7ff fff2 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e1c:	0001      	movs	r1, r0
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	0b1b      	lsrs	r3, r3, #12
 8001e24:	2207      	movs	r2, #7
 8001e26:	401a      	ands	r2, r3
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	58d3      	ldr	r3, [r2, r3]
 8001e2e:	221f      	movs	r2, #31
 8001e30:	4013      	ands	r3, r2
 8001e32:	40d9      	lsrs	r1, r3
 8001e34:	000b      	movs	r3, r1
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08003ef4 	.word	0x08003ef4

08001e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e4c:	2313      	movs	r3, #19
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e54:	2312      	movs	r3, #18
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	029b      	lsls	r3, r3, #10
 8001e64:	4013      	ands	r3, r2
 8001e66:	d100      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e68:	e079      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6a:	2011      	movs	r0, #17
 8001e6c:	183b      	adds	r3, r7, r0
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b64      	ldr	r3, [pc, #400]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	055b      	lsls	r3, r3, #21
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d110      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b61      	ldr	r3, [pc, #388]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e82:	4b60      	ldr	r3, [pc, #384]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	0549      	lsls	r1, r1, #21
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	055b      	lsls	r3, r3, #21
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	183b      	adds	r3, r7, r0
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001ea0:	4b58      	ldr	r3, [pc, #352]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ea2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ea4:	23c0      	movs	r3, #192	; 0xc0
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d019      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d014      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001ebc:	4b51      	ldr	r3, [pc, #324]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	4a51      	ldr	r2, [pc, #324]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ec6:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eca:	4b4e      	ldr	r3, [pc, #312]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	0249      	lsls	r1, r1, #9
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ed6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ed8:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001eda:	494c      	ldr	r1, [pc, #304]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001ee0:	4b48      	ldr	r3, [pc, #288]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d016      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7fe fe11 	bl	8000b14 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ef6:	e00c      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7fe fe0c 	bl	8000b14 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	4a43      	ldr	r2, [pc, #268]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d904      	bls.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001f08:	2313      	movs	r3, #19
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	701a      	strb	r2, [r3, #0]
          break;
 8001f10:	e004      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f12:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	2202      	movs	r2, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d0ed      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001f1c:	2313      	movs	r3, #19
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10a      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	4a37      	ldr	r2, [pc, #220]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	0019      	movs	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f3a:	e005      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f3c:	2312      	movs	r3, #18
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2213      	movs	r2, #19
 8001f42:	18ba      	adds	r2, r7, r2
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f48:	2311      	movs	r3, #17
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f58:	492e      	ldr	r1, [pc, #184]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	4013      	ands	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	4393      	bics	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2240      	movs	r2, #64	; 0x40
 8001f82:	4013      	ands	r3, r2
 8001f84:	d009      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	4a23      	ldr	r2, [pc, #140]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	01db      	lsls	r3, r3, #7
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d008      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	0899      	lsrs	r1, r3, #2
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d009      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da09      	bge.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	22e0      	movs	r2, #224	; 0xe0
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001ff4:	2312      	movs	r3, #18
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	781b      	ldrb	r3, [r3, #0]
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b006      	add	sp, #24
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	40021000 	.word	0x40021000
 8002008:	fffffcff 	.word	0xfffffcff
 800200c:	fffeffff 	.word	0xfffeffff
 8002010:	00001388 	.word	0x00001388
 8002014:	efffffff 	.word	0xefffffff
 8002018:	ffffcfff 	.word	0xffffcfff
 800201c:	ffff3fff 	.word	0xffff3fff

08002020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e04a      	b.n	80020c8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	223d      	movs	r2, #61	; 0x3d
 8002036:	5c9b      	ldrb	r3, [r3, r2]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	223c      	movs	r2, #60	; 0x3c
 8002042:	2100      	movs	r1, #0
 8002044:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0018      	movs	r0, r3
 800204a:	f7fe fbb9 	bl	80007c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	223d      	movs	r2, #61	; 0x3d
 8002052:	2102      	movs	r1, #2
 8002054:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	0019      	movs	r1, r3
 8002060:	0010      	movs	r0, r2
 8002062:	f000 fe1d 	bl	8002ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2248      	movs	r2, #72	; 0x48
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	223e      	movs	r2, #62	; 0x3e
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	223f      	movs	r2, #63	; 0x3f
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2240      	movs	r2, #64	; 0x40
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2241      	movs	r2, #65	; 0x41
 800208a:	2101      	movs	r1, #1
 800208c:	5499      	strb	r1, [r3, r2]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2242      	movs	r2, #66	; 0x42
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2243      	movs	r2, #67	; 0x43
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2244      	movs	r2, #68	; 0x44
 80020a2:	2101      	movs	r1, #1
 80020a4:	5499      	strb	r1, [r3, r2]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2245      	movs	r2, #69	; 0x45
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2246      	movs	r2, #70	; 0x46
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2247      	movs	r2, #71	; 0x47
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	223d      	movs	r2, #61	; 0x3d
 80020c2:	2101      	movs	r1, #1
 80020c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b002      	add	sp, #8
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e04a      	b.n	8002178 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	223d      	movs	r2, #61	; 0x3d
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d107      	bne.n	80020fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	223c      	movs	r2, #60	; 0x3c
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 f841 	bl	8002180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	223d      	movs	r2, #61	; 0x3d
 8002102:	2102      	movs	r1, #2
 8002104:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	0019      	movs	r1, r3
 8002110:	0010      	movs	r0, r2
 8002112:	f000 fdc5 	bl	8002ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2248      	movs	r2, #72	; 0x48
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	223e      	movs	r2, #62	; 0x3e
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	223f      	movs	r2, #63	; 0x3f
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2241      	movs	r2, #65	; 0x41
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2242      	movs	r2, #66	; 0x42
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2243      	movs	r2, #67	; 0x43
 800214a:	2101      	movs	r1, #1
 800214c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2244      	movs	r2, #68	; 0x44
 8002152:	2101      	movs	r1, #1
 8002154:	5499      	strb	r1, [r3, r2]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2245      	movs	r2, #69	; 0x45
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2246      	movs	r2, #70	; 0x46
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2247      	movs	r2, #71	; 0x47
 800216a:	2101      	movs	r1, #1
 800216c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	223d      	movs	r2, #61	; 0x3d
 8002172:	2101      	movs	r1, #1
 8002174:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d108      	bne.n	80021b2 <HAL_TIM_PWM_Start+0x22>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	223e      	movs	r2, #62	; 0x3e
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	1e5a      	subs	r2, r3, #1
 80021ac:	4193      	sbcs	r3, r2
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	e037      	b.n	8002222 <HAL_TIM_PWM_Start+0x92>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d108      	bne.n	80021ca <HAL_TIM_PWM_Start+0x3a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	223f      	movs	r2, #63	; 0x3f
 80021bc:	5c9b      	ldrb	r3, [r3, r2]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	1e5a      	subs	r2, r3, #1
 80021c4:	4193      	sbcs	r3, r2
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	e02b      	b.n	8002222 <HAL_TIM_PWM_Start+0x92>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d108      	bne.n	80021e2 <HAL_TIM_PWM_Start+0x52>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2240      	movs	r2, #64	; 0x40
 80021d4:	5c9b      	ldrb	r3, [r3, r2]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	1e5a      	subs	r2, r3, #1
 80021dc:	4193      	sbcs	r3, r2
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	e01f      	b.n	8002222 <HAL_TIM_PWM_Start+0x92>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b0c      	cmp	r3, #12
 80021e6:	d108      	bne.n	80021fa <HAL_TIM_PWM_Start+0x6a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2241      	movs	r2, #65	; 0x41
 80021ec:	5c9b      	ldrb	r3, [r3, r2]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	4193      	sbcs	r3, r2
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	e013      	b.n	8002222 <HAL_TIM_PWM_Start+0x92>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d108      	bne.n	8002212 <HAL_TIM_PWM_Start+0x82>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2242      	movs	r2, #66	; 0x42
 8002204:	5c9b      	ldrb	r3, [r3, r2]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	4193      	sbcs	r3, r2
 800220e:	b2db      	uxtb	r3, r3
 8002210:	e007      	b.n	8002222 <HAL_TIM_PWM_Start+0x92>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2243      	movs	r2, #67	; 0x43
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	4193      	sbcs	r3, r2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e07b      	b.n	8002322 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d104      	bne.n	800223a <HAL_TIM_PWM_Start+0xaa>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	223e      	movs	r2, #62	; 0x3e
 8002234:	2102      	movs	r1, #2
 8002236:	5499      	strb	r1, [r3, r2]
 8002238:	e023      	b.n	8002282 <HAL_TIM_PWM_Start+0xf2>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d104      	bne.n	800224a <HAL_TIM_PWM_Start+0xba>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	223f      	movs	r2, #63	; 0x3f
 8002244:	2102      	movs	r1, #2
 8002246:	5499      	strb	r1, [r3, r2]
 8002248:	e01b      	b.n	8002282 <HAL_TIM_PWM_Start+0xf2>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d104      	bne.n	800225a <HAL_TIM_PWM_Start+0xca>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	2102      	movs	r1, #2
 8002256:	5499      	strb	r1, [r3, r2]
 8002258:	e013      	b.n	8002282 <HAL_TIM_PWM_Start+0xf2>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d104      	bne.n	800226a <HAL_TIM_PWM_Start+0xda>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2241      	movs	r2, #65	; 0x41
 8002264:	2102      	movs	r1, #2
 8002266:	5499      	strb	r1, [r3, r2]
 8002268:	e00b      	b.n	8002282 <HAL_TIM_PWM_Start+0xf2>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b10      	cmp	r3, #16
 800226e:	d104      	bne.n	800227a <HAL_TIM_PWM_Start+0xea>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2242      	movs	r2, #66	; 0x42
 8002274:	2102      	movs	r1, #2
 8002276:	5499      	strb	r1, [r3, r2]
 8002278:	e003      	b.n	8002282 <HAL_TIM_PWM_Start+0xf2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2243      	movs	r2, #67	; 0x43
 800227e:	2102      	movs	r1, #2
 8002280:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	2201      	movs	r2, #1
 800228a:	0018      	movs	r0, r3
 800228c:	f001 f8ac 	bl	80033e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <HAL_TIM_PWM_Start+0x19c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_TIM_PWM_Start+0x11e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a24      	ldr	r2, [pc, #144]	; (8002330 <HAL_TIM_PWM_Start+0x1a0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d004      	beq.n	80022ae <HAL_TIM_PWM_Start+0x11e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <HAL_TIM_PWM_Start+0x1a4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_TIM_PWM_Start+0x122>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_TIM_PWM_Start+0x124>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	0209      	lsls	r1, r1, #8
 80022c6:	430a      	orrs	r2, r1
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_TIM_PWM_Start+0x19c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d004      	beq.n	80022de <HAL_TIM_PWM_Start+0x14e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_TIM_PWM_Start+0x1a8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d116      	bne.n	800230c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a15      	ldr	r2, [pc, #84]	; (800233c <HAL_TIM_PWM_Start+0x1ac>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b06      	cmp	r3, #6
 80022ee:	d016      	beq.n	800231e <HAL_TIM_PWM_Start+0x18e>
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d011      	beq.n	800231e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230a:	e008      	b.n	800231e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	430a      	orrs	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e000      	b.n	8002320 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b004      	add	sp, #16
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40014400 	.word	0x40014400
 8002334:	40014800 	.word	0x40014800
 8002338:	40000400 	.word	0x40000400
 800233c:	00010007 	.word	0x00010007

08002340 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	001a      	movs	r2, r3
 800234e:	1cbb      	adds	r3, r7, #2
 8002350:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2317      	movs	r3, #23
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d108      	bne.n	8002372 <HAL_TIM_PWM_Start_DMA+0x32>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	223e      	movs	r2, #62	; 0x3e
 8002364:	5c9b      	ldrb	r3, [r3, r2]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	3b02      	subs	r3, #2
 800236a:	425a      	negs	r2, r3
 800236c:	4153      	adcs	r3, r2
 800236e:	b2db      	uxtb	r3, r3
 8002370:	e037      	b.n	80023e2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d108      	bne.n	800238a <HAL_TIM_PWM_Start_DMA+0x4a>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	223f      	movs	r2, #63	; 0x3f
 800237c:	5c9b      	ldrb	r3, [r3, r2]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3b02      	subs	r3, #2
 8002382:	425a      	negs	r2, r3
 8002384:	4153      	adcs	r3, r2
 8002386:	b2db      	uxtb	r3, r3
 8002388:	e02b      	b.n	80023e2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d108      	bne.n	80023a2 <HAL_TIM_PWM_Start_DMA+0x62>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	5c9b      	ldrb	r3, [r3, r2]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3b02      	subs	r3, #2
 800239a:	425a      	negs	r2, r3
 800239c:	4153      	adcs	r3, r2
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	e01f      	b.n	80023e2 <HAL_TIM_PWM_Start_DMA+0xa2>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d108      	bne.n	80023ba <HAL_TIM_PWM_Start_DMA+0x7a>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2241      	movs	r2, #65	; 0x41
 80023ac:	5c9b      	ldrb	r3, [r3, r2]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3b02      	subs	r3, #2
 80023b2:	425a      	negs	r2, r3
 80023b4:	4153      	adcs	r3, r2
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	e013      	b.n	80023e2 <HAL_TIM_PWM_Start_DMA+0xa2>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d108      	bne.n	80023d2 <HAL_TIM_PWM_Start_DMA+0x92>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2242      	movs	r2, #66	; 0x42
 80023c4:	5c9b      	ldrb	r3, [r3, r2]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3b02      	subs	r3, #2
 80023ca:	425a      	negs	r2, r3
 80023cc:	4153      	adcs	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	e007      	b.n	80023e2 <HAL_TIM_PWM_Start_DMA+0xa2>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2243      	movs	r2, #67	; 0x43
 80023d6:	5c9b      	ldrb	r3, [r3, r2]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	3b02      	subs	r3, #2
 80023dc:	425a      	negs	r2, r3
 80023de:	4153      	adcs	r3, r2
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	e183      	b.n	80026f2 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d108      	bne.n	8002402 <HAL_TIM_PWM_Start_DMA+0xc2>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	223e      	movs	r2, #62	; 0x3e
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	425a      	negs	r2, r3
 80023fc:	4153      	adcs	r3, r2
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	e037      	b.n	8002472 <HAL_TIM_PWM_Start_DMA+0x132>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b04      	cmp	r3, #4
 8002406:	d108      	bne.n	800241a <HAL_TIM_PWM_Start_DMA+0xda>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	223f      	movs	r2, #63	; 0x3f
 800240c:	5c9b      	ldrb	r3, [r3, r2]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	425a      	negs	r2, r3
 8002414:	4153      	adcs	r3, r2
 8002416:	b2db      	uxtb	r3, r3
 8002418:	e02b      	b.n	8002472 <HAL_TIM_PWM_Start_DMA+0x132>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d108      	bne.n	8002432 <HAL_TIM_PWM_Start_DMA+0xf2>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	5c9b      	ldrb	r3, [r3, r2]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	425a      	negs	r2, r3
 800242c:	4153      	adcs	r3, r2
 800242e:	b2db      	uxtb	r3, r3
 8002430:	e01f      	b.n	8002472 <HAL_TIM_PWM_Start_DMA+0x132>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	d108      	bne.n	800244a <HAL_TIM_PWM_Start_DMA+0x10a>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2241      	movs	r2, #65	; 0x41
 800243c:	5c9b      	ldrb	r3, [r3, r2]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	425a      	negs	r2, r3
 8002444:	4153      	adcs	r3, r2
 8002446:	b2db      	uxtb	r3, r3
 8002448:	e013      	b.n	8002472 <HAL_TIM_PWM_Start_DMA+0x132>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b10      	cmp	r3, #16
 800244e:	d108      	bne.n	8002462 <HAL_TIM_PWM_Start_DMA+0x122>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2242      	movs	r2, #66	; 0x42
 8002454:	5c9b      	ldrb	r3, [r3, r2]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	425a      	negs	r2, r3
 800245c:	4153      	adcs	r3, r2
 800245e:	b2db      	uxtb	r3, r3
 8002460:	e007      	b.n	8002472 <HAL_TIM_PWM_Start_DMA+0x132>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2243      	movs	r2, #67	; 0x43
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	425a      	negs	r2, r3
 800246e:	4153      	adcs	r3, r2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d035      	beq.n	80024e2 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_TIM_PWM_Start_DMA+0x144>
 800247c:	1cbb      	adds	r3, r7, #2
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e134      	b.n	80026f2 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d104      	bne.n	8002498 <HAL_TIM_PWM_Start_DMA+0x158>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	223e      	movs	r2, #62	; 0x3e
 8002492:	2102      	movs	r1, #2
 8002494:	5499      	strb	r1, [r3, r2]
 8002496:	e026      	b.n	80024e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b04      	cmp	r3, #4
 800249c:	d104      	bne.n	80024a8 <HAL_TIM_PWM_Start_DMA+0x168>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	223f      	movs	r2, #63	; 0x3f
 80024a2:	2102      	movs	r1, #2
 80024a4:	5499      	strb	r1, [r3, r2]
 80024a6:	e01e      	b.n	80024e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d104      	bne.n	80024b8 <HAL_TIM_PWM_Start_DMA+0x178>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2240      	movs	r2, #64	; 0x40
 80024b2:	2102      	movs	r1, #2
 80024b4:	5499      	strb	r1, [r3, r2]
 80024b6:	e016      	b.n	80024e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d104      	bne.n	80024c8 <HAL_TIM_PWM_Start_DMA+0x188>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2241      	movs	r2, #65	; 0x41
 80024c2:	2102      	movs	r1, #2
 80024c4:	5499      	strb	r1, [r3, r2]
 80024c6:	e00e      	b.n	80024e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d104      	bne.n	80024d8 <HAL_TIM_PWM_Start_DMA+0x198>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2242      	movs	r2, #66	; 0x42
 80024d2:	2102      	movs	r1, #2
 80024d4:	5499      	strb	r1, [r3, r2]
 80024d6:	e006      	b.n	80024e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2243      	movs	r2, #67	; 0x43
 80024dc:	2102      	movs	r1, #2
 80024de:	5499      	strb	r1, [r3, r2]
 80024e0:	e001      	b.n	80024e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e105      	b.n	80026f2 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b0c      	cmp	r3, #12
 80024ea:	d100      	bne.n	80024ee <HAL_TIM_PWM_Start_DMA+0x1ae>
 80024ec:	e080      	b.n	80025f0 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b0c      	cmp	r3, #12
 80024f2:	d900      	bls.n	80024f6 <HAL_TIM_PWM_Start_DMA+0x1b6>
 80024f4:	e0a1      	b.n	800263a <HAL_TIM_PWM_Start_DMA+0x2fa>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d054      	beq.n	80025a6 <HAL_TIM_PWM_Start_DMA+0x266>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d900      	bls.n	8002504 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8002502:	e09a      	b.n	800263a <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_PWM_Start_DMA+0x1d2>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d025      	beq.n	800255c <HAL_TIM_PWM_Start_DMA+0x21c>
 8002510:	e093      	b.n	800263a <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	4a79      	ldr	r2, [pc, #484]	; (80026fc <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	4a78      	ldr	r2, [pc, #480]	; (8002700 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002520:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	4a77      	ldr	r2, [pc, #476]	; (8002704 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002528:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3334      	adds	r3, #52	; 0x34
 8002536:	001a      	movs	r2, r3
 8002538:	1cbb      	adds	r3, r7, #2
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	f7fe fc5c 	bl	8000df8 <HAL_DMA_Start_IT>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d001      	beq.n	8002548 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0d4      	b.n	80026f2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	0089      	lsls	r1, r1, #2
 8002556:	430a      	orrs	r2, r1
 8002558:	60da      	str	r2, [r3, #12]
      break;
 800255a:	e073      	b.n	8002644 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	4a66      	ldr	r2, [pc, #408]	; (80026fc <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	4a65      	ldr	r2, [pc, #404]	; (8002700 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800256a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	4a64      	ldr	r2, [pc, #400]	; (8002704 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002572:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3338      	adds	r3, #56	; 0x38
 8002580:	001a      	movs	r2, r3
 8002582:	1cbb      	adds	r3, r7, #2
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	f7fe fc37 	bl	8000df8 <HAL_DMA_Start_IT>
 800258a:	1e03      	subs	r3, r0, #0
 800258c:	d001      	beq.n	8002592 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0af      	b.n	80026f2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	00c9      	lsls	r1, r1, #3
 80025a0:	430a      	orrs	r2, r1
 80025a2:	60da      	str	r2, [r3, #12]
      break;
 80025a4:	e04e      	b.n	8002644 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	4a54      	ldr	r2, [pc, #336]	; (80026fc <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	4a53      	ldr	r2, [pc, #332]	; (8002700 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	4a52      	ldr	r2, [pc, #328]	; (8002704 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80025bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	333c      	adds	r3, #60	; 0x3c
 80025ca:	001a      	movs	r2, r3
 80025cc:	1cbb      	adds	r3, r7, #2
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	f7fe fc12 	bl	8000df8 <HAL_DMA_Start_IT>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d001      	beq.n	80025dc <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e08a      	b.n	80026f2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2180      	movs	r1, #128	; 0x80
 80025e8:	0109      	lsls	r1, r1, #4
 80025ea:	430a      	orrs	r2, r1
 80025ec:	60da      	str	r2, [r3, #12]
      break;
 80025ee:	e029      	b.n	8002644 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a41      	ldr	r2, [pc, #260]	; (80026fc <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	4a40      	ldr	r2, [pc, #256]	; (8002700 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	4a3f      	ldr	r2, [pc, #252]	; (8002704 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002606:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3340      	adds	r3, #64	; 0x40
 8002614:	001a      	movs	r2, r3
 8002616:	1cbb      	adds	r3, r7, #2
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	f7fe fbed 	bl	8000df8 <HAL_DMA_Start_IT>
 800261e:	1e03      	subs	r3, r0, #0
 8002620:	d001      	beq.n	8002626 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e065      	b.n	80026f2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	0149      	lsls	r1, r1, #5
 8002634:	430a      	orrs	r2, r1
 8002636:	60da      	str	r2, [r3, #12]
      break;
 8002638:	e004      	b.n	8002644 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 800263a:	2317      	movs	r3, #23
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
      break;
 8002642:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002644:	2317      	movs	r3, #23
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d14e      	bne.n	80026ec <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68b9      	ldr	r1, [r7, #8]
 8002654:	2201      	movs	r2, #1
 8002656:	0018      	movs	r0, r3
 8002658:	f000 fec6 	bl	80033e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a29      	ldr	r2, [pc, #164]	; (8002708 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d009      	beq.n	800267a <HAL_TIM_PWM_Start_DMA+0x33a>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a28      	ldr	r2, [pc, #160]	; (800270c <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_TIM_PWM_Start_DMA+0x33a>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a26      	ldr	r2, [pc, #152]	; (8002710 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_TIM_PWM_Start_DMA+0x33e>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_TIM_PWM_Start_DMA+0x340>
 800267e:	2300      	movs	r3, #0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	0209      	lsls	r1, r1, #8
 8002692:	430a      	orrs	r2, r1
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d004      	beq.n	80026aa <HAL_TIM_PWM_Start_DMA+0x36a>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d116      	bne.n	80026d8 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d016      	beq.n	80026ea <HAL_TIM_PWM_Start_DMA+0x3aa>
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	025b      	lsls	r3, r3, #9
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d011      	beq.n	80026ea <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d6:	e008      	b.n	80026ea <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2101      	movs	r1, #1
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e000      	b.n	80026ec <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ea:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80026ec:	2317      	movs	r3, #23
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	781b      	ldrb	r3, [r3, #0]
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b006      	add	sp, #24
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	08002b8d 	.word	0x08002b8d
 8002700:	08002c37 	.word	0x08002c37
 8002704:	08002af9 	.word	0x08002af9
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40014400 	.word	0x40014400
 8002710:	40014800 	.word	0x40014800
 8002714:	40000400 	.word	0x40000400
 8002718:	00010007 	.word	0x00010007

0800271c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002728:	2317      	movs	r3, #23
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	223c      	movs	r2, #60	; 0x3c
 8002734:	5c9b      	ldrb	r3, [r3, r2]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_TIM_PWM_ConfigChannel+0x22>
 800273a:	2302      	movs	r3, #2
 800273c:	e0e5      	b.n	800290a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	223c      	movs	r2, #60	; 0x3c
 8002742:	2101      	movs	r1, #1
 8002744:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b14      	cmp	r3, #20
 800274a:	d900      	bls.n	800274e <HAL_TIM_PWM_ConfigChannel+0x32>
 800274c:	e0d1      	b.n	80028f2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	009a      	lsls	r2, r3, #2
 8002752:	4b70      	ldr	r3, [pc, #448]	; (8002914 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002754:	18d3      	adds	r3, r2, r3
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	0011      	movs	r1, r2
 8002762:	0018      	movs	r0, r3
 8002764:	f000 fb08 	bl	8002d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2108      	movs	r1, #8
 8002774:	430a      	orrs	r2, r1
 8002776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2104      	movs	r1, #4
 8002784:	438a      	bics	r2, r1
 8002786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6999      	ldr	r1, [r3, #24]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	619a      	str	r2, [r3, #24]
      break;
 800279a:	e0af      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	0011      	movs	r1, r2
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 fb67 	bl	8002e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699a      	ldr	r2, [r3, #24]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	0109      	lsls	r1, r1, #4
 80027b8:	430a      	orrs	r2, r1
 80027ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4954      	ldr	r1, [pc, #336]	; (8002918 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6999      	ldr	r1, [r3, #24]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	021a      	lsls	r2, r3, #8
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	619a      	str	r2, [r3, #24]
      break;
 80027e0:	e08c      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	0011      	movs	r1, r2
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fbc2 	bl	8002f74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2108      	movs	r1, #8
 80027fc:	430a      	orrs	r2, r1
 80027fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2104      	movs	r1, #4
 800280c:	438a      	bics	r2, r1
 800280e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69d9      	ldr	r1, [r3, #28]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	61da      	str	r2, [r3, #28]
      break;
 8002822:	e06b      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f000 fc23 	bl	8003078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0109      	lsls	r1, r1, #4
 8002840:	430a      	orrs	r2, r1
 8002842:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4932      	ldr	r1, [pc, #200]	; (8002918 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002850:	400a      	ands	r2, r1
 8002852:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69d9      	ldr	r1, [r3, #28]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	021a      	lsls	r2, r3, #8
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	61da      	str	r2, [r3, #28]
      break;
 8002868:	e048      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	0011      	movs	r1, r2
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fc64 	bl	8003140 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2108      	movs	r1, #8
 8002884:	430a      	orrs	r2, r1
 8002886:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2104      	movs	r1, #4
 8002894:	438a      	bics	r2, r1
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028aa:	e027      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 fc9d 	bl	80031f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	0109      	lsls	r1, r1, #4
 80028c8:	430a      	orrs	r2, r1
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4910      	ldr	r1, [pc, #64]	; (8002918 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80028d8:	400a      	ands	r2, r1
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	021a      	lsls	r2, r3, #8
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028f0:	e004      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80028f2:	2317      	movs	r3, #23
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
      break;
 80028fa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	223c      	movs	r2, #60	; 0x3c
 8002900:	2100      	movs	r1, #0
 8002902:	5499      	strb	r1, [r3, r2]

  return status;
 8002904:	2317      	movs	r3, #23
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	781b      	ldrb	r3, [r3, #0]
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b006      	add	sp, #24
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	08003f14 	.word	0x08003f14
 8002918:	fffffbff 	.word	0xfffffbff

0800291c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	230f      	movs	r3, #15
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	223c      	movs	r2, #60	; 0x3c
 8002932:	5c9b      	ldrb	r3, [r3, r2]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIM_ConfigClockSource+0x20>
 8002938:	2302      	movs	r3, #2
 800293a:	e0bc      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x19a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	223c      	movs	r2, #60	; 0x3c
 8002940:	2101      	movs	r1, #1
 8002942:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	223d      	movs	r2, #61	; 0x3d
 8002948:	2102      	movs	r1, #2
 800294a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4a5a      	ldr	r2, [pc, #360]	; (8002ac0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4a59      	ldr	r2, [pc, #356]	; (8002ac4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	0192      	lsls	r2, r2, #6
 8002974:	4293      	cmp	r3, r2
 8002976:	d040      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0xde>
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0192      	lsls	r2, r2, #6
 800297c:	4293      	cmp	r3, r2
 800297e:	d900      	bls.n	8002982 <HAL_TIM_ConfigClockSource+0x66>
 8002980:	e088      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	0152      	lsls	r2, r2, #5
 8002986:	4293      	cmp	r3, r2
 8002988:	d100      	bne.n	800298c <HAL_TIM_ConfigClockSource+0x70>
 800298a:	e088      	b.n	8002a9e <HAL_TIM_ConfigClockSource+0x182>
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	0152      	lsls	r2, r2, #5
 8002990:	4293      	cmp	r3, r2
 8002992:	d900      	bls.n	8002996 <HAL_TIM_ConfigClockSource+0x7a>
 8002994:	e07e      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 8002996:	2b70      	cmp	r3, #112	; 0x70
 8002998:	d018      	beq.n	80029cc <HAL_TIM_ConfigClockSource+0xb0>
 800299a:	d900      	bls.n	800299e <HAL_TIM_ConfigClockSource+0x82>
 800299c:	e07a      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 800299e:	2b60      	cmp	r3, #96	; 0x60
 80029a0:	d04f      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x126>
 80029a2:	d900      	bls.n	80029a6 <HAL_TIM_ConfigClockSource+0x8a>
 80029a4:	e076      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 80029a6:	2b50      	cmp	r3, #80	; 0x50
 80029a8:	d03b      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x106>
 80029aa:	d900      	bls.n	80029ae <HAL_TIM_ConfigClockSource+0x92>
 80029ac:	e072      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d057      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x146>
 80029b2:	d900      	bls.n	80029b6 <HAL_TIM_ConfigClockSource+0x9a>
 80029b4:	e06e      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 80029b6:	2b30      	cmp	r3, #48	; 0x30
 80029b8:	d063      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x166>
 80029ba:	d86b      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d060      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x166>
 80029c0:	d868      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d05d      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x166>
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	d05b      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x166>
 80029ca:	e063      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029dc:	f000 fce4 	bl	80033a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2277      	movs	r2, #119	; 0x77
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	609a      	str	r2, [r3, #8]
      break;
 80029f8:	e052      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a0a:	f000 fccd 	bl	80033a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	01c9      	lsls	r1, r1, #7
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
      break;
 8002a20:	e03e      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	001a      	movs	r2, r3
 8002a30:	f000 fc3e 	bl	80032b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2150      	movs	r1, #80	; 0x50
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 fc98 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002a40:	e02e      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a4e:	001a      	movs	r2, r3
 8002a50:	f000 fc5c 	bl	800330c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2160      	movs	r1, #96	; 0x60
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fc88 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002a60:	e01e      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6e:	001a      	movs	r2, r3
 8002a70:	f000 fc1e 	bl	80032b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2140      	movs	r1, #64	; 0x40
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 fc78 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002a80:	e00e      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	f000 fc6f 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002a92:	e005      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a94:	230f      	movs	r3, #15
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
      break;
 8002a9c:	e000      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a9e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	223d      	movs	r2, #61	; 0x3d
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	223c      	movs	r2, #60	; 0x3c
 8002aac:	2100      	movs	r1, #0
 8002aae:	5499      	strb	r1, [r3, r2]

  return status;
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	781b      	ldrb	r3, [r3, #0]
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	ffceff88 	.word	0xffceff88
 8002ac4:	ffff00ff 	.word	0xffff00ff

08002ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b002      	add	sp, #8
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d107      	bne.n	8002b20 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	223e      	movs	r2, #62	; 0x3e
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]
 8002b1e:	e02a      	b.n	8002b76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d107      	bne.n	8002b3a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	223f      	movs	r2, #63	; 0x3f
 8002b34:	2101      	movs	r1, #1
 8002b36:	5499      	strb	r1, [r3, r2]
 8002b38:	e01d      	b.n	8002b76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d107      	bne.n	8002b54 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2204      	movs	r2, #4
 8002b48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2240      	movs	r2, #64	; 0x40
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]
 8002b52:	e010      	b.n	8002b76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d107      	bne.n	8002b6e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2208      	movs	r2, #8
 8002b62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2241      	movs	r2, #65	; 0x41
 8002b68:	2101      	movs	r1, #1
 8002b6a:	5499      	strb	r1, [r3, r2]
 8002b6c:	e003      	b.n	8002b76 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	223d      	movs	r2, #61	; 0x3d
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff ffb5 	bl	8002ae8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	771a      	strb	r2, [r3, #28]
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b004      	add	sp, #16
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d10b      	bne.n	8002bbc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d136      	bne.n	8002c20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	223e      	movs	r2, #62	; 0x3e
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]
 8002bba:	e031      	b.n	8002c20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d10b      	bne.n	8002bde <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d125      	bne.n	8002c20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	223f      	movs	r2, #63	; 0x3f
 8002bd8:	2101      	movs	r1, #1
 8002bda:	5499      	strb	r1, [r3, r2]
 8002bdc:	e020      	b.n	8002c20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d10b      	bne.n	8002c00 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2204      	movs	r2, #4
 8002bec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d114      	bne.n	8002c20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2240      	movs	r2, #64	; 0x40
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	5499      	strb	r1, [r3, r2]
 8002bfe:	e00f      	b.n	8002c20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d10a      	bne.n	8002c20 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2241      	movs	r2, #65	; 0x41
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7ff ff50 	bl	8002ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	771a      	strb	r2, [r3, #28]
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b004      	add	sp, #16
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d103      	bne.n	8002c56 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	771a      	strb	r2, [r3, #28]
 8002c54:	e019      	b.n	8002c8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d103      	bne.n	8002c68 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2202      	movs	r2, #2
 8002c64:	771a      	strb	r2, [r3, #28]
 8002c66:	e010      	b.n	8002c8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d103      	bne.n	8002c7a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2204      	movs	r2, #4
 8002c76:	771a      	strb	r2, [r3, #28]
 8002c78:	e007      	b.n	8002c8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d102      	bne.n	8002c8a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2208      	movs	r2, #8
 8002c88:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7ff ff23 	bl	8002ad8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b004      	add	sp, #16
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a2b      	ldr	r2, [pc, #172]	; (8002d60 <TIM_Base_SetConfig+0xc0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_Base_SetConfig+0x20>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <TIM_Base_SetConfig+0xc4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d108      	bne.n	8002cd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2270      	movs	r2, #112	; 0x70
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <TIM_Base_SetConfig+0xc0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00f      	beq.n	8002cfa <TIM_Base_SetConfig+0x5a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <TIM_Base_SetConfig+0xc4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <TIM_Base_SetConfig+0x5a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <TIM_Base_SetConfig+0xc8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <TIM_Base_SetConfig+0x5a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <TIM_Base_SetConfig+0xcc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <TIM_Base_SetConfig+0x5a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <TIM_Base_SetConfig+0xd0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d108      	bne.n	8002d0c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <TIM_Base_SetConfig+0xd4>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	4393      	bics	r3, r2
 8002d12:	001a      	movs	r2, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <TIM_Base_SetConfig+0xc0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d007      	beq.n	8002d4a <TIM_Base_SetConfig+0xaa>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <TIM_Base_SetConfig+0xcc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d003      	beq.n	8002d4a <TIM_Base_SetConfig+0xaa>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <TIM_Base_SetConfig+0xd0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d103      	bne.n	8002d52 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	615a      	str	r2, [r3, #20]
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b004      	add	sp, #16
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40002000 	.word	0x40002000
 8002d6c:	40014400 	.word	0x40014400
 8002d70:	40014800 	.word	0x40014800
 8002d74:	fffffcff 	.word	0xfffffcff

08002d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4393      	bics	r3, r2
 8002d90:	001a      	movs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <TIM_OC1_SetConfig+0xe8>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2203      	movs	r2, #3
 8002dae:	4393      	bics	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4393      	bics	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <TIM_OC1_SetConfig+0xec>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <TIM_OC1_SetConfig+0x6e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <TIM_OC1_SetConfig+0xf0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_OC1_SetConfig+0x6e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a22      	ldr	r2, [pc, #136]	; (8002e6c <TIM_OC1_SetConfig+0xf4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10c      	bne.n	8002e00 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2208      	movs	r2, #8
 8002dea:	4393      	bics	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <TIM_OC1_SetConfig+0xec>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_OC1_SetConfig+0xa0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <TIM_OC1_SetConfig+0xf0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_OC1_SetConfig+0xa0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <TIM_OC1_SetConfig+0xf4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <TIM_OC1_SetConfig+0xf8>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <TIM_OC1_SetConfig+0xfc>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b006      	add	sp, #24
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	fffeff8f 	.word	0xfffeff8f
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40014400 	.word	0x40014400
 8002e6c:	40014800 	.word	0x40014800
 8002e70:	fffffeff 	.word	0xfffffeff
 8002e74:	fffffdff 	.word	0xfffffdff

08002e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	4393      	bics	r3, r2
 8002e90:	001a      	movs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <TIM_OC2_SetConfig+0xe0>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <TIM_OC2_SetConfig+0xe4>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <TIM_OC2_SetConfig+0xe8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10d      	bne.n	8002ef6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	4393      	bics	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2240      	movs	r2, #64	; 0x40
 8002ef2:	4393      	bics	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <TIM_OC2_SetConfig+0xe8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <TIM_OC2_SetConfig+0x96>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <TIM_OC2_SetConfig+0xec>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d003      	beq.n	8002f0e <TIM_OC2_SetConfig+0x96>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <TIM_OC2_SetConfig+0xf0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d113      	bne.n	8002f36 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <TIM_OC2_SetConfig+0xf4>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <TIM_OC2_SetConfig+0xf8>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b006      	add	sp, #24
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	feff8fff 	.word	0xfeff8fff
 8002f5c:	fffffcff 	.word	0xfffffcff
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40014400 	.word	0x40014400
 8002f68:	40014800 	.word	0x40014800
 8002f6c:	fffffbff 	.word	0xfffffbff
 8002f70:	fffff7ff 	.word	0xfffff7ff

08002f74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4a31      	ldr	r2, [pc, #196]	; (8003050 <TIM_OC3_SetConfig+0xdc>)
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <TIM_OC3_SetConfig+0xe0>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	4393      	bics	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <TIM_OC3_SetConfig+0xe4>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a23      	ldr	r2, [pc, #140]	; (800305c <TIM_OC3_SetConfig+0xe8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10d      	bne.n	8002fee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4a22      	ldr	r2, [pc, #136]	; (8003060 <TIM_OC3_SetConfig+0xec>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <TIM_OC3_SetConfig+0xf0>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	; (800305c <TIM_OC3_SetConfig+0xe8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <TIM_OC3_SetConfig+0x92>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <TIM_OC3_SetConfig+0xf4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d003      	beq.n	8003006 <TIM_OC3_SetConfig+0x92>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1a      	ldr	r2, [pc, #104]	; (800306c <TIM_OC3_SetConfig+0xf8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d113      	bne.n	800302e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <TIM_OC3_SetConfig+0xfc>)
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4a18      	ldr	r2, [pc, #96]	; (8003074 <TIM_OC3_SetConfig+0x100>)
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	621a      	str	r2, [r3, #32]
}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b006      	add	sp, #24
 800304e:	bd80      	pop	{r7, pc}
 8003050:	fffffeff 	.word	0xfffffeff
 8003054:	fffeff8f 	.word	0xfffeff8f
 8003058:	fffffdff 	.word	0xfffffdff
 800305c:	40012c00 	.word	0x40012c00
 8003060:	fffff7ff 	.word	0xfffff7ff
 8003064:	fffffbff 	.word	0xfffffbff
 8003068:	40014400 	.word	0x40014400
 800306c:	40014800 	.word	0x40014800
 8003070:	ffffefff 	.word	0xffffefff
 8003074:	ffffdfff 	.word	0xffffdfff

08003078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4a24      	ldr	r2, [pc, #144]	; (8003120 <TIM_OC4_SetConfig+0xa8>)
 800308e:	401a      	ands	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a20      	ldr	r2, [pc, #128]	; (8003124 <TIM_OC4_SetConfig+0xac>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a1f      	ldr	r2, [pc, #124]	; (8003128 <TIM_OC4_SetConfig+0xb0>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4a1b      	ldr	r2, [pc, #108]	; (800312c <TIM_OC4_SetConfig+0xb4>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	031b      	lsls	r3, r3, #12
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <TIM_OC4_SetConfig+0xb8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <TIM_OC4_SetConfig+0x70>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a16      	ldr	r2, [pc, #88]	; (8003134 <TIM_OC4_SetConfig+0xbc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_OC4_SetConfig+0x70>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a15      	ldr	r2, [pc, #84]	; (8003138 <TIM_OC4_SetConfig+0xc0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d109      	bne.n	80030fc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	4a14      	ldr	r2, [pc, #80]	; (800313c <TIM_OC4_SetConfig+0xc4>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	621a      	str	r2, [r3, #32]
}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b006      	add	sp, #24
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	ffffefff 	.word	0xffffefff
 8003124:	feff8fff 	.word	0xfeff8fff
 8003128:	fffffcff 	.word	0xfffffcff
 800312c:	ffffdfff 	.word	0xffffdfff
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40014400 	.word	0x40014400
 8003138:	40014800 	.word	0x40014800
 800313c:	ffffbfff 	.word	0xffffbfff

08003140 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4a21      	ldr	r2, [pc, #132]	; (80031dc <TIM_OC5_SetConfig+0x9c>)
 8003156:	401a      	ands	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <TIM_OC5_SetConfig+0xa0>)
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <TIM_OC5_SetConfig+0xa4>)
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <TIM_OC5_SetConfig+0xa8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <TIM_OC5_SetConfig+0x66>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a14      	ldr	r2, [pc, #80]	; (80031ec <TIM_OC5_SetConfig+0xac>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_OC5_SetConfig+0x66>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <TIM_OC5_SetConfig+0xb0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d109      	bne.n	80031ba <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <TIM_OC5_SetConfig+0x9c>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	621a      	str	r2, [r3, #32]
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b006      	add	sp, #24
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	fffeffff 	.word	0xfffeffff
 80031e0:	fffeff8f 	.word	0xfffeff8f
 80031e4:	fffdffff 	.word	0xfffdffff
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40014400 	.word	0x40014400
 80031f0:	40014800 	.word	0x40014800

080031f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a22      	ldr	r2, [pc, #136]	; (8003294 <TIM_OC6_SetConfig+0xa0>)
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <TIM_OC6_SetConfig+0xa4>)
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4a1a      	ldr	r2, [pc, #104]	; (800329c <TIM_OC6_SetConfig+0xa8>)
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	051b      	lsls	r3, r3, #20
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <TIM_OC6_SetConfig+0xac>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d007      	beq.n	800325c <TIM_OC6_SetConfig+0x68>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <TIM_OC6_SetConfig+0xb0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_OC6_SetConfig+0x68>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <TIM_OC6_SetConfig+0xb4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d109      	bne.n	8003270 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	4a13      	ldr	r2, [pc, #76]	; (80032ac <TIM_OC6_SetConfig+0xb8>)
 8003260:	4013      	ands	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	b006      	add	sp, #24
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	ffefffff 	.word	0xffefffff
 8003298:	feff8fff 	.word	0xfeff8fff
 800329c:	ffdfffff 	.word	0xffdfffff
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800
 80032ac:	fffbffff 	.word	0xfffbffff

080032b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4393      	bics	r3, r2
 80032ca:	001a      	movs	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	22f0      	movs	r2, #240	; 0xf0
 80032da:	4393      	bics	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	220a      	movs	r2, #10
 80032ec:	4393      	bics	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	621a      	str	r2, [r3, #32]
}
 8003304:	46c0      	nop			; (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b006      	add	sp, #24
 800330a:	bd80      	pop	{r7, pc}

0800330c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	2210      	movs	r2, #16
 8003324:	4393      	bics	r3, r2
 8003326:	001a      	movs	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4a0d      	ldr	r2, [pc, #52]	; (800336c <TIM_TI2_ConfigInputStage+0x60>)
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	031b      	lsls	r3, r3, #12
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	22a0      	movs	r2, #160	; 0xa0
 8003348:	4393      	bics	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	46bd      	mov	sp, r7
 8003366:	b006      	add	sp, #24
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	ffff0fff 	.word	0xffff0fff

08003370 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <TIM_ITRx_SetConfig+0x34>)
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	2207      	movs	r2, #7
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	609a      	str	r2, [r3, #8]
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	ffcfff8f 	.word	0xffcfff8f

080033a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <TIM_ETR_SetConfig+0x3c>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b006      	add	sp, #24
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	ffff00ff 	.word	0xffff00ff

080033e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	221f      	movs	r2, #31
 80033f8:	4013      	ands	r3, r2
 80033fa:	2201      	movs	r2, #1
 80033fc:	409a      	lsls	r2, r3
 80033fe:	0013      	movs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	43d2      	mvns	r2, r2
 800340a:	401a      	ands	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a1a      	ldr	r2, [r3, #32]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	211f      	movs	r1, #31
 8003418:	400b      	ands	r3, r1
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4099      	lsls	r1, r3
 800341e:	000b      	movs	r3, r1
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	621a      	str	r2, [r3, #32]
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b006      	add	sp, #24
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223c      	movs	r2, #60	; 0x3c
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003444:	2302      	movs	r3, #2
 8003446:	e04a      	b.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	223c      	movs	r2, #60	; 0x3c
 800344c:	2101      	movs	r1, #1
 800344e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	223d      	movs	r2, #61	; 0x3d
 8003454:	2102      	movs	r1, #2
 8003456:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003476:	4013      	ands	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2270      	movs	r2, #112	; 0x70
 8003488:	4393      	bics	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d10c      	bne.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2280      	movs	r2, #128	; 0x80
 80034b6:	4393      	bics	r3, r2
 80034b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	223d      	movs	r2, #61	; 0x3d
 80034d0:	2101      	movs	r1, #1
 80034d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	223c      	movs	r2, #60	; 0x3c
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b004      	add	sp, #16
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	ff0fffff 	.word	0xff0fffff
 80034f0:	40000400 	.word	0x40000400

080034f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	223c      	movs	r2, #60	; 0x3c
 8003506:	5c9b      	ldrb	r3, [r3, r2]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800350c:	2302      	movs	r3, #2
 800350e:	e079      	b.n	8003604 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	223c      	movs	r2, #60	; 0x3c
 8003514:	2101      	movs	r1, #1
 8003516:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	22ff      	movs	r2, #255	; 0xff
 800351c:	4393      	bics	r3, r2
 800351e:	001a      	movs	r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4a38      	ldr	r2, [pc, #224]	; (800360c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800352c:	401a      	ands	r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4a35      	ldr	r2, [pc, #212]	; (8003610 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800353a:	401a      	ands	r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a33      	ldr	r2, [pc, #204]	; (8003614 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003548:	401a      	ands	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a30      	ldr	r2, [pc, #192]	; (8003618 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003556:	401a      	ands	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a2e      	ldr	r2, [pc, #184]	; (800361c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003564:	401a      	ands	r2, r3
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003572:	401a      	ands	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a29      	ldr	r2, [pc, #164]	; (8003624 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003580:	401a      	ands	r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a25      	ldr	r2, [pc, #148]	; (8003628 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d106      	bne.n	80035a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a24      	ldr	r2, [pc, #144]	; (800362c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800359a:	401a      	ands	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d121      	bne.n	80035f2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80035b2:	401a      	ands	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	051b      	lsls	r3, r3, #20
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80035c2:	401a      	ands	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80035d0:	401a      	ands	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a12      	ldr	r2, [pc, #72]	; (8003628 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d106      	bne.n	80035f2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a15      	ldr	r2, [pc, #84]	; (800363c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80035e8:	401a      	ands	r2, r3
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	223c      	movs	r2, #60	; 0x3c
 80035fe:	2100      	movs	r1, #0
 8003600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b004      	add	sp, #16
 800360a:	bd80      	pop	{r7, pc}
 800360c:	fffffcff 	.word	0xfffffcff
 8003610:	fffffbff 	.word	0xfffffbff
 8003614:	fffff7ff 	.word	0xfffff7ff
 8003618:	ffffefff 	.word	0xffffefff
 800361c:	ffffdfff 	.word	0xffffdfff
 8003620:	ffffbfff 	.word	0xffffbfff
 8003624:	fff0ffff 	.word	0xfff0ffff
 8003628:	40012c00 	.word	0x40012c00
 800362c:	efffffff 	.word	0xefffffff
 8003630:	ff0fffff 	.word	0xff0fffff
 8003634:	feffffff 	.word	0xfeffffff
 8003638:	fdffffff 	.word	0xfdffffff
 800363c:	dfffffff 	.word	0xdfffffff

08003640 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e046      	b.n	80036e0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2288      	movs	r2, #136	; 0x88
 8003656:	589b      	ldr	r3, [r3, r2]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2284      	movs	r2, #132	; 0x84
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	0018      	movs	r0, r3
 8003668:	f7fd f934 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2288      	movs	r2, #136	; 0x88
 8003670:	2124      	movs	r1, #36	; 0x24
 8003672:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2101      	movs	r1, #1
 8003680:	438a      	bics	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0018      	movs	r0, r3
 8003690:	f000 f9aa 	bl	80039e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f828 	bl	80036ec <UART_SetConfig>
 800369c:	0003      	movs	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e01c      	b.n	80036e0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	490d      	ldr	r1, [pc, #52]	; (80036e8 <HAL_UART_Init+0xa8>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	212a      	movs	r1, #42	; 0x2a
 80036c2:	438a      	bics	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2101      	movs	r1, #1
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 fa39 	bl	8003b50 <UART_CheckIdleState>
 80036de:	0003      	movs	r3, r0
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	ffffb7ff 	.word	0xffffb7ff

080036ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036f4:	231e      	movs	r3, #30
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4aab      	ldr	r2, [pc, #684]	; (80039c8 <UART_SetConfig+0x2dc>)
 800371c:	4013      	ands	r3, r2
 800371e:	0019      	movs	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	430a      	orrs	r2, r1
 8003728:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4aa6      	ldr	r2, [pc, #664]	; (80039cc <UART_SetConfig+0x2e0>)
 8003732:	4013      	ands	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4a9d      	ldr	r2, [pc, #628]	; (80039d0 <UART_SetConfig+0x2e4>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	220f      	movs	r2, #15
 8003770:	4393      	bics	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a93      	ldr	r2, [pc, #588]	; (80039d4 <UART_SetConfig+0x2e8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d127      	bne.n	80037da <UART_SetConfig+0xee>
 800378a:	4b93      	ldr	r3, [pc, #588]	; (80039d8 <UART_SetConfig+0x2ec>)
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	2203      	movs	r2, #3
 8003790:	4013      	ands	r3, r2
 8003792:	2b03      	cmp	r3, #3
 8003794:	d017      	beq.n	80037c6 <UART_SetConfig+0xda>
 8003796:	d81b      	bhi.n	80037d0 <UART_SetConfig+0xe4>
 8003798:	2b02      	cmp	r3, #2
 800379a:	d00a      	beq.n	80037b2 <UART_SetConfig+0xc6>
 800379c:	d818      	bhi.n	80037d0 <UART_SetConfig+0xe4>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <UART_SetConfig+0xbc>
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d00a      	beq.n	80037bc <UART_SetConfig+0xd0>
 80037a6:	e013      	b.n	80037d0 <UART_SetConfig+0xe4>
 80037a8:	231f      	movs	r3, #31
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e021      	b.n	80037f6 <UART_SetConfig+0x10a>
 80037b2:	231f      	movs	r3, #31
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	2202      	movs	r2, #2
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	e01c      	b.n	80037f6 <UART_SetConfig+0x10a>
 80037bc:	231f      	movs	r3, #31
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	2204      	movs	r2, #4
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e017      	b.n	80037f6 <UART_SetConfig+0x10a>
 80037c6:	231f      	movs	r3, #31
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	2208      	movs	r2, #8
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e012      	b.n	80037f6 <UART_SetConfig+0x10a>
 80037d0:	231f      	movs	r3, #31
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2210      	movs	r2, #16
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	e00d      	b.n	80037f6 <UART_SetConfig+0x10a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7f      	ldr	r2, [pc, #508]	; (80039dc <UART_SetConfig+0x2f0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d104      	bne.n	80037ee <UART_SetConfig+0x102>
 80037e4:	231f      	movs	r3, #31
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e003      	b.n	80037f6 <UART_SetConfig+0x10a>
 80037ee:	231f      	movs	r3, #31
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	2210      	movs	r2, #16
 80037f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	429a      	cmp	r2, r3
 8003800:	d000      	beq.n	8003804 <UART_SetConfig+0x118>
 8003802:	e06f      	b.n	80038e4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003804:	231f      	movs	r3, #31
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b08      	cmp	r3, #8
 800380c:	d01f      	beq.n	800384e <UART_SetConfig+0x162>
 800380e:	dc22      	bgt.n	8003856 <UART_SetConfig+0x16a>
 8003810:	2b04      	cmp	r3, #4
 8003812:	d017      	beq.n	8003844 <UART_SetConfig+0x158>
 8003814:	dc1f      	bgt.n	8003856 <UART_SetConfig+0x16a>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <UART_SetConfig+0x134>
 800381a:	2b02      	cmp	r3, #2
 800381c:	d005      	beq.n	800382a <UART_SetConfig+0x13e>
 800381e:	e01a      	b.n	8003856 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7fe faf8 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 8003824:	0003      	movs	r3, r0
 8003826:	61bb      	str	r3, [r7, #24]
        break;
 8003828:	e01c      	b.n	8003864 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800382a:	4b6b      	ldr	r3, [pc, #428]	; (80039d8 <UART_SetConfig+0x2ec>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2207      	movs	r2, #7
 8003832:	4013      	ands	r3, r2
 8003834:	3301      	adds	r3, #1
 8003836:	0019      	movs	r1, r3
 8003838:	4869      	ldr	r0, [pc, #420]	; (80039e0 <UART_SetConfig+0x2f4>)
 800383a:	f7fc fc65 	bl	8000108 <__udivsi3>
 800383e:	0003      	movs	r3, r0
 8003840:	61bb      	str	r3, [r7, #24]
        break;
 8003842:	e00f      	b.n	8003864 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003844:	f7fe fa9c 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8003848:	0003      	movs	r3, r0
 800384a:	61bb      	str	r3, [r7, #24]
        break;
 800384c:	e00a      	b.n	8003864 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	61bb      	str	r3, [r7, #24]
        break;
 8003854:	e006      	b.n	8003864 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800385a:	231e      	movs	r3, #30
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
        break;
 8003862:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d100      	bne.n	800386c <UART_SetConfig+0x180>
 800386a:	e097      	b.n	800399c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003870:	4b5c      	ldr	r3, [pc, #368]	; (80039e4 <UART_SetConfig+0x2f8>)
 8003872:	0052      	lsls	r2, r2, #1
 8003874:	5ad3      	ldrh	r3, [r2, r3]
 8003876:	0019      	movs	r1, r3
 8003878:	69b8      	ldr	r0, [r7, #24]
 800387a:	f7fc fc45 	bl	8000108 <__udivsi3>
 800387e:	0003      	movs	r3, r0
 8003880:	005a      	lsls	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	18d2      	adds	r2, r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	0019      	movs	r1, r3
 8003890:	0010      	movs	r0, r2
 8003892:	f7fc fc39 	bl	8000108 <__udivsi3>
 8003896:	0003      	movs	r3, r0
 8003898:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b0f      	cmp	r3, #15
 800389e:	d91c      	bls.n	80038da <UART_SetConfig+0x1ee>
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	025b      	lsls	r3, r3, #9
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d217      	bcs.n	80038da <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	200e      	movs	r0, #14
 80038b0:	183b      	adds	r3, r7, r0
 80038b2:	210f      	movs	r1, #15
 80038b4:	438a      	bics	r2, r1
 80038b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2207      	movs	r2, #7
 80038c0:	4013      	ands	r3, r2
 80038c2:	b299      	uxth	r1, r3
 80038c4:	183b      	adds	r3, r7, r0
 80038c6:	183a      	adds	r2, r7, r0
 80038c8:	8812      	ldrh	r2, [r2, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	183a      	adds	r2, r7, r0
 80038d4:	8812      	ldrh	r2, [r2, #0]
 80038d6:	60da      	str	r2, [r3, #12]
 80038d8:	e060      	b.n	800399c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80038da:	231e      	movs	r3, #30
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e05b      	b.n	800399c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038e4:	231f      	movs	r3, #31
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d01f      	beq.n	800392e <UART_SetConfig+0x242>
 80038ee:	dc22      	bgt.n	8003936 <UART_SetConfig+0x24a>
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d017      	beq.n	8003924 <UART_SetConfig+0x238>
 80038f4:	dc1f      	bgt.n	8003936 <UART_SetConfig+0x24a>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <UART_SetConfig+0x214>
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d005      	beq.n	800390a <UART_SetConfig+0x21e>
 80038fe:	e01a      	b.n	8003936 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003900:	f7fe fa88 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 8003904:	0003      	movs	r3, r0
 8003906:	61bb      	str	r3, [r7, #24]
        break;
 8003908:	e01c      	b.n	8003944 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800390a:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <UART_SetConfig+0x2ec>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2207      	movs	r2, #7
 8003912:	4013      	ands	r3, r2
 8003914:	3301      	adds	r3, #1
 8003916:	0019      	movs	r1, r3
 8003918:	4831      	ldr	r0, [pc, #196]	; (80039e0 <UART_SetConfig+0x2f4>)
 800391a:	f7fc fbf5 	bl	8000108 <__udivsi3>
 800391e:	0003      	movs	r3, r0
 8003920:	61bb      	str	r3, [r7, #24]
        break;
 8003922:	e00f      	b.n	8003944 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003924:	f7fe fa2c 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8003928:	0003      	movs	r3, r0
 800392a:	61bb      	str	r3, [r7, #24]
        break;
 800392c:	e00a      	b.n	8003944 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	61bb      	str	r3, [r7, #24]
        break;
 8003934:	e006      	b.n	8003944 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800393a:	231e      	movs	r3, #30
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
        break;
 8003942:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d028      	beq.n	800399c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800394e:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <UART_SetConfig+0x2f8>)
 8003950:	0052      	lsls	r2, r2, #1
 8003952:	5ad3      	ldrh	r3, [r2, r3]
 8003954:	0019      	movs	r1, r3
 8003956:	69b8      	ldr	r0, [r7, #24]
 8003958:	f7fc fbd6 	bl	8000108 <__udivsi3>
 800395c:	0003      	movs	r3, r0
 800395e:	001a      	movs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	18d2      	adds	r2, r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	0019      	movs	r1, r3
 800396e:	0010      	movs	r0, r2
 8003970:	f7fc fbca 	bl	8000108 <__udivsi3>
 8003974:	0003      	movs	r3, r0
 8003976:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	d90a      	bls.n	8003994 <UART_SetConfig+0x2a8>
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	025b      	lsls	r3, r3, #9
 8003984:	429a      	cmp	r2, r3
 8003986:	d205      	bcs.n	8003994 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	e003      	b.n	800399c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003994:	231e      	movs	r3, #30
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	226a      	movs	r2, #106	; 0x6a
 80039a0:	2101      	movs	r1, #1
 80039a2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2268      	movs	r2, #104	; 0x68
 80039a8:	2101      	movs	r1, #1
 80039aa:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80039b8:	231e      	movs	r3, #30
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	781b      	ldrb	r3, [r3, #0]
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b008      	add	sp, #32
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	cfff69f3 	.word	0xcfff69f3
 80039cc:	ffffcfff 	.word	0xffffcfff
 80039d0:	11fff4ff 	.word	0x11fff4ff
 80039d4:	40013800 	.word	0x40013800
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40004400 	.word	0x40004400
 80039e0:	02dc6c00 	.word	0x02dc6c00
 80039e4:	08003f68 	.word	0x08003f68

080039e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	2208      	movs	r2, #8
 80039f6:	4013      	ands	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4a4a      	ldr	r2, [pc, #296]	; (8003b2c <UART_AdvFeatureConfig+0x144>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	2201      	movs	r2, #1
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4a43      	ldr	r2, [pc, #268]	; (8003b30 <UART_AdvFeatureConfig+0x148>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	0019      	movs	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	2202      	movs	r2, #2
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a3b      	ldr	r2, [pc, #236]	; (8003b34 <UART_AdvFeatureConfig+0x14c>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <UART_AdvFeatureConfig+0x150>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <UART_AdvFeatureConfig+0x154>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4a25      	ldr	r2, [pc, #148]	; (8003b40 <UART_AdvFeatureConfig+0x158>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	0019      	movs	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	2240      	movs	r2, #64	; 0x40
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d01d      	beq.n	8003b02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <UART_AdvFeatureConfig+0x15c>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	035b      	lsls	r3, r3, #13
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d10b      	bne.n	8003b02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <UART_AdvFeatureConfig+0x160>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	0019      	movs	r1, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	2280      	movs	r2, #128	; 0x80
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d00b      	beq.n	8003b24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <UART_AdvFeatureConfig+0x164>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]
  }
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	ffff7fff 	.word	0xffff7fff
 8003b30:	fffdffff 	.word	0xfffdffff
 8003b34:	fffeffff 	.word	0xfffeffff
 8003b38:	fffbffff 	.word	0xfffbffff
 8003b3c:	ffffefff 	.word	0xffffefff
 8003b40:	ffffdfff 	.word	0xffffdfff
 8003b44:	ffefffff 	.word	0xffefffff
 8003b48:	ff9fffff 	.word	0xff9fffff
 8003b4c:	fff7ffff 	.word	0xfff7ffff

08003b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b092      	sub	sp, #72	; 0x48
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2290      	movs	r2, #144	; 0x90
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b60:	f7fc ffd8 	bl	8000b14 <HAL_GetTick>
 8003b64:	0003      	movs	r3, r0
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2208      	movs	r2, #8
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d12d      	bne.n	8003bd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b78:	2280      	movs	r2, #128	; 0x80
 8003b7a:	0391      	lsls	r1, r2, #14
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4a47      	ldr	r2, [pc, #284]	; (8003c9c <UART_CheckIdleState+0x14c>)
 8003b80:	9200      	str	r2, [sp, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f000 f88e 	bl	8003ca4 <UART_WaitOnFlagUntilTimeout>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d022      	beq.n	8003bd2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b96:	2301      	movs	r3, #1
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	438a      	bics	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	f383 8810 	msr	PRIMASK, r3
}
 8003bbc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2288      	movs	r2, #136	; 0x88
 8003bc2:	2120      	movs	r1, #32
 8003bc4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2284      	movs	r2, #132	; 0x84
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e060      	b.n	8003c94 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d146      	bne.n	8003c6e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	03d1      	lsls	r1, r2, #15
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4a2c      	ldr	r2, [pc, #176]	; (8003c9c <UART_CheckIdleState+0x14c>)
 8003bea:	9200      	str	r2, [sp, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f000 f859 	bl	8003ca4 <UART_WaitOnFlagUntilTimeout>
 8003bf2:	1e03      	subs	r3, r0, #0
 8003bf4:	d03b      	beq.n	8003c6e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003c00:	2301      	movs	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f383 8810 	msr	PRIMASK, r3
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4922      	ldr	r1, [pc, #136]	; (8003ca0 <UART_CheckIdleState+0x150>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c28:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c30:	633b      	str	r3, [r7, #48]	; 0x30
 8003c32:	2301      	movs	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f383 8810 	msr	PRIMASK, r3
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	438a      	bics	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f383 8810 	msr	PRIMASK, r3
}
 8003c58:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	228c      	movs	r2, #140	; 0x8c
 8003c5e:	2120      	movs	r1, #32
 8003c60:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2284      	movs	r2, #132	; 0x84
 8003c66:	2100      	movs	r1, #0
 8003c68:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e012      	b.n	8003c94 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2288      	movs	r2, #136	; 0x88
 8003c72:	2120      	movs	r1, #32
 8003c74:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	228c      	movs	r2, #140	; 0x8c
 8003c7a:	2120      	movs	r1, #32
 8003c7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2284      	movs	r2, #132	; 0x84
 8003c8e:	2100      	movs	r1, #0
 8003c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b010      	add	sp, #64	; 0x40
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	01ffffff 	.word	0x01ffffff
 8003ca0:	fffffedf 	.word	0xfffffedf

08003ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	1dfb      	adds	r3, r7, #7
 8003cb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb4:	e04b      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	d048      	beq.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cbc:	f7fc ff2a 	bl	8000b14 <HAL_GetTick>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d302      	bcc.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e04b      	b.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2204      	movs	r2, #4
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d035      	beq.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d111      	bne.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f000 f83c 	bl	8003d78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2290      	movs	r2, #144	; 0x90
 8003d04:	2108      	movs	r1, #8
 8003d06:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2284      	movs	r2, #132	; 0x84
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e02c      	b.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	401a      	ands	r2, r3
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d112      	bne.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2280      	movs	r2, #128	; 0x80
 8003d2e:	0112      	lsls	r2, r2, #4
 8003d30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f000 f81f 	bl	8003d78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2290      	movs	r2, #144	; 0x90
 8003d3e:	2120      	movs	r1, #32
 8003d40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2284      	movs	r2, #132	; 0x84
 8003d46:	2100      	movs	r1, #0
 8003d48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e00f      	b.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	4013      	ands	r3, r2
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	425a      	negs	r2, r3
 8003d5e:	4153      	adcs	r3, r2
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	001a      	movs	r2, r3
 8003d64:	1dfb      	adds	r3, r7, #7
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d0a4      	beq.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b004      	add	sp, #16
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08e      	sub	sp, #56	; 0x38
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d80:	f3ef 8310 	mrs	r3, PRIMASK
 8003d84:	617b      	str	r3, [r7, #20]
  return(result);
 8003d86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f383 8810 	msr	PRIMASK, r3
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4926      	ldr	r1, [pc, #152]	; (8003e3c <UART_EndRxTransfer+0xc4>)
 8003da2:	400a      	ands	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003db2:	f3ef 8310 	mrs	r3, PRIMASK
 8003db6:	623b      	str	r3, [r7, #32]
  return(result);
 8003db8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003dba:	633b      	str	r3, [r7, #48]	; 0x30
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	f383 8810 	msr	PRIMASK, r3
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	491b      	ldr	r1, [pc, #108]	; (8003e40 <UART_EndRxTransfer+0xc8>)
 8003dd4:	400a      	ands	r2, r1
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d118      	bne.n	8003e1e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003dec:	f3ef 8310 	mrs	r3, PRIMASK
 8003df0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003df2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df6:	2301      	movs	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f383 8810 	msr	PRIMASK, r3
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2110      	movs	r1, #16
 8003e0e:	438a      	bics	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f383 8810 	msr	PRIMASK, r3
}
 8003e1c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	228c      	movs	r2, #140	; 0x8c
 8003e22:	2120      	movs	r1, #32
 8003e24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b00e      	add	sp, #56	; 0x38
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	fffffedf 	.word	0xfffffedf
 8003e40:	effffffe 	.word	0xeffffffe

08003e44 <memset>:
 8003e44:	0003      	movs	r3, r0
 8003e46:	1882      	adds	r2, r0, r2
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d100      	bne.n	8003e4e <memset+0xa>
 8003e4c:	4770      	bx	lr
 8003e4e:	7019      	strb	r1, [r3, #0]
 8003e50:	3301      	adds	r3, #1
 8003e52:	e7f9      	b.n	8003e48 <memset+0x4>

08003e54 <__libc_init_array>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	2600      	movs	r6, #0
 8003e58:	4c0c      	ldr	r4, [pc, #48]	; (8003e8c <__libc_init_array+0x38>)
 8003e5a:	4d0d      	ldr	r5, [pc, #52]	; (8003e90 <__libc_init_array+0x3c>)
 8003e5c:	1b64      	subs	r4, r4, r5
 8003e5e:	10a4      	asrs	r4, r4, #2
 8003e60:	42a6      	cmp	r6, r4
 8003e62:	d109      	bne.n	8003e78 <__libc_init_array+0x24>
 8003e64:	2600      	movs	r6, #0
 8003e66:	f000 f819 	bl	8003e9c <_init>
 8003e6a:	4c0a      	ldr	r4, [pc, #40]	; (8003e94 <__libc_init_array+0x40>)
 8003e6c:	4d0a      	ldr	r5, [pc, #40]	; (8003e98 <__libc_init_array+0x44>)
 8003e6e:	1b64      	subs	r4, r4, r5
 8003e70:	10a4      	asrs	r4, r4, #2
 8003e72:	42a6      	cmp	r6, r4
 8003e74:	d105      	bne.n	8003e82 <__libc_init_array+0x2e>
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	00b3      	lsls	r3, r6, #2
 8003e7a:	58eb      	ldr	r3, [r5, r3]
 8003e7c:	4798      	blx	r3
 8003e7e:	3601      	adds	r6, #1
 8003e80:	e7ee      	b.n	8003e60 <__libc_init_array+0xc>
 8003e82:	00b3      	lsls	r3, r6, #2
 8003e84:	58eb      	ldr	r3, [r5, r3]
 8003e86:	4798      	blx	r3
 8003e88:	3601      	adds	r6, #1
 8003e8a:	e7f2      	b.n	8003e72 <__libc_init_array+0x1e>
 8003e8c:	08003f80 	.word	0x08003f80
 8003e90:	08003f80 	.word	0x08003f80
 8003e94:	08003f84 	.word	0x08003f84
 8003e98:	08003f80 	.word	0x08003f80

08003e9c <_init>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea2:	bc08      	pop	{r3}
 8003ea4:	469e      	mov	lr, r3
 8003ea6:	4770      	bx	lr

08003ea8 <_fini>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr
