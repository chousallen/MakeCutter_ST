
servo_lib_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003484  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003610  08003610  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003610  08003610  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003610  08003610  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000010  08003628  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003628  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011412  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ad  00000000  00000000  0003148d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  00033640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3e  00000000  00000000  000345a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013dae  00000000  00000000  000351e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013704  00000000  00000000  00048f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007eff2  00000000  00000000  0005c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003860  00000000  00000000  000db68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000deeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800352c 	.word	0x0800352c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800352c 	.word	0x0800352c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc79 	bl	8000b1a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f838 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9c4 	bl	80005b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f98e 	bl	8000550 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000234:	f000 f876 	bl	8000324 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000238:	f000 f8b4 	bl	80003a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SERVO_INIT(&htim1, cycle);
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <main+0x64>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	b29a      	uxth	r2, r3
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <main+0x68>)
 8000244:	0011      	movs	r1, r2
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fa33 	bl	80006b2 <SERVO_INIT>
  Servo_Start(&myServo1, TIM_CHANNEL_1);
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <main+0x6c>)
 800024e:	2100      	movs	r1, #0
 8000250:	0018      	movs	r0, r3
 8000252:	f000 fa6f 	bl	8000734 <Servo_Start>
  Servo_Start(&myServo2, TIM_CHANNEL_2);
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <main+0x70>)
 8000258:	2104      	movs	r1, #4
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fa6a 	bl	8000734 <Servo_Start>
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, &pwm1, 1);
  while (1)
  {
	  Servo_Write(&myServo1, pwm1);
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <main+0x74>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	b29a      	uxth	r2, r3
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <main+0x6c>)
 8000268:	0011      	movs	r1, r2
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fa78 	bl	8000760 <Servo_Write>
	  Servo_Write(&myServo2, pwm2);
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <main+0x78>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	b29a      	uxth	r2, r3
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <main+0x70>)
 8000278:	0011      	movs	r1, r2
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fa70 	bl	8000760 <Servo_Write>
	  Servo_Write(&myServo1, pwm1);
 8000280:	e7ee      	b.n	8000260 <main+0x40>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000000 	.word	0x20000000
 8000288:	20000080 	.word	0x20000080
 800028c:	20000168 	.word	0x20000168
 8000290:	20000170 	.word	0x20000170
 8000294:	20000160 	.word	0x20000160
 8000298:	20000164 	.word	0x20000164

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b08d      	sub	sp, #52	; 0x34
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2414      	movs	r4, #20
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	231c      	movs	r3, #28
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f003 f911 	bl	80034d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	003b      	movs	r3, r7
 80002b4:	0018      	movs	r0, r3
 80002b6:	2314      	movs	r3, #20
 80002b8:	001a      	movs	r2, r3
 80002ba:	2100      	movs	r1, #0
 80002bc:	f003 f90a 	bl	80034d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2202      	movs	r2, #2
 80002c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	0052      	lsls	r2, r2, #1
 80002cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	2240      	movs	r2, #64	; 0x40
 80002d8:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 f883 	bl	80013e8 <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002e6:	f000 f9df 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	003b      	movs	r3, r7
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000302:	003b      	movs	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	003b      	movs	r3, r7
 800030a:	2101      	movs	r1, #1
 800030c:	0018      	movs	r0, r3
 800030e:	f001 fa4f 	bl	80017b0 <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000316:	f000 f9c7 	bl	80006a8 <Error_Handler>
  }
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b00d      	add	sp, #52	; 0x34
 8000320:	bd90      	pop	{r4, r7, pc}
	...

08000324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <MX_I2C1_Init+0x74>)
 800032a:	4a1c      	ldr	r2, [pc, #112]	; (800039c <MX_I2C1_Init+0x78>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <MX_I2C1_Init+0x74>)
 8000330:	4a1b      	ldr	r2, [pc, #108]	; (80003a0 <MX_I2C1_Init+0x7c>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <MX_I2C1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_I2C1_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_I2C1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_I2C1_Init+0x74>)
 8000360:	0018      	movs	r0, r3
 8000362:	f000 ff03 	bl	800116c <HAL_I2C_Init>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800036a:	f000 f99d 	bl	80006a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_I2C1_Init+0x74>)
 8000370:	2100      	movs	r1, #0
 8000372:	0018      	movs	r0, r3
 8000374:	f000 ffa0 	bl	80012b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800037c:	f000 f994 	bl	80006a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <MX_I2C1_Init+0x74>)
 8000382:	2100      	movs	r1, #0
 8000384:	0018      	movs	r0, r3
 8000386:	f000 ffe3 	bl	8001350 <HAL_I2CEx_ConfigDigitalFilter>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800038e:	f000 f98b 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000002c 	.word	0x2000002c
 800039c:	40005400 	.word	0x40005400
 80003a0:	20303e5d 	.word	0x20303e5d

080003a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b09c      	sub	sp, #112	; 0x70
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	2360      	movs	r3, #96	; 0x60
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	0018      	movs	r0, r3
 80003b0:	2310      	movs	r3, #16
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f003 f88d 	bl	80034d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ba:	2354      	movs	r3, #84	; 0x54
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	0018      	movs	r0, r3
 80003c0:	230c      	movs	r3, #12
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f003 f885 	bl	80034d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ca:	2338      	movs	r3, #56	; 0x38
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	0018      	movs	r0, r3
 80003d0:	231c      	movs	r3, #28
 80003d2:	001a      	movs	r2, r3
 80003d4:	2100      	movs	r1, #0
 80003d6:	f003 f87d 	bl	80034d4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	0018      	movs	r0, r3
 80003de:	2334      	movs	r3, #52	; 0x34
 80003e0:	001a      	movs	r2, r3
 80003e2:	2100      	movs	r1, #0
 80003e4:	f003 f876 	bl	80034d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003e8:	4b57      	ldr	r3, [pc, #348]	; (8000548 <MX_TIM1_Init+0x1a4>)
 80003ea:	4a58      	ldr	r2, [pc, #352]	; (800054c <MX_TIM1_Init+0x1a8>)
 80003ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80003ee:	4b56      	ldr	r3, [pc, #344]	; (8000548 <MX_TIM1_Init+0x1a4>)
 80003f0:	222f      	movs	r2, #47	; 0x2f
 80003f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f4:	4b54      	ldr	r3, [pc, #336]	; (8000548 <MX_TIM1_Init+0x1a4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 80003fa:	4b53      	ldr	r3, [pc, #332]	; (8000548 <MX_TIM1_Init+0x1a4>)
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000402:	4b51      	ldr	r3, [pc, #324]	; (8000548 <MX_TIM1_Init+0x1a4>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000408:	4b4f      	ldr	r3, [pc, #316]	; (8000548 <MX_TIM1_Init+0x1a4>)
 800040a:	2200      	movs	r2, #0
 800040c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040e:	4b4e      	ldr	r3, [pc, #312]	; (8000548 <MX_TIM1_Init+0x1a4>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000414:	4b4c      	ldr	r3, [pc, #304]	; (8000548 <MX_TIM1_Init+0x1a4>)
 8000416:	0018      	movs	r0, r3
 8000418:	f001 fc24 	bl	8001c64 <HAL_TIM_Base_Init>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000420:	f000 f942 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000424:	2160      	movs	r1, #96	; 0x60
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2280      	movs	r2, #128	; 0x80
 800042a:	0152      	lsls	r2, r2, #5
 800042c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800042e:	187a      	adds	r2, r7, r1
 8000430:	4b45      	ldr	r3, [pc, #276]	; (8000548 <MX_TIM1_Init+0x1a4>)
 8000432:	0011      	movs	r1, r2
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fea5 	bl	8002184 <HAL_TIM_ConfigClockSource>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800043e:	f000 f933 	bl	80006a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000442:	4b41      	ldr	r3, [pc, #260]	; (8000548 <MX_TIM1_Init+0x1a4>)
 8000444:	0018      	movs	r0, r3
 8000446:	f001 fc65 	bl	8001d14 <HAL_TIM_PWM_Init>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800044e:	f000 f92b 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000452:	2154      	movs	r1, #84	; 0x54
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000466:	187a      	adds	r2, r7, r1
 8000468:	4b37      	ldr	r3, [pc, #220]	; (8000548 <MX_TIM1_Init+0x1a4>)
 800046a:	0011      	movs	r1, r2
 800046c:	0018      	movs	r0, r3
 800046e:	f002 fb27 	bl	8002ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000476:	f000 f917 	bl	80006a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800047a:	2138      	movs	r1, #56	; 0x38
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2260      	movs	r2, #96	; 0x60
 8000480:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a6:	1879      	adds	r1, r7, r1
 80004a8:	4b27      	ldr	r3, [pc, #156]	; (8000548 <MX_TIM1_Init+0x1a4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 fd69 	bl	8001f84 <HAL_TIM_PWM_ConfigChannel>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80004b6:	f000 f8f7 	bl	80006a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004ba:	2338      	movs	r3, #56	; 0x38
 80004bc:	18f9      	adds	r1, r7, r3
 80004be:	4b22      	ldr	r3, [pc, #136]	; (8000548 <MX_TIM1_Init+0x1a4>)
 80004c0:	2204      	movs	r2, #4
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fd5e 	bl	8001f84 <HAL_TIM_PWM_ConfigChannel>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80004cc:	f000 f8ec 	bl	80006a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	0192      	lsls	r2, r2, #6
 80004f4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	0492      	lsls	r2, r2, #18
 800050e:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000522:	1d3a      	adds	r2, r7, #4
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_TIM1_Init+0x1a4>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f002 fb2b 	bl	8002b84 <HAL_TIMEx_ConfigBreakDeadTime>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000532:	f000 f8b9 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <MX_TIM1_Init+0x1a4>)
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fa11 	bl	8000960 <HAL_TIM_MspPostInit>

}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b01c      	add	sp, #112	; 0x70
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	20000080 	.word	0x20000080
 800054c:	40012c00 	.word	0x40012c00

08000550 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000554:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 8000556:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <MX_USART2_UART_Init+0x64>)
 8000558:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 800055c:	22e1      	movs	r2, #225	; 0xe1
 800055e:	0252      	lsls	r2, r2, #9
 8000560:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 8000576:	220c      	movs	r2, #12
 8000578:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 8000594:	2200      	movs	r2, #0
 8000596:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MX_USART2_UART_Init+0x60>)
 800059a:	0018      	movs	r0, r3
 800059c:	f002 fb98 	bl	8002cd0 <HAL_UART_Init>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80005a4:	f000 f880 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	200000cc 	.word	0x200000cc
 80005b4:	40004400 	.word	0x40004400

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b08b      	sub	sp, #44	; 0x2c
 80005bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	2414      	movs	r4, #20
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2314      	movs	r3, #20
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 ff83 	bl	80034d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b33      	ldr	r3, [pc, #204]	; (800069c <MX_GPIO_Init+0xe4>)
 80005d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <MX_GPIO_Init+0xe4>)
 80005d4:	2104      	movs	r1, #4
 80005d6:	430a      	orrs	r2, r1
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
 80005da:	4b30      	ldr	r3, [pc, #192]	; (800069c <MX_GPIO_Init+0xe4>)
 80005dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005de:	2204      	movs	r2, #4
 80005e0:	4013      	ands	r3, r2
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b2d      	ldr	r3, [pc, #180]	; (800069c <MX_GPIO_Init+0xe4>)
 80005e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <MX_GPIO_Init+0xe4>)
 80005ec:	2120      	movs	r1, #32
 80005ee:	430a      	orrs	r2, r1
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
 80005f2:	4b2a      	ldr	r3, [pc, #168]	; (800069c <MX_GPIO_Init+0xe4>)
 80005f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f6:	2220      	movs	r2, #32
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b27      	ldr	r3, [pc, #156]	; (800069c <MX_GPIO_Init+0xe4>)
 8000600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <MX_GPIO_Init+0xe4>)
 8000604:	2101      	movs	r1, #1
 8000606:	430a      	orrs	r2, r1
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_GPIO_Init+0xe4>)
 800060c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060e:	2201      	movs	r2, #1
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_GPIO_Init+0xe4>)
 8000618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <MX_GPIO_Init+0xe4>)
 800061c:	2102      	movs	r1, #2
 800061e:	430a      	orrs	r2, r1
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_GPIO_Init+0xe4>)
 8000624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000626:	2202      	movs	r2, #2
 8000628:	4013      	ands	r3, r2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 800062e:	23a0      	movs	r3, #160	; 0xa0
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	2201      	movs	r2, #1
 8000634:	2120      	movs	r1, #32
 8000636:	0018      	movs	r0, r3
 8000638:	f000 fd3c 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	0192      	lsls	r2, r2, #6
 8000642:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <MX_GPIO_Init+0xe8>)
 8000648:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000650:	193b      	adds	r3, r7, r4
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_GPIO_Init+0xec>)
 8000654:	0019      	movs	r1, r3
 8000656:	0010      	movs	r0, r2
 8000658:	f000 fbba 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 800065c:	0021      	movs	r1, r4
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2220      	movs	r2, #32
 8000662:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2201      	movs	r2, #1
 8000668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2203      	movs	r2, #3
 8000674:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000676:	187a      	adds	r2, r7, r1
 8000678:	23a0      	movs	r3, #160	; 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	0011      	movs	r1, r2
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fba6 	bl	8000dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	2007      	movs	r0, #7
 800068a:	f000 fb6f 	bl	8000d6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fb81 	bl	8000d96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b00b      	add	sp, #44	; 0x2c
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	10110000 	.word	0x10110000
 80006a4:	50000800 	.word	0x50000800

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>

080006b2 <SERVO_INIT>:
uint16_t denomi;
TIM_HandleTypeDef *htim;


void SERVO_INIT(TIM_HandleTypeDef *_htim, uint16_t cycle)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	000a      	movs	r2, r1
 80006bc:	1cbb      	adds	r3, r7, #2
 80006be:	801a      	strh	r2, [r3, #0]
	SERVO_SET_TIM(_htim);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 f80a 	bl	80006dc <SERVO_SET_TIM>
	SERVO_SET_DUTY_CYCLE(cycle);
 80006c8:	1cbb      	adds	r3, r7, #2
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 f813 	bl	80006f8 <SERVO_SET_DUTY_CYCLE>
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <SERVO_SET_TIM>:

void SERVO_SET_TIM(TIM_HandleTypeDef *_htim)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	htim = _htim;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <SERVO_SET_TIM+0x18>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	601a      	str	r2, [r3, #0]
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	2000017c 	.word	0x2000017c

080006f8 <SERVO_SET_DUTY_CYCLE>:

void SERVO_SET_DUTY_CYCLE(uint16_t cycle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	0002      	movs	r2, r0
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	801a      	strh	r2, [r3, #0]
	denomi = cycle;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <SERVO_SET_DUTY_CYCLE+0x34>)
 8000706:	1dba      	adds	r2, r7, #6
 8000708:	8812      	ldrh	r2, [r2, #0]
 800070a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(htim, denomi);
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <SERVO_SET_DUTY_CYCLE+0x34>)
 800070e:	881a      	ldrh	r2, [r3, #0]
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <SERVO_SET_DUTY_CYCLE+0x38>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <SERVO_SET_DUTY_CYCLE+0x34>)
 800071a:	881a      	ldrh	r2, [r3, #0]
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <SERVO_SET_DUTY_CYCLE+0x38>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60da      	str	r2, [r3, #12]
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000178 	.word	0x20000178
 8000730:	2000017c 	.word	0x2000017c

08000734 <Servo_Start>:
{
	return htim;
}

void Servo_Start(Servo *motor, uint32_t _channel)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	motor->channel = _channel;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(htim, motor->channel);
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <Servo_Start+0x28>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	0019      	movs	r1, r3
 800074e:	0010      	movs	r0, r2
 8000750:	f001 fb40 	bl	8001dd4 <HAL_TIM_PWM_Start>
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b002      	add	sp, #8
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000017c 	.word	0x2000017c

08000760 <Servo_Write>:
{
	HAL_TIM_PWM_Stop(htim, motor->channel);
}

bool Servo_Write(Servo *motor, uint16_t val)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	000a      	movs	r2, r1
 800076a:	1cbb      	adds	r3, r7, #2
 800076c:	801a      	strh	r2, [r3, #0]
	if(val >= denomi)
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <Servo_Write+0xac>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	1cba      	adds	r2, r7, #2
 8000774:	8812      	ldrh	r2, [r2, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	d301      	bcc.n	800077e <Servo_Write+0x1e>
		return false;
 800077a:	2300      	movs	r3, #0
 800077c:	e041      	b.n	8000802 <Servo_Write+0xa2>
	motor->numera = val;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1cba      	adds	r2, r7, #2
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim, motor->channel, val);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <Servo_Write+0x3c>
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <Servo_Write+0xb0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	1cba      	adds	r2, r7, #2
 8000796:	8812      	ldrh	r2, [r2, #0]
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
 800079a:	e031      	b.n	8000800 <Servo_Write+0xa0>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	d106      	bne.n	80007b2 <Servo_Write+0x52>
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <Servo_Write+0xb0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	1cbb      	adds	r3, r7, #2
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	6393      	str	r3, [r2, #56]	; 0x38
 80007b0:	e026      	b.n	8000800 <Servo_Write+0xa0>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	d106      	bne.n	80007c8 <Servo_Write+0x68>
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <Servo_Write+0xb0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	1cbb      	adds	r3, r7, #2
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007c6:	e01b      	b.n	8000800 <Servo_Write+0xa0>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b0c      	cmp	r3, #12
 80007ce:	d106      	bne.n	80007de <Servo_Write+0x7e>
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <Servo_Write+0xb0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	1cbb      	adds	r3, r7, #2
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	e010      	b.n	8000800 <Servo_Write+0xa0>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	d106      	bne.n	80007f4 <Servo_Write+0x94>
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <Servo_Write+0xb0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	1cbb      	adds	r3, r7, #2
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	6593      	str	r3, [r2, #88]	; 0x58
 80007f2:	e005      	b.n	8000800 <Servo_Write+0xa0>
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <Servo_Write+0xb0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	1cbb      	adds	r3, r7, #2
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	65d3      	str	r3, [r2, #92]	; 0x5c
	return true;
 8000800:	2301      	movs	r3, #1

}
 8000802:	0018      	movs	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	20000178 	.word	0x20000178
 8000810:	2000017c 	.word	0x2000017c

08000814 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x44>)
 800081c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_MspInit+0x44>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_MspInit+0x44>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x44>)
 8000834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_MspInit+0x44>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	0549      	lsls	r1, r1, #21
 800083c:	430a      	orrs	r2, r1
 800083e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_MspInit+0x44>)
 8000842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	055b      	lsls	r3, r3, #21
 8000848:	4013      	ands	r3, r2
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b091      	sub	sp, #68	; 0x44
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	232c      	movs	r3, #44	; 0x2c
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f002 fe30 	bl	80034d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	2410      	movs	r4, #16
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	231c      	movs	r3, #28
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f002 fe28 	bl	80034d4 <memset>
  if(hi2c->Instance==I2C1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a22      	ldr	r2, [pc, #136]	; (8000914 <HAL_I2C_MspInit+0xb8>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d13e      	bne.n	800090c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2240      	movs	r2, #64	; 0x40
 8000892:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089a:	193b      	adds	r3, r7, r4
 800089c:	0018      	movs	r0, r3
 800089e:	f001 f8f3 	bl	8001a88 <HAL_RCCEx_PeriphCLKConfig>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008a6:	f7ff feff 	bl	80006a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <HAL_I2C_MspInit+0xbc>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <HAL_I2C_MspInit+0xbc>)
 80008b0:	2102      	movs	r1, #2
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_I2C_MspInit+0xbc>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ba:	2202      	movs	r2, #2
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008c2:	212c      	movs	r1, #44	; 0x2c
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	22c0      	movs	r2, #192	; 0xc0
 80008c8:	0092      	lsls	r2, r2, #2
 80008ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2212      	movs	r2, #18
 80008d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2206      	movs	r2, #6
 80008e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	4a0d      	ldr	r2, [pc, #52]	; (800091c <HAL_I2C_MspInit+0xc0>)
 80008e8:	0019      	movs	r1, r3
 80008ea:	0010      	movs	r0, r2
 80008ec:	f000 fa70 	bl	8000dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_I2C_MspInit+0xbc>)
 80008f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_I2C_MspInit+0xbc>)
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	0389      	lsls	r1, r1, #14
 80008fa:	430a      	orrs	r2, r1
 80008fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_I2C_MspInit+0xbc>)
 8000900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	039b      	lsls	r3, r3, #14
 8000906:	4013      	ands	r3, r2
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b011      	add	sp, #68	; 0x44
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	40005400 	.word	0x40005400
 8000918:	40021000 	.word	0x40021000
 800091c:	50000400 	.word	0x50000400

08000920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_TIM_Base_MspInit+0x38>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10d      	bne.n	800094e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	0109      	lsls	r1, r1, #4
 800093c:	430a      	orrs	r2, r1
 800093e:	641a      	str	r2, [r3, #64]	; 0x40
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40012c00 	.word	0x40012c00
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	240c      	movs	r4, #12
 800096a:	193b      	adds	r3, r7, r4
 800096c:	0018      	movs	r0, r3
 800096e:	2314      	movs	r3, #20
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f002 fdae 	bl	80034d4 <memset>
  if(htim->Instance==TIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <HAL_TIM_MspPostInit+0x70>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d122      	bne.n	80009c8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_TIM_MspPostInit+0x74>)
 8000984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <HAL_TIM_MspPostInit+0x74>)
 8000988:	2101      	movs	r1, #1
 800098a:	430a      	orrs	r2, r1
 800098c:	635a      	str	r2, [r3, #52]	; 0x34
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_TIM_MspPostInit+0x74>)
 8000990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000992:	2201      	movs	r2, #1
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA0     ------> TIM1_CH1
    PA1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2203      	movs	r2, #3
 80009a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2202      	movs	r2, #2
 80009a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2205      	movs	r2, #5
 80009b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	187a      	adds	r2, r7, r1
 80009bc:	23a0      	movs	r3, #160	; 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fa04 	bl	8000dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b009      	add	sp, #36	; 0x24
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b08b      	sub	sp, #44	; 0x2c
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	2414      	movs	r4, #20
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2314      	movs	r3, #20
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f002 fd72 	bl	80034d4 <memset>
  if(huart->Instance==USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <HAL_UART_MspInit+0x8c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d130      	bne.n	8000a5c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <HAL_UART_MspInit+0x90>)
 80009fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_UART_MspInit+0x90>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0289      	lsls	r1, r1, #10
 8000a04:	430a      	orrs	r2, r1
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0x90>)
 8000a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	029b      	lsls	r3, r3, #10
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_UART_MspInit+0x90>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_UART_MspInit+0x90>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0x90>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a26:	2201      	movs	r2, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2e:	0021      	movs	r1, r4
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2202      	movs	r2, #2
 8000a3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	187a      	adds	r2, r7, r1
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 f9ba 	bl	8000dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00b      	add	sp, #44	; 0x2c
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40021000 	.word	0x40021000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f8a4 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	019b      	lsls	r3, r3, #6
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fb24 	bl	80010f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <SystemInit+0x14>)
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	0512      	lsls	r2, r2, #20
 8000aba:	609a      	str	r2, [r3, #8]
#endif
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000acc:	f7ff fff0 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ad0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ad2:	e003      	b.n	8000adc <LoopCopyDataInit>

08000ad4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ad6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ad8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ada:	3104      	adds	r1, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000adc:	480a      	ldr	r0, [pc, #40]	; (8000b08 <LoopForever+0xa>)
  ldr r3, =_edata
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <LoopForever+0xe>)
  adds r2, r0, r1
 8000ae0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ae2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ae4:	d3f6      	bcc.n	8000ad4 <CopyDataInit>
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ae8:	e002      	b.n	8000af0 <LoopFillZerobss>

08000aea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  str  r3, [r2]
 8000aec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aee:	3204      	adds	r2, #4

08000af0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <LoopForever+0x16>)
  cmp r2, r3
 8000af2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000af4:	d3f9      	bcc.n	8000aea <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000af6:	f002 fcf5 	bl	80034e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afa:	f7ff fb91 	bl	8000220 <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   r0, =_estack
 8000b00:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000b04:	08003618 	.word	0x08003618
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b0c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000b10:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000b14:	20000184 	.word	0x20000184

08000b18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_IRQHandler>

08000b1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 f80e 	bl	8000b48 <HAL_InitTick>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	e001      	b.n	8000b3c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b38:	f7ff fe6c 	bl	8000814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781b      	ldrb	r3, [r3, #0]
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	230f      	movs	r3, #15
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_InitTick+0x88>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d02b      	beq.n	8000bb8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_InitTick+0x8c>)
 8000b62:	681c      	ldr	r4, [r3, #0]
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_InitTick+0x88>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	0019      	movs	r1, r3
 8000b6a:	23fa      	movs	r3, #250	; 0xfa
 8000b6c:	0098      	lsls	r0, r3, #2
 8000b6e:	f7ff facb 	bl	8000108 <__udivsi3>
 8000b72:	0003      	movs	r3, r0
 8000b74:	0019      	movs	r1, r3
 8000b76:	0020      	movs	r0, r4
 8000b78:	f7ff fac6 	bl	8000108 <__udivsi3>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f919 	bl	8000db6 <HAL_SYSTICK_Config>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d112      	bne.n	8000bae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d80a      	bhi.n	8000ba4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 f8e8 	bl	8000d6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_InitTick+0x90>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	e00d      	b.n	8000bc0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e008      	b.n	8000bc0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bae:	230f      	movs	r3, #15
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e003      	b.n	8000bc0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb8:	230f      	movs	r3, #15
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	781b      	ldrb	r3, [r3, #0]
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b005      	add	sp, #20
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	2000000c 	.word	0x2000000c
 8000bd4:	20000004 	.word	0x20000004
 8000bd8:	20000008 	.word	0x20000008

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	001a      	movs	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	18d2      	adds	r2, r2, r3
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_IncTick+0x20>)
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	2000000c 	.word	0x2000000c
 8000bfc:	20000180 	.word	0x20000180

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	20000180 	.word	0x20000180

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b7f      	cmp	r3, #127	; 0x7f
 8000c26:	d809      	bhi.n	8000c3c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	231f      	movs	r3, #31
 8000c30:	401a      	ands	r2, r3
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <__NVIC_EnableIRQ+0x30>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	4091      	lsls	r1, r2
 8000c38:	000a      	movs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	0002      	movs	r2, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c5c:	d828      	bhi.n	8000cb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5e:	4a2f      	ldr	r2, [pc, #188]	; (8000d1c <__NVIC_SetPriority+0xd4>)
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	33c0      	adds	r3, #192	; 0xc0
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	589b      	ldr	r3, [r3, r2]
 8000c6e:	1dfa      	adds	r2, r7, #7
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	0011      	movs	r1, r2
 8000c74:	2203      	movs	r2, #3
 8000c76:	400a      	ands	r2, r1
 8000c78:	00d2      	lsls	r2, r2, #3
 8000c7a:	21ff      	movs	r1, #255	; 0xff
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	000a      	movs	r2, r1
 8000c80:	43d2      	mvns	r2, r2
 8000c82:	401a      	ands	r2, r3
 8000c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	019b      	lsls	r3, r3, #6
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	2303      	movs	r3, #3
 8000c96:	4003      	ands	r3, r0
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9c:	481f      	ldr	r0, [pc, #124]	; (8000d1c <__NVIC_SetPriority+0xd4>)
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	33c0      	adds	r3, #192	; 0xc0
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cae:	e031      	b.n	8000d14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <__NVIC_SetPriority+0xd8>)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	230f      	movs	r3, #15
 8000cba:	400b      	ands	r3, r1
 8000cbc:	3b08      	subs	r3, #8
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3306      	adds	r3, #6
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	18d3      	adds	r3, r2, r3
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1dfa      	adds	r2, r7, #7
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	0011      	movs	r1, r2
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	21ff      	movs	r1, #255	; 0xff
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	43d2      	mvns	r2, r2
 8000cde:	401a      	ands	r2, r3
 8000ce0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	401a      	ands	r2, r3
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	4003      	ands	r3, r0
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <__NVIC_SetPriority+0xd8>)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	001c      	movs	r4, r3
 8000d00:	230f      	movs	r3, #15
 8000d02:	4023      	ands	r3, r4
 8000d04:	3b08      	subs	r3, #8
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	3306      	adds	r3, #6
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	18c3      	adds	r3, r0, r3
 8000d10:	3304      	adds	r3, #4
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b003      	add	sp, #12
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	1e5a      	subs	r2, r3, #1
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	045b      	lsls	r3, r3, #17
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d301      	bcc.n	8000d3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e010      	b.n	8000d5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SysTick_Config+0x44>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	3a01      	subs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	2103      	movs	r1, #3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff ff7c 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x44>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x44>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	210f      	movs	r1, #15
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	1c02      	adds	r2, r0, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ff5d 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff ff33 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b002      	add	sp, #8
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff ffaf 	bl	8000d24 <SysTick_Config>
 8000dc6:	0003      	movs	r3, r0
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000dde:	e153      	b.n	8001088 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d100      	bne.n	8000df8 <HAL_GPIO_Init+0x28>
 8000df6:	e144      	b.n	8001082 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x38>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b12      	cmp	r3, #18
 8000e06:	d125      	bne.n	8000e54 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	58d3      	ldr	r3, [r2, r3]
 8000e14:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	2207      	movs	r2, #7
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	43da      	mvns	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	220f      	movs	r2, #15
 8000e32:	401a      	ands	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	2107      	movs	r1, #7
 8000e38:	400b      	ands	r3, r1
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	409a      	lsls	r2, r3
 8000e3e:	0013      	movs	r3, r2
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	6979      	ldr	r1, [r7, #20]
 8000e52:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	43da      	mvns	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2203      	movs	r2, #3
 8000e72:	401a      	ands	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d00b      	beq.n	8000ea8 <HAL_GPIO_Init+0xd8>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d007      	beq.n	8000ea8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9c:	2b11      	cmp	r3, #17
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b12      	cmp	r3, #18
 8000ea6:	d130      	bne.n	8000f0a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	409a      	lsls	r2, r3
 8000eb6:	0013      	movs	r3, r2
 8000eb8:	43da      	mvns	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	4013      	ands	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d017      	beq.n	8000f42 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	4013      	ands	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	055b      	lsls	r3, r3, #21
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d100      	bne.n	8000f50 <HAL_GPIO_Init+0x180>
 8000f4e:	e098      	b.n	8001082 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000f50:	4a53      	ldr	r2, [pc, #332]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3318      	adds	r3, #24
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	589b      	ldr	r3, [r3, r2]
 8000f5c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2203      	movs	r2, #3
 8000f62:	4013      	ands	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	220f      	movs	r2, #15
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	23a0      	movs	r3, #160	; 0xa0
 8000f78:	05db      	lsls	r3, r3, #23
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x1e2>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a48      	ldr	r2, [pc, #288]	; (80010a4 <HAL_GPIO_Init+0x2d4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x1de>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a47      	ldr	r2, [pc, #284]	; (80010a8 <HAL_GPIO_Init+0x2d8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x1da>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a46      	ldr	r2, [pc, #280]	; (80010ac <HAL_GPIO_Init+0x2dc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x1d6>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a45      	ldr	r2, [pc, #276]	; (80010b0 <HAL_GPIO_Init+0x2e0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x1d2>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	400a      	ands	r2, r1
 8000fba:	00d2      	lsls	r2, r2, #3
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000fc4:	4936      	ldr	r1, [pc, #216]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3318      	adds	r3, #24
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000fd2:	4a33      	ldr	r2, [pc, #204]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	58d3      	ldr	r3, [r2, r3]
 8000fd8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43da      	mvns	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	025b      	lsls	r3, r3, #9
 8000fec:	4013      	ands	r3, r2
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000ff8:	4929      	ldr	r1, [pc, #164]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001000:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8001002:	2384      	movs	r3, #132	; 0x84
 8001004:	58d3      	ldr	r3, [r2, r3]
 8001006:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43da      	mvns	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4013      	ands	r3, r2
 8001010:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	029b      	lsls	r3, r3, #10
 800101a:	4013      	ands	r3, r2
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001026:	491e      	ldr	r1, [pc, #120]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8001028:	2284      	movs	r2, #132	; 0x84
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43da      	mvns	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	4013      	ands	r3, r2
 800103c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	035b      	lsls	r3, r3, #13
 8001046:	4013      	ands	r3, r2
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43da      	mvns	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	4013      	ands	r3, r2
 8001066:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	039b      	lsls	r3, r3, #14
 8001070:	4013      	ands	r3, r2
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	3301      	adds	r3, #1
 8001086:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	40da      	lsrs	r2, r3
 8001090:	1e13      	subs	r3, r2, #0
 8001092:	d000      	beq.n	8001096 <HAL_GPIO_Init+0x2c6>
 8001094:	e6a4      	b.n	8000de0 <HAL_GPIO_Init+0x10>
  }
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b006      	add	sp, #24
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021800 	.word	0x40021800
 80010a4:	50000400 	.word	0x50000400
 80010a8:	50000800 	.word	0x50000800
 80010ac:	50000c00 	.word	0x50000c00
 80010b0:	50001400 	.word	0x50001400

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	0008      	movs	r0, r1
 80010be:	0011      	movs	r1, r2
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	1c02      	adds	r2, r0, #0
 80010c4:	801a      	strh	r2, [r3, #0]
 80010c6:	1c7b      	adds	r3, r7, #1
 80010c8:	1c0a      	adds	r2, r1, #0
 80010ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010cc:	1c7b      	adds	r3, r7, #1
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d4:	1cbb      	adds	r3, r7, #2
 80010d6:	881a      	ldrh	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010dc:	e003      	b.n	80010e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010de:	1cbb      	adds	r3, r7, #2
 80010e0:	881a      	ldrh	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	0002      	movs	r2, r0
 80010f8:	1dbb      	adds	r3, r7, #6
 80010fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	1dba      	adds	r2, r7, #6
 8001102:	8812      	ldrh	r2, [r2, #0]
 8001104:	4013      	ands	r3, r2
 8001106:	d008      	beq.n	800111a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800110a:	1dba      	adds	r2, r7, #6
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001110:	1dbb      	adds	r3, r7, #6
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	0018      	movs	r0, r3
 8001116:	f000 f815 	bl	8001144 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	1dba      	adds	r2, r7, #6
 8001120:	8812      	ldrh	r2, [r2, #0]
 8001122:	4013      	ands	r3, r2
 8001124:	d008      	beq.n	8001138 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001128:	1dba      	adds	r2, r7, #6
 800112a:	8812      	ldrh	r2, [r2, #0]
 800112c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	0018      	movs	r0, r3
 8001134:	f000 f810 	bl	8001158 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021800 	.word	0x40021800

08001144 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	0002      	movs	r2, r0
 800114c:	1dbb      	adds	r3, r7, #6
 800114e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	0002      	movs	r2, r0
 8001160:	1dbb      	adds	r3, r7, #6
 8001162:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e08f      	b.n	800129e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2241      	movs	r2, #65	; 0x41
 8001182:	5c9b      	ldrb	r3, [r3, r2]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d107      	bne.n	800119a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2240      	movs	r2, #64	; 0x40
 800118e:	2100      	movs	r1, #0
 8001190:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff fb61 	bl	800085c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2241      	movs	r2, #65	; 0x41
 800119e:	2124      	movs	r1, #36	; 0x24
 80011a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	493b      	ldr	r1, [pc, #236]	; (80012a8 <HAL_I2C_Init+0x13c>)
 80011bc:	400a      	ands	r2, r1
 80011be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4938      	ldr	r1, [pc, #224]	; (80012ac <HAL_I2C_Init+0x140>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d108      	bne.n	80011ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0209      	lsls	r1, r1, #8
 80011e4:	430a      	orrs	r2, r1
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	e007      	b.n	80011fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2184      	movs	r1, #132	; 0x84
 80011f4:	0209      	lsls	r1, r1, #8
 80011f6:	430a      	orrs	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d109      	bne.n	8001216 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0109      	lsls	r1, r1, #4
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	e007      	b.n	8001226 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4923      	ldr	r1, [pc, #140]	; (80012b0 <HAL_I2C_Init+0x144>)
 8001222:	400a      	ands	r2, r1
 8001224:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4920      	ldr	r1, [pc, #128]	; (80012b4 <HAL_I2C_Init+0x148>)
 8001232:	430a      	orrs	r2, r1
 8001234:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	491a      	ldr	r1, [pc, #104]	; (80012ac <HAL_I2C_Init+0x140>)
 8001242:	400a      	ands	r2, r1
 8001244:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	431a      	orrs	r2, r3
 8001250:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69d9      	ldr	r1, [r3, #28]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2101      	movs	r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2241      	movs	r2, #65	; 0x41
 800128a:	2120      	movs	r1, #32
 800128c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2242      	movs	r2, #66	; 0x42
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	f0ffffff 	.word	0xf0ffffff
 80012ac:	ffff7fff 	.word	0xffff7fff
 80012b0:	fffff7ff 	.word	0xfffff7ff
 80012b4:	02008000 	.word	0x02008000

080012b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2241      	movs	r2, #65	; 0x41
 80012c6:	5c9b      	ldrb	r3, [r3, r2]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b20      	cmp	r3, #32
 80012cc:	d138      	bne.n	8001340 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2240      	movs	r2, #64	; 0x40
 80012d2:	5c9b      	ldrb	r3, [r3, r2]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80012d8:	2302      	movs	r3, #2
 80012da:	e032      	b.n	8001342 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	2101      	movs	r1, #1
 80012e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2241      	movs	r2, #65	; 0x41
 80012e8:	2124      	movs	r1, #36	; 0x24
 80012ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2101      	movs	r1, #1
 80012f8:	438a      	bics	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4911      	ldr	r1, [pc, #68]	; (800134c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6819      	ldr	r1, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2101      	movs	r1, #1
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2241      	movs	r2, #65	; 0x41
 8001330:	2120      	movs	r1, #32
 8001332:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2240      	movs	r2, #64	; 0x40
 8001338:	2100      	movs	r1, #0
 800133a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	e000      	b.n	8001342 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001340:	2302      	movs	r3, #2
  }
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	ffffefff 	.word	0xffffefff

08001350 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2241      	movs	r2, #65	; 0x41
 800135e:	5c9b      	ldrb	r3, [r3, r2]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b20      	cmp	r3, #32
 8001364:	d139      	bne.n	80013da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2240      	movs	r2, #64	; 0x40
 800136a:	5c9b      	ldrb	r3, [r3, r2]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001370:	2302      	movs	r3, #2
 8001372:	e033      	b.n	80013dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	2101      	movs	r1, #1
 800137a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2241      	movs	r2, #65	; 0x41
 8001380:	2124      	movs	r1, #36	; 0x24
 8001382:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2101      	movs	r1, #1
 8001390:	438a      	bics	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2241      	movs	r2, #65	; 0x41
 80013ca:	2120      	movs	r1, #32
 80013cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2240      	movs	r2, #64	; 0x40
 80013d2:	2100      	movs	r1, #0
 80013d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80013da:	2302      	movs	r3, #2
  }
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b004      	add	sp, #16
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	fffff0ff 	.word	0xfffff0ff

080013e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1d0      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x1e>
 8001404:	e069      	b.n	80014da <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001406:	4bc8      	ldr	r3, [pc, #800]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2238      	movs	r2, #56	; 0x38
 800140c:	4013      	ands	r3, r2
 800140e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b08      	cmp	r3, #8
 8001414:	d105      	bne.n	8001422 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d15d      	bne.n	80014da <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e1bc      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	025b      	lsls	r3, r3, #9
 800142a:	429a      	cmp	r2, r3
 800142c:	d107      	bne.n	800143e <HAL_RCC_OscConfig+0x56>
 800142e:	4bbe      	ldr	r3, [pc, #760]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4bbd      	ldr	r3, [pc, #756]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	0249      	lsls	r1, r1, #9
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e020      	b.n	8001480 <HAL_RCC_OscConfig+0x98>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	23a0      	movs	r3, #160	; 0xa0
 8001444:	02db      	lsls	r3, r3, #11
 8001446:	429a      	cmp	r2, r3
 8001448:	d10e      	bne.n	8001468 <HAL_RCC_OscConfig+0x80>
 800144a:	4bb7      	ldr	r3, [pc, #732]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4bb6      	ldr	r3, [pc, #728]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	02c9      	lsls	r1, r1, #11
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	4bb3      	ldr	r3, [pc, #716]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4bb2      	ldr	r3, [pc, #712]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	0249      	lsls	r1, r1, #9
 8001462:	430a      	orrs	r2, r1
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0x98>
 8001468:	4baf      	ldr	r3, [pc, #700]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4bae      	ldr	r3, [pc, #696]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800146e:	49af      	ldr	r1, [pc, #700]	; (800172c <HAL_RCC_OscConfig+0x344>)
 8001470:	400a      	ands	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	4bac      	ldr	r3, [pc, #688]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4bab      	ldr	r3, [pc, #684]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800147a:	49ad      	ldr	r1, [pc, #692]	; (8001730 <HAL_RCC_OscConfig+0x348>)
 800147c:	400a      	ands	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d014      	beq.n	80014b2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fbba 	bl	8000c00 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001492:	f7ff fbb5 	bl	8000c00 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b64      	cmp	r3, #100	; 0x64
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e17b      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a4:	4ba0      	ldr	r3, [pc, #640]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	029b      	lsls	r3, r3, #10
 80014ac:	4013      	ands	r3, r2
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0xaa>
 80014b0:	e013      	b.n	80014da <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fba5 	bl	8000c00 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fba0 	bl	8000c00 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e166      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ce:	4b96      	ldr	r3, [pc, #600]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	029b      	lsls	r3, r3, #10
 80014d6:	4013      	ands	r3, r2
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2202      	movs	r2, #2
 80014e0:	4013      	ands	r3, r2
 80014e2:	d100      	bne.n	80014e6 <HAL_RCC_OscConfig+0xfe>
 80014e4:	e086      	b.n	80015f4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e6:	4b90      	ldr	r3, [pc, #576]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2238      	movs	r2, #56	; 0x38
 80014ec:	4013      	ands	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d12f      	bne.n	8001556 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e14c      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b89      	ldr	r3, [pc, #548]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a8b      	ldr	r2, [pc, #556]	; (8001734 <HAL_RCC_OscConfig+0x34c>)
 8001508:	4013      	ands	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	021a      	lsls	r2, r3, #8
 8001512:	4b85      	ldr	r3, [pc, #532]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d112      	bne.n	8001544 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800151e:	4b82      	ldr	r3, [pc, #520]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a85      	ldr	r2, [pc, #532]	; (8001738 <HAL_RCC_OscConfig+0x350>)
 8001524:	4013      	ands	r3, r2
 8001526:	0019      	movs	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	4b7e      	ldr	r3, [pc, #504]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001532:	4b7d      	ldr	r3, [pc, #500]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0adb      	lsrs	r3, r3, #11
 8001538:	2207      	movs	r2, #7
 800153a:	4013      	ands	r3, r2
 800153c:	4a7f      	ldr	r2, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x354>)
 800153e:	40da      	lsrs	r2, r3
 8001540:	4b7f      	ldr	r3, [pc, #508]	; (8001740 <HAL_RCC_OscConfig+0x358>)
 8001542:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001544:	4b7f      	ldr	r3, [pc, #508]	; (8001744 <HAL_RCC_OscConfig+0x35c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff fafd 	bl	8000b48 <HAL_InitTick>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d050      	beq.n	80015f4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e122      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d030      	beq.n	80015c0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800155e:	4b72      	ldr	r3, [pc, #456]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a75      	ldr	r2, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x350>)
 8001564:	4013      	ands	r3, r2
 8001566:	0019      	movs	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001572:	4b6d      	ldr	r3, [pc, #436]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b6c      	ldr	r3, [pc, #432]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0049      	lsls	r1, r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb3e 	bl	8000c00 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800158a:	f7ff fb39 	bl	8000c00 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0ff      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	4b62      	ldr	r3, [pc, #392]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b5f      	ldr	r3, [pc, #380]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a61      	ldr	r2, [pc, #388]	; (8001734 <HAL_RCC_OscConfig+0x34c>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	021a      	lsls	r2, r3, #8
 80015b8:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	e019      	b.n	80015f4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b58      	ldr	r3, [pc, #352]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80015c6:	4960      	ldr	r1, [pc, #384]	; (8001748 <HAL_RCC_OscConfig+0x360>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb18 	bl	8000c00 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fb13 	bl	8000c00 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0d9      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e8:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4013      	ands	r3, r2
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2208      	movs	r2, #8
 80015fa:	4013      	ands	r3, r2
 80015fc:	d042      	beq.n	8001684 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80015fe:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2238      	movs	r2, #56	; 0x38
 8001604:	4013      	ands	r3, r2
 8001606:	2b18      	cmp	r3, #24
 8001608:	d105      	bne.n	8001616 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d138      	bne.n	8001684 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0c2      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d019      	beq.n	8001652 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800161e:	4b42      	ldr	r3, [pc, #264]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001620:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fae9 	bl	8000c00 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001634:	f7ff fae4 	bl	8000c00 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0aa      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001646:	4b38      	ldr	r3, [pc, #224]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d0f1      	beq.n	8001634 <HAL_RCC_OscConfig+0x24c>
 8001650:	e018      	b.n	8001684 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001654:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001658:	2101      	movs	r1, #1
 800165a:	438a      	bics	r2, r1
 800165c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165e:	f7ff facf 	bl	8000c00 <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001668:	f7ff faca 	bl	8000c00 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e090      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d1f1      	bne.n	8001668 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2204      	movs	r2, #4
 800168a:	4013      	ands	r3, r2
 800168c:	d100      	bne.n	8001690 <HAL_RCC_OscConfig+0x2a8>
 800168e:	e084      	b.n	800179a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001690:	230f      	movs	r3, #15
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2238      	movs	r2, #56	; 0x38
 800169e:	4013      	ands	r3, r2
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d000      	beq.n	80016ae <HAL_RCC_OscConfig+0x2c6>
 80016ac:	e075      	b.n	800179a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e074      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d106      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2e0>
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80016bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80016c0:	2101      	movs	r1, #1
 80016c2:	430a      	orrs	r2, r1
 80016c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016c6:	e01c      	b.n	8001702 <HAL_RCC_OscConfig+0x31a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d10c      	bne.n	80016ea <HAL_RCC_OscConfig+0x302>
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80016d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80016d6:	2104      	movs	r1, #4
 80016d8:	430a      	orrs	r2, r1
 80016da:	65da      	str	r2, [r3, #92]	; 0x5c
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80016de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016e8:	e00b      	b.n	8001702 <HAL_RCC_OscConfig+0x31a>
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80016ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	438a      	bics	r2, r1
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80016f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 80016fc:	2104      	movs	r1, #4
 80016fe:	438a      	bics	r2, r1
 8001700:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d028      	beq.n	800175c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fa79 	bl	8000c00 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001712:	e01d      	b.n	8001750 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff fa74 	bl	8000c00 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <HAL_RCC_OscConfig+0x364>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d915      	bls.n	8001750 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e039      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
 8001728:	40021000 	.word	0x40021000
 800172c:	fffeffff 	.word	0xfffeffff
 8001730:	fffbffff 	.word	0xfffbffff
 8001734:	ffff80ff 	.word	0xffff80ff
 8001738:	ffffc7ff 	.word	0xffffc7ff
 800173c:	02dc6c00 	.word	0x02dc6c00
 8001740:	20000004 	.word	0x20000004
 8001744:	20000008 	.word	0x20000008
 8001748:	fffffeff 	.word	0xfffffeff
 800174c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_RCC_OscConfig+0x3bc>)
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	2202      	movs	r2, #2
 8001756:	4013      	ands	r3, r2
 8001758:	d0dc      	beq.n	8001714 <HAL_RCC_OscConfig+0x32c>
 800175a:	e013      	b.n	8001784 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fa50 	bl	8000c00 <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001764:	e009      	b.n	800177a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff fa4b 	bl	8000c00 <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_RCC_OscConfig+0x3c0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e010      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_OscConfig+0x3bc>)
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	2202      	movs	r2, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001784:	230f      	movs	r3, #15
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d105      	bne.n	800179a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_OscConfig+0x3bc>)
 8001790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <HAL_RCC_OscConfig+0x3bc>)
 8001794:	4905      	ldr	r1, [pc, #20]	; (80017ac <HAL_RCC_OscConfig+0x3c4>)
 8001796:	400a      	ands	r2, r1
 8001798:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b006      	add	sp, #24
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	00001388 	.word	0x00001388
 80017ac:	efffffff 	.word	0xefffffff

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0e9      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2207      	movs	r2, #7
 80017ca:	4013      	ands	r3, r2
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d91e      	bls.n	8001810 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2207      	movs	r2, #7
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	4b70      	ldr	r3, [pc, #448]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fa0c 	bl	8000c00 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ec:	e009      	b.n	8001802 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7ff fa07 	bl	8000c00 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	4a6a      	ldr	r2, [pc, #424]	; (80019a4 <HAL_RCC_ClockConfig+0x1f4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0ca      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2207      	movs	r2, #7
 8001808:	4013      	ands	r3, r2
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2202      	movs	r2, #2
 8001816:	4013      	ands	r3, r2
 8001818:	d017      	beq.n	800184a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2204      	movs	r2, #4
 8001820:	4013      	ands	r3, r2
 8001822:	d008      	beq.n	8001836 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001824:	4b60      	ldr	r3, [pc, #384]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a60      	ldr	r2, [pc, #384]	; (80019ac <HAL_RCC_ClockConfig+0x1fc>)
 800182a:	401a      	ands	r2, r3
 800182c:	4b5e      	ldr	r3, [pc, #376]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 800182e:	21b0      	movs	r1, #176	; 0xb0
 8001830:	0109      	lsls	r1, r1, #4
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	4a5d      	ldr	r2, [pc, #372]	; (80019b0 <HAL_RCC_ClockConfig+0x200>)
 800183c:	4013      	ands	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001846:	430a      	orrs	r2, r1
 8001848:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2201      	movs	r2, #1
 8001850:	4013      	ands	r3, r2
 8001852:	d055      	beq.n	8001900 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001854:	4b54      	ldr	r3, [pc, #336]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	221c      	movs	r2, #28
 800185a:	4393      	bics	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001870:	4b4d      	ldr	r3, [pc, #308]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	029b      	lsls	r3, r3, #10
 8001878:	4013      	ands	r3, r2
 800187a:	d11f      	bne.n	80018bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e08b      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d107      	bne.n	8001898 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4013      	ands	r3, r2
 8001892:	d113      	bne.n	80018bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e07f      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d106      	bne.n	80018ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80018a0:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a4:	2202      	movs	r2, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	d108      	bne.n	80018bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e074      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	2202      	movs	r2, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e06d      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018bc:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2207      	movs	r2, #7
 80018c2:	4393      	bics	r3, r2
 80018c4:	0019      	movs	r1, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018d0:	f7ff f996 	bl	8000c00 <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d8:	e009      	b.n	80018ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80018da:	f7ff f991 	bl	8000c00 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	4a2f      	ldr	r2, [pc, #188]	; (80019a4 <HAL_RCC_ClockConfig+0x1f4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e054      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2238      	movs	r2, #56	; 0x38
 80018f4:	401a      	ands	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1ec      	bne.n	80018da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2207      	movs	r2, #7
 8001906:	4013      	ands	r3, r2
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d21e      	bcs.n	800194c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2207      	movs	r2, #7
 8001914:	4393      	bics	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001920:	f7ff f96e 	bl	8000c00 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001928:	e009      	b.n	800193e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800192a:	f7ff f969 	bl	8000c00 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e02c      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2207      	movs	r2, #7
 8001944:	4013      	ands	r3, r2
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d1ee      	bne.n	800192a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2204      	movs	r2, #4
 8001952:	4013      	ands	r3, r2
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_RCC_ClockConfig+0x204>)
 800195c:	4013      	ands	r3, r2
 800195e:	0019      	movs	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800196a:	f000 f82b 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 800196e:	0001      	movs	r1, r0
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	220f      	movs	r2, #15
 8001978:	401a      	ands	r2, r3
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_RCC_ClockConfig+0x208>)
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	58d3      	ldr	r3, [r2, r3]
 8001980:	221f      	movs	r2, #31
 8001982:	4013      	ands	r3, r2
 8001984:	000a      	movs	r2, r1
 8001986:	40da      	lsrs	r2, r3
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 800198a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_RCC_ClockConfig+0x210>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff f8d9 	bl	8000b48 <HAL_InitTick>
 8001996:	0003      	movs	r3, r0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b004      	add	sp, #16
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40022000 	.word	0x40022000
 80019a4:	00001388 	.word	0x00001388
 80019a8:	40021000 	.word	0x40021000
 80019ac:	ffff84ff 	.word	0xffff84ff
 80019b0:	fffff0ff 	.word	0xfffff0ff
 80019b4:	ffff8fff 	.word	0xffff8fff
 80019b8:	08003544 	.word	0x08003544
 80019bc:	20000004 	.word	0x20000004
 80019c0:	20000008 	.word	0x20000008

080019c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x78>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2238      	movs	r2, #56	; 0x38
 80019d0:	4013      	ands	r3, r2
 80019d2:	d10f      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x78>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0adb      	lsrs	r3, r3, #11
 80019da:	2207      	movs	r2, #7
 80019dc:	4013      	ands	r3, r2
 80019de:	2201      	movs	r2, #1
 80019e0:	409a      	lsls	r2, r3
 80019e2:	0013      	movs	r3, r2
 80019e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	4815      	ldr	r0, [pc, #84]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x7c>)
 80019ea:	f7fe fb8d 	bl	8000108 <__udivsi3>
 80019ee:	0003      	movs	r3, r0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	e01e      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x78>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2238      	movs	r2, #56	; 0x38
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x78>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2238      	movs	r2, #56	; 0x38
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	d103      	bne.n	8001a1a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	e00b      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x78>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2238      	movs	r2, #56	; 0x38
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b18      	cmp	r3, #24
 8001a24:	d103      	bne.n	8001a2e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a26:	23fa      	movs	r3, #250	; 0xfa
 8001a28:	01db      	lsls	r3, r3, #7
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	e001      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001a32:	687b      	ldr	r3, [r7, #4]
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b002      	add	sp, #8
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	02dc6c00 	.word	0x02dc6c00

08001a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a48:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001a5c:	f7ff fff2 	bl	8001a44 <HAL_RCC_GetHCLKFreq>
 8001a60:	0001      	movs	r1, r0
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0b1b      	lsrs	r3, r3, #12
 8001a68:	2207      	movs	r2, #7
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	58d3      	ldr	r3, [r2, r3]
 8001a72:	221f      	movs	r2, #31
 8001a74:	4013      	ands	r3, r2
 8001a76:	40d9      	lsrs	r1, r3
 8001a78:	000b      	movs	r3, r1
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08003584 	.word	0x08003584

08001a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a90:	2313      	movs	r3, #19
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a98:	2312      	movs	r3, #18
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	029b      	lsls	r3, r3, #10
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d100      	bne.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001aac:	e079      	b.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	2011      	movs	r0, #17
 8001ab0:	183b      	adds	r3, r7, r0
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab6:	4b64      	ldr	r3, [pc, #400]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	055b      	lsls	r3, r3, #21
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d110      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac6:	4b60      	ldr	r3, [pc, #384]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0549      	lsls	r1, r1, #21
 8001acc:	430a      	orrs	r2, r1
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ad0:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	055b      	lsls	r3, r3, #21
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ade:	183b      	adds	r3, r7, r0
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001ae4:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ae6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae8:	23c0      	movs	r3, #192	; 0xc0
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d019      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d014      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001b00:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b0a:	4b4f      	ldr	r3, [pc, #316]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	0249      	lsls	r1, r1, #9
 8001b14:	430a      	orrs	r2, r1
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b18:	4b4b      	ldr	r3, [pc, #300]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b1e:	494c      	ldr	r1, [pc, #304]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001b24:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d016      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b32:	f7ff f865 	bl	8000c00 <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b3a:	e00c      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f860 	bl	8000c00 <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	4a43      	ldr	r2, [pc, #268]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d904      	bls.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001b4c:	2313      	movs	r3, #19
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2203      	movs	r2, #3
 8001b52:	701a      	strb	r2, [r3, #0]
          break;
 8001b54:	e004      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b56:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d0ed      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001b60:	2313      	movs	r3, #19
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10a      	bne.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b7e:	e005      	b.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b80:	2312      	movs	r3, #18
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2213      	movs	r2, #19
 8001b86:	18ba      	adds	r2, r7, r2
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b8c:	2311      	movs	r3, #17
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d105      	bne.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b9c:	492e      	ldr	r1, [pc, #184]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bac:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2240      	movs	r2, #64	; 0x40
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d009      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	4a23      	ldr	r2, [pc, #140]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	01db      	lsls	r3, r3, #7
 8001be6:	4013      	ands	r3, r2
 8001be8:	d008      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	0899      	lsrs	r1, r3, #2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4013      	ands	r3, r2
 8001c06:	d009      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da09      	bge.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	22e0      	movs	r2, #224	; 0xe0
 8001c2a:	4393      	bics	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001c38:	2312      	movs	r3, #18
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	781b      	ldrb	r3, [r3, #0]
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b006      	add	sp, #24
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	fffffcff 	.word	0xfffffcff
 8001c50:	fffeffff 	.word	0xfffeffff
 8001c54:	00001388 	.word	0x00001388
 8001c58:	efffffff 	.word	0xefffffff
 8001c5c:	ffffcfff 	.word	0xffffcfff
 8001c60:	ffff3fff 	.word	0xffff3fff

08001c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e04a      	b.n	8001d0c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	223d      	movs	r2, #61	; 0x3d
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d107      	bne.n	8001c92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	223c      	movs	r2, #60	; 0x3c
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7fe fe47 	bl	8000920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	223d      	movs	r2, #61	; 0x3d
 8001c96:	2102      	movs	r1, #2
 8001c98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	f000 fb43 	bl	8002330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2248      	movs	r2, #72	; 0x48
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	223e      	movs	r2, #62	; 0x3e
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	223f      	movs	r2, #63	; 0x3f
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2240      	movs	r2, #64	; 0x40
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2241      	movs	r2, #65	; 0x41
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2242      	movs	r2, #66	; 0x42
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2243      	movs	r2, #67	; 0x43
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2244      	movs	r2, #68	; 0x44
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2245      	movs	r2, #69	; 0x45
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2246      	movs	r2, #70	; 0x46
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2247      	movs	r2, #71	; 0x47
 8001cfe:	2101      	movs	r1, #1
 8001d00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	223d      	movs	r2, #61	; 0x3d
 8001d06:	2101      	movs	r1, #1
 8001d08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e04a      	b.n	8001dbc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	223d      	movs	r2, #61	; 0x3d
 8001d2a:	5c9b      	ldrb	r3, [r3, r2]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d107      	bne.n	8001d42 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	223c      	movs	r2, #60	; 0x3c
 8001d36:	2100      	movs	r1, #0
 8001d38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 f841 	bl	8001dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	223d      	movs	r2, #61	; 0x3d
 8001d46:	2102      	movs	r1, #2
 8001d48:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3304      	adds	r3, #4
 8001d52:	0019      	movs	r1, r3
 8001d54:	0010      	movs	r0, r2
 8001d56:	f000 faeb 	bl	8002330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2248      	movs	r2, #72	; 0x48
 8001d5e:	2101      	movs	r1, #1
 8001d60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	223e      	movs	r2, #62	; 0x3e
 8001d66:	2101      	movs	r1, #1
 8001d68:	5499      	strb	r1, [r3, r2]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	223f      	movs	r2, #63	; 0x3f
 8001d6e:	2101      	movs	r1, #1
 8001d70:	5499      	strb	r1, [r3, r2]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	2101      	movs	r1, #1
 8001d78:	5499      	strb	r1, [r3, r2]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2241      	movs	r2, #65	; 0x41
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2242      	movs	r2, #66	; 0x42
 8001d86:	2101      	movs	r1, #1
 8001d88:	5499      	strb	r1, [r3, r2]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2243      	movs	r2, #67	; 0x43
 8001d8e:	2101      	movs	r1, #1
 8001d90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2244      	movs	r2, #68	; 0x44
 8001d96:	2101      	movs	r1, #1
 8001d98:	5499      	strb	r1, [r3, r2]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2245      	movs	r2, #69	; 0x45
 8001d9e:	2101      	movs	r1, #1
 8001da0:	5499      	strb	r1, [r3, r2]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2246      	movs	r2, #70	; 0x46
 8001da6:	2101      	movs	r1, #1
 8001da8:	5499      	strb	r1, [r3, r2]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2247      	movs	r2, #71	; 0x47
 8001dae:	2101      	movs	r1, #1
 8001db0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	223d      	movs	r2, #61	; 0x3d
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d108      	bne.n	8001df6 <HAL_TIM_PWM_Start+0x22>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	223e      	movs	r2, #62	; 0x3e
 8001de8:	5c9b      	ldrb	r3, [r3, r2]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	1e5a      	subs	r2, r3, #1
 8001df0:	4193      	sbcs	r3, r2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	e037      	b.n	8001e66 <HAL_TIM_PWM_Start+0x92>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d108      	bne.n	8001e0e <HAL_TIM_PWM_Start+0x3a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	223f      	movs	r2, #63	; 0x3f
 8001e00:	5c9b      	ldrb	r3, [r3, r2]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3b01      	subs	r3, #1
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	e02b      	b.n	8001e66 <HAL_TIM_PWM_Start+0x92>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d108      	bne.n	8001e26 <HAL_TIM_PWM_Start+0x52>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	5c9b      	ldrb	r3, [r3, r2]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	1e5a      	subs	r2, r3, #1
 8001e20:	4193      	sbcs	r3, r2
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	e01f      	b.n	8001e66 <HAL_TIM_PWM_Start+0x92>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d108      	bne.n	8001e3e <HAL_TIM_PWM_Start+0x6a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2241      	movs	r2, #65	; 0x41
 8001e30:	5c9b      	ldrb	r3, [r3, r2]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	1e5a      	subs	r2, r3, #1
 8001e38:	4193      	sbcs	r3, r2
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	e013      	b.n	8001e66 <HAL_TIM_PWM_Start+0x92>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d108      	bne.n	8001e56 <HAL_TIM_PWM_Start+0x82>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2242      	movs	r2, #66	; 0x42
 8001e48:	5c9b      	ldrb	r3, [r3, r2]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	1e5a      	subs	r2, r3, #1
 8001e50:	4193      	sbcs	r3, r2
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	e007      	b.n	8001e66 <HAL_TIM_PWM_Start+0x92>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2243      	movs	r2, #67	; 0x43
 8001e5a:	5c9b      	ldrb	r3, [r3, r2]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	4193      	sbcs	r3, r2
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07b      	b.n	8001f66 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d104      	bne.n	8001e7e <HAL_TIM_PWM_Start+0xaa>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	223e      	movs	r2, #62	; 0x3e
 8001e78:	2102      	movs	r1, #2
 8001e7a:	5499      	strb	r1, [r3, r2]
 8001e7c:	e023      	b.n	8001ec6 <HAL_TIM_PWM_Start+0xf2>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d104      	bne.n	8001e8e <HAL_TIM_PWM_Start+0xba>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	223f      	movs	r2, #63	; 0x3f
 8001e88:	2102      	movs	r1, #2
 8001e8a:	5499      	strb	r1, [r3, r2]
 8001e8c:	e01b      	b.n	8001ec6 <HAL_TIM_PWM_Start+0xf2>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d104      	bne.n	8001e9e <HAL_TIM_PWM_Start+0xca>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	2102      	movs	r1, #2
 8001e9a:	5499      	strb	r1, [r3, r2]
 8001e9c:	e013      	b.n	8001ec6 <HAL_TIM_PWM_Start+0xf2>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b0c      	cmp	r3, #12
 8001ea2:	d104      	bne.n	8001eae <HAL_TIM_PWM_Start+0xda>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2241      	movs	r2, #65	; 0x41
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	5499      	strb	r1, [r3, r2]
 8001eac:	e00b      	b.n	8001ec6 <HAL_TIM_PWM_Start+0xf2>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b10      	cmp	r3, #16
 8001eb2:	d104      	bne.n	8001ebe <HAL_TIM_PWM_Start+0xea>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2242      	movs	r2, #66	; 0x42
 8001eb8:	2102      	movs	r1, #2
 8001eba:	5499      	strb	r1, [r3, r2]
 8001ebc:	e003      	b.n	8001ec6 <HAL_TIM_PWM_Start+0xf2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2243      	movs	r2, #67	; 0x43
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6839      	ldr	r1, [r7, #0]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 fdd2 	bl	8002a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <HAL_TIM_PWM_Start+0x19c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d009      	beq.n	8001ef2 <HAL_TIM_PWM_Start+0x11e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <HAL_TIM_PWM_Start+0x1a0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d004      	beq.n	8001ef2 <HAL_TIM_PWM_Start+0x11e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <HAL_TIM_PWM_Start+0x1a4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_PWM_Start+0x122>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_TIM_PWM_Start+0x124>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	0209      	lsls	r1, r1, #8
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <HAL_TIM_PWM_Start+0x19c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d004      	beq.n	8001f22 <HAL_TIM_PWM_Start+0x14e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_TIM_PWM_Start+0x1a8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d116      	bne.n	8001f50 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <HAL_TIM_PWM_Start+0x1ac>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b06      	cmp	r3, #6
 8001f32:	d016      	beq.n	8001f62 <HAL_TIM_PWM_Start+0x18e>
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	025b      	lsls	r3, r3, #9
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d011      	beq.n	8001f62 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4e:	e008      	b.n	8001f62 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e000      	b.n	8001f64 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f62:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b004      	add	sp, #16
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40014400 	.word	0x40014400
 8001f78:	40014800 	.word	0x40014800
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	00010007 	.word	0x00010007

08001f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f90:	2317      	movs	r3, #23
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	223c      	movs	r2, #60	; 0x3c
 8001f9c:	5c9b      	ldrb	r3, [r3, r2]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e0e5      	b.n	8002172 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	223c      	movs	r2, #60	; 0x3c
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b14      	cmp	r3, #20
 8001fb2:	d900      	bls.n	8001fb6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001fb4:	e0d1      	b.n	800215a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	009a      	lsls	r2, r3, #2
 8001fba:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001fbc:	18d3      	adds	r3, r2, r3
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	0011      	movs	r1, r2
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 fa1c 	bl	8002408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2108      	movs	r1, #8
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2104      	movs	r1, #4
 8001fec:	438a      	bics	r2, r1
 8001fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6999      	ldr	r1, [r3, #24]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	619a      	str	r2, [r3, #24]
      break;
 8002002:	e0af      	b.n	8002164 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	0011      	movs	r1, r2
 800200c:	0018      	movs	r0, r3
 800200e:	f000 fa7b 	bl	8002508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	0109      	lsls	r1, r1, #4
 8002020:	430a      	orrs	r2, r1
 8002022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4954      	ldr	r1, [pc, #336]	; (8002180 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002030:	400a      	ands	r2, r1
 8002032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6999      	ldr	r1, [r3, #24]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	021a      	lsls	r2, r3, #8
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	619a      	str	r2, [r3, #24]
      break;
 8002048:	e08c      	b.n	8002164 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	0011      	movs	r1, r2
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fad6 	bl	8002604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69da      	ldr	r2, [r3, #28]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2108      	movs	r1, #8
 8002064:	430a      	orrs	r2, r1
 8002066:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2104      	movs	r1, #4
 8002074:	438a      	bics	r2, r1
 8002076:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69d9      	ldr	r1, [r3, #28]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	61da      	str	r2, [r3, #28]
      break;
 800208a:	e06b      	b.n	8002164 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	0011      	movs	r1, r2
 8002094:	0018      	movs	r0, r3
 8002096:	f000 fb37 	bl	8002708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	0109      	lsls	r1, r1, #4
 80020a8:	430a      	orrs	r2, r1
 80020aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4932      	ldr	r1, [pc, #200]	; (8002180 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80020b8:	400a      	ands	r2, r1
 80020ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69d9      	ldr	r1, [r3, #28]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	021a      	lsls	r2, r3, #8
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	61da      	str	r2, [r3, #28]
      break;
 80020d0:	e048      	b.n	8002164 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	0011      	movs	r1, r2
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 fb78 	bl	80027d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2108      	movs	r1, #8
 80020ec:	430a      	orrs	r2, r1
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2104      	movs	r1, #4
 80020fc:	438a      	bics	r2, r1
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002112:	e027      	b.n	8002164 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	0011      	movs	r1, r2
 800211c:	0018      	movs	r0, r3
 800211e:	f000 fbb1 	bl	8002884 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2180      	movs	r1, #128	; 0x80
 800212e:	0109      	lsls	r1, r1, #4
 8002130:	430a      	orrs	r2, r1
 8002132:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4910      	ldr	r1, [pc, #64]	; (8002180 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002140:	400a      	ands	r2, r1
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	021a      	lsls	r2, r3, #8
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002158:	e004      	b.n	8002164 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800215a:	2317      	movs	r3, #23
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
      break;
 8002162:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	223c      	movs	r2, #60	; 0x3c
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]

  return status;
 800216c:	2317      	movs	r3, #23
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	781b      	ldrb	r3, [r3, #0]
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b006      	add	sp, #24
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	080035a4 	.word	0x080035a4
 8002180:	fffffbff 	.word	0xfffffbff

08002184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218e:	230f      	movs	r3, #15
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	223c      	movs	r2, #60	; 0x3c
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_ConfigClockSource+0x20>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0bc      	b.n	800231e <HAL_TIM_ConfigClockSource+0x19a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	223c      	movs	r2, #60	; 0x3c
 80021a8:	2101      	movs	r1, #1
 80021aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	223d      	movs	r2, #61	; 0x3d
 80021b0:	2102      	movs	r1, #2
 80021b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4a5a      	ldr	r2, [pc, #360]	; (8002328 <HAL_TIM_ConfigClockSource+0x1a4>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4a59      	ldr	r2, [pc, #356]	; (800232c <HAL_TIM_ConfigClockSource+0x1a8>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	0192      	lsls	r2, r2, #6
 80021dc:	4293      	cmp	r3, r2
 80021de:	d040      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0xde>
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	0192      	lsls	r2, r2, #6
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d900      	bls.n	80021ea <HAL_TIM_ConfigClockSource+0x66>
 80021e8:	e088      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 80021ea:	2280      	movs	r2, #128	; 0x80
 80021ec:	0152      	lsls	r2, r2, #5
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d100      	bne.n	80021f4 <HAL_TIM_ConfigClockSource+0x70>
 80021f2:	e088      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x182>
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	0152      	lsls	r2, r2, #5
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d900      	bls.n	80021fe <HAL_TIM_ConfigClockSource+0x7a>
 80021fc:	e07e      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 80021fe:	2b70      	cmp	r3, #112	; 0x70
 8002200:	d018      	beq.n	8002234 <HAL_TIM_ConfigClockSource+0xb0>
 8002202:	d900      	bls.n	8002206 <HAL_TIM_ConfigClockSource+0x82>
 8002204:	e07a      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 8002206:	2b60      	cmp	r3, #96	; 0x60
 8002208:	d04f      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x126>
 800220a:	d900      	bls.n	800220e <HAL_TIM_ConfigClockSource+0x8a>
 800220c:	e076      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 800220e:	2b50      	cmp	r3, #80	; 0x50
 8002210:	d03b      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x106>
 8002212:	d900      	bls.n	8002216 <HAL_TIM_ConfigClockSource+0x92>
 8002214:	e072      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 8002216:	2b40      	cmp	r3, #64	; 0x40
 8002218:	d057      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x146>
 800221a:	d900      	bls.n	800221e <HAL_TIM_ConfigClockSource+0x9a>
 800221c:	e06e      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 800221e:	2b30      	cmp	r3, #48	; 0x30
 8002220:	d063      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x166>
 8002222:	d86b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 8002224:	2b20      	cmp	r3, #32
 8002226:	d060      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x166>
 8002228:	d868      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d05d      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x166>
 800222e:	2b10      	cmp	r3, #16
 8002230:	d05b      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x166>
 8002232:	e063      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002244:	f000 fbf8 	bl	8002a38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2277      	movs	r2, #119	; 0x77
 8002254:	4313      	orrs	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	609a      	str	r2, [r3, #8]
      break;
 8002260:	e052      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002272:	f000 fbe1 	bl	8002a38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	01c9      	lsls	r1, r1, #7
 8002284:	430a      	orrs	r2, r1
 8002286:	609a      	str	r2, [r3, #8]
      break;
 8002288:	e03e      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002296:	001a      	movs	r2, r3
 8002298:	f000 fb52 	bl	8002940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2150      	movs	r1, #80	; 0x50
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 fbac 	bl	8002a00 <TIM_ITRx_SetConfig>
      break;
 80022a8:	e02e      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022b6:	001a      	movs	r2, r3
 80022b8:	f000 fb70 	bl	800299c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2160      	movs	r1, #96	; 0x60
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fb9c 	bl	8002a00 <TIM_ITRx_SetConfig>
      break;
 80022c8:	e01e      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d6:	001a      	movs	r2, r3
 80022d8:	f000 fb32 	bl	8002940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2140      	movs	r1, #64	; 0x40
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 fb8c 	bl	8002a00 <TIM_ITRx_SetConfig>
      break;
 80022e8:	e00e      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	0019      	movs	r1, r3
 80022f4:	0010      	movs	r0, r2
 80022f6:	f000 fb83 	bl	8002a00 <TIM_ITRx_SetConfig>
      break;
 80022fa:	e005      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80022fc:	230f      	movs	r3, #15
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
      break;
 8002304:	e000      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002306:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223d      	movs	r2, #61	; 0x3d
 800230c:	2101      	movs	r1, #1
 800230e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	223c      	movs	r2, #60	; 0x3c
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]

  return status;
 8002318:	230f      	movs	r3, #15
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	781b      	ldrb	r3, [r3, #0]
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b004      	add	sp, #16
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	ffceff88 	.word	0xffceff88
 800232c:	ffff00ff 	.word	0xffff00ff

08002330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a2b      	ldr	r2, [pc, #172]	; (80023f0 <TIM_Base_SetConfig+0xc0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d003      	beq.n	8002350 <TIM_Base_SetConfig+0x20>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <TIM_Base_SetConfig+0xc4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d108      	bne.n	8002362 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2270      	movs	r2, #112	; 0x70
 8002354:	4393      	bics	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <TIM_Base_SetConfig+0xc0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00f      	beq.n	800238a <TIM_Base_SetConfig+0x5a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <TIM_Base_SetConfig+0xc4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00b      	beq.n	800238a <TIM_Base_SetConfig+0x5a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <TIM_Base_SetConfig+0xc8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <TIM_Base_SetConfig+0x5a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <TIM_Base_SetConfig+0xcc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d003      	beq.n	800238a <TIM_Base_SetConfig+0x5a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <TIM_Base_SetConfig+0xd0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d108      	bne.n	800239c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <TIM_Base_SetConfig+0xd4>)
 800238e:	4013      	ands	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2280      	movs	r2, #128	; 0x80
 80023a0:	4393      	bics	r3, r2
 80023a2:	001a      	movs	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <TIM_Base_SetConfig+0xc0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <TIM_Base_SetConfig+0xaa>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <TIM_Base_SetConfig+0xcc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <TIM_Base_SetConfig+0xaa>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <TIM_Base_SetConfig+0xd0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d103      	bne.n	80023e2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	615a      	str	r2, [r3, #20]
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40012c00 	.word	0x40012c00
 80023f4:	40000400 	.word	0x40000400
 80023f8:	40002000 	.word	0x40002000
 80023fc:	40014400 	.word	0x40014400
 8002400:	40014800 	.word	0x40014800
 8002404:	fffffcff 	.word	0xfffffcff

08002408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	2201      	movs	r2, #1
 800241e:	4393      	bics	r3, r2
 8002420:	001a      	movs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a2e      	ldr	r2, [pc, #184]	; (80024f0 <TIM_OC1_SetConfig+0xe8>)
 8002436:	4013      	ands	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2203      	movs	r2, #3
 800243e:	4393      	bics	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2202      	movs	r2, #2
 8002450:	4393      	bics	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a24      	ldr	r2, [pc, #144]	; (80024f4 <TIM_OC1_SetConfig+0xec>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <TIM_OC1_SetConfig+0x6e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a23      	ldr	r2, [pc, #140]	; (80024f8 <TIM_OC1_SetConfig+0xf0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <TIM_OC1_SetConfig+0x6e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a22      	ldr	r2, [pc, #136]	; (80024fc <TIM_OC1_SetConfig+0xf4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10c      	bne.n	8002490 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2208      	movs	r2, #8
 800247a:	4393      	bics	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2204      	movs	r2, #4
 800248c:	4393      	bics	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <TIM_OC1_SetConfig+0xec>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <TIM_OC1_SetConfig+0xa0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <TIM_OC1_SetConfig+0xf0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_OC1_SetConfig+0xa0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <TIM_OC1_SetConfig+0xf4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d111      	bne.n	80024cc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4a15      	ldr	r2, [pc, #84]	; (8002500 <TIM_OC1_SetConfig+0xf8>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4a14      	ldr	r2, [pc, #80]	; (8002504 <TIM_OC1_SetConfig+0xfc>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	621a      	str	r2, [r3, #32]
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b006      	add	sp, #24
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	fffeff8f 	.word	0xfffeff8f
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40014400 	.word	0x40014400
 80024fc:	40014800 	.word	0x40014800
 8002500:	fffffeff 	.word	0xfffffeff
 8002504:	fffffdff 	.word	0xfffffdff

08002508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	2210      	movs	r2, #16
 800251e:	4393      	bics	r3, r2
 8002520:	001a      	movs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a2c      	ldr	r2, [pc, #176]	; (80025e8 <TIM_OC2_SetConfig+0xe0>)
 8002536:	4013      	ands	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <TIM_OC2_SetConfig+0xe4>)
 800253e:	4013      	ands	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2220      	movs	r2, #32
 8002552:	4393      	bics	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <TIM_OC2_SetConfig+0xe8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10d      	bne.n	8002586 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	4393      	bics	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	4393      	bics	r3, r2
 8002584:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <TIM_OC2_SetConfig+0xe8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <TIM_OC2_SetConfig+0x96>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <TIM_OC2_SetConfig+0xec>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <TIM_OC2_SetConfig+0x96>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <TIM_OC2_SetConfig+0xf0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d113      	bne.n	80025c6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4a16      	ldr	r2, [pc, #88]	; (80025fc <TIM_OC2_SetConfig+0xf4>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <TIM_OC2_SetConfig+0xf8>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	621a      	str	r2, [r3, #32]
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b006      	add	sp, #24
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	feff8fff 	.word	0xfeff8fff
 80025ec:	fffffcff 	.word	0xfffffcff
 80025f0:	40012c00 	.word	0x40012c00
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800
 80025fc:	fffffbff 	.word	0xfffffbff
 8002600:	fffff7ff 	.word	0xfffff7ff

08002604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a31      	ldr	r2, [pc, #196]	; (80026e0 <TIM_OC3_SetConfig+0xdc>)
 800261a:	401a      	ands	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a2d      	ldr	r2, [pc, #180]	; (80026e4 <TIM_OC3_SetConfig+0xe0>)
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2203      	movs	r2, #3
 8002638:	4393      	bics	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <TIM_OC3_SetConfig+0xe4>)
 800264a:	4013      	ands	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a23      	ldr	r2, [pc, #140]	; (80026ec <TIM_OC3_SetConfig+0xe8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10d      	bne.n	800267e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <TIM_OC3_SetConfig+0xec>)
 8002666:	4013      	ands	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <TIM_OC3_SetConfig+0xf0>)
 800267a:	4013      	ands	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <TIM_OC3_SetConfig+0xe8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <TIM_OC3_SetConfig+0x92>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <TIM_OC3_SetConfig+0xf4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <TIM_OC3_SetConfig+0x92>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <TIM_OC3_SetConfig+0xf8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d113      	bne.n	80026be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <TIM_OC3_SetConfig+0xfc>)
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4a18      	ldr	r2, [pc, #96]	; (8002704 <TIM_OC3_SetConfig+0x100>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	621a      	str	r2, [r3, #32]
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b006      	add	sp, #24
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	fffffeff 	.word	0xfffffeff
 80026e4:	fffeff8f 	.word	0xfffeff8f
 80026e8:	fffffdff 	.word	0xfffffdff
 80026ec:	40012c00 	.word	0x40012c00
 80026f0:	fffff7ff 	.word	0xfffff7ff
 80026f4:	fffffbff 	.word	0xfffffbff
 80026f8:	40014400 	.word	0x40014400
 80026fc:	40014800 	.word	0x40014800
 8002700:	ffffefff 	.word	0xffffefff
 8002704:	ffffdfff 	.word	0xffffdfff

08002708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a24      	ldr	r2, [pc, #144]	; (80027b0 <TIM_OC4_SetConfig+0xa8>)
 800271e:	401a      	ands	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <TIM_OC4_SetConfig+0xac>)
 8002734:	4013      	ands	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <TIM_OC4_SetConfig+0xb0>)
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <TIM_OC4_SetConfig+0xb4>)
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	031b      	lsls	r3, r3, #12
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <TIM_OC4_SetConfig+0xb8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <TIM_OC4_SetConfig+0x70>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a16      	ldr	r2, [pc, #88]	; (80027c4 <TIM_OC4_SetConfig+0xbc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_OC4_SetConfig+0x70>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <TIM_OC4_SetConfig+0xc0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d109      	bne.n	800278c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	4a14      	ldr	r2, [pc, #80]	; (80027cc <TIM_OC4_SetConfig+0xc4>)
 800277c:	4013      	ands	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	019b      	lsls	r3, r3, #6
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b006      	add	sp, #24
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	ffffefff 	.word	0xffffefff
 80027b4:	feff8fff 	.word	0xfeff8fff
 80027b8:	fffffcff 	.word	0xfffffcff
 80027bc:	ffffdfff 	.word	0xffffdfff
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40014400 	.word	0x40014400
 80027c8:	40014800 	.word	0x40014800
 80027cc:	ffffbfff 	.word	0xffffbfff

080027d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a21      	ldr	r2, [pc, #132]	; (800286c <TIM_OC5_SetConfig+0x9c>)
 80027e6:	401a      	ands	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <TIM_OC5_SetConfig+0xa0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <TIM_OC5_SetConfig+0xa4>)
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a15      	ldr	r2, [pc, #84]	; (8002878 <TIM_OC5_SetConfig+0xa8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <TIM_OC5_SetConfig+0x66>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <TIM_OC5_SetConfig+0xac>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d003      	beq.n	8002836 <TIM_OC5_SetConfig+0x66>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <TIM_OC5_SetConfig+0xb0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d109      	bne.n	800284a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	4a0c      	ldr	r2, [pc, #48]	; (800286c <TIM_OC5_SetConfig+0x9c>)
 800283a:	4013      	ands	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	621a      	str	r2, [r3, #32]
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b006      	add	sp, #24
 800286a:	bd80      	pop	{r7, pc}
 800286c:	fffeffff 	.word	0xfffeffff
 8002870:	fffeff8f 	.word	0xfffeff8f
 8002874:	fffdffff 	.word	0xfffdffff
 8002878:	40012c00 	.word	0x40012c00
 800287c:	40014400 	.word	0x40014400
 8002880:	40014800 	.word	0x40014800

08002884 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a22      	ldr	r2, [pc, #136]	; (8002924 <TIM_OC6_SetConfig+0xa0>)
 800289a:	401a      	ands	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <TIM_OC6_SetConfig+0xa4>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4a1a      	ldr	r2, [pc, #104]	; (800292c <TIM_OC6_SetConfig+0xa8>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	051b      	lsls	r3, r3, #20
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a16      	ldr	r2, [pc, #88]	; (8002930 <TIM_OC6_SetConfig+0xac>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <TIM_OC6_SetConfig+0x68>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a15      	ldr	r2, [pc, #84]	; (8002934 <TIM_OC6_SetConfig+0xb0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_OC6_SetConfig+0x68>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <TIM_OC6_SetConfig+0xb4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d109      	bne.n	8002900 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	4a13      	ldr	r2, [pc, #76]	; (800293c <TIM_OC6_SetConfig+0xb8>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	621a      	str	r2, [r3, #32]
}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b006      	add	sp, #24
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	ffefffff 	.word	0xffefffff
 8002928:	feff8fff 	.word	0xfeff8fff
 800292c:	ffdfffff 	.word	0xffdfffff
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800
 800293c:	fffbffff 	.word	0xfffbffff

08002940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	2201      	movs	r2, #1
 8002958:	4393      	bics	r3, r2
 800295a:	001a      	movs	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	22f0      	movs	r2, #240	; 0xf0
 800296a:	4393      	bics	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	220a      	movs	r2, #10
 800297c:	4393      	bics	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	621a      	str	r2, [r3, #32]
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b006      	add	sp, #24
 800299a:	bd80      	pop	{r7, pc}

0800299c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	2210      	movs	r2, #16
 80029b4:	4393      	bics	r3, r2
 80029b6:	001a      	movs	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <TIM_TI2_ConfigInputStage+0x60>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	031b      	lsls	r3, r3, #12
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	22a0      	movs	r2, #160	; 0xa0
 80029d8:	4393      	bics	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b006      	add	sp, #24
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	ffff0fff 	.word	0xffff0fff

08002a00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <TIM_ITRx_SetConfig+0x34>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	2207      	movs	r2, #7
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	609a      	str	r2, [r3, #8]
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b004      	add	sp, #16
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	ffcfff8f 	.word	0xffcfff8f

08002a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	4a09      	ldr	r2, [pc, #36]	; (8002a74 <TIM_ETR_SetConfig+0x3c>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	021a      	lsls	r2, r3, #8
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b006      	add	sp, #24
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	ffff00ff 	.word	0xffff00ff

08002a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	221f      	movs	r2, #31
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	0013      	movs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	43d2      	mvns	r2, r2
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	211f      	movs	r1, #31
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4099      	lsls	r1, r3
 8002aae:	000b      	movs	r3, r1
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	621a      	str	r2, [r3, #32]
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b006      	add	sp, #24
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	223c      	movs	r2, #60	; 0x3c
 8002ace:	5c9b      	ldrb	r3, [r3, r2]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e04a      	b.n	8002b6e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	223c      	movs	r2, #60	; 0x3c
 8002adc:	2101      	movs	r1, #1
 8002ade:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	223d      	movs	r2, #61	; 0x3d
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d108      	bne.n	8002b14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2270      	movs	r2, #112	; 0x70
 8002b18:	4393      	bics	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10c      	bne.n	8002b5c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	4393      	bics	r3, r2
 8002b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	223d      	movs	r2, #61	; 0x3d
 8002b60:	2101      	movs	r1, #1
 8002b62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	223c      	movs	r2, #60	; 0x3c
 8002b68:	2100      	movs	r1, #0
 8002b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b004      	add	sp, #16
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	ff0fffff 	.word	0xff0fffff
 8002b80:	40000400 	.word	0x40000400

08002b84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	223c      	movs	r2, #60	; 0x3c
 8002b96:	5c9b      	ldrb	r3, [r3, r2]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e079      	b.n	8002c94 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	223c      	movs	r2, #60	; 0x3c
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	22ff      	movs	r2, #255	; 0xff
 8002bac:	4393      	bics	r3, r2
 8002bae:	001a      	movs	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a38      	ldr	r2, [pc, #224]	; (8002c9c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a35      	ldr	r2, [pc, #212]	; (8002ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002bca:	401a      	ands	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a33      	ldr	r2, [pc, #204]	; (8002ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002bd8:	401a      	ands	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a30      	ldr	r2, [pc, #192]	; (8002ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002be6:	401a      	ands	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a2e      	ldr	r2, [pc, #184]	; (8002cac <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a2b      	ldr	r2, [pc, #172]	; (8002cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002c02:	401a      	ands	r2, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002c10:	401a      	ands	r2, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d106      	bne.n	8002c34 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d121      	bne.n	8002c82 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002c42:	401a      	ands	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	051b      	lsls	r3, r3, #20
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8002c52:	401a      	ands	r2, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002c60:	401a      	ands	r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d106      	bne.n	8002c82 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a15      	ldr	r2, [pc, #84]	; (8002ccc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8002c78:	401a      	ands	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223c      	movs	r2, #60	; 0x3c
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b004      	add	sp, #16
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	fffffcff 	.word	0xfffffcff
 8002ca0:	fffffbff 	.word	0xfffffbff
 8002ca4:	fffff7ff 	.word	0xfffff7ff
 8002ca8:	ffffefff 	.word	0xffffefff
 8002cac:	ffffdfff 	.word	0xffffdfff
 8002cb0:	ffffbfff 	.word	0xffffbfff
 8002cb4:	fff0ffff 	.word	0xfff0ffff
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	efffffff 	.word	0xefffffff
 8002cc0:	ff0fffff 	.word	0xff0fffff
 8002cc4:	feffffff 	.word	0xfeffffff
 8002cc8:	fdffffff 	.word	0xfdffffff
 8002ccc:	dfffffff 	.word	0xdfffffff

08002cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e046      	b.n	8002d70 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2288      	movs	r2, #136	; 0x88
 8002ce6:	589b      	ldr	r3, [r3, r2]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2284      	movs	r2, #132	; 0x84
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7fd fe6e 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2288      	movs	r2, #136	; 0x88
 8002d00:	2124      	movs	r1, #36	; 0x24
 8002d02:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2101      	movs	r1, #1
 8002d10:	438a      	bics	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 f9aa 	bl	8003078 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 f828 	bl	8002d7c <UART_SetConfig>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e01c      	b.n	8002d70 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	490d      	ldr	r1, [pc, #52]	; (8002d78 <HAL_UART_Init+0xa8>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	212a      	movs	r1, #42	; 0x2a
 8002d52:	438a      	bics	r2, r1
 8002d54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2101      	movs	r1, #1
 8002d62:	430a      	orrs	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 fa39 	bl	80031e0 <UART_CheckIdleState>
 8002d6e:	0003      	movs	r3, r0
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	ffffb7ff 	.word	0xffffb7ff

08002d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d84:	231e      	movs	r3, #30
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4aab      	ldr	r2, [pc, #684]	; (8003058 <UART_SetConfig+0x2dc>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4aa6      	ldr	r2, [pc, #664]	; (800305c <UART_SetConfig+0x2e0>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4a9d      	ldr	r2, [pc, #628]	; (8003060 <UART_SetConfig+0x2e4>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	220f      	movs	r2, #15
 8002e00:	4393      	bics	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a93      	ldr	r2, [pc, #588]	; (8003064 <UART_SetConfig+0x2e8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d127      	bne.n	8002e6a <UART_SetConfig+0xee>
 8002e1a:	4b93      	ldr	r3, [pc, #588]	; (8003068 <UART_SetConfig+0x2ec>)
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	2203      	movs	r2, #3
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d017      	beq.n	8002e56 <UART_SetConfig+0xda>
 8002e26:	d81b      	bhi.n	8002e60 <UART_SetConfig+0xe4>
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d00a      	beq.n	8002e42 <UART_SetConfig+0xc6>
 8002e2c:	d818      	bhi.n	8002e60 <UART_SetConfig+0xe4>
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <UART_SetConfig+0xbc>
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d00a      	beq.n	8002e4c <UART_SetConfig+0xd0>
 8002e36:	e013      	b.n	8002e60 <UART_SetConfig+0xe4>
 8002e38:	231f      	movs	r3, #31
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e021      	b.n	8002e86 <UART_SetConfig+0x10a>
 8002e42:	231f      	movs	r3, #31
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	2202      	movs	r2, #2
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e01c      	b.n	8002e86 <UART_SetConfig+0x10a>
 8002e4c:	231f      	movs	r3, #31
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	2204      	movs	r2, #4
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	e017      	b.n	8002e86 <UART_SetConfig+0x10a>
 8002e56:	231f      	movs	r3, #31
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e012      	b.n	8002e86 <UART_SetConfig+0x10a>
 8002e60:	231f      	movs	r3, #31
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	2210      	movs	r2, #16
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e00d      	b.n	8002e86 <UART_SetConfig+0x10a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a7f      	ldr	r2, [pc, #508]	; (800306c <UART_SetConfig+0x2f0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d104      	bne.n	8002e7e <UART_SetConfig+0x102>
 8002e74:	231f      	movs	r3, #31
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	e003      	b.n	8002e86 <UART_SetConfig+0x10a>
 8002e7e:	231f      	movs	r3, #31
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	2210      	movs	r2, #16
 8002e84:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d000      	beq.n	8002e94 <UART_SetConfig+0x118>
 8002e92:	e06f      	b.n	8002f74 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002e94:	231f      	movs	r3, #31
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d01f      	beq.n	8002ede <UART_SetConfig+0x162>
 8002e9e:	dc22      	bgt.n	8002ee6 <UART_SetConfig+0x16a>
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d017      	beq.n	8002ed4 <UART_SetConfig+0x158>
 8002ea4:	dc1f      	bgt.n	8002ee6 <UART_SetConfig+0x16a>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <UART_SetConfig+0x134>
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d005      	beq.n	8002eba <UART_SetConfig+0x13e>
 8002eae:	e01a      	b.n	8002ee6 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb0:	f7fe fdd2 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	61bb      	str	r3, [r7, #24]
        break;
 8002eb8:	e01c      	b.n	8002ef4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002eba:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <UART_SetConfig+0x2ec>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	4869      	ldr	r0, [pc, #420]	; (8003070 <UART_SetConfig+0x2f4>)
 8002eca:	f7fd f91d 	bl	8000108 <__udivsi3>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	61bb      	str	r3, [r7, #24]
        break;
 8002ed2:	e00f      	b.n	8002ef4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed4:	f7fe fd76 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	61bb      	str	r3, [r7, #24]
        break;
 8002edc:	e00a      	b.n	8002ef4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	61bb      	str	r3, [r7, #24]
        break;
 8002ee4:	e006      	b.n	8002ef4 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eea:	231e      	movs	r3, #30
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
        break;
 8002ef2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d100      	bne.n	8002efc <UART_SetConfig+0x180>
 8002efa:	e097      	b.n	800302c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f00:	4b5c      	ldr	r3, [pc, #368]	; (8003074 <UART_SetConfig+0x2f8>)
 8002f02:	0052      	lsls	r2, r2, #1
 8002f04:	5ad3      	ldrh	r3, [r2, r3]
 8002f06:	0019      	movs	r1, r3
 8002f08:	69b8      	ldr	r0, [r7, #24]
 8002f0a:	f7fd f8fd 	bl	8000108 <__udivsi3>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	005a      	lsls	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	18d2      	adds	r2, r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	0019      	movs	r1, r3
 8002f20:	0010      	movs	r0, r2
 8002f22:	f7fd f8f1 	bl	8000108 <__udivsi3>
 8002f26:	0003      	movs	r3, r0
 8002f28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	d91c      	bls.n	8002f6a <UART_SetConfig+0x1ee>
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	025b      	lsls	r3, r3, #9
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d217      	bcs.n	8002f6a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	200e      	movs	r0, #14
 8002f40:	183b      	adds	r3, r7, r0
 8002f42:	210f      	movs	r1, #15
 8002f44:	438a      	bics	r2, r1
 8002f46:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2207      	movs	r2, #7
 8002f50:	4013      	ands	r3, r2
 8002f52:	b299      	uxth	r1, r3
 8002f54:	183b      	adds	r3, r7, r0
 8002f56:	183a      	adds	r2, r7, r0
 8002f58:	8812      	ldrh	r2, [r2, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	183a      	adds	r2, r7, r0
 8002f64:	8812      	ldrh	r2, [r2, #0]
 8002f66:	60da      	str	r2, [r3, #12]
 8002f68:	e060      	b.n	800302c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f6a:	231e      	movs	r3, #30
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	e05b      	b.n	800302c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f74:	231f      	movs	r3, #31
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d01f      	beq.n	8002fbe <UART_SetConfig+0x242>
 8002f7e:	dc22      	bgt.n	8002fc6 <UART_SetConfig+0x24a>
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d017      	beq.n	8002fb4 <UART_SetConfig+0x238>
 8002f84:	dc1f      	bgt.n	8002fc6 <UART_SetConfig+0x24a>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <UART_SetConfig+0x214>
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d005      	beq.n	8002f9a <UART_SetConfig+0x21e>
 8002f8e:	e01a      	b.n	8002fc6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f90:	f7fe fd62 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002f94:	0003      	movs	r3, r0
 8002f96:	61bb      	str	r3, [r7, #24]
        break;
 8002f98:	e01c      	b.n	8002fd4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <UART_SetConfig+0x2ec>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	4831      	ldr	r0, [pc, #196]	; (8003070 <UART_SetConfig+0x2f4>)
 8002faa:	f7fd f8ad 	bl	8000108 <__udivsi3>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	61bb      	str	r3, [r7, #24]
        break;
 8002fb2:	e00f      	b.n	8002fd4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb4:	f7fe fd06 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	61bb      	str	r3, [r7, #24]
        break;
 8002fbc:	e00a      	b.n	8002fd4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	61bb      	str	r3, [r7, #24]
        break;
 8002fc4:	e006      	b.n	8002fd4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fca:	231e      	movs	r3, #30
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
        break;
 8002fd2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d028      	beq.n	800302c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fde:	4b25      	ldr	r3, [pc, #148]	; (8003074 <UART_SetConfig+0x2f8>)
 8002fe0:	0052      	lsls	r2, r2, #1
 8002fe2:	5ad3      	ldrh	r3, [r2, r3]
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	69b8      	ldr	r0, [r7, #24]
 8002fe8:	f7fd f88e 	bl	8000108 <__udivsi3>
 8002fec:	0003      	movs	r3, r0
 8002fee:	001a      	movs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	18d2      	adds	r2, r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	0010      	movs	r0, r2
 8003000:	f7fd f882 	bl	8000108 <__udivsi3>
 8003004:	0003      	movs	r3, r0
 8003006:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	d90a      	bls.n	8003024 <UART_SetConfig+0x2a8>
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	025b      	lsls	r3, r3, #9
 8003014:	429a      	cmp	r2, r3
 8003016:	d205      	bcs.n	8003024 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	b29a      	uxth	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	e003      	b.n	800302c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003024:	231e      	movs	r3, #30
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	226a      	movs	r2, #106	; 0x6a
 8003030:	2101      	movs	r1, #1
 8003032:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2268      	movs	r2, #104	; 0x68
 8003038:	2101      	movs	r1, #1
 800303a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003048:	231e      	movs	r3, #30
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	781b      	ldrb	r3, [r3, #0]
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b008      	add	sp, #32
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	cfff69f3 	.word	0xcfff69f3
 800305c:	ffffcfff 	.word	0xffffcfff
 8003060:	11fff4ff 	.word	0x11fff4ff
 8003064:	40013800 	.word	0x40013800
 8003068:	40021000 	.word	0x40021000
 800306c:	40004400 	.word	0x40004400
 8003070:	02dc6c00 	.word	0x02dc6c00
 8003074:	080035f8 	.word	0x080035f8

08003078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	2208      	movs	r2, #8
 8003086:	4013      	ands	r3, r2
 8003088:	d00b      	beq.n	80030a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a4a      	ldr	r2, [pc, #296]	; (80031bc <UART_AdvFeatureConfig+0x144>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	2201      	movs	r2, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	d00b      	beq.n	80030c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4a43      	ldr	r2, [pc, #268]	; (80031c0 <UART_AdvFeatureConfig+0x148>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	0019      	movs	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	2202      	movs	r2, #2
 80030ca:	4013      	ands	r3, r2
 80030cc:	d00b      	beq.n	80030e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a3b      	ldr	r2, [pc, #236]	; (80031c4 <UART_AdvFeatureConfig+0x14c>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	2204      	movs	r2, #4
 80030ec:	4013      	ands	r3, r2
 80030ee:	d00b      	beq.n	8003108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <UART_AdvFeatureConfig+0x150>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	2210      	movs	r2, #16
 800310e:	4013      	ands	r3, r2
 8003110:	d00b      	beq.n	800312a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a2c      	ldr	r2, [pc, #176]	; (80031cc <UART_AdvFeatureConfig+0x154>)
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	2220      	movs	r2, #32
 8003130:	4013      	ands	r3, r2
 8003132:	d00b      	beq.n	800314c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4a25      	ldr	r2, [pc, #148]	; (80031d0 <UART_AdvFeatureConfig+0x158>)
 800313c:	4013      	ands	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	2240      	movs	r2, #64	; 0x40
 8003152:	4013      	ands	r3, r2
 8003154:	d01d      	beq.n	8003192 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <UART_AdvFeatureConfig+0x15c>)
 800315e:	4013      	ands	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	035b      	lsls	r3, r3, #13
 8003176:	429a      	cmp	r2, r3
 8003178:	d10b      	bne.n	8003192 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <UART_AdvFeatureConfig+0x160>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	4013      	ands	r3, r2
 800319a:	d00b      	beq.n	80031b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <UART_AdvFeatureConfig+0x164>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
  }
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	ffff7fff 	.word	0xffff7fff
 80031c0:	fffdffff 	.word	0xfffdffff
 80031c4:	fffeffff 	.word	0xfffeffff
 80031c8:	fffbffff 	.word	0xfffbffff
 80031cc:	ffffefff 	.word	0xffffefff
 80031d0:	ffffdfff 	.word	0xffffdfff
 80031d4:	ffefffff 	.word	0xffefffff
 80031d8:	ff9fffff 	.word	0xff9fffff
 80031dc:	fff7ffff 	.word	0xfff7ffff

080031e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b092      	sub	sp, #72	; 0x48
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2290      	movs	r2, #144	; 0x90
 80031ec:	2100      	movs	r1, #0
 80031ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031f0:	f7fd fd06 	bl	8000c00 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2208      	movs	r2, #8
 8003200:	4013      	ands	r3, r2
 8003202:	2b08      	cmp	r3, #8
 8003204:	d12d      	bne.n	8003262 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003208:	2280      	movs	r2, #128	; 0x80
 800320a:	0391      	lsls	r1, r2, #14
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4a47      	ldr	r2, [pc, #284]	; (800332c <UART_CheckIdleState+0x14c>)
 8003210:	9200      	str	r2, [sp, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	f000 f88e 	bl	8003334 <UART_WaitOnFlagUntilTimeout>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d022      	beq.n	8003262 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800321c:	f3ef 8310 	mrs	r3, PRIMASK
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003224:	63bb      	str	r3, [r7, #56]	; 0x38
 8003226:	2301      	movs	r3, #1
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	f383 8810 	msr	PRIMASK, r3
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	438a      	bics	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003248:	f383 8810 	msr	PRIMASK, r3
}
 800324c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2288      	movs	r2, #136	; 0x88
 8003252:	2120      	movs	r1, #32
 8003254:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2284      	movs	r2, #132	; 0x84
 800325a:	2100      	movs	r1, #0
 800325c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e060      	b.n	8003324 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2204      	movs	r2, #4
 800326a:	4013      	ands	r3, r2
 800326c:	2b04      	cmp	r3, #4
 800326e:	d146      	bne.n	80032fe <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	03d1      	lsls	r1, r2, #15
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4a2c      	ldr	r2, [pc, #176]	; (800332c <UART_CheckIdleState+0x14c>)
 800327a:	9200      	str	r2, [sp, #0]
 800327c:	2200      	movs	r2, #0
 800327e:	f000 f859 	bl	8003334 <UART_WaitOnFlagUntilTimeout>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d03b      	beq.n	80032fe <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003286:	f3ef 8310 	mrs	r3, PRIMASK
 800328a:	60fb      	str	r3, [r7, #12]
  return(result);
 800328c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800328e:	637b      	str	r3, [r7, #52]	; 0x34
 8003290:	2301      	movs	r3, #1
 8003292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f383 8810 	msr	PRIMASK, r3
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4922      	ldr	r1, [pc, #136]	; (8003330 <UART_CheckIdleState+0x150>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032b8:	f3ef 8310 	mrs	r3, PRIMASK
 80032bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80032be:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c0:	633b      	str	r3, [r7, #48]	; 0x30
 80032c2:	2301      	movs	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2101      	movs	r1, #1
 80032da:	438a      	bics	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	f383 8810 	msr	PRIMASK, r3
}
 80032e8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	228c      	movs	r2, #140	; 0x8c
 80032ee:	2120      	movs	r1, #32
 80032f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2284      	movs	r2, #132	; 0x84
 80032f6:	2100      	movs	r1, #0
 80032f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e012      	b.n	8003324 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2288      	movs	r2, #136	; 0x88
 8003302:	2120      	movs	r1, #32
 8003304:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	228c      	movs	r2, #140	; 0x8c
 800330a:	2120      	movs	r1, #32
 800330c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2284      	movs	r2, #132	; 0x84
 800331e:	2100      	movs	r1, #0
 8003320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b010      	add	sp, #64	; 0x40
 800332a:	bd80      	pop	{r7, pc}
 800332c:	01ffffff 	.word	0x01ffffff
 8003330:	fffffedf 	.word	0xfffffedf

08003334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003344:	e04b      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	3301      	adds	r3, #1
 800334a:	d048      	beq.n	80033de <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334c:	f7fd fc58 	bl	8000c00 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	429a      	cmp	r2, r3
 800335a:	d302      	bcc.n	8003362 <UART_WaitOnFlagUntilTimeout+0x2e>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e04b      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2204      	movs	r2, #4
 800336e:	4013      	ands	r3, r2
 8003370:	d035      	beq.n	80033de <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	2208      	movs	r2, #8
 800337a:	4013      	ands	r3, r2
 800337c:	2b08      	cmp	r3, #8
 800337e:	d111      	bne.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2208      	movs	r2, #8
 8003386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f83c 	bl	8003408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2290      	movs	r2, #144	; 0x90
 8003394:	2108      	movs	r1, #8
 8003396:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2284      	movs	r2, #132	; 0x84
 800339c:	2100      	movs	r1, #0
 800339e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e02c      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	401a      	ands	r2, r3
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d112      	bne.n	80033de <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 f81f 	bl	8003408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2290      	movs	r2, #144	; 0x90
 80033ce:	2120      	movs	r1, #32
 80033d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2284      	movs	r2, #132	; 0x84
 80033d6:	2100      	movs	r1, #0
 80033d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e00f      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	425a      	negs	r2, r3
 80033ee:	4153      	adcs	r3, r2
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	001a      	movs	r2, r3
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d0a4      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b004      	add	sp, #16
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08e      	sub	sp, #56	; 0x38
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003410:	f3ef 8310 	mrs	r3, PRIMASK
 8003414:	617b      	str	r3, [r7, #20]
  return(result);
 8003416:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
 800341a:	2301      	movs	r3, #1
 800341c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	f383 8810 	msr	PRIMASK, r3
}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4926      	ldr	r1, [pc, #152]	; (80034cc <UART_EndRxTransfer+0xc4>)
 8003432:	400a      	ands	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f383 8810 	msr	PRIMASK, r3
}
 8003440:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003442:	f3ef 8310 	mrs	r3, PRIMASK
 8003446:	623b      	str	r3, [r7, #32]
  return(result);
 8003448:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
 800344c:	2301      	movs	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	f383 8810 	msr	PRIMASK, r3
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	491b      	ldr	r1, [pc, #108]	; (80034d0 <UART_EndRxTransfer+0xc8>)
 8003464:	400a      	ands	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d118      	bne.n	80034ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800347c:	f3ef 8310 	mrs	r3, PRIMASK
 8003480:	60bb      	str	r3, [r7, #8]
  return(result);
 8003482:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003486:	2301      	movs	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f383 8810 	msr	PRIMASK, r3
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2110      	movs	r1, #16
 800349e:	438a      	bics	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f383 8810 	msr	PRIMASK, r3
}
 80034ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	228c      	movs	r2, #140	; 0x8c
 80034b2:	2120      	movs	r1, #32
 80034b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b00e      	add	sp, #56	; 0x38
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	fffffedf 	.word	0xfffffedf
 80034d0:	effffffe 	.word	0xeffffffe

080034d4 <memset>:
 80034d4:	0003      	movs	r3, r0
 80034d6:	1882      	adds	r2, r0, r2
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	7019      	strb	r1, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <__libc_init_array>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	2600      	movs	r6, #0
 80034e8:	4c0c      	ldr	r4, [pc, #48]	; (800351c <__libc_init_array+0x38>)
 80034ea:	4d0d      	ldr	r5, [pc, #52]	; (8003520 <__libc_init_array+0x3c>)
 80034ec:	1b64      	subs	r4, r4, r5
 80034ee:	10a4      	asrs	r4, r4, #2
 80034f0:	42a6      	cmp	r6, r4
 80034f2:	d109      	bne.n	8003508 <__libc_init_array+0x24>
 80034f4:	2600      	movs	r6, #0
 80034f6:	f000 f819 	bl	800352c <_init>
 80034fa:	4c0a      	ldr	r4, [pc, #40]	; (8003524 <__libc_init_array+0x40>)
 80034fc:	4d0a      	ldr	r5, [pc, #40]	; (8003528 <__libc_init_array+0x44>)
 80034fe:	1b64      	subs	r4, r4, r5
 8003500:	10a4      	asrs	r4, r4, #2
 8003502:	42a6      	cmp	r6, r4
 8003504:	d105      	bne.n	8003512 <__libc_init_array+0x2e>
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	00b3      	lsls	r3, r6, #2
 800350a:	58eb      	ldr	r3, [r5, r3]
 800350c:	4798      	blx	r3
 800350e:	3601      	adds	r6, #1
 8003510:	e7ee      	b.n	80034f0 <__libc_init_array+0xc>
 8003512:	00b3      	lsls	r3, r6, #2
 8003514:	58eb      	ldr	r3, [r5, r3]
 8003516:	4798      	blx	r3
 8003518:	3601      	adds	r6, #1
 800351a:	e7f2      	b.n	8003502 <__libc_init_array+0x1e>
 800351c:	08003610 	.word	0x08003610
 8003520:	08003610 	.word	0x08003610
 8003524:	08003614 	.word	0x08003614
 8003528:	08003610 	.word	0x08003610

0800352c <_init>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr

08003538 <_fini>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr
