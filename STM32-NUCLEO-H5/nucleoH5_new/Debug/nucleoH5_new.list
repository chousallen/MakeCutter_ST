
nucleoH5_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea8  08000258  08000258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005140  08005140  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005148  08005148  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  2000000c  0800515c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800515c  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ef4  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000230f  00000000  00000000  00030f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  00033288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097f  00000000  00000000  00033ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206ff  00000000  00000000  0003486f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a1b  00000000  00000000  00054f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8f68  00000000  00000000  00065989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003370  00000000  00000000  0012e8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00131c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	; (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	080050e8 	.word	0x080050e8

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	; (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	080050e8 	.word	0x080050e8

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b982 	b.w	80005b4 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	460f      	mov	r7, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d146      	bne.n	8000366 <__udivmoddi4+0x9e>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d95e      	bls.n	800039c <__udivmoddi4+0xd4>
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	b143      	cbz	r3, 80002f6 <__udivmoddi4+0x2e>
 80002e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	409c      	lsls	r4, r3
 80002f0:	fa20 f202 	lsr.w	r2, r0, r2
 80002f4:	4317      	orrs	r7, r2
 80002f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fa:	fa1f f58c 	uxth.w	r5, ip
 80002fe:	0c22      	lsrs	r2, r4, #16
 8000300:	fbb7 f1fe 	udiv	r1, r7, lr
 8000304:	fb0e 7711 	mls	r7, lr, r1, r7
 8000308:	fb01 f005 	mul.w	r0, r1, r5
 800030c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000310:	4290      	cmp	r0, r2
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x5e>
 8000314:	eb1c 0202 	adds.w	r2, ip, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x5c>
 800031e:	4290      	cmp	r0, r2
 8000320:	f200 8134 	bhi.w	800058c <__udivmoddi4+0x2c4>
 8000324:	4639      	mov	r1, r7
 8000326:	1a12      	subs	r2, r2, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	fbb2 f0fe 	udiv	r0, r2, lr
 800032e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033a:	42a5      	cmp	r5, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x88>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f100 32ff 	add.w	r2, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x86>
 8000348:	42a5      	cmp	r5, r4
 800034a:	f200 8119 	bhi.w	8000580 <__udivmoddi4+0x2b8>
 800034e:	4610      	mov	r0, r2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0x9a>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xb4>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80fc 	beq.w	8000568 <__udivmoddi4+0x2a0>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14c      	bne.n	800041e <__udivmoddi4+0x156>
 8000384:	42ab      	cmp	r3, r5
 8000386:	f0c0 80f2 	bcc.w	800056e <__udivmoddi4+0x2a6>
 800038a:	4282      	cmp	r2, r0
 800038c:	f240 80ef 	bls.w	800056e <__udivmoddi4+0x2a6>
 8000390:	4608      	mov	r0, r1
 8000392:	2e00      	cmp	r6, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0x9a>
 8000396:	e9c6 4700 	strd	r4, r7, [r6]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0x9a>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xd8>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f382 	clz	r3, r2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 809f 	bne.w	80004e8 <__udivmoddi4+0x220>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b0:	fa1f f78c 	uxth.w	r7, ip
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ba:	fb0e 2015 	mls	r0, lr, r5, r2
 80003be:	0c22      	lsrs	r2, r4, #16
 80003c0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c4:	fb07 f005 	mul.w	r0, r7, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90f      	bls.n	80003ec <__udivmoddi4+0x124>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d4:	bf2c      	ite	cs
 80003d6:	f04f 0901 	movcs.w	r9, #1
 80003da:	f04f 0900 	movcc.w	r9, #0
 80003de:	4290      	cmp	r0, r2
 80003e0:	d903      	bls.n	80003ea <__udivmoddi4+0x122>
 80003e2:	f1b9 0f00 	cmp.w	r9, #0
 80003e6:	f000 80ce 	beq.w	8000586 <__udivmoddi4+0x2be>
 80003ea:	4645      	mov	r5, r8
 80003ec:	1a12      	subs	r2, r2, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f8:	fb00 f707 	mul.w	r7, r0, r7
 80003fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000400:	42a7      	cmp	r7, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x14e>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x14c>
 800040e:	42a7      	cmp	r7, r4
 8000410:	f200 80b3 	bhi.w	800057a <__udivmoddi4+0x2b2>
 8000414:	4610      	mov	r0, r2
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800041c:	e79c      	b.n	8000358 <__udivmoddi4+0x90>
 800041e:	f1c1 0420 	rsb	r4, r1, #32
 8000422:	408b      	lsls	r3, r1
 8000424:	fa05 fc01 	lsl.w	ip, r5, r1
 8000428:	fa22 f704 	lsr.w	r7, r2, r4
 800042c:	40e5      	lsrs	r5, r4
 800042e:	408a      	lsls	r2, r1
 8000430:	431f      	orrs	r7, r3
 8000432:	fa20 f304 	lsr.w	r3, r0, r4
 8000436:	4088      	lsls	r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea43 030c 	orr.w	r3, r3, ip
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb5 fef8 	udiv	lr, r5, r8
 800044c:	fb08 551e 	mls	r5, r8, lr, r5
 8000450:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a9      	cmp	r9, r5
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b2>
 800045c:	197d      	adds	r5, r7, r5
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a9      	cmp	r9, r5
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b0>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 808d 	beq.w	8000592 <__udivmoddi4+0x2ca>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba5 0509 	sub.w	r5, r5, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb5 f3f8 	udiv	r3, r5, r8
 8000486:	fb08 5513 	mls	r5, r8, r3, r5
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000492:	45ac      	cmp	ip, r5
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1dc>
 8000496:	197d      	adds	r5, r7, r5
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1da>
 800049e:	45ac      	cmp	ip, r5
 80004a0:	d87e      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a8:	eba5 050c 	sub.w	r5, r5, ip
 80004ac:	fba3 9802 	umull	r9, r8, r3, r2
 80004b0:	4545      	cmp	r5, r8
 80004b2:	46ce      	mov	lr, r9
 80004b4:	46c4      	mov	ip, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1f6>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x200>
 80004ba:	4548      	cmp	r0, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x200>
 80004be:	3b01      	subs	r3, #1
 80004c0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d06f      	beq.n	80005ac <__udivmoddi4+0x2e4>
 80004cc:	ebb0 020e 	subs.w	r2, r0, lr
 80004d0:	eb65 050c 	sbc.w	r5, r5, ip
 80004d4:	40ca      	lsrs	r2, r1
 80004d6:	fa05 f404 	lsl.w	r4, r5, r4
 80004da:	40cd      	lsrs	r5, r1
 80004dc:	4618      	mov	r0, r3
 80004de:	4314      	orrs	r4, r2
 80004e0:	2100      	movs	r1, #0
 80004e2:	e9c6 4500 	strd	r4, r5, [r6]
 80004e6:	e73c      	b.n	8000362 <__udivmoddi4+0x9a>
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	f1c3 0220 	rsb	r2, r3, #32
 80004f0:	4099      	lsls	r1, r3
 80004f2:	409c      	lsls	r4, r3
 80004f4:	40d5      	lsrs	r5, r2
 80004f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fa:	fa20 f202 	lsr.w	r2, r0, r2
 80004fe:	fa1f f78c 	uxth.w	r7, ip
 8000502:	fbb5 f0fe 	udiv	r0, r5, lr
 8000506:	430a      	orrs	r2, r1
 8000508:	fb0e 5510 	mls	r5, lr, r0, r5
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f507 	mul.w	r5, r0, r7
 8000516:	428d      	cmp	r5, r1
 8000518:	d90e      	bls.n	8000538 <__udivmoddi4+0x270>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000522:	bf2c      	ite	cs
 8000524:	f04f 0901 	movcs.w	r9, #1
 8000528:	f04f 0900 	movcc.w	r9, #0
 800052c:	428d      	cmp	r5, r1
 800052e:	d902      	bls.n	8000536 <__udivmoddi4+0x26e>
 8000530:	f1b9 0f00 	cmp.w	r9, #0
 8000534:	d031      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000536:	4640      	mov	r0, r8
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000540:	fb0e 1115 	mls	r1, lr, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f107 	mul.w	r1, r5, r7
 800054c:	4291      	cmp	r1, r2
 800054e:	d907      	bls.n	8000560 <__udivmoddi4+0x298>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d201      	bcs.n	800055e <__udivmoddi4+0x296>
 800055a:	4291      	cmp	r1, r2
 800055c:	d823      	bhi.n	80005a6 <__udivmoddi4+0x2de>
 800055e:	4645      	mov	r5, r8
 8000560:	1a52      	subs	r2, r2, r1
 8000562:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000566:	e726      	b.n	80003b6 <__udivmoddi4+0xee>
 8000568:	4631      	mov	r1, r6
 800056a:	4630      	mov	r0, r6
 800056c:	e6f9      	b.n	8000362 <__udivmoddi4+0x9a>
 800056e:	1a84      	subs	r4, r0, r2
 8000570:	eb65 0203 	sbc.w	r2, r5, r3
 8000574:	2001      	movs	r0, #1
 8000576:	4617      	mov	r7, r2
 8000578:	e70b      	b.n	8000392 <__udivmoddi4+0xca>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74a      	b.n	8000416 <__udivmoddi4+0x14e>
 8000580:	4464      	add	r4, ip
 8000582:	3802      	subs	r0, #2
 8000584:	e6e4      	b.n	8000350 <__udivmoddi4+0x88>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e72f      	b.n	80003ec <__udivmoddi4+0x124>
 800058c:	3902      	subs	r1, #2
 800058e:	4462      	add	r2, ip
 8000590:	e6c9      	b.n	8000326 <__udivmoddi4+0x5e>
 8000592:	f1ae 0e02 	sub.w	lr, lr, #2
 8000596:	443d      	add	r5, r7
 8000598:	e76f      	b.n	800047a <__udivmoddi4+0x1b2>
 800059a:	3802      	subs	r0, #2
 800059c:	4461      	add	r1, ip
 800059e:	e7cb      	b.n	8000538 <__udivmoddi4+0x270>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443d      	add	r5, r7
 80005a4:	e77e      	b.n	80004a4 <__udivmoddi4+0x1dc>
 80005a6:	3d02      	subs	r5, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	e7d9      	b.n	8000560 <__udivmoddi4+0x298>
 80005ac:	4618      	mov	r0, r3
 80005ae:	4631      	mov	r1, r6
 80005b0:	e6d7      	b.n	8000362 <__udivmoddi4+0x9a>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fc02 	bl	8000dc4 <HAL_Init>

  /* USER CODE BEGIN Init */
  x = 1;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <main+0x30>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f811 	bl	80005ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  x = 2;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <main+0x30>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f94c 	bl	800086c <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005d4:	f000 f874 	bl	80006c0 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80005d8:	f000 f87e 	bl	80006d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f8c8 	bl	8000770 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80005e0:	f000 f912 	bl	8000808 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x2c>
 80005e6:	bf00      	nop
 80005e8:	20000458 	.word	0x20000458

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09c      	sub	sp, #112	; 0x70
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2250      	movs	r2, #80	; 0x50
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 fd47 	bl	800508e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <SystemClock_Config+0xd0>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	4a29      	ldr	r2, [pc, #164]	; (80006bc <SystemClock_Config+0xd0>)
 8000618:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800061c:	6113      	str	r3, [r2, #16]
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <SystemClock_Config+0xd0>)
 8000620:	691b      	ldr	r3, [r3, #16]
 8000622:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800062a:	bf00      	nop
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xd0>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	2b08      	cmp	r3, #8
 8000636:	d1f9      	bne.n	800062c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000638:	2321      	movs	r3, #33	; 0x21
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800064c:	2303      	movs	r3, #3
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000650:	230c      	movs	r3, #12
 8000652:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000654:	23fa      	movs	r3, #250	; 0xfa
 8000656:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000664:	2304      	movs	r3, #4
 8000666:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000668:	2300      	movs	r3, #0
 800066a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 ff7d 	bl	8001574 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000680:	f000 f9a6 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	231f      	movs	r3, #31
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2105      	movs	r1, #5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fb9e 	bl	8001de4 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ae:	f000 f98f 	bl	80009d0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3770      	adds	r7, #112	; 0x70
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	44020800 	.word	0x44020800

080006c0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006c4:	f000 fe48 	bl	8001358 <HAL_ICACHE_Enable>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80006ce:	f000 f97f 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006de:	4a23      	ldr	r2, [pc, #140]	; (800076c <MX_USART1_UART_Init+0x94>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_USART1_UART_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART1_UART_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000722:	f003 ff6f 	bl	8004604 <HAL_UART_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800072c:	f000 f950 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000734:	f004 fb86 	bl	8004e44 <HAL_UARTEx_SetTxFifoThreshold>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800073e:	f000 f947 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4808      	ldr	r0, [pc, #32]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000746:	f004 fbbb 	bl	8004ec0 <HAL_UARTEx_SetRxFifoThreshold>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000750:	f000 f93e 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000756:	f004 fb3c 	bl	8004dd2 <HAL_UARTEx_DisableFifoMode>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000760:	f000 f936 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000028 	.word	0x20000028
 800076c:	40013800 	.word	0x40013800

08000770 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_USART3_UART_Init+0x90>)
 8000776:	4a23      	ldr	r2, [pc, #140]	; (8000804 <MX_USART3_UART_Init+0x94>)
 8000778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_USART3_UART_Init+0x90>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_USART3_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_USART3_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_USART3_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_USART3_UART_Init+0x90>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_USART3_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007ba:	f003 ff23 	bl	8004604 <HAL_UART_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 f904 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007cc:	f004 fb3a 	bl	8004e44 <HAL_UARTEx_SetTxFifoThreshold>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f8fb 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007de:	f004 fb6f 	bl	8004ec0 <HAL_UARTEx_SetRxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 f8f2 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007ee:	f004 faf0 	bl	8004dd2 <HAL_UARTEx_DisableFifoMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f8ea 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000bc 	.word	0x200000bc
 8000804:	40004800 	.word	0x40004800

08000808 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <MX_USB_PCD_Init+0x60>)
 8000810:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000814:	2208      	movs	r2, #8
 8000816:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 800081a:	2202      	movs	r2, #2
 800081c:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000820:	2202      	movs	r2, #2
 8000822:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000850:	f000 fd92 	bl	8001378 <HAL_PCD_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 800085a:	f000 f8b9 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000150 	.word	0x20000150
 8000868:	40016000 	.word	0x40016000

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <MX_GPIO_Init+0x150>)
 8000884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000888:	4a4c      	ldr	r2, [pc, #304]	; (80009bc <MX_GPIO_Init+0x150>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000892:	4b4a      	ldr	r3, [pc, #296]	; (80009bc <MX_GPIO_Init+0x150>)
 8000894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a0:	4b46      	ldr	r3, [pc, #280]	; (80009bc <MX_GPIO_Init+0x150>)
 80008a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008a6:	4a45      	ldr	r2, [pc, #276]	; (80009bc <MX_GPIO_Init+0x150>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008b0:	4b42      	ldr	r3, [pc, #264]	; (80009bc <MX_GPIO_Init+0x150>)
 80008b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <MX_GPIO_Init+0x150>)
 80008c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008c4:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <MX_GPIO_Init+0x150>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MX_GPIO_Init+0x150>)
 80008d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b37      	ldr	r3, [pc, #220]	; (80009bc <MX_GPIO_Init+0x150>)
 80008de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008e2:	4a36      	ldr	r2, [pc, #216]	; (80009bc <MX_GPIO_Init+0x150>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008ec:	4b33      	ldr	r3, [pc, #204]	; (80009bc <MX_GPIO_Init+0x150>)
 80008ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <MX_GPIO_Init+0x150>)
 80008fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000900:	4a2e      	ldr	r2, [pc, #184]	; (80009bc <MX_GPIO_Init+0x150>)
 8000902:	f043 0308 	orr.w	r3, r3, #8
 8000906:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_GPIO_Init+0x150>)
 800090c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2120      	movs	r1, #32
 800091c:	4828      	ldr	r0, [pc, #160]	; (80009c0 <MX_GPIO_Init+0x154>)
 800091e:	f000 fd03 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4826      	ldr	r0, [pc, #152]	; (80009c4 <MX_GPIO_Init+0x158>)
 800092a:	f000 fcfd 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 800092e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_GPIO_Init+0x15c>)
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4820      	ldr	r0, [pc, #128]	; (80009c4 <MX_GPIO_Init+0x158>)
 8000944:	f000 fb9e 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000948:	2320      	movs	r3, #32
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4818      	ldr	r0, [pc, #96]	; (80009c0 <MX_GPIO_Init+0x154>)
 8000960:	f000 fb90 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_GPIO_Init+0x154>)
 800097a:	f000 fb83 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	480b      	ldr	r0, [pc, #44]	; (80009c4 <MX_GPIO_Init+0x158>)
 8000998:	f000 fb74 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800099c:	2304      	movs	r3, #4
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_GPIO_Init+0x160>)
 80009b0:	f000 fb68 	bl	8001084 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	44020c00 	.word	0x44020c00
 80009c0:	42020000 	.word	0x42020000
 80009c4:	42020800 	.word	0x42020800
 80009c8:	10110000 	.word	0x10110000
 80009cc:	42020c00 	.word	0x42020c00

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  x = 3;
 80009d8:	4b01      	ldr	r3, [pc, #4]	; (80009e0 <Error_Handler+0x10>)
 80009da:	2203      	movs	r2, #3
 80009dc:	601a      	str	r2, [r3, #0]
  while (1)
 80009de:	e7fe      	b.n	80009de <Error_Handler+0xe>
 80009e0:	20000458 	.word	0x20000458

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0ae      	sub	sp, #184	; 0xb8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	2288      	movs	r2, #136	; 0x88
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 fb3a 	bl	800508e <memset>
  if(huart->Instance==USART1)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <HAL_UART_MspInit+0x15c>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d146      	bne.n	8000ab2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a24:	f04f 0201 	mov.w	r2, #1
 8000a28:	f04f 0300 	mov.w	r3, #0
 8000a2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a30:	2300      	movs	r3, #0
 8000a32:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fd15 	bl	8002468 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000a44:	f7ff ffc4 	bl	80009d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a48:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000a4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a4e:	4a41      	ldr	r2, [pc, #260]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000a58:	4b3e      	ldr	r3, [pc, #248]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000a5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b3b      	ldr	r3, [pc, #236]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a6c:	4a39      	ldr	r2, [pc, #228]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000a84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	482b      	ldr	r0, [pc, #172]	; (8000b58 <HAL_UART_MspInit+0x164>)
 8000aac:	f000 faea 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ab0:	e049      	b.n	8000b46 <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a29      	ldr	r2, [pc, #164]	; (8000b5c <HAL_UART_MspInit+0x168>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d144      	bne.n	8000b46 <HAL_UART_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000abc:	f04f 0204 	mov.w	r2, #4
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 fcc9 	bl	8002468 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8000adc:	f7ff ff78 	bl	80009d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_UART_MspInit+0x160>)
 8000b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000b1c:	2318      	movs	r3, #24
 8000b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000b34:	230d      	movs	r3, #13
 8000b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <HAL_UART_MspInit+0x16c>)
 8000b42:	f000 fa9f 	bl	8001084 <HAL_GPIO_Init>
}
 8000b46:	bf00      	nop
 8000b48:	37b8      	adds	r7, #184	; 0xb8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40013800 	.word	0x40013800
 8000b54:	44020c00 	.word	0x44020c00
 8000b58:	42020400 	.word	0x42020400
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	42020000 	.word	0x42020000

08000b64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0ac      	sub	sp, #176	; 0xb0
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	2288      	movs	r2, #136	; 0x88
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 fa82 	bl	800508e <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a27      	ldr	r2, [pc, #156]	; (8000c2c <HAL_PCD_MspInit+0xc8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d146      	bne.n	8000c22 <HAL_PCD_MspInit+0xbe>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b94:	f04f 0200 	mov.w	r2, #0
 8000b98:	f04f 0310 	mov.w	r3, #16
 8000b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ba0:	2330      	movs	r3, #48	; 0x30
 8000ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fc5c 	bl	8002468 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000bb6:	f7ff ff0b 	bl	80009d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <HAL_PCD_MspInit+0xcc>)
 8000bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <HAL_PCD_MspInit+0xcc>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_PCD_MspInit+0xcc>)
 8000bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_DN_Pin|USB_FS_DP_Pin;
 8000bd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <HAL_PCD_MspInit+0xd0>)
 8000c00:	f000 fa40 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_PCD_MspInit+0xcc>)
 8000c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <HAL_PCD_MspInit+0xcc>)
 8000c0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c10:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_PCD_MspInit+0xcc>)
 8000c16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	37b0      	adds	r7, #176	; 0xb0
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40016000 	.word	0x40016000
 8000c30:	44020c00 	.word	0x44020c00
 8000c34:	42020000 	.word	0x42020000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 f8fa 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c92:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <SystemInit+0xc8>)
 8000c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c98:	4a2e      	ldr	r2, [pc, #184]	; (8000d54 <SystemInit+0xc8>)
 8000c9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <SystemInit+0xcc>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <SystemInit+0xcc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <SystemInit+0xcc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <SystemInit+0xcc>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4927      	ldr	r1, [pc, #156]	; (8000d58 <SystemInit+0xcc>)
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <SystemInit+0xd0>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <SystemInit+0xcc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <SystemInit+0xcc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <SystemInit+0xcc>)
 8000cce:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <SystemInit+0xd4>)
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <SystemInit+0xcc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <SystemInit+0xcc>)
 8000cda:	4a21      	ldr	r2, [pc, #132]	; (8000d60 <SystemInit+0xd4>)
 8000cdc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <SystemInit+0xcc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <SystemInit+0xcc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <SystemInit+0xcc>)
 8000cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <SystemInit+0xcc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <SystemInit+0xc8>)
 8000cf8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfc:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <SystemInit+0xd8>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000d06:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000d0e:	d003      	beq.n	8000d18 <SystemInit+0x8c>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000d16:	d117      	bne.n	8000d48 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <SystemInit+0xd8>)
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <SystemInit+0xd8>)
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <SystemInit+0xdc>)
 8000d28:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <SystemInit+0xd8>)
 8000d2c:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <SystemInit+0xe0>)
 8000d2e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <SystemInit+0xd8>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <SystemInit+0xd8>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <SystemInit+0xd8>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <SystemInit+0xd8>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	61d3      	str	r3, [r2, #28]
  }
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00
 8000d58:	44020c00 	.word	0x44020c00
 8000d5c:	fae2eae3 	.word	0xfae2eae3
 8000d60:	01010280 	.word	0x01010280
 8000d64:	40022000 	.word	0x40022000
 8000d68:	08192a3b 	.word	0x08192a3b
 8000d6c:	4c5d6e7f 	.word	0x4c5d6e7f

08000d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d76:	e003      	b.n	8000d80 <LoopCopyDataInit>

08000d78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d7e:	3104      	adds	r1, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d88:	d3f6      	bcc.n	8000d78 <CopyDataInit>
	ldr	r2, =_sbss
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d8c:	e002      	b.n	8000d94 <LoopFillZerobss>

08000d8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d90:	f842 3b04 	str.w	r3, [r2], #4

08000d94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <LoopForever+0x16>)
	cmp	r2, r3
 8000d96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d98:	d3f9      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d9a:	f7ff ff77 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f004 f97f 	bl	80050a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da2:	f7ff fc09 	bl	80005b8 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000da8:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000dac:	08005150 	.word	0x08005150
	ldr	r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000db4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000db8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000dbc:	20000460 	.word	0x20000460

08000dc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f929 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000dce:	f001 f9c1 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_Init+0x40>)
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	f003 030f 	and.w	r3, r3, #15
 8000ddc:	490a      	ldr	r1, [pc, #40]	; (8000e08 <HAL_Init+0x44>)
 8000dde:	5ccb      	ldrb	r3, [r1, r3]
 8000de0:	fa22 f303 	lsr.w	r3, r2, r3
 8000de4:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_Init+0x48>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de8:	200f      	movs	r0, #15
 8000dea:	f000 f811 	bl	8000e10 <HAL_InitTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e002      	b.n	8000dfe <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fdf4 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	44020c00 	.word	0x44020c00
 8000e08:	08005100 	.word	0x08005100
 8000e0c:	20000000 	.word	0x20000000

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_InitTick+0x60>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e021      	b.n	8000e68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <HAL_InitTick+0x64>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_InitTick+0x60>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f915 	bl	800106a <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f000 f8ed 	bl	8001036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <HAL_InitTick+0x68>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	2000045c 	.word	0x2000045c

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	2000045c 	.word	0x2000045c

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f7ff ff8e 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff47 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff5e 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff90 	bl	8000f74 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5f 	bl	8000f20 <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffb2 	bl	8000fdc <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001092:	e136      	b.n	8001302 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8128 	beq.w	80012fc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x38>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b12      	cmp	r3, #18
 80010ba:	d125      	bne.n	8001108 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	f003 020f 	and.w	r2, r3, #15
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	6979      	ldr	r1, [r7, #20]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4013      	ands	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d00b      	beq.n	800115c <HAL_GPIO_Init+0xd8>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001150:	2b11      	cmp	r3, #17
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b12      	cmp	r3, #18
 800115a:	d130      	bne.n	80011be <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4013      	ands	r3, r2
 8001172:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	4313      	orrs	r3, r2
 8001184:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001192:	2201      	movs	r2, #1
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	4013      	ands	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	091b      	lsrs	r3, r3, #4
 80011a8:	f003 0201 	and.w	r2, r3, #1
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d017      	beq.n	80011f6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4013      	ands	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d07c      	beq.n	80012fc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001202:	4a47      	ldr	r2, [pc, #284]	; (8001320 <HAL_GPIO_Init+0x29c>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3318      	adds	r3, #24
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	4013      	ands	r3, r2
 8001224:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	0a9a      	lsrs	r2, r3, #10
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <HAL_GPIO_Init+0x2a0>)
 800122c:	4013      	ands	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	f002 0203 	and.w	r2, r2, #3
 8001234:	00d2      	lsls	r2, r2, #3
 8001236:	4093      	lsls	r3, r2
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	4313      	orrs	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800123e:	4938      	ldr	r1, [pc, #224]	; (8001320 <HAL_GPIO_Init+0x29c>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3318      	adds	r3, #24
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800124c:	4b34      	ldr	r3, [pc, #208]	; (8001320 <HAL_GPIO_Init+0x29c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4013      	ands	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001270:	4a2b      	ldr	r2, [pc, #172]	; (8001320 <HAL_GPIO_Init+0x29c>)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <HAL_GPIO_Init+0x29c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	4013      	ands	r3, r2
 8001284:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800129a:	4a21      	ldr	r2, [pc, #132]	; (8001320 <HAL_GPIO_Init+0x29c>)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <HAL_GPIO_Init+0x29c>)
 80012a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	4013      	ands	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80012c6:	4a16      	ldr	r2, [pc, #88]	; (8001320 <HAL_GPIO_Init+0x29c>)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_GPIO_Init+0x29c>)
 80012d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4013      	ands	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_GPIO_Init+0x29c>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	3301      	adds	r3, #1
 8001300:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	f47f aec1 	bne.w	8001094 <HAL_GPIO_Init+0x10>
  }
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	44022000 	.word	0x44022000
 8001324:	002f7f7f 	.word	0x002f7f7f

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001344:	e002      	b.n	800134c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_ICACHE_Enable+0x1c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_ICACHE_Enable+0x1c>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40030400 	.word	0x40030400

08001378 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	b08f      	sub	sp, #60	; 0x3c
 800137c:	af0a      	add	r7, sp, #40	; 0x28
 800137e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0cd      	b.n	8001526 <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fbe0 	bl	8000b64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2203      	movs	r2, #3
 80013a8:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fe11 	bl	8004fd8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e03e      	b.n	800143a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	333d      	adds	r3, #61	; 0x3d
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	333c      	adds	r3, #60	; 0x3c
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	333f      	adds	r3, #63	; 0x3f
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	334c      	adds	r3, #76	; 0x4c
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3350      	adds	r3, #80	; 0x50
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	3354      	adds	r3, #84	; 0x54
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	3301      	adds	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	d3bb      	bcc.n	80013bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e044      	b.n	80014d4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	f203 137d 	addw	r3, r3, #381	; 0x17d
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	440b      	add	r3, r1
 80014b0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	3301      	adds	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3b5      	bcc.n	800144a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	687e      	ldr	r6, [r7, #4]
 80014e6:	466d      	mov	r5, sp
 80014e8:	f106 0410 	add.w	r4, r6, #16
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80014fc:	1d33      	adds	r3, r6, #4
 80014fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001500:	6838      	ldr	r0, [r7, #0]
 8001502:	f003 fda1 	bl	8005048 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	2b01      	cmp	r3, #1
 800151c:	d102      	bne.n	8001524 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f805 	bl	800152e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800152e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155c:	f043 0202 	orr.w	r2, r3, #2
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	f000 bc28 	b.w	8001dd8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001588:	4b94      	ldr	r3, [pc, #592]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	f003 0318 	and.w	r3, r3, #24
 8001590:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001592:	4b92      	ldr	r3, [pc, #584]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d05b      	beq.n	8001660 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x46>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	2b18      	cmp	r3, #24
 80015b2:	d114      	bne.n	80015de <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d111      	bne.n	80015de <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f000 bc08 	b.w	8001dd8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80015c8:	4b84      	ldr	r3, [pc, #528]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	041b      	lsls	r3, r3, #16
 80015d6:	4981      	ldr	r1, [pc, #516]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80015dc:	e040      	b.n	8001660 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d023      	beq.n	800162e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015e6:	4b7d      	ldr	r3, [pc, #500]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a7c      	ldr	r2, [pc, #496]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff fc57 	bl	8000ea4 <HAL_GetTick>
 80015f6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80015fa:	f7ff fc53 	bl	8000ea4 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e3e5      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800160c:	4b73      	ldr	r3, [pc, #460]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001618:	4b70      	ldr	r3, [pc, #448]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	496d      	ldr	r1, [pc, #436]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001628:	4313      	orrs	r3, r2
 800162a:	618b      	str	r3, [r1, #24]
 800162c:	e018      	b.n	8001660 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800162e:	4b6b      	ldr	r3, [pc, #428]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6a      	ldr	r2, [pc, #424]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fc33 	bl	8000ea4 <HAL_GetTick>
 800163e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001642:	f7ff fc2f 	bl	8000ea4 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e3c1      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001654:	4b61      	ldr	r3, [pc, #388]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a0 	beq.w	80017ae <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	2b10      	cmp	r3, #16
 8001672:	d005      	beq.n	8001680 <HAL_RCC_OscConfig+0x10c>
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b18      	cmp	r3, #24
 8001678:	d109      	bne.n	800168e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f040 8092 	bne.w	80017ae <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e3a4      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_OscConfig+0x132>
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 800169e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e058      	b.n	8001758 <HAL_RCC_OscConfig+0x1e4>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d112      	bne.n	80016d4 <HAL_RCC_OscConfig+0x160>
 80016ae:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a4a      	ldr	r2, [pc, #296]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a47      	ldr	r2, [pc, #284]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b45      	ldr	r3, [pc, #276]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a44      	ldr	r2, [pc, #272]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e041      	b.n	8001758 <HAL_RCC_OscConfig+0x1e4>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016dc:	d112      	bne.n	8001704 <HAL_RCC_OscConfig+0x190>
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a3e      	ldr	r2, [pc, #248]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a3b      	ldr	r2, [pc, #236]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b39      	ldr	r3, [pc, #228]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a38      	ldr	r2, [pc, #224]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e029      	b.n	8001758 <HAL_RCC_OscConfig+0x1e4>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800170c:	d112      	bne.n	8001734 <HAL_RCC_OscConfig+0x1c0>
 800170e:	4b33      	ldr	r3, [pc, #204]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a32      	ldr	r2, [pc, #200]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a2c      	ldr	r2, [pc, #176]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e011      	b.n	8001758 <HAL_RCC_OscConfig+0x1e4>
 8001734:	4b29      	ldr	r3, [pc, #164]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a28      	ldr	r2, [pc, #160]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 800173a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a25      	ldr	r2, [pc, #148]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 8001752:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fba0 	bl	8000ea4 <HAL_GetTick>
 8001764:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001768:	f7ff fb9c 	bl	8000ea4 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e32e      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x1f4>
 8001786:	e012      	b.n	80017ae <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fb8c 	bl	8000ea4 <HAL_GetTick>
 800178c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001790:	f7ff fb88 	bl	8000ea4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e31a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_RCC_OscConfig+0x268>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 809a 	beq.w	80018f0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_RCC_OscConfig+0x25a>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	2b18      	cmp	r3, #24
 80017c6:	d149      	bne.n	800185c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d146      	bne.n	800185c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d104      	bne.n	80017e0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e2fe      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
 80017da:	bf00      	nop
 80017dc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d11c      	bne.n	8001820 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80017e6:	4b9a      	ldr	r3, [pc, #616]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0218 	and.w	r2, r3, #24
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d014      	beq.n	8001820 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80017f6:	4b96      	ldr	r3, [pc, #600]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0218 	bic.w	r2, r3, #24
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	4993      	ldr	r1, [pc, #588]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001808:	f000 fdd0 	bl	80023ac <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800180c:	4b91      	ldr	r3, [pc, #580]	; (8001a54 <HAL_RCC_OscConfig+0x4e0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fafd 	bl	8000e10 <HAL_InitTick>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e2db      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fb40 	bl	8000ea4 <HAL_GetTick>
 8001824:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001828:	f7ff fb3c 	bl	8000ea4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e2ce      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183a:	4b85      	ldr	r3, [pc, #532]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001846:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	497e      	ldr	r1, [pc, #504]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800185a:	e049      	b.n	80018f0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02c      	beq.n	80018be <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001864:	4b7a      	ldr	r3, [pc, #488]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 0218 	bic.w	r2, r3, #24
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	4977      	ldr	r1, [pc, #476]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001876:	4b76      	ldr	r3, [pc, #472]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a75      	ldr	r2, [pc, #468]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fb0f 	bl	8000ea4 <HAL_GetTick>
 8001886:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800188a:	f7ff fb0b 	bl	8000ea4 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e29d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189c:	4b6c      	ldr	r3, [pc, #432]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80018a8:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	4966      	ldr	r1, [pc, #408]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	610b      	str	r3, [r1, #16]
 80018bc:	e018      	b.n	80018f0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b64      	ldr	r3, [pc, #400]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a63      	ldr	r2, [pc, #396]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff faeb 	bl	8000ea4 <HAL_GetTick>
 80018ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80018d2:	f7ff fae7 	bl	8000ea4 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e279      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e4:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d03c      	beq.n	8001976 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01c      	beq.n	800193e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001904:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800190a:	4a51      	ldr	r2, [pc, #324]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 800190c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001910:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff fac6 	bl	8000ea4 <HAL_GetTick>
 8001918:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800191c:	f7ff fac2 	bl	8000ea4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e254      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800192e:	4b48      	ldr	r3, [pc, #288]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ef      	beq.n	800191c <HAL_RCC_OscConfig+0x3a8>
 800193c:	e01b      	b.n	8001976 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001944:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800194a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff faa9 	bl	8000ea4 <HAL_GetTick>
 8001952:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001956:	f7ff faa5 	bl	8000ea4 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e237      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 800196a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800196e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ef      	bne.n	8001956 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80d2 	beq.w	8001b28 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCC_OscConfig+0x4e4>)
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d118      	bne.n	80019c2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x4e4>)
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	4a30      	ldr	r2, [pc, #192]	; (8001a58 <HAL_RCC_OscConfig+0x4e4>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199c:	f7ff fa82 	bl	8000ea4 <HAL_GetTick>
 80019a0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a4:	f7ff fa7e 	bl	8000ea4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e210      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_OscConfig+0x4e4>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_OscConfig+0x468>
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80019cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019d0:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019da:	e074      	b.n	8001ac6 <HAL_RCC_OscConfig+0x552>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d118      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4a2>
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80019e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019ea:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80019f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 80019fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a0a:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001a0c:	f023 0304 	bic.w	r3, r3, #4
 8001a10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a14:	e057      	b.n	8001ac6 <HAL_RCC_OscConfig+0x552>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d11e      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4e8>
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a34:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a44:	4a02      	ldr	r2, [pc, #8]	; (8001a50 <HAL_RCC_OscConfig+0x4dc>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a4e:	e03a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x552>
 8001a50:	44020c00 	.word	0x44020c00
 8001a54:	20000004 	.word	0x20000004
 8001a58:	44020800 	.word	0x44020800
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b85      	cmp	r3, #133	; 0x85
 8001a62:	d118      	bne.n	8001a96 <HAL_RCC_OscConfig+0x522>
 8001a64:	4ba2      	ldr	r3, [pc, #648]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a6a:	4aa1      	ldr	r2, [pc, #644]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a74:	4b9e      	ldr	r3, [pc, #632]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a7a:	4a9d      	ldr	r2, [pc, #628]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a84:	4b9a      	ldr	r3, [pc, #616]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a8a:	4a99      	ldr	r2, [pc, #612]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a94:	e017      	b.n	8001ac6 <HAL_RCC_OscConfig+0x552>
 8001a96:	4b96      	ldr	r3, [pc, #600]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a9c:	4a94      	ldr	r2, [pc, #592]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aa6:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aac:	4a90      	ldr	r2, [pc, #576]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001aae:	f023 0304 	bic.w	r3, r3, #4
 8001ab2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ab6:	4b8e      	ldr	r3, [pc, #568]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001abc:	4a8c      	ldr	r2, [pc, #560]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d016      	beq.n	8001afc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7ff f9e9 	bl	8000ea4 <HAL_GetTick>
 8001ad2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7ff f9e5 	bl	8000ea4 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e175      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aec:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0ed      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x562>
 8001afa:	e015      	b.n	8001b28 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7ff f9d2 	bl	8000ea4 <HAL_GetTick>
 8001b00:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff f9ce 	bl	8000ea4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e15e      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b1a:	4b75      	ldr	r3, [pc, #468]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1ed      	bne.n	8001b04 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d036      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d019      	beq.n	8001b70 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b3c:	4b6c      	ldr	r3, [pc, #432]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a6b      	ldr	r2, [pc, #428]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff f9ac 	bl	8000ea4 <HAL_GetTick>
 8001b4c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001b50:	f7ff f9a8 	bl	8000ea4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e13a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b62:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5dc>
 8001b6e:	e018      	b.n	8001ba2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b70:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5e      	ldr	r2, [pc, #376]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff f992 	bl	8000ea4 <HAL_GetTick>
 8001b80:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001b84:	f7ff f98e 	bl	8000ea4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e120      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b96:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8115 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b18      	cmp	r3, #24
 8001bb0:	f000 80af 	beq.w	8001d12 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	f040 8086 	bne.w	8001cca <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff f96b 	bl	8000ea4 <HAL_GetTick>
 8001bce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f967 	bl	8000ea4 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0f9      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001be4:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001bf0:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001bf8:	f023 0303 	bic.w	r3, r3, #3
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c04:	0212      	lsls	r2, r2, #8
 8001c06:	430a      	orrs	r2, r1
 8001c08:	4939      	ldr	r1, [pc, #228]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	628b      	str	r3, [r1, #40]	; 0x28
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	025b      	lsls	r3, r3, #9
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	3b01      	subs	r3, #1
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c3e:	492c      	ldr	r1, [pc, #176]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c4a:	f023 0310 	bic.w	r3, r3, #16
 8001c4e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	4a26      	ldr	r2, [pc, #152]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001c5a:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c60:	f043 0310 	orr.w	r3, r3, #16
 8001c64:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	f023 020c 	bic.w	r2, r3, #12
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	491f      	ldr	r1, [pc, #124]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	f023 0220 	bic.w	r2, r3, #32
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c84:	491a      	ldr	r1, [pc, #104]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f8ff 	bl	8000ea4 <HAL_GetTick>
 8001ca6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001caa:	f7ff f8fb 	bl	8000ea4 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e08d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x736>
 8001cc8:	e085      	b.n	8001dd6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_RCC_OscConfig+0x77c>)
 8001cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f8e5 	bl	8000ea4 <HAL_GetTick>
 8001cda:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001cde:	f7ff f8e1 	bl	8000ea4 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d903      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e073      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
 8001cf0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ee      	bne.n	8001cde <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	4a36      	ldr	r2, [pc, #216]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001d06:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	6293      	str	r3, [r2, #40]	; 0x28
 8001d10:	e061      	b.n	8001dd6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d031      	beq.n	8001d8a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d12a      	bne.n	8001d8a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d122      	bne.n	8001d8a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d11a      	bne.n	8001d8a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	0a5b      	lsrs	r3, r3, #9
 8001d58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d111      	bne.n	8001d8a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d72:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d108      	bne.n	8001d8a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	0e1b      	lsrs	r3, r3, #24
 8001d7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e024      	b.n	8001dd8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d01a      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001da6:	f023 0310 	bic.w	r3, r3, #16
 8001daa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff f87a 	bl	8000ea4 <HAL_GetTick>
 8001db0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001db2:	bf00      	nop
 8001db4:	f7ff f876 	bl	8000ea4 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d0f9      	beq.n	8001db4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_RCC_OscConfig+0x86c>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	44020c00 	.word	0x44020c00

08001de4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e19e      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b83      	ldr	r3, [pc, #524]	; (8002008 <HAL_RCC_ClockConfig+0x224>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b80      	ldr	r3, [pc, #512]	; (8002008 <HAL_RCC_ClockConfig+0x224>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 020f 	bic.w	r2, r3, #15
 8001e0e:	497e      	ldr	r1, [pc, #504]	; (8002008 <HAL_RCC_ClockConfig+0x224>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b7c      	ldr	r3, [pc, #496]	; (8002008 <HAL_RCC_ClockConfig+0x224>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e186      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d012      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	4b74      	ldr	r3, [pc, #464]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d909      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001e46:	4b71      	ldr	r3, [pc, #452]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	496d      	ldr	r1, [pc, #436]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d012      	beq.n	8001e8c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	4b68      	ldr	r3, [pc, #416]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d909      	bls.n	8001e8c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001e78:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	4961      	ldr	r1, [pc, #388]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	4b5b      	ldr	r3, [pc, #364]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d908      	bls.n	8001eba <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001ea8:	4b58      	ldr	r3, [pc, #352]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4955      	ldr	r1, [pc, #340]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d908      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001ed6:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	f023 020f 	bic.w	r2, r3, #15
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	494a      	ldr	r1, [pc, #296]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8093 	beq.w	800201c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001efe:	4b43      	ldr	r3, [pc, #268]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d121      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e113      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f16:	4b3d      	ldr	r3, [pc, #244]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d115      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e107      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0fb      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3e:	4b33      	ldr	r3, [pc, #204]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0f3      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	492c      	ldr	r1, [pc, #176]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f60:	f7fe ffa0 	bl	8000ea4 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d112      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7fe ff98 	bl	8000ea4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0d7      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 0318 	and.w	r3, r3, #24
 8001f8e:	2b18      	cmp	r3, #24
 8001f90:	d1ee      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x18c>
 8001f92:	e043      	b.n	800201c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d112      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9e:	f7fe ff81 	bl	8000ea4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0c0      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f003 0318 	and.w	r3, r3, #24
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d1ee      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x1ba>
 8001fc0:	e02c      	b.n	800201c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d122      	bne.n	8002010 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7fe ff6a 	bl	8000ea4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0a9      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x228>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 0318 	and.w	r3, r3, #24
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d1ee      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x1e8>
 8001fee:	e015      	b.n	800201c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe ff58 	bl	8000ea4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d906      	bls.n	8002010 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e097      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
 8002006:	bf00      	nop
 8002008:	40022000 	.word	0x40022000
 800200c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002010:	4b4b      	ldr	r3, [pc, #300]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f003 0318 	and.w	r3, r3, #24
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e9      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	429a      	cmp	r2, r3
 8002036:	d208      	bcs.n	800204a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002038:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f023 020f 	bic.w	r2, r3, #15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	493e      	ldr	r1, [pc, #248]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 8002046:	4313      	orrs	r3, r2
 8002048:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_ClockConfig+0x360>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d210      	bcs.n	800207a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002058:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <HAL_RCC_ClockConfig+0x360>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 020f 	bic.w	r2, r3, #15
 8002060:	4938      	ldr	r1, [pc, #224]	; (8002144 <HAL_RCC_ClockConfig+0x360>)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCC_ClockConfig+0x360>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d001      	beq.n	800207a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e05d      	b.n	8002136 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d010      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002092:	429a      	cmp	r2, r3
 8002094:	d208      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4927      	ldr	r1, [pc, #156]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d012      	beq.n	80020da <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d209      	bcs.n	80020da <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	491a      	ldr	r1, [pc, #104]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d209      	bcs.n	800210c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	490e      	ldr	r1, [pc, #56]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 8002108:	4313      	orrs	r3, r2
 800210a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800210c:	f000 f822 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002110:	4602      	mov	r2, r0
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x35c>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	490b      	ldr	r1, [pc, #44]	; (8002148 <HAL_RCC_ClockConfig+0x364>)
 800211c:	5ccb      	ldrb	r3, [r1, r3]
 800211e:	fa22 f303 	lsr.w	r3, r2, r3
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <HAL_RCC_ClockConfig+0x368>)
 8002124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x36c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fe70 	bl	8000e10 <HAL_InitTick>
 8002130:	4603      	mov	r3, r0
 8002132:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002134:	7afb      	ldrb	r3, [r7, #11]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	44020c00 	.word	0x44020c00
 8002144:	40022000 	.word	0x40022000
 8002148:	08005100 	.word	0x08005100
 800214c:	20000000 	.word	0x20000000
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800215a:	4b8c      	ldr	r3, [pc, #560]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f003 0318 	and.w	r3, r3, #24
 8002162:	2b08      	cmp	r3, #8
 8002164:	d102      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002166:	4b8a      	ldr	r3, [pc, #552]	; (8002390 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e107      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800216c:	4b87      	ldr	r3, [pc, #540]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f003 0318 	and.w	r3, r3, #24
 8002174:	2b00      	cmp	r3, #0
 8002176:	d112      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002178:	4b84      	ldr	r3, [pc, #528]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b00      	cmp	r3, #0
 8002182:	d009      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002184:	4b81      	ldr	r3, [pc, #516]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	4a81      	ldr	r2, [pc, #516]	; (8002394 <HAL_RCC_GetSysClockFreq+0x240>)
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e0f1      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002198:	4b7e      	ldr	r3, [pc, #504]	; (8002394 <HAL_RCC_GetSysClockFreq+0x240>)
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	e0ee      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800219e:	4b7b      	ldr	r3, [pc, #492]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0318 	and.w	r3, r3, #24
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d102      	bne.n	80021b0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021aa:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <HAL_RCC_GetSysClockFreq+0x244>)
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	e0e5      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b0:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f003 0318 	and.w	r3, r3, #24
 80021b8:	2b18      	cmp	r3, #24
 80021ba:	f040 80dd 	bne.w	8002378 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80021be:	4b73      	ldr	r3, [pc, #460]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80021c8:	4b70      	ldr	r3, [pc, #448]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80021d4:	4b6d      	ldr	r3, [pc, #436]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80021e0:	4b6a      	ldr	r3, [pc, #424]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80b7 	beq.w	8002372 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0xbe>
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d056      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x16a>
 8002210:	e077      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002212:	4b5e      	ldr	r3, [pc, #376]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d02d      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800221e:	4b5b      	ldr	r3, [pc, #364]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	08db      	lsrs	r3, r3, #3
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	4a5a      	ldr	r2, [pc, #360]	; (8002394 <HAL_RCC_GetSysClockFreq+0x240>)
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	ee07 3a90 	vmov	s15, r3
 8002240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 800224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002258:	ed97 6a02 	vldr	s12, [r7, #8]
 800225c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800239c <HAL_RCC_GetSysClockFreq+0x248>
 8002260:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002264:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800226c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002274:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002278:	e065      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002284:	eddf 6a46 	vldr	s13, [pc, #280]	; 80023a0 <HAL_RCC_GetSysClockFreq+0x24c>
 8002288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800228c:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 800228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800229c:	ed97 6a02 	vldr	s12, [r7, #8]
 80022a0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800239c <HAL_RCC_GetSysClockFreq+0x248>
 80022a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80022ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80022bc:	e043      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c8:	eddf 6a36 	vldr	s13, [pc, #216]	; 80023a4 <HAL_RCC_GetSysClockFreq+0x250>
 80022cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d0:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d8:	ee07 3a90 	vmov	s15, r3
 80022dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80022e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80022e4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800239c <HAL_RCC_GetSysClockFreq+0x248>
 80022e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80022f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002300:	e021      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023a8 <HAL_RCC_GetSysClockFreq+0x254>
 8002310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 8002316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002324:	ed97 6a02 	vldr	s12, [r7, #8]
 8002328:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800239c <HAL_RCC_GetSysClockFreq+0x248>
 800232c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002330:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002334:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002338:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800233c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002340:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002344:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_RCC_GetSysClockFreq+0x238>)
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	0a5b      	lsrs	r3, r3, #9
 800234c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002350:	3301      	adds	r3, #1
 8002352:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800235e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800236a:	ee17 3a90 	vmov	r3, s15
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	e004      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e001      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetSysClockFreq+0x240>)
 800237a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800237c:	69fb      	ldr	r3, [r7, #28]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	44020c00 	.word	0x44020c00
 8002390:	003d0900 	.word	0x003d0900
 8002394:	03d09000 	.word	0x03d09000
 8002398:	016e3600 	.word	0x016e3600
 800239c:	46000000 	.word	0x46000000
 80023a0:	4c742400 	.word	0x4c742400
 80023a4:	4bb71b00 	.word	0x4bb71b00
 80023a8:	4a742400 	.word	0x4a742400

080023ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80023b0:	f7ff fed0 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80023ba:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80023be:	4907      	ldr	r1, [pc, #28]	; (80023dc <HAL_RCC_GetHCLKFreq+0x30>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80023c2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80023cc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80023d0:	681b      	ldr	r3, [r3, #0]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	44020c00 	.word	0x44020c00
 80023dc:	08005100 	.word	0x08005100
 80023e0:	20000000 	.word	0x20000000

080023e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80023e8:	f7ff ffe0 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4904      	ldr	r1, [pc, #16]	; (800240c <HAL_RCC_GetPCLK1Freq+0x28>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	44020c00 	.word	0x44020c00
 800240c:	08005110 	.word	0x08005110

08002410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002414:	f7ff ffca 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4904      	ldr	r1, [pc, #16]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	44020c00 	.word	0x44020c00
 8002438:	08005110 	.word	0x08005110

0800243c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002440:	f7ff ffb4 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	0b1b      	lsrs	r3, r3, #12
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4904      	ldr	r1, [pc, #16]	; (8002464 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	44020c00 	.word	0x44020c00
 8002464:	08005110 	.word	0x08005110

08002468 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800246c:	b0aa      	sub	sp, #168	; 0xa8
 800246e:	af00      	add	r7, sp, #0
 8002470:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002474:	2300      	movs	r3, #0
 8002476:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800247a:	2300      	movs	r3, #0
 800247c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002480:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 800248c:	2500      	movs	r5, #0
 800248e:	ea54 0305 	orrs.w	r3, r4, r5
 8002492:	d00b      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002494:	4bb8      	ldr	r3, [pc, #736]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800249a:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800249e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	4ab4      	ldr	r2, [pc, #720]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024a6:	430b      	orrs	r3, r1
 80024a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f002 0801 	and.w	r8, r2, #1
 80024b8:	f04f 0900 	mov.w	r9, #0
 80024bc:	ea58 0309 	orrs.w	r3, r8, r9
 80024c0:	d038      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80024c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d819      	bhi.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80024cc:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80024ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d2:	bf00      	nop
 80024d4:	08002509 	.word	0x08002509
 80024d8:	080024ed 	.word	0x080024ed
 80024dc:	08002501 	.word	0x08002501
 80024e0:	08002509 	.word	0x08002509
 80024e4:	08002509 	.word	0x08002509
 80024e8:	08002509 	.word	0x08002509
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80024ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024f0:	3308      	adds	r3, #8
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 ffee 	bl	80044d4 <RCCEx_PLL2_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80024fe:	e004      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002506:	e000      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800250a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002512:	4b99      	ldr	r3, [pc, #612]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002518:	f023 0107 	bic.w	r1, r3, #7
 800251c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002522:	4a95      	ldr	r2, [pc, #596]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002524:	430b      	orrs	r3, r1
 8002526:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800252a:	e003      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002530:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002534:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f002 0a02 	and.w	sl, r2, #2
 8002540:	f04f 0b00 	mov.w	fp, #0
 8002544:	ea5a 030b 	orrs.w	r3, sl, fp
 8002548:	d03c      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800254a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	2b28      	cmp	r3, #40	; 0x28
 8002552:	d01b      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002554:	2b28      	cmp	r3, #40	; 0x28
 8002556:	d815      	bhi.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002558:	2b20      	cmp	r3, #32
 800255a:	d019      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800255c:	2b20      	cmp	r3, #32
 800255e:	d811      	bhi.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002560:	2b18      	cmp	r3, #24
 8002562:	d017      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002564:	2b18      	cmp	r3, #24
 8002566:	d80d      	bhi.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d015      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800256c:	2b08      	cmp	r3, #8
 800256e:	d109      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002570:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002574:	3308      	adds	r3, #8
 8002576:	4618      	mov	r0, r3
 8002578:	f001 ffac 	bl	80044d4 <RCCEx_PLL2_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002582:	e00a      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800258a:	e006      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800258c:	bf00      	nop
 800258e:	e004      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002590:	bf00      	nop
 8002592:	e002      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002594:	bf00      	nop
 8002596:	e000      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800259a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80025a2:	4b75      	ldr	r3, [pc, #468]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025a8:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80025ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	4a71      	ldr	r2, [pc, #452]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025b4:	430b      	orrs	r3, r1
 80025b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ba:	e003      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80025c0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f002 0304 	and.w	r3, r2, #4
 80025d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80025da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80025de:	460b      	mov	r3, r1
 80025e0:	4313      	orrs	r3, r2
 80025e2:	d040      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80025e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80025ee:	d01e      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80025f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80025f4:	d817      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80025f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fa:	d01a      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80025fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002600:	d811      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002602:	2bc0      	cmp	r3, #192	; 0xc0
 8002604:	d017      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002606:	2bc0      	cmp	r3, #192	; 0xc0
 8002608:	d80d      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800260a:	2b00      	cmp	r3, #0
 800260c:	d015      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800260e:	2b40      	cmp	r3, #64	; 0x40
 8002610:	d109      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002612:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002616:	3308      	adds	r3, #8
 8002618:	4618      	mov	r0, r3
 800261a:	f001 ff5b 	bl	80044d4 <RCCEx_PLL2_Config>
 800261e:	4603      	mov	r3, r0
 8002620:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002624:	e00a      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800262c:	e006      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800262e:	bf00      	nop
 8002630:	e004      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002632:	bf00      	nop
 8002634:	e002      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002636:	bf00      	nop
 8002638:	e000      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800263a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800263c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10c      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002644:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002646:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800264a:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800264e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	4a48      	ldr	r2, [pc, #288]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002656:	430b      	orrs	r3, r1
 8002658:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800265c:	e003      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002662:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002666:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002672:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800267c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002680:	460b      	mov	r3, r1
 8002682:	4313      	orrs	r3, r2
 8002684:	d043      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002690:	d021      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002692:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002696:	d81a      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800269c:	d01d      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x272>
 800269e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026a2:	d814      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x266>
 80026a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026a8:	d019      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x276>
 80026aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026ae:	d80e      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x266>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d016      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d109      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80026ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026be:	3308      	adds	r3, #8
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 ff07 	bl	80044d4 <RCCEx_PLL2_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80026cc:	e00a      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80026d4:	e006      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80026d6:	bf00      	nop
 80026d8:	e004      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80026da:	bf00      	nop
 80026dc:	e002      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80026de:	bf00      	nop
 80026e0:	e000      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80026e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026e4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10c      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f2:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80026f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026fe:	430b      	orrs	r3, r1
 8002700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002704:	e003      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002706:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800270a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800270e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800271a:	67bb      	str	r3, [r7, #120]	; 0x78
 800271c:	2300      	movs	r3, #0
 800271e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002720:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002724:	460b      	mov	r3, r1
 8002726:	4313      	orrs	r3, r2
 8002728:	d03e      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800272a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002734:	d01b      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8002736:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800273a:	d814      	bhi.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800273c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002740:	d017      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002746:	d80e      	bhi.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d017      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x314>
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d109      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002756:	3308      	adds	r3, #8
 8002758:	4618      	mov	r0, r3
 800275a:	f001 febb 	bl	80044d4 <RCCEx_PLL2_Config>
 800275e:	4603      	mov	r3, r0
 8002760:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002764:	e00b      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800276c:	e007      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800276e:	bf00      	nop
 8002770:	e005      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002772:	bf00      	nop
 8002774:	e003      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002776:	bf00      	nop
 8002778:	44020c00 	.word	0x44020c00
        break;
 800277c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800277e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10c      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002786:	4ba5      	ldr	r3, [pc, #660]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800278c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002790:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4aa1      	ldr	r2, [pc, #644]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002798:	430b      	orrs	r3, r1
 800279a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800279e:	e003      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80027a4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80027b4:	673b      	str	r3, [r7, #112]	; 0x70
 80027b6:	2300      	movs	r3, #0
 80027b8:	677b      	str	r3, [r7, #116]	; 0x74
 80027ba:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80027be:	460b      	mov	r3, r1
 80027c0:	4313      	orrs	r3, r2
 80027c2:	d03b      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80027c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027ce:	d01b      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80027d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027d4:	d814      	bhi.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80027d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027da:	d017      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80027dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027e0:	d80e      	bhi.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d014      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80027e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027ea:	d109      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027f0:	3308      	adds	r3, #8
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 fe6e 	bl	80044d4 <RCCEx_PLL2_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80027fe:	e008      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002806:	e004      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002808:	bf00      	nop
 800280a:	e002      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800280c:	bf00      	nop
 800280e:	e000      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002812:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800281a:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800281c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002820:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002824:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282a:	4a7c      	ldr	r2, [pc, #496]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800282c:	430b      	orrs	r3, r1
 800282e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002832:	e003      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002834:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002838:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800283c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002848:	66bb      	str	r3, [r7, #104]	; 0x68
 800284a:	2300      	movs	r3, #0
 800284c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800284e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002852:	460b      	mov	r3, r1
 8002854:	4313      	orrs	r3, r2
 8002856:	d033      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002858:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002862:	d015      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002868:	d80e      	bhi.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d012      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800286e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002872:	d109      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002874:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002878:	3308      	adds	r3, #8
 800287a:	4618      	mov	r0, r3
 800287c:	f001 fe2a 	bl	80044d4 <RCCEx_PLL2_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002886:	e006      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800288e:	e002      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002890:	bf00      	nop
 8002892:	e000      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002896:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800289e:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80028a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80028a4:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80028a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	4a5b      	ldr	r2, [pc, #364]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80028b0:	430b      	orrs	r3, r1
 80028b2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80028b6:	e003      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80028bc:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80028c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	2100      	movs	r1, #0
 80028ca:	6639      	str	r1, [r7, #96]	; 0x60
 80028cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d0:	667b      	str	r3, [r7, #100]	; 0x64
 80028d2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80028d6:	460b      	mov	r3, r1
 80028d8:	4313      	orrs	r3, r2
 80028da:	d033      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80028dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e6:	d015      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80028e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ec:	d80e      	bhi.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80028f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f6:	d109      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* I3C2 clock source config set later after clock selection check */
        break;

      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028fc:	3308      	adds	r3, #8
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 fde8 	bl	80044d4 <RCCEx_PLL2_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* I3C2 clock source config set later after clock selection check */
        break;
 800290a:	e006      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002912:	e002      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002914:	bf00      	nop
 8002916:	e000      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800291a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10c      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002924:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002928:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800292c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	4a3a      	ldr	r2, [pc, #232]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002934:	430b      	orrs	r3, r1
 8002936:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800293a:	e003      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002940:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002944:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	2100      	movs	r1, #0
 800294e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002956:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800295a:	460b      	mov	r3, r1
 800295c:	4313      	orrs	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002960:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	4a2d      	ldr	r2, [pc, #180]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002966:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800296a:	61d3      	str	r3, [r2, #28]
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800296e:	69d9      	ldr	r1, [r3, #28]
 8002970:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002978:	4a28      	ldr	r2, [pc, #160]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800297a:	430b      	orrs	r3, r1
 800297c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800297e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800298a:	653b      	str	r3, [r7, #80]	; 0x50
 800298c:	2300      	movs	r3, #0
 800298e:	657b      	str	r3, [r7, #84]	; 0x54
 8002990:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002994:	460b      	mov	r3, r1
 8002996:	4313      	orrs	r3, r2
 8002998:	d046      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800299a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80029a4:	d021      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x582>
 80029a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80029aa:	d81a      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d01d      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x586>
 80029b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b6:	d814      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80029b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029bc:	d019      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80029be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029c2:	d80e      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d016      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80029c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029cc:	d109      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029d2:	3308      	adds	r3, #8
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 fd7d 	bl	80044d4 <RCCEx_PLL2_Config>
 80029da:	4603      	mov	r3, r0
 80029dc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80029e0:	e00a      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80029e8:	e006      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80029ea:	bf00      	nop
 80029ec:	e004      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80029ee:	bf00      	nop
 80029f0:	e002      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80029f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10f      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002a06:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002a0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	4a02      	ldr	r2, [pc, #8]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a12:	430b      	orrs	r3, r1
 8002a14:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002a18:	e006      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002a1a:	bf00      	nop
 8002a1c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a20:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002a24:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a30:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a36:	2300      	movs	r3, #0
 8002a38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a3a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4313      	orrs	r3, r2
 8002a42:	d043      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002a44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002a4e:	d021      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8002a50:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002a54:	d81a      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002a56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a5a:	d01d      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8002a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a60:	d814      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002a62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a66:	d019      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x634>
 8002a68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a6c:	d80e      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8002a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a76:	d109      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 fd28 	bl	80044d4 <RCCEx_PLL2_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002a92:	e006      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002a94:	bf00      	nop
 8002a96:	e004      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002a98:	bf00      	nop
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002a9c:	bf00      	nop
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002aaa:	4bb6      	ldr	r3, [pc, #728]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002aac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ab0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002ab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	4ab2      	ldr	r2, [pc, #712]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002abc:	430b      	orrs	r3, r1
 8002abe:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002ac2:	e003      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ac8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002acc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8002ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8002ada:	2300      	movs	r3, #0
 8002adc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ade:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	d030      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002ae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d80f      	bhi.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d211      	bcs.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d911      	bls.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d109      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b02:	3308      	adds	r3, #8
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 fce5 	bl	80044d4 <RCCEx_PLL2_Config>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002b10:	e006      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002b18:	e002      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002b1a:	bf00      	nop
 8002b1c:	e000      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b20:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10c      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002b28:	4b96      	ldr	r3, [pc, #600]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b2e:	f023 0107 	bic.w	r1, r3, #7
 8002b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b38:	4a92      	ldr	r2, [pc, #584]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b40:	e003      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b42:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b46:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8002b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	2100      	movs	r1, #0
 8002b54:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b5c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002b60:	460b      	mov	r3, r1
 8002b62:	4313      	orrs	r3, r2
 8002b64:	d022      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8002b66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x714>
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d005      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002b7a:	e002      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002b7c:	bf00      	nop
 8002b7e:	e000      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b82:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8002b8a:	4b7e      	ldr	r3, [pc, #504]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b90:	f023 0108 	bic.w	r1, r3, #8
 8002b94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b9a:	4a7a      	ldr	r2, [pc, #488]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ba2:	e003      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ba8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f000 80b0 	beq.w	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002bca:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	4a6e      	ldr	r2, [pc, #440]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd6:	f7fe f965 	bl	8000ea4 <HAL_GetTick>
 8002bda:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be0:	f7fe f960 	bl	8000ea4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d903      	bls.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002bf6:	e005      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002bf8:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ed      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8002c04:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f040 808a 	bne.w	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002c1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d022      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x802>
 8002c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c2a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d01b      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c32:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c40:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c46:	4a4f      	ldr	r2, [pc, #316]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c50:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c56:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe f915 	bl	8000ea4 <HAL_GetTick>
 8002c7a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7e:	e00d      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7fe f910 	bl	8000ea4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d903      	bls.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            break;
 8002c9a:	e006      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9c:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0ea      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8002caa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d132      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8002cc2:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cda:	4a2a      	ldr	r2, [pc, #168]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	61d3      	str	r3, [r2, #28]
 8002ce0:	e005      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x886>
 8002ce2:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ce8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cec:	61d3      	str	r3, [r2, #28]
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cf4:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cfe:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d00:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8002d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d10:	430b      	orrs	r3, r1
 8002d12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d16:	e008      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d18:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d1c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8002d20:	e003      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d22:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d26:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002d2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002d40:	460b      	mov	r3, r1
 8002d42:	4313      	orrs	r3, r2
 8002d44:	d038      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8002d46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	2b30      	cmp	r3, #48	; 0x30
 8002d4e:	d014      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x912>
 8002d50:	2b30      	cmp	r3, #48	; 0x30
 8002d52:	d80e      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d012      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x916>
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d80a      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d015      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d106      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	4a06      	ldr	r2, [pc, #24]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6e:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8002d70:	e00d      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002d78:	e009      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8002d7a:	bf00      	nop
 8002d7c:	e007      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8002d7e:	bf00      	nop
 8002d80:	e005      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x926>
 8002d82:	bf00      	nop
 8002d84:	44020c00 	.word	0x44020c00
 8002d88:	44020800 	.word	0x44020800
        break;
 8002d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d8e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002d96:	4bb5      	ldr	r3, [pc, #724]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002da0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da6:	49b1      	ldr	r1, [pc, #708]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8002dae:	e003      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002db4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002db8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8002dc4:	623b      	str	r3, [r7, #32]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	d03c      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8002dd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d81d      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002df9 	.word	0x08002df9
 8002de8:	08002e07 	.word	0x08002e07
 8002dec:	08002e1b 	.word	0x08002e1b
 8002df0:	08002e23 	.word	0x08002e23
 8002df4:	08002e23 	.word	0x08002e23
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df8:	4b9c      	ldr	r3, [pc, #624]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	4a9b      	ldr	r2, [pc, #620]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e02:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002e04:	e00e      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 fb61 	bl	80044d4 <RCCEx_PLL2_Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002e18:	e004      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002e20:	e000      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8002e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e24:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8002e2c:	4b8f      	ldr	r3, [pc, #572]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e32:	f023 0207 	bic.w	r2, r3, #7
 8002e36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3c:	498b      	ldr	r1, [pc, #556]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8002e44:	e003      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e46:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e4a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002e4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002e64:	460b      	mov	r3, r1
 8002e66:	4313      	orrs	r3, r2
 8002e68:	d03c      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8002e6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d01f      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d819      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8002e78:	2b18      	cmp	r3, #24
 8002e7a:	d01d      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002e7c:	2b18      	cmp	r3, #24
 8002e7e:	d815      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d007      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002e88:	e010      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e8a:	4b78      	ldr	r3, [pc, #480]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	4a77      	ldr	r2, [pc, #476]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e94:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8002e96:	e010      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 fb18 	bl	80044d4 <RCCEx_PLL2_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8002eaa:	e006      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8002eb4:	bf00      	nop
 8002eb6:	e000      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8002eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eba:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8002ec2:	4b6a      	ldr	r3, [pc, #424]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4966      	ldr	r1, [pc, #408]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8002eda:	e003      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002edc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ee0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8002ee4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002efa:	460b      	mov	r3, r1
 8002efc:	4313      	orrs	r3, r2
 8002efe:	d03e      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8002f00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0a:	d020      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8002f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f10:	d819      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8002f12:	2bc0      	cmp	r3, #192	; 0xc0
 8002f14:	d01d      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8002f16:	2bc0      	cmp	r3, #192	; 0xc0
 8002f18:	d815      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d007      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8002f22:	e010      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f24:	4b51      	ldr	r3, [pc, #324]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	4a50      	ldr	r2, [pc, #320]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8002f30:	e010      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f36:	3308      	adds	r3, #8
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 facb 	bl	80044d4 <RCCEx_PLL2_Config>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8002f44:	e006      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002f4c:	e002      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8002f4e:	bf00      	nop
 8002f50:	e000      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8002f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f54:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8002f5c:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6c:	493f      	ldr	r1, [pc, #252]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8002f74:	e003      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f76:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002f7a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	2100      	movs	r1, #0
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f94:	460b      	mov	r3, r1
 8002f96:	4313      	orrs	r3, r2
 8002f98:	d038      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8002f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8002fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002faa:	d815      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d017      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb4:	d110      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	4a2c      	ldr	r2, [pc, #176]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002fc2:	e00e      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fc8:	3308      	adds	r3, #8
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 fa82 	bl	80044d4 <RCCEx_PLL2_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002fd6:	e004      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002fde:	e000      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8002fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	491c      	ldr	r1, [pc, #112]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8003002:	e003      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003008:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800300c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	2100      	movs	r1, #0
 8003016:	6039      	str	r1, [r7, #0]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003022:	460b      	mov	r3, r1
 8003024:	4313      	orrs	r3, r2
 8003026:	d039      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003028:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800302c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302e:	2b30      	cmp	r3, #48	; 0x30
 8003030:	d01e      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003032:	2b30      	cmp	r3, #48	; 0x30
 8003034:	d815      	bhi.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003036:	2b10      	cmp	r3, #16
 8003038:	d002      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800303a:	2b20      	cmp	r3, #32
 800303c:	d007      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800303e:	e010      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	4a09      	ldr	r2, [pc, #36]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800304a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800304c:	e011      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800304e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003052:	3308      	adds	r3, #8
 8003054:	4618      	mov	r0, r3
 8003056:	f001 fa3d 	bl	80044d4 <RCCEx_PLL2_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003060:	e007      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003068:	e003      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800306a:	bf00      	nop
 800306c:	44020c00 	.word	0x44020c00
        break;
 8003070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003072:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800307c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003080:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003084:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003092:	e003      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003098:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 800309c:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	37a8      	adds	r7, #168	; 0xa8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030aa:	bf00      	nop
 80030ac:	44020c00 	.word	0x44020c00

080030b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b08b      	sub	sp, #44	; 0x2c
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80030b8:	4bad      	ldr	r3, [pc, #692]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80030c2:	4bab      	ldr	r3, [pc, #684]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80030cc:	4ba8      	ldr	r3, [pc, #672]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d6:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80030d8:	4ba5      	ldr	r3, [pc, #660]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80030e2:	4ba3      	ldr	r3, [pc, #652]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	08db      	lsrs	r3, r3, #3
 80030e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8126 	beq.w	8003352 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d053      	beq.n	80031b4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d86f      	bhi.n	80031f2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d003      	beq.n	8003120 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d02b      	beq.n	8003176 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800311e:	e068      	b.n	80031f2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003120:	4b93      	ldr	r3, [pc, #588]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	08db      	lsrs	r3, r3, #3
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	4a92      	ldr	r2, [pc, #584]	; (8003374 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
 8003130:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	ee07 3a90 	vmov	s15, r3
 8003150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003154:	ed97 6a04 	vldr	s12, [r7, #16]
 8003158:	eddf 5a87 	vldr	s11, [pc, #540]	; 8003378 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800315c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003164:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003170:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003174:	e068      	b.n	8003248 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	ee07 3a90 	vmov	s15, r3
 800317c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003180:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800337c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003192:	ed97 6a04 	vldr	s12, [r7, #16]
 8003196:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003378 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800319a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80031b2:	e049      	b.n	8003248 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031be:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003380 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80031c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80031d4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8003378 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80031d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80031f0:	e02a      	b.n	8003248 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80031f2:	4b5f      	ldr	r3, [pc, #380]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	08db      	lsrs	r3, r3, #3
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	4a5d      	ldr	r2, [pc, #372]	; (8003374 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80031fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003202:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003226:	ed97 6a04 	vldr	s12, [r7, #16]
 800322a:	eddf 5a53 	vldr	s11, [pc, #332]	; 8003378 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800322e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800323a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003242:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003246:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003248:	4b49      	ldr	r3, [pc, #292]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003254:	d121      	bne.n	800329a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003256:	4b46      	ldr	r3, [pc, #280]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d017      	beq.n	8003292 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003262:	4b43      	ldr	r3, [pc, #268]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	0a5b      	lsrs	r3, r3, #9
 8003268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003278:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800327c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003288:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e006      	b.n	80032a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e002      	b.n	80032a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ac:	d121      	bne.n	80032f2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80032ae:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d017      	beq.n	80032ea <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80032ba:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80032cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032d0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80032d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80032d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	e006      	b.n	80032f8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	e002      	b.n	80032f8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003304:	d121      	bne.n	800334a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003306:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d017      	beq.n	8003342 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003316:	0e1b      	lsrs	r3, r3, #24
 8003318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003328:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800332c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003338:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003340:	e010      	b.n	8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	609a      	str	r2, [r3, #8]
}
 8003348:	e00c      	b.n	8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	e008      	b.n	8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	bf00      	nop
 8003366:	372c      	adds	r7, #44	; 0x2c
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	44020c00 	.word	0x44020c00
 8003374:	03d09000 	.word	0x03d09000
 8003378:	46000000 	.word	0x46000000
 800337c:	4a742400 	.word	0x4a742400
 8003380:	4bb71b00 	.word	0x4bb71b00

08003384 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003384:	b480      	push	{r7}
 8003386:	b08b      	sub	sp, #44	; 0x2c
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800338c:	4bad      	ldr	r3, [pc, #692]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003394:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003396:	4bab      	ldr	r3, [pc, #684]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80033a0:	4ba8      	ldr	r3, [pc, #672]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033aa:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80033ac:	4ba5      	ldr	r3, [pc, #660]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80033b6:	4ba3      	ldr	r3, [pc, #652]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	08db      	lsrs	r3, r3, #3
 80033bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8126 	beq.w	8003626 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d053      	beq.n	8003488 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d86f      	bhi.n	80034c6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d003      	beq.n	80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d02b      	beq.n	800344a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80033f2:	e068      	b.n	80034c6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80033f4:	4b93      	ldr	r3, [pc, #588]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	08db      	lsrs	r3, r3, #3
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	4a92      	ldr	r2, [pc, #584]	; (8003648 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
 8003404:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003428:	ed97 6a04 	vldr	s12, [r7, #16]
 800342c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800364c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800343c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003444:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003448:	e068      	b.n	800351c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003454:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003466:	ed97 6a04 	vldr	s12, [r7, #16]
 800346a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800364c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800346e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800347a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003482:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003486:	e049      	b.n	800351c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003492:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003654 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	ee07 3a90 	vmov	s15, r3
 80034a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80034a8:	eddf 5a68 	vldr	s11, [pc, #416]	; 800364c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80034ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80034c4:	e02a      	b.n	800351c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80034c6:	4b5f      	ldr	r3, [pc, #380]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	08db      	lsrs	r3, r3, #3
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	4a5d      	ldr	r2, [pc, #372]	; (8003648 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80034d2:	fa22 f303 	lsr.w	r3, r2, r3
 80034d6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	ee07 3a90 	vmov	s15, r3
 80034e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fa:	ed97 6a04 	vldr	s12, [r7, #16]
 80034fe:	eddf 5a53 	vldr	s11, [pc, #332]	; 800364c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800350e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800351a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800351c:	4b49      	ldr	r3, [pc, #292]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003528:	d121      	bne.n	800356e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800352a:	4b46      	ldr	r3, [pc, #280]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d017      	beq.n	8003566 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003536:	4b43      	ldr	r3, [pc, #268]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	0a5b      	lsrs	r3, r3, #9
 800353c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800354c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003550:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800355c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e006      	b.n	8003574 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e002      	b.n	8003574 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003574:	4b33      	ldr	r3, [pc, #204]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800357c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003580:	d121      	bne.n	80035c6 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003582:	4b30      	ldr	r3, [pc, #192]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d017      	beq.n	80035be <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800358e:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80035a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80035a8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80035ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035b4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	e006      	b.n	80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	605a      	str	r2, [r3, #4]
 80035c4:	e002      	b.n	80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80035cc:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d8:	d121      	bne.n	800361e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d017      	beq.n	8003616 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	0e1b      	lsrs	r3, r3, #24
 80035ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f0:	ee07 3a90 	vmov	s15, r3
 80035f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80035f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003600:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800360c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003614:	e010      	b.n	8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	e00c      	b.n	8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
}
 8003624:	e008      	b.n	8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	372c      	adds	r7, #44	; 0x2c
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	44020c00 	.word	0x44020c00
 8003648:	03d09000 	.word	0x03d09000
 800364c:	46000000 	.word	0x46000000
 8003650:	4a742400 	.word	0x4a742400
 8003654:	4bb71b00 	.word	0x4bb71b00

08003658 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af00      	add	r7, sp, #0
 800365e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003666:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800366a:	430b      	orrs	r3, r1
 800366c:	d14b      	bne.n	8003706 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800366e:	4bc4      	ldr	r3, [pc, #784]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800367a:	4bc1      	ldr	r3, [pc, #772]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800367c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b02      	cmp	r3, #2
 8003686:	d108      	bne.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368e:	d104      	bne.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	f000 bf14 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800369a:	4bb9      	ldr	r3, [pc, #740]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800369c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a8:	d108      	bne.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b0:	d104      	bne.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80036b2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b8:	f000 bf03 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80036bc:	4bb0      	ldr	r3, [pc, #704]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036c8:	d119      	bne.n	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d0:	d115      	bne.n	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80036d2:	4bab      	ldr	r3, [pc, #684]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80036da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036de:	d30a      	bcc.n	80036f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80036e0:	4ba7      	ldr	r3, [pc, #668]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ea:	4aa6      	ldr	r2, [pc, #664]	; (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80036f2:	f000 bee6 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80036fa:	f000 bee2 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003702:	f000 bede 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8003706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800370a:	f5a3 5180 	sub.w	r1, r3, #4096	; 0x1000
 800370e:	ea52 0301 	orrs.w	r3, r2, r1
 8003712:	f000 838e 	beq.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8003716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800371a:	2a01      	cmp	r2, #1
 800371c:	f573 5380 	sbcs.w	r3, r3, #4096	; 0x1000
 8003720:	f080 86cc 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003728:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 800372c:	ea52 0301 	orrs.w	r3, r2, r1
 8003730:	f000 82aa 	beq.w	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003738:	2a01      	cmp	r2, #1
 800373a:	f573 7300 	sbcs.w	r3, r3, #512	; 0x200
 800373e:	f080 86bd 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003746:	f1a3 0110 	sub.w	r1, r3, #16
 800374a:	ea52 0301 	orrs.w	r3, r2, r1
 800374e:	f000 8681 	beq.w	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8003752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003756:	2a01      	cmp	r2, #1
 8003758:	f173 0310 	sbcs.w	r3, r3, #16
 800375c:	f080 86ae 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003764:	1f19      	subs	r1, r3, #4
 8003766:	ea52 0301 	orrs.w	r3, r2, r1
 800376a:	f000 84b1 	beq.w	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800376e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003772:	2a01      	cmp	r2, #1
 8003774:	f173 0304 	sbcs.w	r3, r3, #4
 8003778:	f080 86a0 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800377c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003780:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 8003784:	430b      	orrs	r3, r1
 8003786:	f000 85aa 	beq.w	80042de <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800378a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800378e:	497e      	ldr	r1, [pc, #504]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003790:	428a      	cmp	r2, r1
 8003792:	f173 0300 	sbcs.w	r3, r3, #0
 8003796:	f080 8691 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800379a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800379e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80037a2:	430b      	orrs	r3, r1
 80037a4:	f000 8532 	beq.w	800420c <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80037a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ac:	4977      	ldr	r1, [pc, #476]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80037ae:	428a      	cmp	r2, r1
 80037b0:	f173 0300 	sbcs.w	r3, r3, #0
 80037b4:	f080 8682 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80037b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037bc:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80037c0:	430b      	orrs	r3, r1
 80037c2:	f000 84bc 	beq.w	800413e <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80037c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ca:	4971      	ldr	r1, [pc, #452]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80037cc:	428a      	cmp	r2, r1
 80037ce:	f173 0300 	sbcs.w	r3, r3, #0
 80037d2:	f080 8673 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80037d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037da:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80037de:	430b      	orrs	r3, r1
 80037e0:	f000 85f2 	beq.w	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80037e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037e8:	496a      	ldr	r1, [pc, #424]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80037ea:	428a      	cmp	r2, r1
 80037ec:	f173 0300 	sbcs.w	r3, r3, #0
 80037f0:	f080 8664 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80037f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037f8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80037fc:	430b      	orrs	r3, r1
 80037fe:	f000 81e5 	beq.w	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003806:	4964      	ldr	r1, [pc, #400]	; (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8003808:	428a      	cmp	r2, r1
 800380a:	f173 0300 	sbcs.w	r3, r3, #0
 800380e:	f080 8655 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003816:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800381a:	430b      	orrs	r3, r1
 800381c:	f000 83cc 	beq.w	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003824:	495d      	ldr	r1, [pc, #372]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003826:	428a      	cmp	r2, r1
 8003828:	f173 0300 	sbcs.w	r3, r3, #0
 800382c:	f080 8646 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003834:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8003838:	430b      	orrs	r3, r1
 800383a:	f000 8331 	beq.w	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800383e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003842:	4957      	ldr	r1, [pc, #348]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8003844:	428a      	cmp	r2, r1
 8003846:	f173 0300 	sbcs.w	r3, r3, #0
 800384a:	f080 8637 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800384e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003852:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8003856:	430b      	orrs	r3, r1
 8003858:	f000 82bb 	beq.w	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 800385c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003860:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8003864:	f173 0300 	sbcs.w	r3, r3, #0
 8003868:	f080 8628 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800386c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003870:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8003874:	430b      	orrs	r3, r1
 8003876:	f000 826d 	beq.w	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800387a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800387e:	f244 0101 	movw	r1, #16385	; 0x4001
 8003882:	428a      	cmp	r2, r1
 8003884:	f173 0300 	sbcs.w	r3, r3, #0
 8003888:	f080 8618 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800388c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003890:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003894:	430b      	orrs	r3, r1
 8003896:	f000 821e 	beq.w	8003cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800389a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800389e:	f242 0101 	movw	r1, #8193	; 0x2001
 80038a2:	428a      	cmp	r2, r1
 80038a4:	f173 0300 	sbcs.w	r3, r3, #0
 80038a8:	f080 8608 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80038ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80038b4:	430b      	orrs	r3, r1
 80038b6:	f000 8137 	beq.w	8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80038ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038be:	f241 0101 	movw	r1, #4097	; 0x1001
 80038c2:	428a      	cmp	r2, r1
 80038c4:	f173 0300 	sbcs.w	r3, r3, #0
 80038c8:	f080 85f8 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80038cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038d0:	1f11      	subs	r1, r2, #4
 80038d2:	430b      	orrs	r3, r1
 80038d4:	f000 80d2 	beq.w	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80038d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038dc:	2a05      	cmp	r2, #5
 80038de:	f173 0300 	sbcs.w	r3, r3, #0
 80038e2:	f080 85eb 	bcs.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80038e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ea:	1e51      	subs	r1, r2, #1
 80038ec:	430b      	orrs	r3, r1
 80038ee:	d006      	beq.n	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80038f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038f4:	1e91      	subs	r1, r2, #2
 80038f6:	430b      	orrs	r3, r1
 80038f8:	d06c      	beq.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80038fa:	f000 bddf 	b.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003910:	f7fe fd7e 	bl	8002410 <HAL_RCC_GetPCLK2Freq>
 8003914:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003916:	f000 bdd4 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800391a:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003926:	d10a      	bne.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	2b01      	cmp	r3, #1
 800392c:	d107      	bne.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fd26 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393c:	e048      	b.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d10c      	bne.n	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	2b03      	cmp	r3, #3
 800394e:	d109      	bne.n	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	08db      	lsrs	r3, r3, #3
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003962:	e035      	b.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003970:	d11c      	bne.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	2b04      	cmp	r3, #4
 8003976:	d119      	bne.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397c:	e028      	b.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800397e:	bf00      	nop
 8003980:	44020c00 	.word	0x44020c00
 8003984:	016e3600 	.word	0x016e3600
 8003988:	20000001 	.word	0x20000001
 800398c:	10000001 	.word	0x10000001
 8003990:	08000001 	.word	0x08000001
 8003994:	04000001 	.word	0x04000001
 8003998:	00200001 	.word	0x00200001
 800399c:	00040001 	.word	0x00040001
 80039a0:	00020001 	.word	0x00020001
 80039a4:	03d09000 	.word	0x03d09000
 80039a8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80039ac:	4b9f      	ldr	r3, [pc, #636]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80039ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d106      	bne.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	2b05      	cmp	r3, #5
 80039be:	d103      	bne.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80039c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c6:	e003      	b.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039cc:	f000 bd79 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80039d0:	f000 bd77 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80039d4:	4b95      	ldr	r3, [pc, #596]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80039d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039de:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80039e6:	f7fe fcfd 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 80039ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80039ec:	f000 bd69 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80039f0:	4b8e      	ldr	r3, [pc, #568]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fc:	d10a      	bne.n	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d107      	bne.n	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a04:	f107 030c 	add.w	r3, r7, #12
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fcbb 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a12:	e031      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003a14:	4b85      	ldr	r3, [pc, #532]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	2b18      	cmp	r3, #24
 8003a24:	d109      	bne.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a26:	4b81      	ldr	r3, [pc, #516]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	08db      	lsrs	r3, r3, #3
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	4a7f      	ldr	r2, [pc, #508]	; (8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a38:	e01e      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8003a3a:	4b7c      	ldr	r3, [pc, #496]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a46:	d105      	bne.n	8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d102      	bne.n	8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8003a4e:	4b79      	ldr	r3, [pc, #484]	; (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a52:	e011      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003a54:	4b75      	ldr	r3, [pc, #468]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d106      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	2b28      	cmp	r3, #40	; 0x28
 8003a66:	d103      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8003a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a74:	f000 bd25 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003a78:	f000 bd23 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003a7c:	4b6b      	ldr	r3, [pc, #428]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a82:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a8e:	f7fe fca9 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8003a92:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003a94:	f000 bd15 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003a98:	4b64      	ldr	r3, [pc, #400]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa4:	d10a      	bne.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d107      	bne.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fc67 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aba:	e033      	b.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003abc:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d10c      	bne.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	2bc0      	cmp	r3, #192	; 0xc0
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ace:	4b57      	ldr	r3, [pc, #348]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	08db      	lsrs	r3, r3, #3
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	4a55      	ldr	r2, [pc, #340]	; (8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003ada:	fa22 f303 	lsr.w	r3, r2, r3
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae0:	e020      	b.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003ae2:	4b52      	ldr	r3, [pc, #328]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aee:	d106      	bne.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	d102      	bne.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8003af8:	4b4e      	ldr	r3, [pc, #312]	; (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afc:	e012      	b.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003afe:	4b4b      	ldr	r3, [pc, #300]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b12:	d103      	bne.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8003b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1a:	e003      	b.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b20:	f000 bccf 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003b24:	f000 bccd 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003b28:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b2e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003b3a:	f7fe fc7f 	bl	800243c <HAL_RCC_GetPCLK3Freq>
 8003b3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003b40:	f000 bcbf 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b4a:	d108      	bne.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b4c:	f107 030c 	add.w	r3, r7, #12
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fc17 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b5a:	f000 bcb2 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003b5e:	4b33      	ldr	r3, [pc, #204]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d10d      	bne.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b70:	d109      	bne.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b72:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	08db      	lsrs	r3, r3, #3
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	4a2c      	ldr	r2, [pc, #176]	; (8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b84:	e020      	b.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8003b86:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b9a:	d102      	bne.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba0:	e012      	b.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003bb6:	d103      	bne.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8003bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbe:	e003      	b.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bc4:	f000 bc7d 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003bc8:	f000 bc7b 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8003bcc:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d104      	bne.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8003bde:	f7fe fbe5 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 8003be2:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8003be4:	f000 bc6d 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d104      	bne.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003bee:	f7fe fab1 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8003bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8003bf4:	f000 bc65 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d108      	bne.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fbbe 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c0c:	f000 bc59 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c1c:	d10e      	bne.n	8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d10b      	bne.n	8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c28:	e02c      	b.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8003c2a:	bf00      	nop
 8003c2c:	44020c00 	.word	0x44020c00
 8003c30:	03d09000 	.word	0x03d09000
 8003c34:	003d0900 	.word	0x003d0900
 8003c38:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8003c3c:	4b95      	ldr	r3, [pc, #596]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d10c      	bne.n	8003c62 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c4e:	4b91      	ldr	r3, [pc, #580]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	08db      	lsrs	r3, r3, #3
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	4a8f      	ldr	r2, [pc, #572]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c60:	e010      	b.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8003c62:	4b8c      	ldr	r3, [pc, #560]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d102      	bne.n	8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8003c76:	4b89      	ldr	r3, [pc, #548]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7a:	e003      	b.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c80:	f000 bc1f 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003c84:	f000 bc1d 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8003c88:	4b82      	ldr	r3, [pc, #520]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8003c94:	4b7f      	ldr	r3, [pc, #508]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d106      	bne.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8003ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d103      	bne.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8003ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cae:	e011      	b.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8003cb0:	4b78      	ldr	r3, [pc, #480]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cbe:	d106      	bne.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d103      	bne.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8003cc6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8003cd2:	e3f6      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003cd4:	e3f5      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003cd6:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003cd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d103      	bne.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7fe fb7c 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8003cec:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003cee:	e3e8      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fb41 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d06:	e3dc      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003d08:	4b62      	ldr	r3, [pc, #392]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1a:	d109      	bne.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d1c:	4b5d      	ldr	r3, [pc, #372]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	08db      	lsrs	r3, r3, #3
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	4a5c      	ldr	r2, [pc, #368]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2e:	e010      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8003d30:	4b58      	ldr	r3, [pc, #352]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3c:	d106      	bne.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d44:	d102      	bne.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8003d46:	4b55      	ldr	r3, [pc, #340]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4a:	e002      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d50:	e3b7      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003d52:	e3b6      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003d54:	4b4f      	ldr	r3, [pc, #316]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d5a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d66:	f7fe fb3d 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8003d6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d6c:	e3a9      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d74:	d107      	bne.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d76:	f107 030c 	add.w	r3, r7, #12
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fb02 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d84:	e39d      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003d86:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d10d      	bne.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d98:	d109      	bne.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	4a3c      	ldr	r2, [pc, #240]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003da6:	fa22 f303 	lsr.w	r3, r2, r3
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dac:	e010      	b.n	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8003dae:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dba:	d106      	bne.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dc2:	d102      	bne.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8003dc4:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc8:	e002      	b.n	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dce:	e378      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003dd0:	e377      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8003dd2:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003dd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003dd8:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d103      	bne.n	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003de4:	f7fe fafe 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8003de8:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003dea:	e36a      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df2:	d107      	bne.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003df4:	f107 030c 	add.w	r3, r7, #12
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fac3 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e02:	e35e      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8003e04:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d10d      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e16:	d109      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e18:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	08db      	lsrs	r3, r3, #3
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e2a:	e34a      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e30:	e347      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8003e32:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e38:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d103      	bne.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003e44:	f7fe fafa 	bl	800243c <HAL_RCC_GetPCLK3Freq>
 8003e48:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003e4a:	e33a      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e52:	d107      	bne.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e54:	f107 030c 	add.w	r3, r7, #12
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fa93 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e62:	e32e      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e76:	d109      	bne.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	08db      	lsrs	r3, r3, #3
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e8a:	e31a      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e90:	e317      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003e92:	bf00      	nop
 8003e94:	44020c00 	.word	0x44020c00
 8003e98:	03d09000 	.word	0x03d09000
 8003e9c:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003ea0:	4b9b      	ldr	r3, [pc, #620]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003ea2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003eb2:	d044      	beq.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003eba:	d879      	bhi.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec2:	d02d      	beq.n	8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d871      	bhi.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed2:	d017      	beq.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eda:	d869      	bhi.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee8:	d004      	beq.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8003eea:	e061      	b.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8003eec:	f7fe faa6 	bl	800243c <HAL_RCC_GetPCLK3Freq>
 8003ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 8003ef2:	e060      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ef4:	f107 030c 	add.w	r3, r7, #12
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fa43 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8003f02:	e058      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f04:	4b82      	ldr	r3, [pc, #520]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d103      	bne.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8003f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003f18:	e04d      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8003f1e:	e04a      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8003f20:	4b7b      	ldr	r3, [pc, #492]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f2e:	d103      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8003f30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003f36:	e03e      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8003f3c:	e03b      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003f3e:	4b74      	ldr	r3, [pc, #464]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f44:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003f4a:	4b71      	ldr	r3, [pc, #452]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f5c:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	08db      	lsrs	r3, r3, #3
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	4a6b      	ldr	r2, [pc, #428]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6e:	e01e      	b.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f70:	4b67      	ldr	r3, [pc, #412]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7c:	d106      	bne.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f84:	d102      	bne.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003f86:	4b64      	ldr	r3, [pc, #400]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f8a:	e010      	b.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f8c:	4b60      	ldr	r3, [pc, #384]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fa0:	d102      	bne.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003fa2:	4b5e      	ldr	r3, [pc, #376]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa6:	e002      	b.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8003fae:	e002      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8003fb4:	bf00      	nop
          }
        }
        break;
 8003fb6:	e284      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003fb8:	4b55      	ldr	r3, [pc, #340]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003fba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003fbe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003fca:	d044      	beq.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003fd2:	d879      	bhi.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fda:	d02d      	beq.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe2:	d871      	bhi.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fea:	d017      	beq.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ff2:	d869      	bhi.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d004      	beq.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004002:	e061      	b.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe f9ee 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8004008:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 800400a:	e060      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800400c:	f107 030c 	add.w	r3, r7, #12
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff f9b7 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800401a:	e058      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800401c:	4b3c      	ldr	r3, [pc, #240]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800401e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d103      	bne.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 800402a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004030:	e04d      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004036:	e04a      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004038:	4b35      	ldr	r3, [pc, #212]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800403a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800403e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004046:	d103      	bne.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004048:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800404e:	e03e      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004054:	e03b      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004056:	4b2e      	ldr	r3, [pc, #184]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800405c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004060:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004062:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d10c      	bne.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004074:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	08db      	lsrs	r3, r3, #3
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	4a25      	ldr	r2, [pc, #148]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004086:	e01e      	b.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004088:	4b21      	ldr	r3, [pc, #132]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004094:	d106      	bne.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409c:	d102      	bne.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800409e:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a2:	e010      	b.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b0:	d106      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040b8:	d102      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80040ba:	4b18      	ldr	r3, [pc, #96]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040be:	e002      	b.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 80040c4:	e003      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80040c6:	e002      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80040cc:	bf00      	nop
          }
        }
        break;
 80040ce:	e1f8      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80040d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e8:	d105      	bne.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80040f4:	e1e5      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fc:	d110      	bne.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80040fe:	f107 0318 	add.w	r3, r7, #24
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe ffd4 	bl	80030b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800410c:	e1d9      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800410e:	bf00      	nop
 8004110:	44020c00 	.word	0x44020c00
 8004114:	03d09000 	.word	0x03d09000
 8004118:	003d0900 	.word	0x003d0900
 800411c:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004126:	d107      	bne.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff f929 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004136:	e1c4      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800413c:	e1c1      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800413e:	4b9d      	ldr	r3, [pc, #628]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	62bb      	str	r3, [r7, #40]	; 0x28
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	2b04      	cmp	r3, #4
 800414e:	d859      	bhi.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004150:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	0800416d 	.word	0x0800416d
 800415c:	0800417d 	.word	0x0800417d
 8004160:	08004205 	.word	0x08004205
 8004164:	0800418d 	.word	0x0800418d
 8004168:	08004193 	.word	0x08004193
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800416c:	f107 0318 	add.w	r3, r7, #24
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe ff9d 	bl	80030b0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800417a:	e046      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800417c:	f107 030c 	add.w	r3, r7, #12
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff f8ff 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800418a:	e03e      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800418c:	4b8a      	ldr	r3, [pc, #552]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004190:	e03b      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004192:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004198:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800419c:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800419e:	4b85      	ldr	r3, [pc, #532]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041b0:	4b80      	ldr	r3, [pc, #512]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	08db      	lsrs	r3, r3, #3
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	4a80      	ldr	r2, [pc, #512]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c2:	e01e      	b.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80041c4:	4b7b      	ldr	r3, [pc, #492]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d0:	d106      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d102      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80041da:	4b79      	ldr	r3, [pc, #484]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041de:	e010      	b.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80041e0:	4b74      	ldr	r3, [pc, #464]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ec:	d106      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041f4:	d102      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80041f6:	4b73      	ldr	r3, [pc, #460]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041fa:	e002      	b.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004200:	e003      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8004202:	e002      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004208:	bf00      	nop
          }
        }
        break;
 800420a:	e15a      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800420c:	4b69      	ldr	r3, [pc, #420]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800420e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
 8004218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421a:	2b20      	cmp	r3, #32
 800421c:	d022      	beq.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	2b20      	cmp	r3, #32
 8004222:	d858      	bhi.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	2b18      	cmp	r3, #24
 8004228:	d019      	beq.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	2b18      	cmp	r3, #24
 800422e:	d852      	bhi.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	2b08      	cmp	r3, #8
 800423a:	d008      	beq.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800423c:	e04b      	b.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800423e:	f107 0318 	add.w	r3, r7, #24
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe ff34 	bl	80030b0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800424c:	e046      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800424e:	f107 030c 	add.w	r3, r7, #12
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff f896 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800425c:	e03e      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800425e:	4b56      	ldr	r3, [pc, #344]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004262:	e03b      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800426a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800426e:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004270:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	d10c      	bne.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004282:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	08db      	lsrs	r3, r3, #3
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	4a4b      	ldr	r2, [pc, #300]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004294:	e01e      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a2:	d106      	bne.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d102      	bne.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80042ac:	4b44      	ldr	r3, [pc, #272]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b0:	e010      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80042b2:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042be:	d106      	bne.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042c6:	d102      	bne.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80042c8:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042cc:	e002      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 80042d2:	e003      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80042d4:	e002      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80042da:	bf00      	nop
          }
        }
        break;
 80042dc:	e0f1      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80042de:	4b35      	ldr	r3, [pc, #212]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80042e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f0:	d023      	beq.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f8:	d858      	bhi.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	2bc0      	cmp	r3, #192	; 0xc0
 80042fe:	d019      	beq.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	2bc0      	cmp	r3, #192	; 0xc0
 8004304:	d852      	bhi.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	2b40      	cmp	r3, #64	; 0x40
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8004312:	e04b      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004314:	f107 0318 	add.w	r3, r7, #24
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe fec9 	bl	80030b0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004322:	e046      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004324:	f107 030c 	add.w	r3, r7, #12
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff f82b 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004332:	e03e      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004334:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004338:	e03b      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800433c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004340:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004344:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004346:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d10c      	bne.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004358:	4b16      	ldr	r3, [pc, #88]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436a:	e01e      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d106      	bne.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d102      	bne.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	e010      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004394:	d106      	bne.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800439c:	d102      	bne.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a2:	e002      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80043aa:	e002      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80043b0:	bf00      	nop
          }
        }
        break;
 80043b2:	e086      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80043b4:	44020c00 	.word	0x44020c00
 80043b8:	00bb8000 	.word	0x00bb8000
 80043bc:	03d09000 	.word	0x03d09000
 80043c0:	003d0900 	.word	0x003d0900
 80043c4:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80043c8:	4b40      	ldr	r3, [pc, #256]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80043ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80043d4:	4b3d      	ldr	r3, [pc, #244]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e0:	d105      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d102      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 80043e8:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ec:	e031      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80043ee:	4b37      	ldr	r3, [pc, #220]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043fa:	d10a      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d107      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004402:	f107 0318 	add.w	r3, r7, #24
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fe52 	bl	80030b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004410:	e01f      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8004412:	4b2e      	ldr	r3, [pc, #184]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	d106      	bne.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	2b20      	cmp	r3, #32
 8004424:	d103      	bne.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442c:	e011      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800442e:	4b27      	ldr	r3, [pc, #156]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443c:	d106      	bne.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	2b30      	cmp	r3, #48	; 0x30
 8004442:	d103      	bne.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004444:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800444a:	e002      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8004450:	e037      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004452:	e036      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004454:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004456:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800445a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	2b10      	cmp	r3, #16
 8004464:	d107      	bne.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004466:	f107 0318 	add.w	r3, r7, #24
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fe20 	bl	80030b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8004474:	e025      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8004476:	4b15      	ldr	r3, [pc, #84]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800447e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004482:	d10a      	bne.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	2b20      	cmp	r3, #32
 8004488:	d107      	bne.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe ff78 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004498:	e00f      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a6:	d105      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	2b30      	cmp	r3, #48	; 0x30
 80044ac:	d102      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b2:	e002      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        break;
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80044ba:	e002      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044c0:	bf00      	nop
    }
  }

  return (frequency);
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3730      	adds	r7, #48	; 0x30
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	44020c00 	.word	0x44020c00
 80044d0:	02dc6c00 	.word	0x02dc6c00

080044d4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80044dc:	4b48      	ldr	r3, [pc, #288]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a47      	ldr	r2, [pc, #284]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 80044e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044e8:	f7fc fcdc 	bl	8000ea4 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044ee:	e008      	b.n	8004502 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044f0:	f7fc fcd8 	bl	8000ea4 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e07a      	b.n	80045f8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004502:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800450e:	4b3c      	ldr	r3, [pc, #240]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6811      	ldr	r1, [r2, #0]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6852      	ldr	r2, [r2, #4]
 8004522:	0212      	lsls	r2, r2, #8
 8004524:	430a      	orrs	r2, r1
 8004526:	4936      	ldr	r1, [pc, #216]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	3b01      	subs	r3, #1
 8004532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	3b01      	subs	r3, #1
 800453c:	025b      	lsls	r3, r3, #9
 800453e:	b29b      	uxth	r3, r3
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	3b01      	subs	r3, #1
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	3b01      	subs	r3, #1
 8004556:	061b      	lsls	r3, r3, #24
 8004558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800455c:	4928      	ldr	r1, [pc, #160]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004562:	4b27      	ldr	r3, [pc, #156]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	f023 020c 	bic.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	4924      	ldr	r1, [pc, #144]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004574:	4b22      	ldr	r3, [pc, #136]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	f023 0220 	bic.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	491f      	ldr	r1, [pc, #124]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004586:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 8004588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	491c      	ldr	r1, [pc, #112]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 8004590:	4313      	orrs	r3, r2
 8004592:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004594:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	4a19      	ldr	r2, [pc, #100]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 800459a:	f023 0310 	bic.w	r3, r3, #16
 800459e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6a12      	ldr	r2, [r2, #32]
 80045b0:	00d2      	lsls	r2, r2, #3
 80045b2:	4913      	ldr	r1, [pc, #76]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80045b8:	4b11      	ldr	r3, [pc, #68]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4a10      	ldr	r2, [pc, #64]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 80045be:	f043 0310 	orr.w	r3, r3, #16
 80045c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0d      	ldr	r2, [pc, #52]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 80045ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045d0:	f7fc fc68 	bl	8000ea4 <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045d6:	e008      	b.n	80045ea <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045d8:	f7fc fc64 	bl	8000ea4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e006      	b.n	80045f8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045ea:	4b05      	ldr	r3, [pc, #20]	; (8004600 <RCCEx_PLL2_Config+0x12c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0

}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	44020c00 	.word	0x44020c00

08004604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e042      	b.n	800469c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fc f9e3 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2224      	movs	r2, #36	; 0x24
 8004632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f9a6 	bl	80049a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f825 	bl	80046a4 <UART_SetConfig>
 800465a:	4603      	mov	r3, r0
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e01b      	b.n	800469c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa25 	bl	8004ae4 <UART_CheckIdleState>
 800469a:	4603      	mov	r3, r0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a8:	b094      	sub	sp, #80	; 0x50
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	431a      	orrs	r2, r3
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	498a      	ldr	r1, [pc, #552]	; (80048fc <UART_SetConfig+0x258>)
 80046d4:	4019      	ands	r1, r3
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046dc:	430b      	orrs	r3, r1
 80046de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	68d9      	ldr	r1, [r3, #12]
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	ea40 0301 	orr.w	r3, r0, r1
 80046f6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b7f      	ldr	r3, [pc, #508]	; (8004900 <UART_SetConfig+0x25c>)
 8004704:	429a      	cmp	r2, r3
 8004706:	d004      	beq.n	8004712 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	6a1a      	ldr	r2, [r3, #32]
 800470c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470e:	4313      	orrs	r3, r2
 8004710:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800471c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004726:	430b      	orrs	r3, r1
 8004728:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	f023 000f 	bic.w	r0, r3, #15
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	ea40 0301 	orr.w	r3, r0, r1
 8004740:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b6f      	ldr	r3, [pc, #444]	; (8004904 <UART_SetConfig+0x260>)
 8004748:	429a      	cmp	r2, r3
 800474a:	d102      	bne.n	8004752 <UART_SetConfig+0xae>
 800474c:	2301      	movs	r3, #1
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004750:	e01a      	b.n	8004788 <UART_SetConfig+0xe4>
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b6c      	ldr	r3, [pc, #432]	; (8004908 <UART_SetConfig+0x264>)
 8004758:	429a      	cmp	r2, r3
 800475a:	d102      	bne.n	8004762 <UART_SetConfig+0xbe>
 800475c:	2302      	movs	r3, #2
 800475e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004760:	e012      	b.n	8004788 <UART_SetConfig+0xe4>
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b69      	ldr	r3, [pc, #420]	; (800490c <UART_SetConfig+0x268>)
 8004768:	429a      	cmp	r2, r3
 800476a:	d102      	bne.n	8004772 <UART_SetConfig+0xce>
 800476c:	2304      	movs	r3, #4
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004770:	e00a      	b.n	8004788 <UART_SetConfig+0xe4>
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b62      	ldr	r3, [pc, #392]	; (8004900 <UART_SetConfig+0x25c>)
 8004778:	429a      	cmp	r2, r3
 800477a:	d103      	bne.n	8004784 <UART_SetConfig+0xe0>
 800477c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004780:	64bb      	str	r3, [r7, #72]	; 0x48
 8004782:	e001      	b.n	8004788 <UART_SetConfig+0xe4>
 8004784:	2300      	movs	r3, #0
 8004786:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b5c      	ldr	r3, [pc, #368]	; (8004900 <UART_SetConfig+0x25c>)
 800478e:	429a      	cmp	r2, r3
 8004790:	d171      	bne.n	8004876 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004794:	2200      	movs	r2, #0
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	627a      	str	r2, [r7, #36]	; 0x24
 800479a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800479e:	f7fe ff5b 	bl	8003658 <HAL_RCCEx_GetPeriphCLKFreq>
 80047a2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80047a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80e2 	beq.w	8004970 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	4a57      	ldr	r2, [pc, #348]	; (8004910 <UART_SetConfig+0x26c>)
 80047b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047b6:	461a      	mov	r2, r3
 80047b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80047be:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	4413      	add	r3, r2
 80047ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d305      	bcc.n	80047dc <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047d8:	429a      	cmp	r2, r3
 80047da:	d903      	bls.n	80047e4 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80047e2:	e0c5      	b.n	8004970 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e6:	2200      	movs	r2, #0
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	61fa      	str	r2, [r7, #28]
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	4a47      	ldr	r2, [pc, #284]	; (8004910 <UART_SetConfig+0x26c>)
 80047f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2200      	movs	r2, #0
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	617a      	str	r2, [r7, #20]
 80047fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004802:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004806:	f7fb fd47 	bl	8000298 <__aeabi_uldivmod>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	020b      	lsls	r3, r1, #8
 800481c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004820:	0202      	lsls	r2, r0, #8
 8004822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004824:	6849      	ldr	r1, [r1, #4]
 8004826:	0849      	lsrs	r1, r1, #1
 8004828:	2000      	movs	r0, #0
 800482a:	460c      	mov	r4, r1
 800482c:	4605      	mov	r5, r0
 800482e:	eb12 0804 	adds.w	r8, r2, r4
 8004832:	eb43 0905 	adc.w	r9, r3, r5
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	60fa      	str	r2, [r7, #12]
 8004840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004844:	4640      	mov	r0, r8
 8004846:	4649      	mov	r1, r9
 8004848:	f7fb fd26 	bl	8000298 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4613      	mov	r3, r2
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485a:	d308      	bcc.n	800486e <UART_SetConfig+0x1ca>
 800485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004862:	d204      	bcs.n	800486e <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8004864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800486a:	60da      	str	r2, [r3, #12]
 800486c:	e080      	b.n	8004970 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004874:	e07c      	b.n	8004970 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487e:	d149      	bne.n	8004914 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004882:	2200      	movs	r2, #0
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800488c:	f7fe fee4 	bl	8003658 <HAL_RCCEx_GetPeriphCLKFreq>
 8004890:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d06b      	beq.n	8004970 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	4a1c      	ldr	r2, [pc, #112]	; (8004910 <UART_SetConfig+0x26c>)
 800489e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048aa:	005a      	lsls	r2, r3, #1
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	441a      	add	r2, r3
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c0:	2b0f      	cmp	r3, #15
 80048c2:	d916      	bls.n	80048f2 <UART_SetConfig+0x24e>
 80048c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ca:	d212      	bcs.n	80048f2 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f023 030f 	bic.w	r3, r3, #15
 80048d4:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80048e4:	4313      	orrs	r3, r2
 80048e6:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80048ee:	60da      	str	r2, [r3, #12]
 80048f0:	e03e      	b.n	8004970 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80048f8:	e03a      	b.n	8004970 <UART_SetConfig+0x2cc>
 80048fa:	bf00      	nop
 80048fc:	cfff69f3 	.word	0xcfff69f3
 8004900:	44002400 	.word	0x44002400
 8004904:	40013800 	.word	0x40013800
 8004908:	40004400 	.word	0x40004400
 800490c:	40004800 	.word	0x40004800
 8004910:	08005118 	.word	0x08005118
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004916:	2200      	movs	r2, #0
 8004918:	469a      	mov	sl, r3
 800491a:	4693      	mov	fp, r2
 800491c:	4650      	mov	r0, sl
 800491e:	4659      	mov	r1, fp
 8004920:	f7fe fe9a 	bl	8003658 <HAL_RCCEx_GetPeriphCLKFreq>
 8004924:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8004926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d021      	beq.n	8004970 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	4a1a      	ldr	r2, [pc, #104]	; (800499c <UART_SetConfig+0x2f8>)
 8004932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004936:	461a      	mov	r2, r3
 8004938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800493a:	fbb3 f2f2 	udiv	r2, r3, r2
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	441a      	add	r2, r3
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004952:	2b0f      	cmp	r3, #15
 8004954:	d909      	bls.n	800496a <UART_SetConfig+0x2c6>
 8004956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d205      	bcs.n	800496a <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800495e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004960:	b29a      	uxth	r2, r3
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	e002      	b.n	8004970 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	2201      	movs	r2, #1
 8004974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	2201      	movs	r2, #1
 800497c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	2200      	movs	r2, #0
 8004984:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2200      	movs	r2, #0
 800498a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800498c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004990:	4618      	mov	r0, r3
 8004992:	3750      	adds	r7, #80	; 0x50
 8004994:	46bd      	mov	sp, r7
 8004996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800499a:	bf00      	nop
 800499c:	08005118 	.word	0x08005118

080049a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01a      	beq.n	8004ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9e:	d10a      	bne.n	8004ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b098      	sub	sp, #96	; 0x60
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004af4:	f7fc f9d6 	bl	8000ea4 <HAL_GetTick>
 8004af8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d12f      	bne.n	8004b68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b10:	2200      	movs	r2, #0
 8004b12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f88e 	bl	8004c38 <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d022      	beq.n	8004b68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b36:	653b      	str	r3, [r7, #80]	; 0x50
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b40:	647b      	str	r3, [r7, #68]	; 0x44
 8004b42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e6      	bne.n	8004b22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e063      	b.n	8004c30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d149      	bne.n	8004c0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f857 	bl	8004c38 <UART_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d03c      	beq.n	8004c0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e6      	bne.n	8004b90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004be2:	61fa      	str	r2, [r7, #28]
 8004be4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	69b9      	ldr	r1, [r7, #24]
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	617b      	str	r3, [r7, #20]
   return(result);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e5      	bne.n	8004bc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e012      	b.n	8004c30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3758      	adds	r7, #88	; 0x58
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	4613      	mov	r3, r2
 8004c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c48:	e049      	b.n	8004cde <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d045      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c52:	f7fc f927 	bl	8000ea4 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d302      	bcc.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e048      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d031      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d110      	bne.n	8004caa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f838 	bl	8004d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e029      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb8:	d111      	bne.n	8004cde <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f81e 	bl	8004d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e00f      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d0a6      	beq.n	8004c4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b095      	sub	sp, #84	; 0x54
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3308      	adds	r3, #8
 8004d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e3      	bne.n	8004d40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d118      	bne.n	8004db2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f023 0310 	bic.w	r3, r3, #16
 8004d94:	647b      	str	r3, [r7, #68]	; 0x44
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6979      	ldr	r1, [r7, #20]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	613b      	str	r3, [r7, #16]
   return(result);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e6      	bne.n	8004d80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004dc6:	bf00      	nop
 8004dc8:	3754      	adds	r7, #84	; 0x54
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e027      	b.n	8004e38 <HAL_UARTEx_DisableFifoMode+0x66>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2224      	movs	r2, #36	; 0x24
 8004df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e02d      	b.n	8004eb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2224      	movs	r2, #36	; 0x24
 8004e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0201 	bic.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f84f 	bl	8004f3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e02d      	b.n	8004f34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2224      	movs	r2, #36	; 0x24
 8004ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f811 	bl	8004f3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d108      	bne.n	8004f5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f5c:	e031      	b.n	8004fc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f5e:	2308      	movs	r3, #8
 8004f60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f62:	2308      	movs	r3, #8
 8004f64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	0e5b      	lsrs	r3, r3, #25
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	0f5b      	lsrs	r3, r3, #29
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f86:	7bbb      	ldrb	r3, [r7, #14]
 8004f88:	7b3a      	ldrb	r2, [r7, #12]
 8004f8a:	4911      	ldr	r1, [pc, #68]	; (8004fd0 <UARTEx_SetNbDataToProcess+0x94>)
 8004f8c:	5c8a      	ldrb	r2, [r1, r2]
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f92:	7b3a      	ldrb	r2, [r7, #12]
 8004f94:	490f      	ldr	r1, [pc, #60]	; (8004fd4 <UARTEx_SetNbDataToProcess+0x98>)
 8004f96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f98:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	7b7a      	ldrb	r2, [r7, #13]
 8004fa8:	4909      	ldr	r1, [pc, #36]	; (8004fd0 <UARTEx_SetNbDataToProcess+0x94>)
 8004faa:	5c8a      	ldrb	r2, [r1, r2]
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fb0:	7b7a      	ldrb	r2, [r7, #13]
 8004fb2:	4908      	ldr	r1, [pc, #32]	; (8004fd4 <UARTEx_SetNbDataToProcess+0x98>)
 8004fb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	08005130 	.word	0x08005130
 8004fd4:	08005138 	.word	0x08005138

08004fd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fe0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004fe4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	401a      	ands	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	641a      	str	r2, [r3, #64]	; 0x40
 8005020:	e00b      	b.n	800503a <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d106      	bne.n	8005036 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	641a      	str	r2, [r3, #64]	; 0x40
 8005034:	e001      	b.n	800503a <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8005048:	b084      	sub	sp, #16
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	f107 001c 	add.w	r0, r7, #28
 8005056:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	f023 0201 	bic.w	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800506c:	2100      	movs	r1, #0
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff ffc7 	bl	8005002 <USB_SetCurrentMode>
 8005074:	4603      	mov	r3, r0
 8005076:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800507e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800508a:	b004      	add	sp, #16
 800508c:	4770      	bx	lr

0800508e <memset>:
 800508e:	4402      	add	r2, r0
 8005090:	4603      	mov	r3, r0
 8005092:	4293      	cmp	r3, r2
 8005094:	d100      	bne.n	8005098 <memset+0xa>
 8005096:	4770      	bx	lr
 8005098:	f803 1b01 	strb.w	r1, [r3], #1
 800509c:	e7f9      	b.n	8005092 <memset+0x4>
	...

080050a0 <__libc_init_array>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	4d0d      	ldr	r5, [pc, #52]	; (80050d8 <__libc_init_array+0x38>)
 80050a4:	2600      	movs	r6, #0
 80050a6:	4c0d      	ldr	r4, [pc, #52]	; (80050dc <__libc_init_array+0x3c>)
 80050a8:	1b64      	subs	r4, r4, r5
 80050aa:	10a4      	asrs	r4, r4, #2
 80050ac:	42a6      	cmp	r6, r4
 80050ae:	d109      	bne.n	80050c4 <__libc_init_array+0x24>
 80050b0:	4d0b      	ldr	r5, [pc, #44]	; (80050e0 <__libc_init_array+0x40>)
 80050b2:	2600      	movs	r6, #0
 80050b4:	4c0b      	ldr	r4, [pc, #44]	; (80050e4 <__libc_init_array+0x44>)
 80050b6:	f000 f817 	bl	80050e8 <_init>
 80050ba:	1b64      	subs	r4, r4, r5
 80050bc:	10a4      	asrs	r4, r4, #2
 80050be:	42a6      	cmp	r6, r4
 80050c0:	d105      	bne.n	80050ce <__libc_init_array+0x2e>
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
 80050c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c8:	3601      	adds	r6, #1
 80050ca:	4798      	blx	r3
 80050cc:	e7ee      	b.n	80050ac <__libc_init_array+0xc>
 80050ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d2:	3601      	adds	r6, #1
 80050d4:	4798      	blx	r3
 80050d6:	e7f2      	b.n	80050be <__libc_init_array+0x1e>
 80050d8:	08005148 	.word	0x08005148
 80050dc:	08005148 	.word	0x08005148
 80050e0:	08005148 	.word	0x08005148
 80050e4:	0800514c 	.word	0x0800514c

080050e8 <_init>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr

080050f4 <_fini>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	bf00      	nop
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr
