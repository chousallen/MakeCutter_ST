
servo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7dc  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ba28  0800ba28  0001ba28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba68  0800ba68  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba68  0800ba68  0001ba68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba70  0800ba70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba70  0800ba70  0001ba70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba74  0800ba74  0001ba74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ba78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000010  0800ba88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  0800ba88  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020245  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ca  00000000  00000000  000402ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001870  00000000  00000000  00043698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001305  00000000  00000000  00044f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003826b  00000000  00000000  0004620d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a36  00000000  00000000  0007e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016f776  00000000  00000000  0009eeae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b40  00000000  00000000  0020e624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00215164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000010 	.word	0x20000010
 8000268:	00000000 	.word	0x00000000
 800026c:	0800ba10 	.word	0x0800ba10

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000014 	.word	0x20000014
 8000288:	0800ba10 	.word	0x0800ba10

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d0:	68fb      	ldr	r3, [r7, #12]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	44020c00 	.word	0x44020c00

080005e4 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005f2:	4909      	ldr	r1, [pc, #36]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000608:	68fb      	ldr	r3, [r7, #12]
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	44020c00 	.word	0x44020c00

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 ff92 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f838 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fabe 	bl	8000ba8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800062c:	f000 f8a4 	bl	8000778 <MX_ADC1_Init>
  MX_ETH_Init();
 8000630:	f000 f906 	bl	8000840 <MX_ETH_Init>
  MX_ICACHE_Init();
 8000634:	f000 f950 	bl	80008d8 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 8000638:	f000 f95a 	bl	80008f0 <MX_LPUART1_UART_Init>
  MX_UCPD1_Init();
 800063c:	f000 fa5e 	bl	8000afc <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000640:	f000 fa80 	bl	8000b44 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000644:	f000 f99e 	bl	8000984 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SERVO_INIT(&htim1, cycle);
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <main+0x64>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <main+0x68>)
 8000650:	f000 fb2b 	bl	8000caa <SERVO_INIT>
  Servo_Start(&servo1, TIM_CHANNEL_1);
 8000654:	2100      	movs	r1, #0
 8000656:	480c      	ldr	r0, [pc, #48]	; (8000688 <main+0x6c>)
 8000658:	f000 fb66 	bl	8000d28 <Servo_Start>
  Servo_Start(&servo2, TIM_CHANNEL_2);
 800065c:	2104      	movs	r1, #4
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <main+0x70>)
 8000660:	f000 fb62 	bl	8000d28 <Servo_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Servo_Write(&servo1, pwm1);
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <main+0x74>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	4807      	ldr	r0, [pc, #28]	; (8000688 <main+0x6c>)
 800066c:	f000 fb72 	bl	8000d54 <Servo_Write>
	  Servo_Write(&servo2, pwm2);
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <main+0x78>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <main+0x70>)
 8000678:	f000 fb6c 	bl	8000d54 <Servo_Write>
	  Servo_Write(&servo1, pwm1);
 800067c:	e7f2      	b.n	8000664 <main+0x48>
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000
 8000684:	200002d0 	.word	0x200002d0
 8000688:	20000628 	.word	0x20000628
 800068c:	20000630 	.word	0x20000630
 8000690:	20000624 	.word	0x20000624
 8000694:	20000626 	.word	0x20000626

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b09c      	sub	sp, #112	; 0x70
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2250      	movs	r2, #80	; 0x50
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f00b f986 	bl	800b9b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <SystemClock_Config+0xdc>)
 80006c0:	691b      	ldr	r3, [r3, #16]
 80006c2:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <SystemClock_Config+0xdc>)
 80006c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006c8:	6113      	str	r3, [r2, #16]
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <SystemClock_Config+0xdc>)
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d6:	bf00      	nop
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <SystemClock_Config+0xdc>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	2b08      	cmp	r3, #8
 80006e2:	d1f9      	bne.n	80006d8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006e4:	2323      	movs	r3, #35	; 0x23
 80006e6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 80006e8:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	2301      	movs	r3, #1
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2340      	movs	r3, #64	; 0x40
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000704:	2303      	movs	r3, #3
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800070c:	2310      	movs	r3, #16
 800070e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800071c:	230c      	movs	r3, #12
 800071e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000720:	2300      	movs	r3, #0
 8000722:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fe67 	bl	8003400 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000738:	f000 fab2 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	231f      	movs	r3, #31
 800073e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2303      	movs	r3, #3
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2103      	movs	r1, #3
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fa88 	bl	8003c70 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000766:	f000 fa9b 	bl	8000ca0 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3770      	adds	r7, #112	; 0x70
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	44020800 	.word	0x44020800

08000778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2220      	movs	r2, #32
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f00b f917 	bl	800b9b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_ADC1_Init+0xbc>)
 800078c:	4a2a      	ldr	r2, [pc, #168]	; (8000838 <MX_ADC1_Init+0xc0>)
 800078e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_ADC1_Init+0xbc>)
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <MX_ADC1_Init+0xbc>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_ADC1_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007bc:	2201      	movs	r2, #1
 80007be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f0:	4810      	ldr	r0, [pc, #64]	; (8000834 <MX_ADC1_Init+0xbc>)
 80007f2:	f001 f937 	bl	8001a64 <HAL_ADC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80007fc:	f000 fa50 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_ADC1_Init+0xc4>)
 8000802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000804:	2306      	movs	r3, #6
 8000806:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800080c:	237f      	movs	r3, #127	; 0x7f
 800080e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000810:	2304      	movs	r3, #4
 8000812:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_ADC1_Init+0xbc>)
 800081e:	f001 fa75 	bl	8001d0c <HAL_ADC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000828:	f000 fa3a 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000124 	.word	0x20000124
 8000838:	42028000 	.word	0x42028000
 800083c:	4b840000 	.word	0x4b840000

08000840 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_ETH_Init+0x80>)
 8000846:	4a1f      	ldr	r2, [pc, #124]	; (80008c4 <MX_ETH_Init+0x84>)
 8000848:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_ETH_Init+0x88>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_ETH_Init+0x88>)
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_ETH_Init+0x88>)
 8000858:	22e1      	movs	r2, #225	; 0xe1
 800085a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_ETH_Init+0x88>)
 800085e:	2200      	movs	r2, #0
 8000860:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_ETH_Init+0x88>)
 8000864:	2200      	movs	r2, #0
 8000866:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_ETH_Init+0x88>)
 800086a:	2200      	movs	r2, #0
 800086c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_ETH_Init+0x80>)
 8000870:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_ETH_Init+0x88>)
 8000872:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_ETH_Init+0x80>)
 8000876:	2201      	movs	r2, #1
 8000878:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_ETH_Init+0x80>)
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <MX_ETH_Init+0x8c>)
 800087e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_ETH_Init+0x80>)
 8000882:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <MX_ETH_Init+0x90>)
 8000884:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_ETH_Init+0x80>)
 8000888:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800088c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_ETH_Init+0x80>)
 8000890:	f001 ff22 	bl	80026d8 <HAL_ETH_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800089a:	f000 fa01 	bl	8000ca0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800089e:	2238      	movs	r2, #56	; 0x38
 80008a0:	2100      	movs	r1, #0
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_ETH_Init+0x94>)
 80008a4:	f00b f888 	bl	800b9b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_ETH_Init+0x94>)
 80008aa:	2221      	movs	r2, #33	; 0x21
 80008ac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_ETH_Init+0x94>)
 80008b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008b4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_ETH_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000018c 	.word	0x2000018c
 80008c4:	40028000 	.word	0x40028000
 80008c8:	20000638 	.word	0x20000638
 80008cc:	200000c4 	.word	0x200000c4
 80008d0:	20000064 	.word	0x20000064
 80008d4:	2000002c 	.word	0x2000002c

080008d8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008dc:	f002 fc82 	bl	80031e4 <HAL_ICACHE_Enable>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80008e6:	f000 f9db 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 80008f6:	4a21      	ldr	r2, [pc, #132]	; (800097c <MX_LPUART1_UART_Init+0x8c>)
 80008f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 80008fc:	4a20      	ldr	r2, [pc, #128]	; (8000980 <MX_LPUART1_UART_Init+0x90>)
 80008fe:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 8000914:	220c      	movs	r2, #12
 8000916:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 800092c:	2200      	movs	r2, #0
 800092e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 8000932:	f00a f8c3 	bl	800aabc <HAL_UART_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800093c:	f000 f9b0 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	480d      	ldr	r0, [pc, #52]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 8000944:	f00a fd4a 	bl	800b3dc <HAL_UARTEx_SetTxFifoThreshold>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800094e:	f000 f9a7 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 8000956:	f00a fd7f 	bl	800b458 <HAL_UARTEx_SetRxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000960:	f000 f99e 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_LPUART1_UART_Init+0x88>)
 8000966:	f00a fd00 	bl	800b36a <HAL_UARTEx_DisableFifoMode>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000970:	f000 f996 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000023c 	.word	0x2000023c
 800097c:	44002400 	.word	0x44002400
 8000980:	00033324 	.word	0x00033324

08000984 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	; 0x70
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000998:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
 80009b4:	615a      	str	r2, [r3, #20]
 80009b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2234      	movs	r2, #52	; 0x34
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f00a fffa 	bl	800b9b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c4:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <MX_TIM1_Init+0x170>)
 80009c6:	4a4c      	ldr	r2, [pc, #304]	; (8000af8 <MX_TIM1_Init+0x174>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80009ca:	4b4a      	ldr	r3, [pc, #296]	; (8000af4 <MX_TIM1_Init+0x170>)
 80009cc:	223f      	movs	r2, #63	; 0x3f
 80009ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <MX_TIM1_Init+0x170>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 80009d6:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <MX_TIM1_Init+0x170>)
 80009d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <MX_TIM1_Init+0x170>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e4:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <MX_TIM1_Init+0x170>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <MX_TIM1_Init+0x170>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009f0:	4840      	ldr	r0, [pc, #256]	; (8000af4 <MX_TIM1_Init+0x170>)
 80009f2:	f008 fcd1 	bl	8009398 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009fc:	f000 f950 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a04:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4839      	ldr	r0, [pc, #228]	; (8000af4 <MX_TIM1_Init+0x170>)
 8000a0e:	f008 ffef 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a18:	f000 f942 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a1c:	4835      	ldr	r0, [pc, #212]	; (8000af4 <MX_TIM1_Init+0x170>)
 8000a1e:	f008 fd12 	bl	8009446 <HAL_TIM_PWM_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a28:	f000 f93a 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	482d      	ldr	r0, [pc, #180]	; (8000af4 <MX_TIM1_Init+0x170>)
 8000a40:	f009 feaa 	bl	800a798 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a4a:	f000 f929 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4e:	2360      	movs	r3, #96	; 0x60
 8000a50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a56:	2300      	movs	r3, #0
 8000a58:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a62:	2300      	movs	r3, #0
 8000a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	4820      	ldr	r0, [pc, #128]	; (8000af4 <MX_TIM1_Init+0x170>)
 8000a74:	f008 fea8 	bl	80097c8 <HAL_TIM_PWM_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a7e:	f000 f90f 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a86:	2204      	movs	r2, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481a      	ldr	r0, [pc, #104]	; (8000af4 <MX_TIM1_Init+0x170>)
 8000a8c:	f008 fe9c 	bl	80097c8 <HAL_TIM_PWM_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a96:	f000 f903 	bl	8000ca0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <MX_TIM1_Init+0x170>)
 8000ad8:	f009 ff2e 	bl	800a938 <HAL_TIMEx_ConfigBreakDeadTime>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000ae2:	f000 f8dd 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <MX_TIM1_Init+0x170>)
 8000ae8:	f000 fb94 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000aec:	bf00      	nop
 8000aee:	3770      	adds	r7, #112	; 0x70
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200002d0 	.word	0x200002d0
 8000af8:	40012c00 	.word	0x40012c00

08000afc <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	463b      	mov	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000b12:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b16:	f7ff fd65 	bl	80005e4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff fd46 	bl	80005ac <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000b20:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b24:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <MX_UCPD1_Init+0x44>)
 8000b34:	f00a fe67 	bl	800b806 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	42020400 	.word	0x42020400

08000b44 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <MX_USB_PCD_Init+0x60>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b50:	2208      	movs	r2, #8
 8000b52:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USB_PCD_Init+0x5c>)
 8000b8c:	f002 fb3a 	bl	8003204 <HAL_PCD_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8000b96:	f000 f883 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000031c 	.word	0x2000031c
 8000ba4:	40016000 	.word	0x40016000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bc4:	4a33      	ldr	r2, [pc, #204]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bce:	4b31      	ldr	r3, [pc, #196]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	61bb      	str	r3, [r7, #24]
 8000bda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000be2:	4a2c      	ldr	r2, [pc, #176]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c00:	4a24      	ldr	r2, [pc, #144]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c1e:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c3c:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_GPIO_Init+0xf0>)
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000c86:	f002 f95b 	bl	8002f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	44020c00 	.word	0x44020c00
 8000c98:	10110000 	.word	0x10110000
 8000c9c:	42021800 	.word	0x42021800

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>

08000caa <SERVO_INIT>:
uint16_t denomi;
TIM_HandleTypeDef *htim;


void SERVO_INIT(TIM_HandleTypeDef *_htim, uint16_t cycle)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	807b      	strh	r3, [r7, #2]
	SERVO_SET_TIM(_htim);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 f808 	bl	8000ccc <SERVO_SET_TIM>
	SERVO_SET_DUTY_CYCLE(cycle);
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f814 	bl	8000cec <SERVO_SET_DUTY_CYCLE>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SERVO_SET_TIM>:

void SERVO_SET_TIM(TIM_HandleTypeDef *_htim)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	htim = _htim;
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <SERVO_SET_TIM+0x1c>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000640 	.word	0x20000640

08000cec <SERVO_SET_DUTY_CYCLE>:

void SERVO_SET_DUTY_CYCLE(uint16_t cycle)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
	denomi = cycle;
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <SERVO_SET_DUTY_CYCLE+0x34>)
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	8013      	strh	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(htim, denomi);
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <SERVO_SET_DUTY_CYCLE+0x34>)
 8000cfe:	881a      	ldrh	r2, [r3, #0]
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <SERVO_SET_DUTY_CYCLE+0x38>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SERVO_SET_DUTY_CYCLE+0x34>)
 8000d0a:	881a      	ldrh	r2, [r3, #0]
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SERVO_SET_DUTY_CYCLE+0x38>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60da      	str	r2, [r3, #12]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	2000063e 	.word	0x2000063e
 8000d24:	20000640 	.word	0x20000640

08000d28 <Servo_Start>:
{
	return htim;
}

void Servo_Start(Servo *motor, uint32_t _channel)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	motor->channel = _channel;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(htim, motor->channel);
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <Servo_Start+0x28>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	4619      	mov	r1, r3
 8000d42:	4610      	mov	r0, r2
 8000d44:	f008 fbe0 	bl	8009508 <HAL_TIM_PWM_Start>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000640 	.word	0x20000640

08000d54 <Servo_Write>:
{
	HAL_TIM_PWM_Stop(htim, motor->channel);
}

bool Servo_Write(Servo *motor, uint16_t val)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
	if(val >= denomi)
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <Servo_Write+0x9c>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	887a      	ldrh	r2, [r7, #2]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d301      	bcc.n	8000d6e <Servo_Write+0x1a>
		return false;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e03a      	b.n	8000de4 <Servo_Write+0x90>
	motor->numera = val;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	887a      	ldrh	r2, [r7, #2]
 8000d72:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim, motor->channel, val);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d105      	bne.n	8000d88 <Servo_Write+0x34>
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <Servo_Write+0xa0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
 8000d86:	e02c      	b.n	8000de2 <Servo_Write+0x8e>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d105      	bne.n	8000d9c <Servo_Write+0x48>
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <Servo_Write+0xa0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	6393      	str	r3, [r2, #56]	; 0x38
 8000d9a:	e022      	b.n	8000de2 <Servo_Write+0x8e>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d105      	bne.n	8000db0 <Servo_Write+0x5c>
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <Servo_Write+0xa0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	887b      	ldrh	r3, [r7, #2]
 8000dac:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000dae:	e018      	b.n	8000de2 <Servo_Write+0x8e>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b0c      	cmp	r3, #12
 8000db6:	d105      	bne.n	8000dc4 <Servo_Write+0x70>
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <Servo_Write+0xa0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	e00e      	b.n	8000de2 <Servo_Write+0x8e>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b10      	cmp	r3, #16
 8000dca:	d105      	bne.n	8000dd8 <Servo_Write+0x84>
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <Servo_Write+0xa0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	887b      	ldrh	r3, [r7, #2]
 8000dd4:	6493      	str	r3, [r2, #72]	; 0x48
 8000dd6:	e004      	b.n	8000de2 <Servo_Write+0x8e>
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <Servo_Write+0xa0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
	return true;
 8000de2:	2301      	movs	r3, #1

}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	2000063e 	.word	0x2000063e
 8000df4:	20000640 	.word	0x20000640

08000df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0cc      	sub	sp, #304	; 0x130
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e16:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e2c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e30:	4618      	mov	r0, r3
 8000e32:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000e36:	461a      	mov	r2, r3
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f00a fdbd 	bl	800b9b8 <memset>
  if(hadc->Instance==ADC1)
 8000e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a30      	ldr	r2, [pc, #192]	; (8000f0c <HAL_ADC_MspInit+0x104>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d157      	bne.n	8000f00 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e54:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000e58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e68:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 fa3c 	bl	80042f4 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8000e82:	f7ff ff0d 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_ADC_MspInit+0x108>)
 8000e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e8c:	4a20      	ldr	r2, [pc, #128]	; (8000f10 <HAL_ADC_MspInit+0x108>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_ADC_MspInit+0x108>)
 8000e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e9c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ea4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000eae:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000eb2:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_ADC_MspInit+0x108>)
 8000eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <HAL_ADC_MspInit+0x108>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_ADC_MspInit+0x108>)
 8000ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ed2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000edc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ee0:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <HAL_ADC_MspInit+0x10c>)
 8000efc:	f002 f820 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	42028000 	.word	0x42028000
 8000f10:	44020c00 	.word	0x44020c00
 8000f14:	42020000 	.word	0x42020000

08000f18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	; 0x38
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a59      	ldr	r2, [pc, #356]	; (800109c <HAL_ETH_MspInit+0x184>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	f040 80ab 	bne.w	8001092 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f3c:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a57      	ldr	r2, [pc, #348]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000f4c:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f56:	623b      	str	r3, [r7, #32]
 8000f58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000f5a:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f60:	4a4f      	ldr	r2, [pc, #316]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000f6a:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000f78:	4b49      	ldr	r3, [pc, #292]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a48      	ldr	r2, [pc, #288]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000f88:	4b45      	ldr	r3, [pc, #276]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f9c:	4a40      	ldr	r2, [pc, #256]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fba:	4a39      	ldr	r2, [pc, #228]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fd8:	4a31      	ldr	r2, [pc, #196]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ff6:	4a2a      	ldr	r2, [pc, #168]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8000ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ffc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <HAL_ETH_MspInit+0x188>)
 8001002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800100e:	2332      	movs	r3, #50	; 0x32
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101a:	2302      	movs	r3, #2
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800101e:	230b      	movs	r3, #11
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	4619      	mov	r1, r3
 8001028:	481e      	ldr	r0, [pc, #120]	; (80010a4 <HAL_ETH_MspInit+0x18c>)
 800102a:	f001 ff89 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800102e:	2386      	movs	r3, #134	; 0x86
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103a:	2302      	movs	r3, #2
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800103e:	230b      	movs	r3, #11
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	4619      	mov	r1, r3
 8001048:	4817      	ldr	r0, [pc, #92]	; (80010a8 <HAL_ETH_MspInit+0x190>)
 800104a:	f001 ff79 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800104e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105c:	2302      	movs	r3, #2
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001060:	230b      	movs	r3, #11
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	4810      	ldr	r0, [pc, #64]	; (80010ac <HAL_ETH_MspInit+0x194>)
 800106c:	f001 ff68 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8001070:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107e:	2302      	movs	r3, #2
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001082:	230b      	movs	r3, #11
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	4808      	ldr	r0, [pc, #32]	; (80010b0 <HAL_ETH_MspInit+0x198>)
 800108e:	f001 ff57 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3738      	adds	r7, #56	; 0x38
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40028000 	.word	0x40028000
 80010a0:	44020c00 	.word	0x44020c00
 80010a4:	42020800 	.word	0x42020800
 80010a8:	42020000 	.word	0x42020000
 80010ac:	42020400 	.word	0x42020400
 80010b0:	42021800 	.word	0x42021800

080010b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0cc      	sub	sp, #304	; 0x130
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80010c2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80010dc:	4618      	mov	r0, r3
 80010de:	f44f 7384 	mov.w	r3, #264	; 0x108
 80010e2:	461a      	mov	r2, r3
 80010e4:	2100      	movs	r1, #0
 80010e6:	f00a fc67 	bl	800b9b8 <memset>
  if(huart->Instance==LPUART1)
 80010ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a33      	ldr	r2, [pc, #204]	; (80011c4 <HAL_UART_MspInit+0x110>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d15d      	bne.n	80011b8 <HAL_UART_MspInit+0x104>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80010fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001100:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001104:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8001110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001114:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001118:	2200      	movs	r2, #0
 800111a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4618      	mov	r0, r3
 8001124:	f003 f8e6 	bl	80042f4 <HAL_RCCEx_PeriphCLKConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800112e:	f7ff fdb7 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_UART_MspInit+0x114>)
 8001134:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001138:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <HAL_UART_MspInit+0x114>)
 800113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_UART_MspInit+0x114>)
 8001144:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001148:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800114c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001150:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800115a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800115e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_UART_MspInit+0x114>)
 8001162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001166:	4a18      	ldr	r2, [pc, #96]	; (80011c8 <HAL_UART_MspInit+0x114>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_UART_MspInit+0x114>)
 8001172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001176:	f003 0202 	and.w	r2, r3, #2
 800117a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800117e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001188:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800118c:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 800118e:	23c0      	movs	r3, #192	; 0xc0
 8001190:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011a6:	2308      	movs	r3, #8
 80011a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <HAL_UART_MspInit+0x118>)
 80011b4:	f001 fec4 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	44002400 	.word	0x44002400
 80011c8:	44020c00 	.word	0x44020c00
 80011cc:	42020400 	.word	0x42020400

080011d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_TIM_Base_MspInit+0x3c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10e      	bne.n	8001200 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_TIM_Base_MspInit+0x40>)
 80011e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <HAL_TIM_Base_MspInit+0x40>)
 80011ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ee:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <HAL_TIM_Base_MspInit+0x40>)
 80011f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40012c00 	.word	0x40012c00
 8001210:	44020c00 	.word	0x44020c00

08001214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <HAL_TIM_MspPostInit+0x6c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d11f      	bne.n	8001276 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_TIM_MspPostInit+0x70>)
 8001238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800123c:	4a11      	ldr	r2, [pc, #68]	; (8001284 <HAL_TIM_MspPostInit+0x70>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_TIM_MspPostInit+0x70>)
 8001248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001254:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001258:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001266:	2301      	movs	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_TIM_MspPostInit+0x74>)
 8001272:	f001 fe65 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40012c00 	.word	0x40012c00
 8001284:	44020c00 	.word	0x44020c00
 8001288:	42021000 	.word	0x42021000

0800128c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0cc      	sub	sp, #304	; 0x130
 8001290:	af00      	add	r7, sp, #0
 8001292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001296:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800129a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012b4:	4618      	mov	r0, r3
 80012b6:	f44f 7384 	mov.w	r3, #264	; 0x108
 80012ba:	461a      	mov	r2, r3
 80012bc:	2100      	movs	r1, #0
 80012be:	f00a fb7b 	bl	800b9b8 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80012c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a33      	ldr	r2, [pc, #204]	; (800139c <HAL_PCD_MspInit+0x110>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d15e      	bne.n	8001392 <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012d8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	f04f 0310 	mov.w	r3, #16
 80012e4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80012e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012f0:	2230      	movs	r2, #48	; 0x30
 80012f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fffa 	bl	80042f4 <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 8001306:	f7ff fccb 	bl	8000ca0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_PCD_MspInit+0x114>)
 800130c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <HAL_PCD_MspInit+0x114>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_PCD_MspInit+0x114>)
 800131c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001320:	f003 0201 	and.w	r2, r3, #1
 8001324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001328:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001332:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001336:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001338:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800133c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001352:	230a      	movs	r3, #10
 8001354:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800135c:	4619      	mov	r1, r3
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <HAL_PCD_MspInit+0x118>)
 8001360:	f001 fdee 	bl	8002f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_PCD_MspInit+0x114>)
 8001366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_PCD_MspInit+0x114>)
 800136c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001370:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_PCD_MspInit+0x114>)
 8001376:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800137a:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 800137e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001382:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800138c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001390:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40016000 	.word	0x40016000
 80013a0:	44020c00 	.word	0x44020c00
 80013a4:	42020000 	.word	0x42020000

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f904 	bl	8001600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <SystemInit+0xdc>)
 8001404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <SystemInit+0xdc>)
 800140a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <SystemInit+0xe0>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001418:	4b30      	ldr	r3, [pc, #192]	; (80014dc <SystemInit+0xe0>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <SystemInit+0xe0>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <SystemInit+0xe0>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	492c      	ldr	r1, [pc, #176]	; (80014dc <SystemInit+0xe0>)
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <SystemInit+0xe4>)
 800142c:	4013      	ands	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <SystemInit+0xe0>)
 8001432:	2200      	movs	r2, #0
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <SystemInit+0xe0>)
 8001438:	2200      	movs	r2, #0
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <SystemInit+0xe0>)
 800143e:	2200      	movs	r2, #0
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <SystemInit+0xe0>)
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <SystemInit+0xe8>)
 8001446:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001448:	4b24      	ldr	r3, [pc, #144]	; (80014dc <SystemInit+0xe0>)
 800144a:	2200      	movs	r2, #0
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <SystemInit+0xe0>)
 8001450:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <SystemInit+0xe8>)
 8001452:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <SystemInit+0xe0>)
 8001456:	2200      	movs	r2, #0
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <SystemInit+0xe0>)
 800145c:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <SystemInit+0xe8>)
 800145e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <SystemInit+0xe0>)
 8001462:	2200      	movs	r2, #0
 8001464:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <SystemInit+0xe0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <SystemInit+0xe0>)
 800146c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <SystemInit+0xe0>)
 8001474:	2200      	movs	r2, #0
 8001476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <SystemInit+0xdc>)
 800147a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <SystemInit+0xec>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001488:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001490:	d003      	beq.n	800149a <SystemInit+0x9e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001498:	d117      	bne.n	80014ca <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <SystemInit+0xec>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <SystemInit+0xec>)
 80014a8:	4a10      	ldr	r2, [pc, #64]	; (80014ec <SystemInit+0xf0>)
 80014aa:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <SystemInit+0xec>)
 80014ae:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <SystemInit+0xf4>)
 80014b0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <SystemInit+0xec>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <SystemInit+0xec>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <SystemInit+0xec>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <SystemInit+0xec>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	61d3      	str	r3, [r2, #28]
  }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00
 80014dc:	44020c00 	.word	0x44020c00
 80014e0:	eae2eae3 	.word	0xeae2eae3
 80014e4:	01010280 	.word	0x01010280
 80014e8:	40022000 	.word	0x40022000
 80014ec:	08192a3b 	.word	0x08192a3b
 80014f0:	4c5d6e7f 	.word	0x4c5d6e7f

080014f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f8:	f7ff ff80 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001522:	f00a fa51 	bl	800b9c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001526:	f7ff f879 	bl	800061c <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   r0, =_estack
 800152c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001538:	0800ba78 	.word	0x0800ba78
  ldr r2, =_sbss
 800153c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001540:	20000648 	.word	0x20000648

08001544 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_IRQHandler>
	...

08001548 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f001 f891 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001552:	f002 fd45 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8001556:	4602      	mov	r2, r0
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_Init+0x40>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	490a      	ldr	r1, [pc, #40]	; (800158c <HAL_Init+0x44>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <HAL_Init+0x48>)
 800156a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156c:	200f      	movs	r0, #15
 800156e:	f000 f811 	bl	8001594 <HAL_InitTick>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e002      	b.n	8001582 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fc3c 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	44020c00 	.word	0x44020c00
 800158c:	0800ba28 	.word	0x0800ba28
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_InitTick+0x60>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e021      	b.n	80015ec <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_InitTick+0x64>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_InitTick+0x60>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 f87d 	bl	80026be <HAL_SYSTICK_Config>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00e      	b.n	80015ec <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d80a      	bhi.n	80015ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f001 f855 	bl	800268a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_InitTick+0x68>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000000c 	.word	0x2000000c
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20000008 	.word	0x20000008

08001600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	2000000c 	.word	0x2000000c
 8001624:	20000644 	.word	0x20000644

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000644 	.word	0x20000644

08001640 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_SBS_ETHInterfaceSelect+0x28>)
 800164a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800164e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001652:	4905      	ldr	r1, [pc, #20]	; (8001668 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4313      	orrs	r3, r2
 8001658:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	44000400 	.word	0x44000400

0800166c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	609a      	str	r2, [r3, #8]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001702:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	42028000 	.word	0x42028000

08001720 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3360      	adds	r3, #96	; 0x60
 8001732:	461a      	mov	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <LL_ADC_SetOffset+0x44>)
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	4313      	orrs	r3, r2
 8001750:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	03fff000 	.word	0x03fff000

08001768 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3360      	adds	r3, #96	; 0x60
 8001776:	461a      	mov	r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3360      	adds	r3, #96	; 0x60
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3360      	adds	r3, #96	; 0x60
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80017f4:	bf00      	nop
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3360      	adds	r3, #96	; 0x60
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	615a      	str	r2, [r3, #20]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3330      	adds	r3, #48	; 0x30
 800186c:	461a      	mov	r2, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	4413      	add	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	211f      	movs	r1, #31
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	401a      	ands	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	0e9b      	lsrs	r3, r3, #26
 8001894:	f003 011f 	and.w	r1, r3, #31
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	431a      	orrs	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3314      	adds	r3, #20
 80018c4:	461a      	mov	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	0e5b      	lsrs	r3, r3, #25
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	4413      	add	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	0d1b      	lsrs	r3, r3, #20
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	2107      	movs	r1, #7
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	401a      	ands	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	0d1b      	lsrs	r3, r3, #20
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0318 	and.w	r3, r3, #24
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001930:	40d9      	lsrs	r1, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	400b      	ands	r3, r1
 8001936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800193a:	431a      	orrs	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	000fffff 	.word	0x000fffff

08001954 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6093      	str	r3, [r2, #8]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800198c:	d101      	bne.n	8001992 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <LL_ADC_IsEnabled+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_ADC_IsEnabled+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d101      	bne.n	8001a2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d101      	bne.n	8001a54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e136      	b.n	8001cec <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff f9bb 	bl	8000e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff67 	bl	8001978 <LL_ADC_IsDeepPowerDownEnabled>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff4d 	bl	8001954 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff82 	bl	80019c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d115      	bne.n	8001af6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff66 	bl	80019a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ad4:	4b87      	ldr	r3, [pc, #540]	; (8001cf4 <HAL_ADC_Init+0x290>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	4a87      	ldr	r2, [pc, #540]	; (8001cf8 <HAL_ADC_Init+0x294>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ae8:	e002      	b.n	8001af0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f9      	bne.n	8001aea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff64 	bl	80019c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10d      	bne.n	8001b22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f043 0210 	orr.w	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff75 	bl	8001a16 <LL_ADC_REG_IsConversionOngoing>
 8001b2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 80cf 	bne.w	8001cda <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 80cb 	bne.w	8001cda <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b4c:	f043 0202 	orr.w	r2, r3, #2
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff49 	bl	80019f0 <LL_ADC_IsEnabled>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d110      	bne.n	8001b86 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b64:	4865      	ldr	r0, [pc, #404]	; (8001cfc <HAL_ADC_Init+0x298>)
 8001b66:	f7ff ff43 	bl	80019f0 <LL_ADC_IsEnabled>
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	4864      	ldr	r0, [pc, #400]	; (8001d00 <HAL_ADC_Init+0x29c>)
 8001b6e:	f7ff ff3f 	bl	80019f0 <LL_ADC_IsEnabled>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4323      	orrs	r3, r4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4860      	ldr	r0, [pc, #384]	; (8001d04 <HAL_ADC_Init+0x2a0>)
 8001b82:	f7ff fd73 	bl	800166c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7e5b      	ldrb	r3, [r3, #25]
 8001b8a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b90:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b96:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b9c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d106      	bne.n	8001bc2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	045b      	lsls	r3, r3, #17
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	4b48      	ldr	r3, [pc, #288]	; (8001d08 <HAL_ADC_Init+0x2a4>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	69b9      	ldr	r1, [r7, #24]
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff15 	bl	8001a3c <LL_ADC_INJ_IsConversionOngoing>
 8001c12:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d13d      	bne.n	8001c96 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d13a      	bne.n	8001c96 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7e1b      	ldrb	r3, [r3, #24]
 8001c24:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c2c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c3c:	f023 0302 	bic.w	r3, r3, #2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	69b9      	ldr	r1, [r7, #24]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d118      	bne.n	8001c86 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c5e:	f023 0304 	bic.w	r3, r3, #4
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c70:	4311      	orrs	r1, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c76:	430a      	orrs	r2, r1
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	611a      	str	r2, [r3, #16]
 8001c84:	e007      	b.n	8001c96 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	f023 010f 	bic.w	r1, r3, #15
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb6:	e007      	b.n	8001cc8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 020f 	bic.w	r2, r2, #15
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	f023 0303 	bic.w	r3, r3, #3
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	659a      	str	r2, [r3, #88]	; 0x58
 8001cd8:	e007      	b.n	8001cea <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f043 0210 	orr.w	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3724      	adds	r7, #36	; 0x24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	053e2d63 	.word	0x053e2d63
 8001cfc:	42028000 	.word	0x42028000
 8001d00:	42028100 	.word	0x42028100
 8001d04:	42028300 	.word	0x42028300
 8001d08:	fff04007 	.word	0xfff04007

08001d0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0b6      	sub	sp, #216	; 0xd8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x22>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e3d8      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x7d4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fe6b 	bl	8001a16 <LL_ADC_REG_IsConversionOngoing>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 83bd 	bne.w	80024c2 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d104      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fccf 	bl	80016f8 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f7ff fd78 	bl	800185c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fe50 	bl	8001a16 <LL_ADC_REG_IsConversionOngoing>
 8001d76:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe5c 	bl	8001a3c <LL_ADC_INJ_IsConversionOngoing>
 8001d84:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 81d9 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 81d4 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001da4:	d10f      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7ff fd7f 	bl	80018b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fd39 	bl	8001836 <LL_ADC_SetSamplingTimeCommonConfig>
 8001dc4:	e00e      	b.n	8001de4 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6819      	ldr	r1, [r3, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f7ff fd6e 	bl	80018b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fd29 	bl	8001836 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	08db      	lsrs	r3, r3, #3
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d022      	beq.n	8001e4c <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6919      	ldr	r1, [r3, #16]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e16:	f7ff fc83 	bl	8001720 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6919      	ldr	r1, [r3, #16]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f7ff fccf 	bl	80017ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x136>
 8001e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e40:	e000      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x138>
 8001e42:	2300      	movs	r3, #0
 8001e44:	461a      	mov	r2, r3
 8001e46:	f7ff fcdb 	bl	8001800 <LL_ADC_SetOffsetSaturation>
 8001e4a:	e17b      	b.n	8002144 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fc88 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x16c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fc7d 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	f003 021f 	and.w	r2, r3, #31
 8001e76:	e01e      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x1aa>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fc72 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8001e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8001e9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e004      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8001eaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d105      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x1c2>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	0e9b      	lsrs	r3, r3, #26
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	e018      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x1f4>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001eea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	e004      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8001ef6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d106      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fc41 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2101      	movs	r1, #1
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fc25 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10a      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x232>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fc1a 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	e01e      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x270>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2101      	movs	r1, #1
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fc0f 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	e004      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8001f70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x288>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0e9b      	lsrs	r3, r3, #26
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	e018      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x2ba>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	e004      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8001fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d106      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fbde 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2102      	movs	r1, #2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fbc2 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10a      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x2f8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fbb7 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	f003 021f 	and.w	r2, r3, #31
 8002002:	e01e      	b.n	8002042 <HAL_ADC_ConfigChannel+0x336>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2102      	movs	r1, #2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fbac 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002022:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800202a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8002032:	2320      	movs	r3, #32
 8002034:	e004      	b.n	8002040 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8002036:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <HAL_ADC_ConfigChannel+0x34e>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0e9b      	lsrs	r3, r3, #26
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	e016      	b.n	8002088 <HAL_ADC_ConfigChannel+0x37c>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800206c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800206e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 800207a:	2320      	movs	r3, #32
 800207c:	e004      	b.n	8002088 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 800207e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002088:	429a      	cmp	r2, r3
 800208a:	d106      	bne.n	800209a <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2200      	movs	r2, #0
 8002092:	2102      	movs	r1, #2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fb7d 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2103      	movs	r1, #3
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fb61 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10a      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x3ba>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2103      	movs	r1, #3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fb56 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	e017      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x3ea>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2103      	movs	r1, #3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fb4b 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 80020e8:	2320      	movs	r3, #32
 80020ea:	e003      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 80020ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_ADC_ConfigChannel+0x402>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	e011      	b.n	8002132 <HAL_ADC_ConfigChannel+0x426>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800211c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800211e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e003      	b.n	8002132 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 800212a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002132:	429a      	cmp	r2, r3
 8002134:	d106      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	2103      	movs	r1, #3
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fb28 	bl	8001794 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fc51 	bl	80019f0 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 813f 	bne.w	80023d4 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	461a      	mov	r2, r3
 8002164:	f7ff fbd2 	bl	800190c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4a8e      	ldr	r2, [pc, #568]	; (80023a8 <HAL_ADC_ConfigChannel+0x69c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	f040 8130 	bne.w	80023d4 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_ADC_ConfigChannel+0x490>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	3301      	adds	r3, #1
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2b09      	cmp	r3, #9
 8002192:	bf94      	ite	ls
 8002194:	2301      	movls	r3, #1
 8002196:	2300      	movhi	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e019      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x4c4>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	e003      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80021b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2b09      	cmp	r3, #9
 80021c8:	bf94      	ite	ls
 80021ca:	2301      	movls	r3, #1
 80021cc:	2300      	movhi	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d079      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x4e4>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	3301      	adds	r3, #1
 80021e8:	069b      	lsls	r3, r3, #26
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ee:	e015      	b.n	800221c <HAL_ADC_ConfigChannel+0x510>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002200:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e003      	b.n	8002214 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 800220c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3301      	adds	r3, #1
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HAL_ADC_ConfigChannel+0x530>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	3301      	adds	r3, #1
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2101      	movs	r1, #1
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	e017      	b.n	800226c <HAL_ADC_ConfigChannel+0x560>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800224a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800224e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002254:	2320      	movs	r3, #32
 8002256:	e003      	b.n	8002260 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	3301      	adds	r3, #1
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	ea42 0103 	orr.w	r1, r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x586>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	3301      	adds	r3, #1
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	051b      	lsls	r3, r3, #20
 8002290:	e018      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x5b8>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 80022aa:	2320      	movs	r3, #32
 80022ac:	e003      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 80022ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c4:	430b      	orrs	r3, r1
 80022c6:	e080      	b.n	80023ca <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x5d8>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	3301      	adds	r3, #1
 80022dc:	069b      	lsls	r3, r3, #26
 80022de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022e2:	e015      	b.n	8002310 <HAL_ADC_ConfigChannel+0x604>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x624>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	3301      	adds	r3, #1
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	e017      	b.n	8002360 <HAL_ADC_ConfigChannel+0x654>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	61fb      	str	r3, [r7, #28]
  return result;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002348:	2320      	movs	r3, #32
 800234a:	e003      	b.n	8002354 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	ea42 0103 	orr.w	r1, r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_ADC_ConfigChannel+0x680>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	3301      	adds	r3, #1
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	3b1e      	subs	r3, #30
 8002384:	051b      	lsls	r3, r3, #20
 8002386:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800238a:	e01d      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x6bc>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	613b      	str	r3, [r7, #16]
  return result;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e005      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x6a8>
 80023a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 021f 	and.w	r2, r3, #31
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	3b1e      	subs	r3, #30
 80023c2:	051b      	lsls	r3, r3, #20
 80023c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ce:	4619      	mov	r1, r3
 80023d0:	f7ff fa70 	bl	80018b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <HAL_ADC_ConfigChannel+0x7dc>)
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d079      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023e0:	4842      	ldr	r0, [pc, #264]	; (80024ec <HAL_ADC_ConfigChannel+0x7e0>)
 80023e2:	f7ff f969 	bl	80016b8 <LL_ADC_GetCommonPathInternalCh>
 80023e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a40      	ldr	r2, [pc, #256]	; (80024f0 <HAL_ADC_ConfigChannel+0x7e4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d124      	bne.n	800243e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11e      	bne.n	800243e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a3b      	ldr	r2, [pc, #236]	; (80024f4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d164      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800240a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800240e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002412:	4619      	mov	r1, r3
 8002414:	4835      	ldr	r0, [pc, #212]	; (80024ec <HAL_ADC_ConfigChannel+0x7e0>)
 8002416:	f7ff f93c 	bl	8001692 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800241a:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <HAL_ADC_ConfigChannel+0x7ec>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	4a36      	ldr	r2, [pc, #216]	; (80024fc <HAL_ADC_ConfigChannel+0x7f0>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	3301      	adds	r3, #1
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800242e:	e002      	b.n	8002436 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3b01      	subs	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f9      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800243c:	e04a      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a2f      	ldr	r2, [pc, #188]	; (8002500 <HAL_ADC_ConfigChannel+0x7f4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d113      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800244c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <HAL_ADC_ConfigChannel+0x7f8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d13a      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800245e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002466:	4619      	mov	r1, r3
 8002468:	4820      	ldr	r0, [pc, #128]	; (80024ec <HAL_ADC_ConfigChannel+0x7e0>)
 800246a:	f7ff f912 	bl	8001692 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800246e:	e031      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a24      	ldr	r2, [pc, #144]	; (8002508 <HAL_ADC_ConfigChannel+0x7fc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d113      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800247a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800247e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10d      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1a      	ldr	r2, [pc, #104]	; (80024f4 <HAL_ADC_ConfigChannel+0x7e8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d121      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002490:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002498:	4619      	mov	r1, r3
 800249a:	4814      	ldr	r0, [pc, #80]	; (80024ec <HAL_ADC_ConfigChannel+0x7e0>)
 800249c:	f7ff f8f9 	bl	8001692 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 80024a0:	e018      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_ADC_ConfigChannel+0x800>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d113      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_ADC_ConfigChannel+0x7e8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00e      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f90a 	bl	80016d4 <LL_ADC_EnableChannelVDDcore>
 80024c0:	e008      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80024dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	37d8      	adds	r7, #216	; 0xd8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	80080000 	.word	0x80080000
 80024ec:	42028300 	.word	0x42028300
 80024f0:	c3210000 	.word	0xc3210000
 80024f4:	42028000 	.word	0x42028000
 80024f8:	20000004 	.word	0x20000004
 80024fc:	053e2d63 	.word	0x053e2d63
 8002500:	43290000 	.word	0x43290000
 8002504:	42028100 	.word	0x42028100
 8002508:	c7520000 	.word	0xc7520000
 800250c:	475a0000 	.word	0x475a0000

08002510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002542:	4a04      	ldr	r2, [pc, #16]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60d3      	str	r3, [r2, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <__NVIC_GetPriorityGrouping+0x18>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 0307 	and.w	r3, r3, #7
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	; (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff ff8e 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff47 	bl	8002510 <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002698:	f7ff ff5e 	bl	8002558 <__NVIC_GetPriorityGrouping>
 800269c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff90 	bl	80025c8 <NVIC_EncodePriority>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff5f 	bl	8002574 <__NVIC_SetPriority>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ffb2 	bl	8002630 <SysTick_Config>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0d2      	b.n	8002890 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2223      	movs	r2, #35	; 0x23
 80026f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7fe fc0b 	bl	8000f18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_ETH_Init+0x1c0>)
 8002704:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002708:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_ETH_Init+0x1c0>)
 800270a:	f043 0302 	orr.w	r3, r3, #2
 800270e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002712:	4b61      	ldr	r3, [pc, #388]	; (8002898 <HAL_ETH_Init+0x1c0>)
 8002714:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7a1b      	ldrb	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe ff89 	bl	8001640 <HAL_SBS_ETHInterfaceSelect>
 800272e:	e003      	b.n	8002738 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8002730:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002734:	f7fe ff84 	bl	8001640 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8002738:	4b58      	ldr	r3, [pc, #352]	; (800289c <HAL_ETH_Init+0x1c4>)
 800273a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002754:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002756:	f7fe ff67 	bl	8001628 <HAL_GetTick>
 800275a:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800275c:	e011      	b.n	8002782 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800275e:	f7fe ff63 	bl	8001628 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800276c:	d909      	bls.n	8002782 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2204      	movs	r2, #4
 8002772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	22e0      	movs	r2, #224	; 0xe0
 800277a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e086      	b.n	8002890 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e4      	bne.n	800275e <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f885 	bl	80028a4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800279a:	f001 fd4d 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a3f      	ldr	r2, [pc, #252]	; (80028a0 <HAL_ETH_Init+0x1c8>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	0c9a      	lsrs	r2, r3, #18
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3a01      	subs	r2, #1
 80027ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fa80 	bl	8002cb8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80027c4:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d009      	beq.n	80027f8 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	22e0      	movs	r2, #224	; 0xe0
 80027f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e04b      	b.n	8002890 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002800:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002804:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002808:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6952      	ldr	r2, [r2, #20]
 8002810:	0051      	lsls	r1, r2, #1
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	430b      	orrs	r3, r1
 8002818:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800281c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fae6 	bl	8002df2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fb2c 	bl	8002e84 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	3305      	adds	r3, #5
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	021a      	lsls	r2, r3, #8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	3304      	adds	r3, #4
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	3303      	adds	r3, #3
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	061a      	lsls	r2, r3, #24
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	3302      	adds	r3, #2
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	3301      	adds	r3, #1
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800286a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002878:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800287a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2210      	movs	r2, #16
 800288a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	44020c00 	.word	0x44020c00
 800289c:	44000400 	.word	0x44000400
 80028a0:	431bde83 	.word	0x431bde83

080028a4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80028be:	f001 fcbb 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 80028c2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4a25      	ldr	r2, [pc, #148]	; (800295c <HAL_ETH_SetMDIOClockRange+0xb8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d908      	bls.n	80028de <HAL_ETH_SetMDIOClockRange+0x3a>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4a24      	ldr	r2, [pc, #144]	; (8002960 <HAL_ETH_SetMDIOClockRange+0xbc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d804      	bhi.n	80028de <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	e034      	b.n	8002948 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_ETH_SetMDIOClockRange+0xbc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d908      	bls.n	80028f8 <HAL_ETH_SetMDIOClockRange+0x54>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <HAL_ETH_SetMDIOClockRange+0xc0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d204      	bcs.n	80028f8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e027      	b.n	8002948 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <HAL_ETH_SetMDIOClockRange+0xc0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d303      	bcc.n	8002908 <HAL_ETH_SetMDIOClockRange+0x64>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d91e      	bls.n	8002946 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <HAL_ETH_SetMDIOClockRange+0xc4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d908      	bls.n	8002922 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4a16      	ldr	r2, [pc, #88]	; (800296c <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d804      	bhi.n	8002922 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e012      	b.n	8002948 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4a11      	ldr	r2, [pc, #68]	; (800296c <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d908      	bls.n	800293c <HAL_ETH_SetMDIOClockRange+0x98>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_ETH_SetMDIOClockRange+0xcc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d804      	bhi.n	800293c <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e005      	b.n	8002948 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	e000      	b.n	8002948 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002946:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	01312cff 	.word	0x01312cff
 8002960:	02160ebf 	.word	0x02160ebf
 8002964:	03938700 	.word	0x03938700
 8002968:	05f5e0ff 	.word	0x05f5e0ff
 800296c:	08f0d17f 	.word	0x08f0d17f
 8002970:	0ee6b280 	.word	0x0ee6b280

08002974 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002986:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	791b      	ldrb	r3, [r3, #4]
 800298c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800298e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	7b1b      	ldrb	r3, [r3, #12]
 8002994:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002996:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	7b5b      	ldrb	r3, [r3, #13]
 800299c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800299e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	7b9b      	ldrb	r3, [r3, #14]
 80029a4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80029a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	7bdb      	ldrb	r3, [r3, #15]
 80029ac:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80029ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	7c12      	ldrb	r2, [r2, #16]
 80029b4:	2a00      	cmp	r2, #0
 80029b6:	d102      	bne.n	80029be <ETH_SetMACConfig+0x4a>
 80029b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80029bc:	e000      	b.n	80029c0 <ETH_SetMACConfig+0x4c>
 80029be:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80029c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	7c52      	ldrb	r2, [r2, #17]
 80029c6:	2a00      	cmp	r2, #0
 80029c8:	d102      	bne.n	80029d0 <ETH_SetMACConfig+0x5c>
 80029ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ce:	e000      	b.n	80029d2 <ETH_SetMACConfig+0x5e>
 80029d0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80029d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	7c9b      	ldrb	r3, [r3, #18]
 80029d8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80029da:	431a      	orrs	r2, r3
               macconf->Speed |
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80029e0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80029e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	7f1b      	ldrb	r3, [r3, #28]
 80029ec:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80029ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	7f5b      	ldrb	r3, [r3, #29]
 80029f4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80029f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	7f92      	ldrb	r2, [r2, #30]
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d102      	bne.n	8002a06 <ETH_SetMACConfig+0x92>
 8002a00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a04:	e000      	b.n	8002a08 <ETH_SetMACConfig+0x94>
 8002a06:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a08:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	7fdb      	ldrb	r3, [r3, #31]
 8002a0e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d102      	bne.n	8002a22 <ETH_SetMACConfig+0xae>
 8002a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a20:	e000      	b.n	8002a24 <ETH_SetMACConfig+0xb0>
 8002a22:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a24:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a32:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002a34:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <ETH_SetMACConfig+0x230>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	68f9      	ldr	r1, [r7, #12]
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a5e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002a60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a68:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002a6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a72:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002a74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	d102      	bne.n	8002a86 <ETH_SetMACConfig+0x112>
 8002a80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a84:	e000      	b.n	8002a88 <ETH_SetMACConfig+0x114>
 8002a86:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002a88:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <ETH_SetMACConfig+0x234>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	68f9      	ldr	r1, [r7, #12]
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aac:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	68f9      	ldr	r1, [r7, #12]
 8002aca:	430b      	orrs	r3, r1
 8002acc:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ad4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ada:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002ae2:	2a00      	cmp	r2, #0
 8002ae4:	d101      	bne.n	8002aea <ETH_SetMACConfig+0x176>
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	e000      	b.n	8002aec <ETH_SetMACConfig+0x178>
 8002aea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002aec:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002afe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002b02:	4013      	ands	r3, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	68f9      	ldr	r1, [r7, #12]
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002b14:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002b1c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	f023 0103 	bic.w	r1, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002b42:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002b5e:	2a00      	cmp	r2, #0
 8002b60:	d101      	bne.n	8002b66 <ETH_SetMACConfig+0x1f2>
 8002b62:	2240      	movs	r2, #64	; 0x40
 8002b64:	e000      	b.n	8002b68 <ETH_SetMACConfig+0x1f4>
 8002b66:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002b68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002b70:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002b72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002b7a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002b88:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	00048083 	.word	0x00048083
 8002ba8:	c0f88000 	.word	0xc0f88000

08002bac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002bc4:	f023 0302 	bic.w	r3, r3, #2
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	6811      	ldr	r1, [r2, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bd6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	791b      	ldrb	r3, [r3, #4]
 8002bdc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002be2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	7b1b      	ldrb	r3, [r3, #12]
 8002be8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	68f9      	ldr	r1, [r7, #12]
 8002c06:	430b      	orrs	r3, r1
 8002c08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c0c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	7b5b      	ldrb	r3, [r3, #13]
 8002c12:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c24:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <ETH_SetDMAConfig+0x104>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	430b      	orrs	r3, r1
 8002c34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c38:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	7d1b      	ldrb	r3, [r3, #20]
 8002c44:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c46:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	7f5b      	ldrb	r3, [r3, #29]
 8002c4c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <ETH_SetDMAConfig+0x108>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	68f9      	ldr	r1, [r7, #12]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c6e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	7f1b      	ldrb	r3, [r3, #28]
 8002c76:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c90:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	68f9      	ldr	r1, [r7, #12]
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ca0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	fffec000 	.word	0xfffec000
 8002cb4:	ffc0efef 	.word	0xffc0efef

08002cb8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b0a4      	sub	sp, #144	; 0x90
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002d10:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002d14:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002d32:	2300      	movs	r3, #0
 8002d34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002d50:	2320      	movs	r3, #32
 8002d52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002d62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d6c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002d74:	2302      	movs	r3, #2
 8002d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002d92:	2300      	movs	r3, #0
 8002d94:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff fde6 	bl	8002974 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002da8:	2301      	movs	r3, #1
 8002daa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002dac:	2301      	movs	r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002dc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dc6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002dcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dd0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002dd8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	4619      	mov	r1, r3
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff fee1 	bl	8002bac <ETH_SetDMAConfig>
}
 8002dea:	bf00      	nop
 8002dec:	3790      	adds	r7, #144	; 0x90
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	e01d      	b.n	8002e3c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68d9      	ldr	r1, [r3, #12]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	3206      	adds	r2, #6
 8002e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d9de      	bls.n	8002e00 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e50:	461a      	mov	r2, r3
 8002e52:	2303      	movs	r3, #3
 8002e54:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e64:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e023      	b.n	8002eda <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6919      	ldr	r1, [r3, #16]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2200      	movs	r2, #0
 8002eae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	3212      	adds	r2, #18
 8002ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d9d8      	bls.n	8002e92 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f06:	461a      	mov	r2, r3
 8002f08:	2303      	movs	r3, #3
 8002f0a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f2e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f4e:	e136      	b.n	80031be <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	2101      	movs	r1, #1
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8128 	beq.w	80031b8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x38>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b12      	cmp	r3, #18
 8002f76:	d125      	bne.n	8002fc4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	08da      	lsrs	r2, r3, #3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3208      	adds	r2, #8
 8002f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f84:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	220f      	movs	r2, #15
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f003 020f 	and.w	r2, r3, #15
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	08da      	lsrs	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3208      	adds	r2, #8
 8002fbe:	6979      	ldr	r1, [r7, #20]
 8002fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0203 	and.w	r2, r3, #3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d00b      	beq.n	8003018 <HAL_GPIO_Init+0xd8>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d007      	beq.n	8003018 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800300c:	2b11      	cmp	r3, #17
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b12      	cmp	r3, #18
 8003016:	d130      	bne.n	800307a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2203      	movs	r2, #3
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4013      	ands	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800304e:	2201      	movs	r2, #1
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4013      	ands	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f003 0201 	and.w	r2, r3, #1
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d017      	beq.n	80030b2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4013      	ands	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d07c      	beq.n	80031b8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80030be:	4a47      	ldr	r2, [pc, #284]	; (80031dc <HAL_GPIO_Init+0x29c>)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3318      	adds	r3, #24
 80030c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4013      	ands	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	0a9a      	lsrs	r2, r3, #10
 80030e6:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <HAL_GPIO_Init+0x2a0>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	f002 0203 	and.w	r2, r2, #3
 80030f0:	00d2      	lsls	r2, r2, #3
 80030f2:	4093      	lsls	r3, r2
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80030fa:	4938      	ldr	r1, [pc, #224]	; (80031dc <HAL_GPIO_Init+0x29c>)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3318      	adds	r3, #24
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003108:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_GPIO_Init+0x29c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43db      	mvns	r3, r3
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4013      	ands	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800312c:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <HAL_GPIO_Init+0x29c>)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003132:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_GPIO_Init+0x29c>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4013      	ands	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003156:	4a21      	ldr	r2, [pc, #132]	; (80031dc <HAL_GPIO_Init+0x29c>)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800315c:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <HAL_GPIO_Init+0x29c>)
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003162:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	43db      	mvns	r3, r3
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4013      	ands	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003182:	4a16      	ldr	r2, [pc, #88]	; (80031dc <HAL_GPIO_Init+0x29c>)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <HAL_GPIO_Init+0x29c>)
 800318c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003190:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43db      	mvns	r3, r3
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4013      	ands	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80031b0:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <HAL_GPIO_Init+0x29c>)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3301      	adds	r3, #1
 80031bc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f47f aec1 	bne.w	8002f50 <HAL_GPIO_Init+0x10>
  }
}
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	44022000 	.word	0x44022000
 80031e0:	002f7f7f 	.word	0x002f7f7f

080031e4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_ICACHE_Enable+0x1c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a04      	ldr	r2, [pc, #16]	; (8003200 <HAL_ICACHE_Enable+0x1c>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40030400 	.word	0x40030400

08003204 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	b08f      	sub	sp, #60	; 0x3c
 8003208:	af0a      	add	r7, sp, #40	; 0x28
 800320a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0cd      	b.n	80033b2 <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe f82e 	bl	800128c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2203      	movs	r2, #3
 8003234:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f008 fb60 	bl	800b902 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	e03e      	b.n	80032c6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	333d      	adds	r3, #61	; 0x3d
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	333c      	adds	r3, #60	; 0x3c
 800326c:	7bfa      	ldrb	r2, [r7, #15]
 800326e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	333f      	adds	r3, #63	; 0x3f
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	334c      	adds	r3, #76	; 0x4c
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	3350      	adds	r3, #80	; 0x50
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	3354      	adds	r3, #84	; 0x54
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	3301      	adds	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d3bb      	bcc.n	8003248 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e044      	b.n	8003360 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	f203 137d 	addw	r3, r3, #381	; 0x17d
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	3301      	adds	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	429a      	cmp	r2, r3
 8003368:	d3b5      	bcc.n	80032d6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	687e      	ldr	r6, [r7, #4]
 8003372:	466d      	mov	r5, sp
 8003374:	f106 0410 	add.w	r4, r6, #16
 8003378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003380:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003384:	e885 0003 	stmia.w	r5, {r0, r1}
 8003388:	1d33      	adds	r3, r6, #4
 800338a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338c:	6838      	ldr	r0, [r7, #0]
 800338e:	f008 faf0 	bl	800b972 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d102      	bne.n	80033b0 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f805 	bl	80033ba <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033ba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f043 0202 	orr.w	r2, r3, #2
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f000 bc28 	b.w	8003c64 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003414:	4b94      	ldr	r3, [pc, #592]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 0318 	and.w	r3, r3, #24
 800341c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800341e:	4b92      	ldr	r3, [pc, #584]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d05b      	beq.n	80034ec <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b08      	cmp	r3, #8
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x46>
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2b18      	cmp	r3, #24
 800343e:	d114      	bne.n	800346a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d111      	bne.n	800346a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f000 bc08 	b.w	8003c64 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003454:	4b84      	ldr	r3, [pc, #528]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	4981      	ldr	r1, [pc, #516]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003464:	4313      	orrs	r3, r2
 8003466:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003468:	e040      	b.n	80034ec <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d023      	beq.n	80034ba <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003472:	4b7d      	ldr	r3, [pc, #500]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a7c      	ldr	r2, [pc, #496]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe f8d3 	bl	8001628 <HAL_GetTick>
 8003482:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003486:	f7fe f8cf 	bl	8001628 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e3e5      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003498:	4b73      	ldr	r3, [pc, #460]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80034a4:	4b70      	ldr	r3, [pc, #448]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	041b      	lsls	r3, r3, #16
 80034b2:	496d      	ldr	r1, [pc, #436]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	618b      	str	r3, [r1, #24]
 80034b8:	e018      	b.n	80034ec <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034ba:	4b6b      	ldr	r3, [pc, #428]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6a      	ldr	r2, [pc, #424]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80034c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe f8af 	bl	8001628 <HAL_GetTick>
 80034ca:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80034ce:	f7fe f8ab 	bl	8001628 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e3c1      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80034e0:	4b61      	ldr	r3, [pc, #388]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f0      	bne.n	80034ce <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a0 	beq.w	800363a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d005      	beq.n	800350c <HAL_RCC_OscConfig+0x10c>
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	2b18      	cmp	r3, #24
 8003504:	d109      	bne.n	800351a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 8092 	bne.w	800363a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e3a4      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x132>
 8003524:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a4f      	ldr	r2, [pc, #316]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 800352a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	e058      	b.n	80035e4 <HAL_RCC_OscConfig+0x1e4>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d112      	bne.n	8003560 <HAL_RCC_OscConfig+0x160>
 800353a:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b48      	ldr	r3, [pc, #288]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a47      	ldr	r2, [pc, #284]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 800354c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b45      	ldr	r3, [pc, #276]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a44      	ldr	r2, [pc, #272]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e041      	b.n	80035e4 <HAL_RCC_OscConfig+0x1e4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003568:	d112      	bne.n	8003590 <HAL_RCC_OscConfig+0x190>
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a3e      	ldr	r2, [pc, #248]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b3c      	ldr	r3, [pc, #240]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a3b      	ldr	r2, [pc, #236]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 800357c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b39      	ldr	r3, [pc, #228]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a38      	ldr	r2, [pc, #224]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e029      	b.n	80035e4 <HAL_RCC_OscConfig+0x1e4>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003598:	d112      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1c0>
 800359a:	4b33      	ldr	r3, [pc, #204]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a32      	ldr	r2, [pc, #200]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2f      	ldr	r2, [pc, #188]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a2c      	ldr	r2, [pc, #176]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e011      	b.n	80035e4 <HAL_RCC_OscConfig+0x1e4>
 80035c0:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a28      	ldr	r2, [pc, #160]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b26      	ldr	r3, [pc, #152]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a22      	ldr	r2, [pc, #136]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 80035de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80035e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fe f81c 	bl	8001628 <HAL_GetTick>
 80035f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035f4:	f7fe f818 	bl	8001628 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e32e      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003606:	4b18      	ldr	r3, [pc, #96]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x1f4>
 8003612:	e012      	b.n	800363a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe f808 	bl	8001628 <HAL_GetTick>
 8003618:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800361c:	f7fe f804 	bl	8001628 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e31a      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362e:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <HAL_RCC_OscConfig+0x268>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 809a 	beq.w	800377c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x25a>
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2b18      	cmp	r3, #24
 8003652:	d149      	bne.n	80036e8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d146      	bne.n	80036e8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d104      	bne.n	800366c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e2fe      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
 8003666:	bf00      	nop
 8003668:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d11c      	bne.n	80036ac <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003672:	4b9a      	ldr	r3, [pc, #616]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0218 	and.w	r2, r3, #24
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	429a      	cmp	r2, r3
 8003680:	d014      	beq.n	80036ac <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003682:	4b96      	ldr	r3, [pc, #600]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 0218 	bic.w	r2, r3, #24
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	4993      	ldr	r1, [pc, #588]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003694:	f000 fdd0 	bl	8004238 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003698:	4b91      	ldr	r3, [pc, #580]	; (80038e0 <HAL_RCC_OscConfig+0x4e0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd ff79 	bl	8001594 <HAL_InitTick>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e2db      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fd ffbc 	bl	8001628 <HAL_GetTick>
 80036b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80036b4:	f7fd ffb8 	bl	8001628 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e2ce      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c6:	4b85      	ldr	r3, [pc, #532]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80036d2:	4b82      	ldr	r3, [pc, #520]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	041b      	lsls	r3, r3, #16
 80036e0:	497e      	ldr	r1, [pc, #504]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80036e6:	e049      	b.n	800377c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02c      	beq.n	800374a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80036f0:	4b7a      	ldr	r3, [pc, #488]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 0218 	bic.w	r2, r3, #24
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4977      	ldr	r1, [pc, #476]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003702:	4b76      	ldr	r3, [pc, #472]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a75      	ldr	r2, [pc, #468]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fd ff8b 	bl	8001628 <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003716:	f7fd ff87 	bl	8001628 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e29d      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003728:	4b6c      	ldr	r3, [pc, #432]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003734:	4b69      	ldr	r3, [pc, #420]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	4966      	ldr	r1, [pc, #408]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003744:	4313      	orrs	r3, r2
 8003746:	610b      	str	r3, [r1, #16]
 8003748:	e018      	b.n	800377c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374a:	4b64      	ldr	r3, [pc, #400]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a63      	ldr	r2, [pc, #396]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fd ff67 	bl	8001628 <HAL_GetTick>
 800375a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800375e:	f7fd ff63 	bl	8001628 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e279      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003770:	4b5a      	ldr	r3, [pc, #360]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d03c      	beq.n	8003802 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01c      	beq.n	80037ca <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003790:	4b52      	ldr	r3, [pc, #328]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003796:	4a51      	ldr	r2, [pc, #324]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003798:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800379c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fd ff42 	bl	8001628 <HAL_GetTick>
 80037a4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80037a8:	f7fd ff3e 	bl	8001628 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e254      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80037ba:	4b48      	ldr	r3, [pc, #288]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80037bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ef      	beq.n	80037a8 <HAL_RCC_OscConfig+0x3a8>
 80037c8:	e01b      	b.n	8003802 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ca:	4b44      	ldr	r3, [pc, #272]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80037cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037d0:	4a42      	ldr	r2, [pc, #264]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80037d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037da:	f7fd ff25 	bl	8001628 <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80037e2:	f7fd ff21 	bl	8001628 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e237      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037f4:	4b39      	ldr	r3, [pc, #228]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80037f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ef      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80d2 	beq.w	80039b4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003810:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <HAL_RCC_OscConfig+0x4e4>)
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d118      	bne.n	800384e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800381c:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_RCC_OscConfig+0x4e4>)
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	4a30      	ldr	r2, [pc, #192]	; (80038e4 <HAL_RCC_OscConfig+0x4e4>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003828:	f7fd fefe 	bl	8001628 <HAL_GetTick>
 800382c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003830:	f7fd fefa 	bl	8001628 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e210      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003842:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <HAL_RCC_OscConfig+0x4e4>)
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d108      	bne.n	8003868 <HAL_RCC_OscConfig+0x468>
 8003856:	4b21      	ldr	r3, [pc, #132]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800385c:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003866:	e074      	b.n	8003952 <HAL_RCC_OscConfig+0x552>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d118      	bne.n	80038a2 <HAL_RCC_OscConfig+0x4a2>
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003876:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003880:	4b16      	ldr	r3, [pc, #88]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003886:	4a15      	ldr	r2, [pc, #84]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800388c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003896:	4a11      	ldr	r2, [pc, #68]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038a0:	e057      	b.n	8003952 <HAL_RCC_OscConfig+0x552>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d11e      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4e8>
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80038ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038b0:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80038bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038c0:	4a06      	ldr	r2, [pc, #24]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80038c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038ca:	4b04      	ldr	r3, [pc, #16]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80038cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038d0:	4a02      	ldr	r2, [pc, #8]	; (80038dc <HAL_RCC_OscConfig+0x4dc>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038da:	e03a      	b.n	8003952 <HAL_RCC_OscConfig+0x552>
 80038dc:	44020c00 	.word	0x44020c00
 80038e0:	20000008 	.word	0x20000008
 80038e4:	44020800 	.word	0x44020800
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b85      	cmp	r3, #133	; 0x85
 80038ee:	d118      	bne.n	8003922 <HAL_RCC_OscConfig+0x522>
 80038f0:	4ba2      	ldr	r3, [pc, #648]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 80038f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f6:	4aa1      	ldr	r2, [pc, #644]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003900:	4b9e      	ldr	r3, [pc, #632]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003906:	4a9d      	ldr	r2, [pc, #628]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003910:	4b9a      	ldr	r3, [pc, #616]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003916:	4a99      	ldr	r2, [pc, #612]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003920:	e017      	b.n	8003952 <HAL_RCC_OscConfig+0x552>
 8003922:	4b96      	ldr	r3, [pc, #600]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003928:	4a94      	ldr	r2, [pc, #592]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003932:	4b92      	ldr	r3, [pc, #584]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003938:	4a90      	ldr	r2, [pc, #576]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 800393a:	f023 0304 	bic.w	r3, r3, #4
 800393e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003942:	4b8e      	ldr	r3, [pc, #568]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003948:	4a8c      	ldr	r2, [pc, #560]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 800394a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800394e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fd fe65 	bl	8001628 <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003960:	e00a      	b.n	8003978 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fd fe61 	bl	8001628 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e175      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003978:	4b80      	ldr	r3, [pc, #512]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 800397a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0ed      	beq.n	8003962 <HAL_RCC_OscConfig+0x562>
 8003986:	e015      	b.n	80039b4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd fe4e 	bl	8001628 <HAL_GetTick>
 800398c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fd fe4a 	bl	8001628 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e15e      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039a6:	4b75      	ldr	r3, [pc, #468]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 80039a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ed      	bne.n	8003990 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d036      	beq.n	8003a2e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d019      	beq.n	80039fc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039c8:	4b6c      	ldr	r3, [pc, #432]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a6b      	ldr	r2, [pc, #428]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 80039ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fd fe28 	bl	8001628 <HAL_GetTick>
 80039d8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039dc:	f7fd fe24 	bl	8001628 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e13a      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039ee:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x5dc>
 80039fa:	e018      	b.n	8003a2e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039fc:	4b5f      	ldr	r3, [pc, #380]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5e      	ldr	r2, [pc, #376]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fd fe0e 	bl	8001628 <HAL_GetTick>
 8003a0c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003a10:	f7fd fe0a 	bl	8001628 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e120      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a22:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8115 	beq.w	8003c62 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b18      	cmp	r3, #24
 8003a3c:	f000 80af 	beq.w	8003b9e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	f040 8086 	bne.w	8003b56 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003a4a:	4b4c      	ldr	r3, [pc, #304]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4b      	ldr	r2, [pc, #300]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a56:	f7fd fde7 	bl	8001628 <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003a5e:	f7fd fde3 	bl	8001628 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e0f9      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a70:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003a7c:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a84:	f023 0303 	bic.w	r3, r3, #3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a90:	0212      	lsls	r2, r2, #8
 8003a92:	430a      	orrs	r2, r1
 8003a94:	4939      	ldr	r1, [pc, #228]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	628b      	str	r3, [r1, #40]	; 0x28
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	025b      	lsls	r3, r3, #9
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	041b      	lsls	r3, r3, #16
 8003ab8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	061b      	lsls	r3, r3, #24
 8003ac6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003aca:	492c      	ldr	r1, [pc, #176]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003ad0:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae0:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003ae6:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	4a24      	ldr	r2, [pc, #144]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003aec:	f043 0310 	orr.w	r3, r3, #16
 8003af0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003af2:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	f023 020c 	bic.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	491f      	ldr	r1, [pc, #124]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003b04:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	f023 0220 	bic.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	491a      	ldr	r1, [pc, #104]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b16:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b20:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fd fd7b 	bl	8001628 <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b36:	f7fd fd77 	bl	8001628 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e08d      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x736>
 8003b54:	e085      	b.n	8003c62 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <HAL_RCC_OscConfig+0x77c>)
 8003b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fd fd61 	bl	8001628 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b6a:	f7fd fd5d 	bl	8001628 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d903      	bls.n	8003b80 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e073      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
 8003b7c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b80:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ee      	bne.n	8003b6a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003b8c:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	4a36      	ldr	r2, [pc, #216]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003b92:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	6293      	str	r3, [r2, #40]	; 0x28
 8003b9c:	e061      	b.n	8003c62 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003b9e:	4b33      	ldr	r3, [pc, #204]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ba4:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d031      	beq.n	8003c16 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f003 0203 	and.w	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d12a      	bne.n	8003c16 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d122      	bne.n	8003c16 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bda:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d11a      	bne.n	8003c16 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	0a5b      	lsrs	r3, r3, #9
 8003be4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d111      	bne.n	8003c16 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d108      	bne.n	8003c16 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	0e1b      	lsrs	r3, r3, #24
 8003c08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e024      	b.n	8003c64 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	08db      	lsrs	r3, r3, #3
 8003c20:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d01a      	beq.n	8003c62 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	4a0e      	ldr	r2, [pc, #56]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003c32:	f023 0310 	bic.w	r3, r3, #16
 8003c36:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd fcf6 	bl	8001628 <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003c3e:	bf00      	nop
 8003c40:	f7fd fcf2 	bl	8001628 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d0f9      	beq.n	8003c40 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c50:	4a06      	ldr	r2, [pc, #24]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <HAL_RCC_OscConfig+0x86c>)
 8003c5c:	f043 0310 	orr.w	r3, r3, #16
 8003c60:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	44020c00 	.word	0x44020c00

08003c70 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e19e      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b83      	ldr	r3, [pc, #524]	; (8003e94 <HAL_RCC_ClockConfig+0x224>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d910      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b80      	ldr	r3, [pc, #512]	; (8003e94 <HAL_RCC_ClockConfig+0x224>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 020f 	bic.w	r2, r3, #15
 8003c9a:	497e      	ldr	r1, [pc, #504]	; (8003e94 <HAL_RCC_ClockConfig+0x224>)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b7c      	ldr	r3, [pc, #496]	; (8003e94 <HAL_RCC_ClockConfig+0x224>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e186      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d012      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	4b74      	ldr	r3, [pc, #464]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	0a1b      	lsrs	r3, r3, #8
 8003cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d909      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003cd2:	4b71      	ldr	r3, [pc, #452]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	496d      	ldr	r1, [pc, #436]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d012      	beq.n	8003d18 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	4b68      	ldr	r3, [pc, #416]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d909      	bls.n	8003d18 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003d04:	4b64      	ldr	r3, [pc, #400]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	4961      	ldr	r1, [pc, #388]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d010      	beq.n	8003d46 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d908      	bls.n	8003d46 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003d34:	4b58      	ldr	r3, [pc, #352]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4955      	ldr	r1, [pc, #340]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d010      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d908      	bls.n	8003d74 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003d62:	4b4d      	ldr	r3, [pc, #308]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	494a      	ldr	r1, [pc, #296]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8093 	beq.w	8003ea8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d8a:	4b43      	ldr	r3, [pc, #268]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d121      	bne.n	8003dda <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e113      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da2:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d115      	bne.n	8003dda <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e107      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003dba:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0fb      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dca:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0f3      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003dda:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	492c      	ldr	r1, [pc, #176]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dec:	f7fd fc1c 	bl	8001628 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d112      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfc:	f7fd fc14 	bl	8001628 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e0d7      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e12:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 0318 	and.w	r3, r3, #24
 8003e1a:	2b18      	cmp	r3, #24
 8003e1c:	d1ee      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x18c>
 8003e1e:	e043      	b.n	8003ea8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d112      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2a:	f7fd fbfd 	bl	8001628 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e0c0      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e40:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f003 0318 	and.w	r3, r3, #24
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d1ee      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1ba>
 8003e4c:	e02c      	b.n	8003ea8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d122      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e58:	f7fd fbe6 	bl	8001628 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0a9      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <HAL_RCC_ClockConfig+0x228>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0318 	and.w	r3, r3, #24
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d1ee      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x1e8>
 8003e7a:	e015      	b.n	8003ea8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7c:	f7fd fbd4 	bl	8001628 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d906      	bls.n	8003e9c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e097      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
 8003e92:	bf00      	nop
 8003e94:	40022000 	.word	0x40022000
 8003e98:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e9c:	4b4b      	ldr	r3, [pc, #300]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f003 0318 	and.w	r3, r3, #24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e9      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d010      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b44      	ldr	r3, [pc, #272]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d208      	bcs.n	8003ed6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003ec4:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f023 020f 	bic.w	r2, r3, #15
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	493e      	ldr	r1, [pc, #248]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <HAL_RCC_ClockConfig+0x360>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d210      	bcs.n	8003f06 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee4:	4b3a      	ldr	r3, [pc, #232]	; (8003fd0 <HAL_RCC_ClockConfig+0x360>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 020f 	bic.w	r2, r3, #15
 8003eec:	4938      	ldr	r1, [pc, #224]	; (8003fd0 <HAL_RCC_ClockConfig+0x360>)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef4:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_RCC_ClockConfig+0x360>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d001      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e05d      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d010      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d208      	bcs.n	8003f34 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003f22:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	4927      	ldr	r1, [pc, #156]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d012      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d209      	bcs.n	8003f66 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	491a      	ldr	r1, [pc, #104]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d012      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d209      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	490e      	ldr	r1, [pc, #56]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f98:	f000 f822 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	490b      	ldr	r1, [pc, #44]	; (8003fd4 <HAL_RCC_ClockConfig+0x364>)
 8003fa8:	5ccb      	ldrb	r3, [r1, r3]
 8003faa:	fa22 f303 	lsr.w	r3, r2, r3
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <HAL_RCC_ClockConfig+0x368>)
 8003fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_RCC_ClockConfig+0x36c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd faec 	bl	8001594 <HAL_InitTick>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	44020c00 	.word	0x44020c00
 8003fd0:	40022000 	.word	0x40022000
 8003fd4:	0800ba28 	.word	0x0800ba28
 8003fd8:	20000004 	.word	0x20000004
 8003fdc:	20000008 	.word	0x20000008

08003fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003fe6:	4b8c      	ldr	r3, [pc, #560]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f003 0318 	and.w	r3, r3, #24
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d102      	bne.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003ff2:	4b8a      	ldr	r3, [pc, #552]	; (800421c <HAL_RCC_GetSysClockFreq+0x23c>)
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	e107      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ff8:	4b87      	ldr	r3, [pc, #540]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f003 0318 	and.w	r3, r3, #24
 8004000:	2b00      	cmp	r3, #0
 8004002:	d112      	bne.n	800402a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004004:	4b84      	ldr	r3, [pc, #528]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004010:	4b81      	ldr	r3, [pc, #516]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	08db      	lsrs	r3, r3, #3
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	4a81      	ldr	r2, [pc, #516]	; (8004220 <HAL_RCC_GetSysClockFreq+0x240>)
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e0f1      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004024:	4b7e      	ldr	r3, [pc, #504]	; (8004220 <HAL_RCC_GetSysClockFreq+0x240>)
 8004026:	61fb      	str	r3, [r7, #28]
 8004028:	e0ee      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800402a:	4b7b      	ldr	r3, [pc, #492]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 0318 	and.w	r3, r3, #24
 8004032:	2b10      	cmp	r3, #16
 8004034:	d102      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004036:	4b7b      	ldr	r3, [pc, #492]	; (8004224 <HAL_RCC_GetSysClockFreq+0x244>)
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	e0e5      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800403c:	4b76      	ldr	r3, [pc, #472]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f003 0318 	and.w	r3, r3, #24
 8004044:	2b18      	cmp	r3, #24
 8004046:	f040 80dd 	bne.w	8004204 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800404a:	4b73      	ldr	r3, [pc, #460]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004054:	4b70      	ldr	r3, [pc, #448]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800405e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004060:	4b6d      	ldr	r3, [pc, #436]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800406c:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004070:	08db      	lsrs	r3, r3, #3
 8004072:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	fb02 f303 	mul.w	r3, r2, r3
 800407c:	ee07 3a90 	vmov	s15, r3
 8004080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004084:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80b7 	beq.w	80041fe <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d003      	beq.n	800409e <HAL_RCC_GetSysClockFreq+0xbe>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d056      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0x16a>
 800409c:	e077      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800409e:	4b5e      	ldr	r3, [pc, #376]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d02d      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040aa:	4b5b      	ldr	r3, [pc, #364]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	08db      	lsrs	r3, r3, #3
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	4a5a      	ldr	r2, [pc, #360]	; (8004220 <HAL_RCC_GetSysClockFreq+0x240>)
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	ee07 3a90 	vmov	s15, r3
 80040cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d4:	4b50      	ldr	r3, [pc, #320]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040dc:	ee07 3a90 	vmov	s15, r3
 80040e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80040e8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004228 <HAL_RCC_GetSysClockFreq+0x248>
 80040ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004100:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004104:	e065      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	ee07 3a90 	vmov	s15, r3
 800410c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004110:	eddf 6a46 	vldr	s13, [pc, #280]	; 800422c <HAL_RCC_GetSysClockFreq+0x24c>
 8004114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004118:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004128:	ed97 6a02 	vldr	s12, [r7, #8]
 800412c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004228 <HAL_RCC_GetSysClockFreq+0x248>
 8004130:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004134:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800413c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004144:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004148:	e043      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004154:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004230 <HAL_RCC_GetSysClockFreq+0x250>
 8004158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415c:	4b2e      	ldr	r3, [pc, #184]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004164:	ee07 3a90 	vmov	s15, r3
 8004168:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800416c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004170:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004228 <HAL_RCC_GetSysClockFreq+0x248>
 8004174:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004178:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800417c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004180:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004188:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800418c:	e021      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	ee07 3a90 	vmov	s15, r3
 8004194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004198:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004234 <HAL_RCC_GetSysClockFreq+0x254>
 800419c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a0:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80041b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80041b4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004228 <HAL_RCC_GetSysClockFreq+0x248>
 80041b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80041c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041cc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80041d0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <HAL_RCC_GetSysClockFreq+0x238>)
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	0a5b      	lsrs	r3, r3, #9
 80041d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041dc:	3301      	adds	r3, #1
 80041de:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041ea:	edd7 6a06 	vldr	s13, [r7, #24]
 80041ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f6:	ee17 3a90 	vmov	r3, s15
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	e004      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e001      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCC_GetSysClockFreq+0x240>)
 8004206:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004208:	69fb      	ldr	r3, [r7, #28]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3724      	adds	r7, #36	; 0x24
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	44020c00 	.word	0x44020c00
 800421c:	003d0900 	.word	0x003d0900
 8004220:	03d09000 	.word	0x03d09000
 8004224:	007a1200 	.word	0x007a1200
 8004228:	46000000 	.word	0x46000000
 800422c:	4c742400 	.word	0x4c742400
 8004230:	4af42400 	.word	0x4af42400
 8004234:	4a742400 	.word	0x4a742400

08004238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800423c:	f7ff fed0 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004246:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800424a:	4907      	ldr	r1, [pc, #28]	; (8004268 <HAL_RCC_GetHCLKFreq+0x30>)
 800424c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800424e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	4a05      	ldr	r2, [pc, #20]	; (800426c <HAL_RCC_GetHCLKFreq+0x34>)
 8004258:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800425a:	4b04      	ldr	r3, [pc, #16]	; (800426c <HAL_RCC_GetHCLKFreq+0x34>)
 800425c:	681b      	ldr	r3, [r3, #0]
}
 800425e:	4618      	mov	r0, r3
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	44020c00 	.word	0x44020c00
 8004268:	0800ba28 	.word	0x0800ba28
 800426c:	20000004 	.word	0x20000004

08004270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004274:	f7ff ffe0 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	091b      	lsrs	r3, r3, #4
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	4904      	ldr	r1, [pc, #16]	; (8004298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	44020c00 	.word	0x44020c00
 8004298:	0800ba38 	.word	0x0800ba38

0800429c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80042a0:	f7ff ffca 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	4904      	ldr	r1, [pc, #16]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042b2:	5ccb      	ldrb	r3, [r1, r3]
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	44020c00 	.word	0x44020c00
 80042c4:	0800ba38 	.word	0x0800ba38

080042c8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80042cc:	f7ff ffb4 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_RCC_GetPCLK3Freq+0x24>)
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	0b1b      	lsrs	r3, r3, #12
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4904      	ldr	r1, [pc, #16]	; (80042f0 <HAL_RCC_GetPCLK3Freq+0x28>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	44020c00 	.word	0x44020c00
 80042f0:	0800ba38 	.word	0x0800ba38

080042f4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b0d8      	sub	sp, #352	; 0x160
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004300:	2300      	movs	r3, #0
 8004302:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004306:	2300      	movs	r3, #0
 8004308:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800430c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8004318:	2500      	movs	r5, #0
 800431a:	ea54 0305 	orrs.w	r3, r4, r5
 800431e:	d00b      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004320:	4bcd      	ldr	r3, [pc, #820]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004326:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800432a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	4ac9      	ldr	r2, [pc, #804]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004332:	430b      	orrs	r3, r1
 8004334:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004338:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f002 0801 	and.w	r8, r2, #1
 8004344:	f04f 0900 	mov.w	r9, #0
 8004348:	ea58 0309 	orrs.w	r3, r8, r9
 800434c:	d042      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800434e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004354:	2b05      	cmp	r3, #5
 8004356:	d823      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	080043a9 	.word	0x080043a9
 8004364:	08004379 	.word	0x08004379
 8004368:	0800438d 	.word	0x0800438d
 800436c:	080043a9 	.word	0x080043a9
 8004370:	080043a9 	.word	0x080043a9
 8004374:	080043a9 	.word	0x080043a9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004378:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800437c:	3308      	adds	r3, #8
 800437e:	4618      	mov	r0, r3
 8004380:	f004 feda 	bl	8009138 <RCCEx_PLL2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800438a:	e00e      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800438c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004390:	3330      	adds	r3, #48	; 0x30
 8004392:	4618      	mov	r0, r3
 8004394:	f004 ff68 	bl	8009268 <RCCEx_PLL3_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800439e:	e004      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043a6:	e000      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80043a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10c      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80043b2:	4ba9      	ldr	r3, [pc, #676]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80043b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80043b8:	f023 0107 	bic.w	r1, r3, #7
 80043bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	4aa5      	ldr	r2, [pc, #660]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80043c4:	430b      	orrs	r3, r1
 80043c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80043ca:	e003      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043d0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f002 0a02 	and.w	sl, r2, #2
 80043e0:	f04f 0b00 	mov.w	fp, #0
 80043e4:	ea5a 030b 	orrs.w	r3, sl, fp
 80043e8:	f000 8088 	beq.w	80044fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80043ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f2:	2b28      	cmp	r3, #40	; 0x28
 80043f4:	d868      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	080044d1 	.word	0x080044d1
 8004400:	080044c9 	.word	0x080044c9
 8004404:	080044c9 	.word	0x080044c9
 8004408:	080044c9 	.word	0x080044c9
 800440c:	080044c9 	.word	0x080044c9
 8004410:	080044c9 	.word	0x080044c9
 8004414:	080044c9 	.word	0x080044c9
 8004418:	080044c9 	.word	0x080044c9
 800441c:	080044a1 	.word	0x080044a1
 8004420:	080044c9 	.word	0x080044c9
 8004424:	080044c9 	.word	0x080044c9
 8004428:	080044c9 	.word	0x080044c9
 800442c:	080044c9 	.word	0x080044c9
 8004430:	080044c9 	.word	0x080044c9
 8004434:	080044c9 	.word	0x080044c9
 8004438:	080044c9 	.word	0x080044c9
 800443c:	080044b5 	.word	0x080044b5
 8004440:	080044c9 	.word	0x080044c9
 8004444:	080044c9 	.word	0x080044c9
 8004448:	080044c9 	.word	0x080044c9
 800444c:	080044c9 	.word	0x080044c9
 8004450:	080044c9 	.word	0x080044c9
 8004454:	080044c9 	.word	0x080044c9
 8004458:	080044c9 	.word	0x080044c9
 800445c:	080044d1 	.word	0x080044d1
 8004460:	080044c9 	.word	0x080044c9
 8004464:	080044c9 	.word	0x080044c9
 8004468:	080044c9 	.word	0x080044c9
 800446c:	080044c9 	.word	0x080044c9
 8004470:	080044c9 	.word	0x080044c9
 8004474:	080044c9 	.word	0x080044c9
 8004478:	080044c9 	.word	0x080044c9
 800447c:	080044d1 	.word	0x080044d1
 8004480:	080044c9 	.word	0x080044c9
 8004484:	080044c9 	.word	0x080044c9
 8004488:	080044c9 	.word	0x080044c9
 800448c:	080044c9 	.word	0x080044c9
 8004490:	080044c9 	.word	0x080044c9
 8004494:	080044c9 	.word	0x080044c9
 8004498:	080044c9 	.word	0x080044c9
 800449c:	080044d1 	.word	0x080044d1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044a4:	3308      	adds	r3, #8
 80044a6:	4618      	mov	r0, r3
 80044a8:	f004 fe46 	bl	8009138 <RCCEx_PLL2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80044b2:	e00e      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044b8:	3330      	adds	r3, #48	; 0x30
 80044ba:	4618      	mov	r0, r3
 80044bc:	f004 fed4 	bl	8009268 <RCCEx_PLL3_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80044c6:	e004      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80044ce:	e000      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80044d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80044da:	4b5f      	ldr	r3, [pc, #380]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80044dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044e0:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80044e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ea:	4a5b      	ldr	r2, [pc, #364]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80044ec:	430b      	orrs	r3, r1
 80044ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80044f2:	e003      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044f8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f002 0304 	and.w	r3, r2, #4
 8004508:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004512:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d04e      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800451c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004522:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004526:	d02c      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004528:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800452c:	d825      	bhi.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800452e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004532:	d028      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004538:	d81f      	bhi.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800453a:	2bc0      	cmp	r3, #192	; 0xc0
 800453c:	d025      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800453e:	2bc0      	cmp	r3, #192	; 0xc0
 8004540:	d81b      	bhi.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004542:	2b80      	cmp	r3, #128	; 0x80
 8004544:	d00f      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d817      	bhi.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01f      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800454e:	2b40      	cmp	r3, #64	; 0x40
 8004550:	d113      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004552:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004556:	3308      	adds	r3, #8
 8004558:	4618      	mov	r0, r3
 800455a:	f004 fded 	bl	8009138 <RCCEx_PLL2_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004564:	e014      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004566:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800456a:	3330      	adds	r3, #48	; 0x30
 800456c:	4618      	mov	r0, r3
 800456e:	f004 fe7b 	bl	8009268 <RCCEx_PLL3_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004578:	e00a      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004580:	e006      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004582:	bf00      	nop
 8004584:	e004      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004586:	bf00      	nop
 8004588:	e002      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800458e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004590:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10c      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004598:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800459a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800459e:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80045a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a8:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80045aa:	430b      	orrs	r3, r1
 80045ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80045b0:	e003      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045b6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f002 0308 	and.w	r3, r2, #8
 80045c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80045d0:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80045d4:	460b      	mov	r3, r1
 80045d6:	4313      	orrs	r3, r2
 80045d8:	d056      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80045da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80045e4:	d031      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80045e6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80045ea:	d82a      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80045ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f0:	d02d      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80045f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f6:	d824      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80045f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045fc:	d029      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80045fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004602:	d81e      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004608:	d011      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460e:	d818      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d023      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004618:	d113      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800461a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800461e:	3308      	adds	r3, #8
 8004620:	4618      	mov	r0, r3
 8004622:	f004 fd89 	bl	8009138 <RCCEx_PLL2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800462c:	e017      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800462e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004632:	3330      	adds	r3, #48	; 0x30
 8004634:	4618      	mov	r0, r3
 8004636:	f004 fe17 	bl	8009268 <RCCEx_PLL3_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004640:	e00d      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004648:	e009      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800464a:	bf00      	nop
 800464c:	e007      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800464e:	bf00      	nop
 8004650:	e005      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004652:	bf00      	nop
 8004654:	e003      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004656:	bf00      	nop
 8004658:	44020c00 	.word	0x44020c00
        break;
 800465c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10c      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004666:	4bbb      	ldr	r3, [pc, #748]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800466c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004670:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004676:	4ab7      	ldr	r2, [pc, #732]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004678:	430b      	orrs	r3, r1
 800467a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800467e:	e003      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004684:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004688:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f002 0310 	and.w	r3, r2, #16
 8004694:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004698:	2300      	movs	r3, #0
 800469a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800469e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80046a2:	460b      	mov	r3, r1
 80046a4:	4313      	orrs	r3, r2
 80046a6:	d053      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80046a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80046b2:	d031      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80046b4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80046b8:	d82a      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80046ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046be:	d02d      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x428>
 80046c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c4:	d824      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80046c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046ca:	d029      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80046cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046d0:	d81e      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80046d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d6:	d011      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80046d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046dc:	d818      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d020      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e6:	d113      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046ec:	3308      	adds	r3, #8
 80046ee:	4618      	mov	r0, r3
 80046f0:	f004 fd22 	bl	8009138 <RCCEx_PLL2_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80046fa:	e014      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004700:	3330      	adds	r3, #48	; 0x30
 8004702:	4618      	mov	r0, r3
 8004704:	f004 fdb0 	bl	8009268 <RCCEx_PLL3_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800470e:	e00a      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004716:	e006      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004718:	bf00      	nop
 800471a:	e004      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800471c:	bf00      	nop
 800471e:	e002      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004720:	bf00      	nop
 8004722:	e000      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004726:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800472e:	4b89      	ldr	r3, [pc, #548]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004734:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004738:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800473c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473e:	4a85      	ldr	r2, [pc, #532]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004740:	430b      	orrs	r3, r1
 8004742:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004746:	e003      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800474c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004750:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	f002 0320 	and.w	r3, r2, #32
 800475c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004766:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800476a:	460b      	mov	r3, r1
 800476c:	4313      	orrs	r3, r2
 800476e:	d053      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004770:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800477a:	d031      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800477c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004780:	d82a      	bhi.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004786:	d02d      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800478c:	d824      	bhi.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800478e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004792:	d029      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004794:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004798:	d81e      	bhi.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800479a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479e:	d011      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a4:	d818      	bhi.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d020      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80047aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ae:	d113      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047b4:	3308      	adds	r3, #8
 80047b6:	4618      	mov	r0, r3
 80047b8:	f004 fcbe 	bl	8009138 <RCCEx_PLL2_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80047c2:	e014      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047c8:	3330      	adds	r3, #48	; 0x30
 80047ca:	4618      	mov	r0, r3
 80047cc:	f004 fd4c 	bl	8009268 <RCCEx_PLL3_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80047d6:	e00a      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047de:	e006      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80047e0:	bf00      	nop
 80047e2:	e004      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80047e4:	bf00      	nop
 80047e6:	e002      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80047e8:	bf00      	nop
 80047ea:	e000      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80047ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10c      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80047f6:	4b57      	ldr	r3, [pc, #348]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80047f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80047fc:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8004800:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a53      	ldr	r2, [pc, #332]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004808:	430b      	orrs	r3, r1
 800480a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800480e:	e003      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004814:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004818:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004824:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004828:	2300      	movs	r3, #0
 800482a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800482e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8004832:	460b      	mov	r3, r1
 8004834:	4313      	orrs	r3, r2
 8004836:	d053      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004838:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800483c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004842:	d031      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004844:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004848:	d82a      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800484a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484e:	d02d      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004854:	d824      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004856:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800485a:	d029      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800485c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004860:	d81e      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004862:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004866:	d011      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004868:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800486c:	d818      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d020      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004872:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004876:	d113      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004878:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800487c:	3308      	adds	r3, #8
 800487e:	4618      	mov	r0, r3
 8004880:	f004 fc5a 	bl	8009138 <RCCEx_PLL2_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800488a:	e014      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800488c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004890:	3330      	adds	r3, #48	; 0x30
 8004892:	4618      	mov	r0, r3
 8004894:	f004 fce8 	bl	8009268 <RCCEx_PLL3_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800489e:	e00a      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048a6:	e006      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80048a8:	bf00      	nop
 80048aa:	e004      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80048ac:	bf00      	nop
 80048ae:	e002      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80048b0:	bf00      	nop
 80048b2:	e000      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80048b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80048be:	4b25      	ldr	r3, [pc, #148]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80048c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048c4:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80048c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ce:	4a21      	ldr	r2, [pc, #132]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80048ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80048f6:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d055      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004900:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004906:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800490a:	d033      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800490c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004910:	d82c      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004912:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004916:	d02f      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004918:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800491c:	d826      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x678>
 800491e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004922:	d02b      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004924:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004928:	d820      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x678>
 800492a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800492e:	d013      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004934:	d81a      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d022      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800493a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800493e:	d115      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004940:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004944:	3308      	adds	r3, #8
 8004946:	4618      	mov	r0, r3
 8004948:	f004 fbf6 	bl	8009138 <RCCEx_PLL2_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004952:	e016      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004954:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004958:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800495c:	3330      	adds	r3, #48	; 0x30
 800495e:	4618      	mov	r0, r3
 8004960:	f004 fc82 	bl	8009268 <RCCEx_PLL3_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800496a:	e00a      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004972:	e006      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004974:	bf00      	nop
 8004976:	e004      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004978:	bf00      	nop
 800497a:	e002      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800497c:	bf00      	nop
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004982:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10c      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800498a:	4bbb      	ldr	r3, [pc, #748]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800498c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004990:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004994:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800499a:	4ab7      	ldr	r2, [pc, #732]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800499c:	430b      	orrs	r3, r1
 800499e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80049a2:	e003      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80049ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80049b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80049bc:	2300      	movs	r3, #0
 80049be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80049c2:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80049c6:	460b      	mov	r3, r1
 80049c8:	4313      	orrs	r3, r2
 80049ca:	d053      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80049cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80049d6:	d031      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x748>
 80049d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80049dc:	d82a      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80049de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e2:	d02d      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80049e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e8:	d824      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80049ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ee:	d029      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80049f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049f4:	d81e      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80049f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fa:	d011      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80049fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a00:	d818      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d020      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004a06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a0a:	d113      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a10:	3308      	adds	r3, #8
 8004a12:	4618      	mov	r0, r3
 8004a14:	f004 fb90 	bl	8009138 <RCCEx_PLL2_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004a1e:	e014      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a24:	3330      	adds	r3, #48	; 0x30
 8004a26:	4618      	mov	r0, r3
 8004a28:	f004 fc1e 	bl	8009268 <RCCEx_PLL3_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004a32:	e00a      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a3a:	e006      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004a3c:	bf00      	nop
 8004a3e:	e004      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004a40:	bf00      	nop
 8004a42:	e002      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004a44:	bf00      	nop
 8004a46:	e000      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004a52:	4b89      	ldr	r3, [pc, #548]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a58:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004a5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a62:	4a85      	ldr	r2, [pc, #532]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004a64:	430b      	orrs	r3, r1
 8004a66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004a6a:	e003      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a70:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004a74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004a80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004a8a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d055      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004aa0:	d031      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004aa2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004aa6:	d82a      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aac:	d02d      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab2:	d824      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004ab4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004ab8:	d029      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004aba:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004abe:	d81e      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ac4:	d011      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aca:	d818      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d020      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad4:	d113      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ada:	3308      	adds	r3, #8
 8004adc:	4618      	mov	r0, r3
 8004ade:	f004 fb2b 	bl	8009138 <RCCEx_PLL2_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004ae8:	e014      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aee:	3330      	adds	r3, #48	; 0x30
 8004af0:	4618      	mov	r0, r3
 8004af2:	f004 fbb9 	bl	8009268 <RCCEx_PLL3_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004afc:	e00a      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b04:	e006      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004b06:	bf00      	nop
 8004b08:	e004      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004b0a:	bf00      	nop
 8004b0c:	e002      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004b0e:	bf00      	nop
 8004b10:	e000      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10d      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004b1c:	4b56      	ldr	r3, [pc, #344]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004b1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b22:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8004b26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b2e:	4a52      	ldr	r2, [pc, #328]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004b30:	430b      	orrs	r3, r1
 8004b32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004b36:	e003      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b3c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004b40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004b4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b50:	2300      	movs	r3, #0
 8004b52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b56:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	d044      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b68:	2b05      	cmp	r3, #5
 8004b6a:	d823      	bhi.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004bbd 	.word	0x08004bbd
 8004b78:	08004b8d 	.word	0x08004b8d
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004bbd 	.word	0x08004bbd
 8004b84:	08004bbd 	.word	0x08004bbd
 8004b88:	08004bbd 	.word	0x08004bbd
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b90:	3308      	adds	r3, #8
 8004b92:	4618      	mov	r0, r3
 8004b94:	f004 fad0 	bl	8009138 <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004b9e:	e00e      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ba4:	3330      	adds	r3, #48	; 0x30
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 fb5e 	bl	8009268 <RCCEx_PLL3_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004bb2:	e004      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10d      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8004bc6:	4b2c      	ldr	r3, [pc, #176]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004bc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004bcc:	f023 0107 	bic.w	r1, r3, #7
 8004bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd8:	4a27      	ldr	r2, [pc, #156]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004be0:	e003      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004be6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004bea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004bf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c00:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004c04:	460b      	mov	r3, r1
 8004c06:	4313      	orrs	r3, r2
 8004c08:	d04f      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004c0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	2b50      	cmp	r3, #80	; 0x50
 8004c14:	d029      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004c16:	2b50      	cmp	r3, #80	; 0x50
 8004c18:	d823      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d027      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d81f      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004c22:	2b30      	cmp	r3, #48	; 0x30
 8004c24:	d025      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004c26:	2b30      	cmp	r3, #48	; 0x30
 8004c28:	d81b      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d00f      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d817      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d022      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004c36:	2b10      	cmp	r3, #16
 8004c38:	d113      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c3e:	3308      	adds	r3, #8
 8004c40:	4618      	mov	r0, r3
 8004c42:	f004 fa79 	bl	8009138 <RCCEx_PLL2_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004c4c:	e017      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c52:	3330      	adds	r3, #48	; 0x30
 8004c54:	4618      	mov	r0, r3
 8004c56:	f004 fb07 	bl	8009268 <RCCEx_PLL3_Config>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004c60:	e00d      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c68:	e009      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004c6a:	bf00      	nop
 8004c6c:	e007      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004c6e:	bf00      	nop
 8004c70:	e005      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004c72:	bf00      	nop
 8004c74:	e003      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8004c76:	bf00      	nop
 8004c78:	44020c00 	.word	0x44020c00
        break;
 8004c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8004c86:	4baf      	ldr	r3, [pc, #700]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004c88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004c8c:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	4aaa      	ldr	r2, [pc, #680]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004ca0:	e003      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ca6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004cb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	d055      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004cd6:	d031      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004cd8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004cdc:	d82a      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ce2:	d02d      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ce8:	d824      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004cea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cee:	d029      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004cf0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cf4:	d81e      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cfa:	d011      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004cfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d00:	d818      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d020      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d0a:	d113      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d10:	3308      	adds	r3, #8
 8004d12:	4618      	mov	r0, r3
 8004d14:	f004 fa10 	bl	8009138 <RCCEx_PLL2_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004d1e:	e014      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d24:	3330      	adds	r3, #48	; 0x30
 8004d26:	4618      	mov	r0, r3
 8004d28:	f004 fa9e 	bl	8009268 <RCCEx_PLL3_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004d32:	e00a      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d3a:	e006      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004d3c:	bf00      	nop
 8004d3e:	e004      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004d40:	bf00      	nop
 8004d42:	e002      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004d44:	bf00      	nop
 8004d46:	e000      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10d      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004d52:	4b7c      	ldr	r3, [pc, #496]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d58:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004d5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	4a77      	ldr	r2, [pc, #476]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004d66:	430b      	orrs	r3, r1
 8004d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d6c:	e003      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d72:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d86:	2300      	movs	r3, #0
 8004d88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004d90:	460b      	mov	r3, r1
 8004d92:	4313      	orrs	r3, r2
 8004d94:	d03d      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004da2:	d01b      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004da4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004da8:	d814      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dae:	d017      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db4:	d80e      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d014      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbe:	d109      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dc4:	3330      	adds	r3, #48	; 0x30
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f004 fa4e 	bl	8009268 <RCCEx_PLL3_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004dd2:	e008      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004dda:	e004      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004ddc:	bf00      	nop
 8004dde:	e002      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004de0:	bf00      	nop
 8004de2:	e000      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10d      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004dee:	4b55      	ldr	r3, [pc, #340]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004df0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004df4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004df8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	4a50      	ldr	r2, [pc, #320]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e02:	430b      	orrs	r3, r1
 8004e04:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004e08:	e003      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e0e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004e1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e22:	2300      	movs	r3, #0
 8004e24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e28:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	d03d      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e3e:	d01b      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004e40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e44:	d814      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004e46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e4a:	d017      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004e4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e50:	d80e      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d014      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e5a:	d109      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e60:	3330      	adds	r3, #48	; 0x30
 8004e62:	4618      	mov	r0, r3
 8004e64:	f004 fa00 	bl	8009268 <RCCEx_PLL3_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004e6e:	e008      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004e78:	bf00      	nop
 8004e7a:	e002      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004e7c:	bf00      	nop
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10d      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004e8a:	4b2e      	ldr	r3, [pc, #184]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e90:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9c:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004ea4:	e003      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004eaa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ec4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	d040      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ed6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004eda:	d01b      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004edc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ee0:	d814      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee6:	d017      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eec:	d80e      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d014      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef6:	d109      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004efc:	3330      	adds	r3, #48	; 0x30
 8004efe:	4618      	mov	r0, r3
 8004f00:	f004 f9b2 	bl	8009268 <RCCEx_PLL3_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004f0a:	e008      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f12:	e004      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004f14:	bf00      	nop
 8004f16:	e002      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004f18:	bf00      	nop
 8004f1a:	e000      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d110      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004f26:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004f28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f2c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f38:	4a02      	ldr	r2, [pc, #8]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004f40:	e006      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004f42:	bf00      	nop
 8004f44:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f4c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	2100      	movs	r1, #0
 8004f5a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	d03d      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f7c:	d01b      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004f7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f82:	d814      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004f84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f88:	d017      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004f8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f8e:	d80e      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d014      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f98:	d109      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f9e:	3330      	adds	r3, #48	; 0x30
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f004 f961 	bl	8009268 <RCCEx_PLL3_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004fac:	e008      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004fb4:	e004      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004fb6:	bf00      	nop
 8004fb8:	e002      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004fba:	bf00      	nop
 8004fbc:	e000      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10d      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004fc8:	4bbe      	ldr	r3, [pc, #760]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004fca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fce:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fda:	4aba      	ldr	r2, [pc, #744]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004fe2:	e003      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fe8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004fec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005002:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005006:	460b      	mov	r3, r1
 8005008:	4313      	orrs	r3, r2
 800500a:	d035      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800500c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005010:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005014:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005018:	d015      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800501a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800501e:	d80e      	bhi.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005028:	d109      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800502a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800502e:	3330      	adds	r3, #48	; 0x30
 8005030:	4618      	mov	r0, r3
 8005032:	f004 f919 	bl	8009268 <RCCEx_PLL3_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800503c:	e006      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005044:	e002      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800504a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10d      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005054:	4b9b      	ldr	r3, [pc, #620]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005056:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800505a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800505e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005066:	4a97      	ldr	r2, [pc, #604]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005068:	430b      	orrs	r3, r1
 800506a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800506e:	e003      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005070:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005074:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005078:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	2100      	movs	r1, #0
 8005082:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800508a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800508e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005092:	460b      	mov	r3, r1
 8005094:	4313      	orrs	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005098:	4b8a      	ldr	r3, [pc, #552]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	4a89      	ldr	r2, [pc, #548]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800509e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050a2:	61d3      	str	r3, [r2, #28]
 80050a4:	4b87      	ldr	r3, [pc, #540]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80050a6:	69d9      	ldr	r1, [r3, #28]
 80050a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80050b0:	4a84      	ldr	r2, [pc, #528]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80050b2:	430b      	orrs	r3, r1
 80050b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80050c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050c6:	2300      	movs	r3, #0
 80050c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80050cc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80050d0:	460b      	mov	r3, r1
 80050d2:	4313      	orrs	r3, r2
 80050d4:	d055      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80050d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80050e2:	d031      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80050e4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80050e8:	d82a      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80050ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ee:	d02d      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80050f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f4:	d824      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80050f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fa:	d029      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80050fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005100:	d81e      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005106:	d011      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800510c:	d818      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d020      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005116:	d113      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005118:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800511c:	3308      	adds	r3, #8
 800511e:	4618      	mov	r0, r3
 8005120:	f004 f80a 	bl	8009138 <RCCEx_PLL2_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800512a:	e014      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800512c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005130:	3330      	adds	r3, #48	; 0x30
 8005132:	4618      	mov	r0, r3
 8005134:	f004 f898 	bl	8009268 <RCCEx_PLL3_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800513e:	e00a      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005146:	e006      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005148:	bf00      	nop
 800514a:	e004      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005156:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10d      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800515e:	4b59      	ldr	r3, [pc, #356]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005160:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005164:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005168:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800516c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005170:	4a54      	ldr	r2, [pc, #336]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005172:	430b      	orrs	r3, r1
 8005174:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005178:	e003      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800517e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005182:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800518e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005192:	2300      	movs	r3, #0
 8005194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005198:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800519c:	460b      	mov	r3, r1
 800519e:	4313      	orrs	r3, r2
 80051a0:	d055      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80051a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051aa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80051ae:	d031      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80051b0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80051b4:	d82a      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80051b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ba:	d02d      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80051bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051c0:	d824      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80051c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051c6:	d029      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80051c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051cc:	d81e      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80051ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d2:	d011      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80051d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d8:	d818      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d020      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e2:	d113      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051e8:	3308      	adds	r3, #8
 80051ea:	4618      	mov	r0, r3
 80051ec:	f003 ffa4 	bl	8009138 <RCCEx_PLL2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80051f6:	e014      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051fc:	3330      	adds	r3, #48	; 0x30
 80051fe:	4618      	mov	r0, r3
 8005200:	f004 f832 	bl	8009268 <RCCEx_PLL3_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800520a:	e00a      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005212:	e006      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005214:	bf00      	nop
 8005216:	e004      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005218:	bf00      	nop
 800521a:	e002      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800521c:	bf00      	nop
 800521e:	e000      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005222:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10d      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800522a:	4b26      	ldr	r3, [pc, #152]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800522c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005230:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005238:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800523c:	4a21      	ldr	r2, [pc, #132]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800523e:	430b      	orrs	r3, r1
 8005240:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005244:	e003      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005246:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800524a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800524e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	2100      	movs	r1, #0
 8005258:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005268:	460b      	mov	r3, r1
 800526a:	4313      	orrs	r3, r2
 800526c:	d057      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800526e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005272:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005276:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800527a:	d033      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800527c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005280:	d82c      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005282:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005286:	d02f      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005288:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800528c:	d826      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800528e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005292:	d02b      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005294:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005298:	d820      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800529a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800529e:	d013      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80052a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052a4:	d81a      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d022      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80052aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ae:	d115      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052b4:	3308      	adds	r3, #8
 80052b6:	4618      	mov	r0, r3
 80052b8:	f003 ff3e 	bl	8009138 <RCCEx_PLL2_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80052c2:	e016      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80052c4:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052cc:	3330      	adds	r3, #48	; 0x30
 80052ce:	4618      	mov	r0, r3
 80052d0:	f003 ffca 	bl	8009268 <RCCEx_PLL3_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80052da:	e00a      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80052e2:	e006      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80052e4:	bf00      	nop
 80052e6:	e004      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80052e8:	bf00      	nop
 80052ea:	e002      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80052f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10d      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80052fa:	4bbb      	ldr	r3, [pc, #748]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80052fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005300:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005304:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005308:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800530c:	4ab6      	ldr	r2, [pc, #728]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800530e:	430b      	orrs	r3, r1
 8005310:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005314:	e003      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005316:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800531a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800531e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	2100      	movs	r1, #0
 8005328:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005334:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005338:	460b      	mov	r3, r1
 800533a:	4313      	orrs	r3, r2
 800533c:	d055      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800533e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005342:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005346:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800534a:	d031      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800534c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005350:	d82a      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005356:	d02d      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800535c:	d824      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800535e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005362:	d029      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005368:	d81e      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800536a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800536e:	d011      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005374:	d818      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d020      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800537a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800537e:	d113      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005380:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005384:	3308      	adds	r3, #8
 8005386:	4618      	mov	r0, r3
 8005388:	f003 fed6 	bl	8009138 <RCCEx_PLL2_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005392:	e014      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005394:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005398:	3330      	adds	r3, #48	; 0x30
 800539a:	4618      	mov	r0, r3
 800539c:	f003 ff64 	bl	8009268 <RCCEx_PLL3_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80053a6:	e00a      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053ae:	e006      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80053b0:	bf00      	nop
 80053b2:	e004      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80053b4:	bf00      	nop
 80053b6:	e002      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80053bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10d      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80053c6:	4b88      	ldr	r3, [pc, #544]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80053c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80053cc:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80053d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053d8:	4a83      	ldr	r2, [pc, #524]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80053da:	430b      	orrs	r3, r1
 80053dc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80053e0:	e003      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053e6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80053ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	2100      	movs	r1, #0
 80053f4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80053f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005400:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005404:	460b      	mov	r3, r1
 8005406:	4313      	orrs	r3, r2
 8005408:	d055      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800540a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800540e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005412:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005416:	d031      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005418:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800541c:	d82a      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800541e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005422:	d02d      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005428:	d824      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800542a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800542e:	d029      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005430:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005434:	d81e      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800543a:	d011      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800543c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005440:	d818      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d020      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005446:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800544a:	d113      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800544c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005450:	3308      	adds	r3, #8
 8005452:	4618      	mov	r0, r3
 8005454:	f003 fe70 	bl	8009138 <RCCEx_PLL2_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800545e:	e014      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005460:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005464:	3330      	adds	r3, #48	; 0x30
 8005466:	4618      	mov	r0, r3
 8005468:	f003 fefe 	bl	8009268 <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005472:	e00a      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800547a:	e006      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800547c:	bf00      	nop
 800547e:	e004      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10d      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005492:	4b55      	ldr	r3, [pc, #340]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005494:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005498:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800549c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054a4:	4a50      	ldr	r2, [pc, #320]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80054a6:	430b      	orrs	r3, r1
 80054a8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80054ac:	e003      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80054b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	2100      	movs	r1, #0
 80054c0:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80054c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054cc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80054d0:	460b      	mov	r3, r1
 80054d2:	4313      	orrs	r3, r2
 80054d4:	d055      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80054d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80054de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054e2:	d031      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80054e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054e8:	d82a      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ee:	d02d      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f4:	d824      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80054f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054fa:	d029      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80054fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005500:	d81e      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005506:	d011      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800550c:	d818      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005516:	d113      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005518:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800551c:	3308      	adds	r3, #8
 800551e:	4618      	mov	r0, r3
 8005520:	f003 fe0a 	bl	8009138 <RCCEx_PLL2_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800552a:	e014      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800552c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005530:	3330      	adds	r3, #48	; 0x30
 8005532:	4618      	mov	r0, r3
 8005534:	f003 fe98 	bl	8009268 <RCCEx_PLL3_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800553e:	e00a      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005546:	e006      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005548:	bf00      	nop
 800554a:	e004      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800554c:	bf00      	nop
 800554e:	e002      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005556:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10d      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800555e:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005560:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005564:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005568:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800556c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005570:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005572:	430b      	orrs	r3, r1
 8005574:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800557e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005582:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800558e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005592:	2300      	movs	r3, #0
 8005594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005598:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800559c:	460b      	mov	r3, r1
 800559e:	4313      	orrs	r3, r2
 80055a0:	d055      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80055a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055ae:	d035      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80055b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055b4:	d82e      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80055b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ba:	d031      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80055bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055c0:	d828      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80055c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c6:	d01b      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80055c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055cc:	d822      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80055d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d6:	d009      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80055d8:	e01c      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055da:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	4a02      	ldr	r2, [pc, #8]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80055e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80055e6:	e01c      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80055e8:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055f0:	3308      	adds	r3, #8
 80055f2:	4618      	mov	r0, r3
 80055f4:	f003 fda0 	bl	8009138 <RCCEx_PLL2_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80055fe:	e010      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005600:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005604:	3330      	adds	r3, #48	; 0x30
 8005606:	4618      	mov	r0, r3
 8005608:	f003 fe2e 	bl	8009268 <RCCEx_PLL3_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005612:	e006      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800561a:	e002      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800561c:	bf00      	nop
 800561e:	e000      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005622:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10d      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800562a:	4bc3      	ldr	r3, [pc, #780]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800562c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005630:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005634:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005638:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800563c:	4abe      	ldr	r2, [pc, #760]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800563e:	430b      	orrs	r3, r1
 8005640:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005644:	e003      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005646:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800564a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800564e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800565a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800565e:	2300      	movs	r3, #0
 8005660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005664:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005668:	460b      	mov	r3, r1
 800566a:	4313      	orrs	r3, r2
 800566c:	d051      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800566e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005672:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800567a:	d033      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800567c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005680:	d82c      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005682:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005686:	d02d      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005688:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800568c:	d826      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800568e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005692:	d019      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005698:	d820      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800569e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056a2:	d007      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80056a4:	e01a      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a6:	4ba4      	ldr	r3, [pc, #656]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	4aa3      	ldr	r2, [pc, #652]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80056ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80056b2:	e018      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056b8:	3308      	adds	r3, #8
 80056ba:	4618      	mov	r0, r3
 80056bc:	f003 fd3c 	bl	8009138 <RCCEx_PLL2_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80056c6:	e00e      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056cc:	3330      	adds	r3, #48	; 0x30
 80056ce:	4618      	mov	r0, r3
 80056d0:	f003 fdca 	bl	8009268 <RCCEx_PLL3_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80056da:	e004      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056e2:	e000      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80056e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10d      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80056ee:	4b92      	ldr	r3, [pc, #584]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80056f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056f4:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80056f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005700:	4a8d      	ldr	r2, [pc, #564]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005702:	430b      	orrs	r3, r1
 8005704:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800570e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005712:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800571e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005720:	2300      	movs	r3, #0
 8005722:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005724:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005728:	460b      	mov	r3, r1
 800572a:	4313      	orrs	r3, r2
 800572c:	d032      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800572e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005732:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005736:	2b05      	cmp	r3, #5
 8005738:	d80f      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800573a:	2b03      	cmp	r3, #3
 800573c:	d211      	bcs.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800573e:	2b01      	cmp	r3, #1
 8005740:	d911      	bls.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005742:	2b02      	cmp	r3, #2
 8005744:	d109      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005746:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800574a:	3308      	adds	r3, #8
 800574c:	4618      	mov	r0, r3
 800574e:	f003 fcf3 	bl	8009138 <RCCEx_PLL2_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005760:	e002      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005768:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10d      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005770:	4b71      	ldr	r3, [pc, #452]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005772:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005776:	f023 0107 	bic.w	r1, r3, #7
 800577a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800577e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005782:	4a6d      	ldr	r2, [pc, #436]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005784:	430b      	orrs	r3, r1
 8005786:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800578a:	e003      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005790:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005794:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	2100      	movs	r1, #0
 800579e:	6739      	str	r1, [r7, #112]	; 0x70
 80057a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a4:	677b      	str	r3, [r7, #116]	; 0x74
 80057a6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80057aa:	460b      	mov	r3, r1
 80057ac:	4313      	orrs	r3, r2
 80057ae:	d024      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80057b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d005      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80057c6:	e002      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80057c8:	bf00      	nop
 80057ca:	e000      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80057cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80057d6:	4b58      	ldr	r3, [pc, #352]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80057d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057dc:	f023 0108 	bic.w	r1, r3, #8
 80057e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057e8:	4a53      	ldr	r2, [pc, #332]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057f0:	e003      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057f6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005806:	66bb      	str	r3, [r7, #104]	; 0x68
 8005808:	2300      	movs	r3, #0
 800580a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800580c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005810:	460b      	mov	r3, r1
 8005812:	4313      	orrs	r3, r2
 8005814:	f000 80b9 	beq.w	800598a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005818:	4b48      	ldr	r3, [pc, #288]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	4a47      	ldr	r2, [pc, #284]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005824:	f7fb ff00 	bl	8001628 <HAL_GetTick>
 8005828:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800582c:	e00b      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582e:	f7fb fefb 	bl	8001628 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d903      	bls.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005844:	e005      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005846:	4b3d      	ldr	r3, [pc, #244]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0ed      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8005852:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005856:	2b00      	cmp	r3, #0
 8005858:	f040 8093 	bne.w	8005982 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800585c:	4b36      	ldr	r3, [pc, #216]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800585e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005866:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800586a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d023      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005872:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005876:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800587a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800587e:	4293      	cmp	r3, r2
 8005880:	d01b      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005882:	4b2d      	ldr	r3, [pc, #180]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005890:	4b29      	ldr	r3, [pc, #164]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005896:	4a28      	ldr	r2, [pc, #160]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058a0:	4b25      	ldr	r3, [pc, #148]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80058a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058a6:	4a24      	ldr	r2, [pc, #144]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80058a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058b0:	4a21      	ldr	r2, [pc, #132]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80058b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80058b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d019      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c6:	f7fb feaf 	bl	8001628 <HAL_GetTick>
 80058ca:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ce:	e00d      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d0:	f7fb feaa 	bl	8001628 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80058da:	1ad2      	subs	r2, r2, r3
 80058dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d903      	bls.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 80058ea:	e006      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ec:	4b12      	ldr	r3, [pc, #72]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80058ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0ea      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80058fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d13a      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005902:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005906:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800590a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005912:	d115      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800591c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005920:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800592a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800592e:	4a02      	ldr	r2, [pc, #8]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005930:	430b      	orrs	r3, r1
 8005932:	61d3      	str	r3, [r2, #28]
 8005934:	e00a      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8005936:	bf00      	nop
 8005938:	44020c00 	.word	0x44020c00
 800593c:	44020800 	.word	0x44020800
 8005940:	4b9f      	ldr	r3, [pc, #636]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	4a9e      	ldr	r2, [pc, #632]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005946:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800594a:	61d3      	str	r3, [r2, #28]
 800594c:	4b9c      	ldr	r3, [pc, #624]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800594e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005952:	4a9b      	ldr	r2, [pc, #620]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005958:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800595c:	4b98      	ldr	r3, [pc, #608]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800595e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8005962:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005966:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800596a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800596e:	4a94      	ldr	r2, [pc, #592]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005970:	430b      	orrs	r3, r1
 8005972:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005976:	e008      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005978:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800597c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8005980:	e003      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005982:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005986:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800598a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005996:	663b      	str	r3, [r7, #96]	; 0x60
 8005998:	2300      	movs	r3, #0
 800599a:	667b      	str	r3, [r7, #100]	; 0x64
 800599c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80059a0:	460b      	mov	r3, r1
 80059a2:	4313      	orrs	r3, r2
 80059a4:	d035      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80059a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80059ae:	2b30      	cmp	r3, #48	; 0x30
 80059b0:	d014      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80059b2:	2b30      	cmp	r3, #48	; 0x30
 80059b4:	d80e      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d012      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d80a      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d010      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d106      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c6:	4b7e      	ldr	r3, [pc, #504]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	4a7d      	ldr	r2, [pc, #500]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d0:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80059d2:	e008      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80059da:	e004      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80059dc:	bf00      	nop
 80059de:	e002      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80059e0:	bf00      	nop
 80059e2:	e000      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80059e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10d      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80059ee:	4b74      	ldr	r3, [pc, #464]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80059f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059fc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005a00:	4a6f      	ldr	r2, [pc, #444]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a02:	430b      	orrs	r3, r1
 8005a04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a08:	e003      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a0e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a20:	2300      	movs	r3, #0
 8005a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a24:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d033      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a32:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d007      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8005a3e:	e010      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a40:	4b5f      	ldr	r3, [pc, #380]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	4a5e      	ldr	r2, [pc, #376]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005a4c:	e00d      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a52:	3308      	adds	r3, #8
 8005a54:	4618      	mov	r0, r3
 8005a56:	f003 fb6f 	bl	8009138 <RCCEx_PLL2_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005a60:	e003      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005a72:	4b53      	ldr	r3, [pc, #332]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a78:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a80:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005a84:	4a4e      	ldr	r2, [pc, #312]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a86:	430b      	orrs	r3, r1
 8005a88:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005a8c:	e003      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a92:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8005aa8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005aac:	460b      	mov	r3, r1
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	d033      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ab6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005abe:	2b80      	cmp	r3, #128	; 0x80
 8005ac0:	d007      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005ac2:	e010      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac4:	4b3e      	ldr	r3, [pc, #248]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	4a3d      	ldr	r2, [pc, #244]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ace:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005ad0:	e00d      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f003 fb2d 	bl	8009138 <RCCEx_PLL2_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005ae4:	e003      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10d      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005af6:	4b32      	ldr	r3, [pc, #200]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005af8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005afc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005b00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b04:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005b08:	4a2d      	ldr	r2, [pc, #180]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005b10:	e003      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b16:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b28:	2300      	movs	r3, #0
 8005b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005b30:	460b      	mov	r3, r1
 8005b32:	4313      	orrs	r3, r2
 8005b34:	d04a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005b36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d827      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8005b42:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b5d 	.word	0x08005b5d
 8005b4c:	08005b6b 	.word	0x08005b6b
 8005b50:	08005b7f 	.word	0x08005b7f
 8005b54:	08005b9b 	.word	0x08005b9b
 8005b58:	08005b9b 	.word	0x08005b9b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b5c:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b66:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005b68:	e018      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b6e:	3308      	adds	r3, #8
 8005b70:	4618      	mov	r0, r3
 8005b72:	f003 fae1 	bl	8009138 <RCCEx_PLL2_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005b7c:	e00e      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b82:	3330      	adds	r3, #48	; 0x30
 8005b84:	4618      	mov	r0, r3
 8005b86:	f003 fb6f 	bl	8009268 <RCCEx_PLL3_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005b90:	e004      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10f      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005baa:	f023 0107 	bic.w	r1, r3, #7
 8005bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bb6:	4a02      	ldr	r2, [pc, #8]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005bbe:	e005      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8005bc0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bc8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005bcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8005bda:	2300      	movs	r3, #0
 8005bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005bde:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f000 8081 	beq.w	8005cec <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005bea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d85f      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c81 	.word	0x08005c81
 8005c00:	08005cb7 	.word	0x08005cb7
 8005c04:	08005cb7 	.word	0x08005cb7
 8005c08:	08005cb7 	.word	0x08005cb7
 8005c0c:	08005cb7 	.word	0x08005cb7
 8005c10:	08005cb7 	.word	0x08005cb7
 8005c14:	08005cb7 	.word	0x08005cb7
 8005c18:	08005cb7 	.word	0x08005cb7
 8005c1c:	08005c8f 	.word	0x08005c8f
 8005c20:	08005cb7 	.word	0x08005cb7
 8005c24:	08005cb7 	.word	0x08005cb7
 8005c28:	08005cb7 	.word	0x08005cb7
 8005c2c:	08005cb7 	.word	0x08005cb7
 8005c30:	08005cb7 	.word	0x08005cb7
 8005c34:	08005cb7 	.word	0x08005cb7
 8005c38:	08005cb7 	.word	0x08005cb7
 8005c3c:	08005ca3 	.word	0x08005ca3
 8005c40:	08005cb7 	.word	0x08005cb7
 8005c44:	08005cb7 	.word	0x08005cb7
 8005c48:	08005cb7 	.word	0x08005cb7
 8005c4c:	08005cb7 	.word	0x08005cb7
 8005c50:	08005cb7 	.word	0x08005cb7
 8005c54:	08005cb7 	.word	0x08005cb7
 8005c58:	08005cb7 	.word	0x08005cb7
 8005c5c:	08005cbf 	.word	0x08005cbf
 8005c60:	08005cb7 	.word	0x08005cb7
 8005c64:	08005cb7 	.word	0x08005cb7
 8005c68:	08005cb7 	.word	0x08005cb7
 8005c6c:	08005cb7 	.word	0x08005cb7
 8005c70:	08005cb7 	.word	0x08005cb7
 8005c74:	08005cb7 	.word	0x08005cb7
 8005c78:	08005cb7 	.word	0x08005cb7
 8005c7c:	08005cbf 	.word	0x08005cbf
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c80:	4bab      	ldr	r3, [pc, #684]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c84:	4aaa      	ldr	r2, [pc, #680]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c8a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005c8c:	e018      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c92:	3308      	adds	r3, #8
 8005c94:	4618      	mov	r0, r3
 8005c96:	f003 fa4f 	bl	8009138 <RCCEx_PLL2_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005ca0:	e00e      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ca2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ca6:	3330      	adds	r3, #48	; 0x30
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f003 fadd 	bl	8009268 <RCCEx_PLL3_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005cb4:	e004      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005cbc:	e000      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8005cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10d      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005cc8:	4b99      	ldr	r3, [pc, #612]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005cd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cda:	4a95      	ldr	r2, [pc, #596]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ce2:	e003      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ce8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005d02:	460b      	mov	r3, r1
 8005d04:	4313      	orrs	r3, r2
 8005d06:	d04e      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d14:	d02e      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1a:	d827      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005d1c:	2bc0      	cmp	r3, #192	; 0xc0
 8005d1e:	d02b      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8005d20:	2bc0      	cmp	r3, #192	; 0xc0
 8005d22:	d823      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005d24:	2b80      	cmp	r3, #128	; 0x80
 8005d26:	d017      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d81f      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8005d30:	2b40      	cmp	r3, #64	; 0x40
 8005d32:	d007      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005d34:	e01a      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d36:	4b7e      	ldr	r3, [pc, #504]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	4a7d      	ldr	r2, [pc, #500]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d40:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005d42:	e01a      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d48:	3308      	adds	r3, #8
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f003 f9f4 	bl	8009138 <RCCEx_PLL2_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005d56:	e010      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d5c:	3330      	adds	r3, #48	; 0x30
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f003 fa82 	bl	8009268 <RCCEx_PLL3_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005d6a:	e006      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d72:	e002      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005d74:	bf00      	nop
 8005d76:	e000      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10d      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005d82:	4b6b      	ldr	r3, [pc, #428]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d88:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005d8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d94:	4a66      	ldr	r2, [pc, #408]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d96:	430b      	orrs	r3, r1
 8005d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d9c:	e003      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005da2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005da6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005db2:	633b      	str	r3, [r7, #48]	; 0x30
 8005db4:	2300      	movs	r3, #0
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
 8005db8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	d055      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005dc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dc6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005dca:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005dce:	d031      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005dd0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005dd4:	d82a      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dda:	d02d      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de0:	d824      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005de2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005de6:	d029      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005de8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005dec:	d81e      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df2:	d011      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df8:	d818      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d020      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e02:	d113      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e08:	3308      	adds	r3, #8
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f003 f994 	bl	8009138 <RCCEx_PLL2_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005e16:	e014      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e1c:	3330      	adds	r3, #48	; 0x30
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f003 fa22 	bl	8009268 <RCCEx_PLL3_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005e2a:	e00a      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e32:	e006      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005e34:	bf00      	nop
 8005e36:	e004      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005e38:	bf00      	nop
 8005e3a:	e002      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005e3c:	bf00      	nop
 8005e3e:	e000      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10d      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005e4a:	4b39      	ldr	r3, [pc, #228]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e50:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005e5c:	4a34      	ldr	r2, [pc, #208]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e64:	e003      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e6a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005e6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005e84:	460b      	mov	r3, r1
 8005e86:	4313      	orrs	r3, r2
 8005e88:	d058      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e92:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005e96:	d031      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005e98:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005e9c:	d82a      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ea2:	d02d      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ea8:	d824      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005eaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eae:	d029      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8005eb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eb4:	d81e      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eba:	d011      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec0:	d818      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d020      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	d113      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ecc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f003 f930 	bl	8009138 <RCCEx_PLL2_Config>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005ede:	e014      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ee4:	3330      	adds	r3, #48	; 0x30
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f003 f9be 	bl	8009268 <RCCEx_PLL3_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005ef2:	e00a      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005efa:	e006      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005efc:	bf00      	nop
 8005efe:	e004      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005f00:	bf00      	nop
 8005f02:	e002      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005f04:	bf00      	nop
 8005f06:	e000      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d110      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005f12:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f18:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f24:	4902      	ldr	r1, [pc, #8]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005f2c:	e006      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005f2e:	bf00      	nop
 8005f30:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f38:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	2100      	movs	r1, #0
 8005f46:	6239      	str	r1, [r7, #32]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d055      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f60:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005f64:	d031      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005f66:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005f6a:	d82a      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f70:	d02d      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8005f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f76:	d824      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005f78:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005f7c:	d029      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8005f7e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005f82:	d81e      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f88:	d011      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8e:	d818      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d020      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f98:	d113      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f003 f8c9 	bl	8009138 <RCCEx_PLL2_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fac:	e014      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fb2:	3330      	adds	r3, #48	; 0x30
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f003 f957 	bl	8009268 <RCCEx_PLL3_Config>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fc0:	e00a      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005fc8:	e006      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005fca:	bf00      	nop
 8005fcc:	e004      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005fce:	bf00      	nop
 8005fd0:	e002      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005fd2:	bf00      	nop
 8005fd4:	e000      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10d      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005fe0:	4b88      	ldr	r3, [pc, #544]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fe6:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8005fea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ff2:	4984      	ldr	r1, [pc, #528]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005ffa:	e003      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006000:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	2100      	movs	r1, #0
 800600e:	61b9      	str	r1, [r7, #24]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800601a:	460b      	mov	r3, r1
 800601c:	4313      	orrs	r3, r2
 800601e:	d03d      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006020:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006024:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006028:	2b03      	cmp	r3, #3
 800602a:	d81c      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800602c:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	0800606f 	.word	0x0800606f
 8006038:	08006045 	.word	0x08006045
 800603c:	08006053 	.word	0x08006053
 8006040:	0800606f 	.word	0x0800606f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006044:	4b6f      	ldr	r3, [pc, #444]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	4a6e      	ldr	r2, [pc, #440]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800604a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800604e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006050:	e00e      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006052:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006056:	3308      	adds	r3, #8
 8006058:	4618      	mov	r0, r3
 800605a:	f003 f86d 	bl	8009138 <RCCEx_PLL2_Config>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006064:	e004      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800606c:	e000      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800606e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006070:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10d      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006078:	4b62      	ldr	r3, [pc, #392]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800607a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800607e:	f023 0203 	bic.w	r2, r3, #3
 8006082:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006086:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800608a:	495e      	ldr	r1, [pc, #376]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006092:	e003      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006094:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006098:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800609c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	2100      	movs	r1, #0
 80060a6:	6139      	str	r1, [r7, #16]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060b2:	460b      	mov	r3, r1
 80060b4:	4313      	orrs	r3, r2
 80060b6:	d03a      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80060b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80060c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c4:	d00e      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80060c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ca:	d815      	bhi.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d017      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80060d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d4:	d110      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d6:	4b4b      	ldr	r3, [pc, #300]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	4a4a      	ldr	r2, [pc, #296]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80060dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80060e2:	e00e      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060e8:	3308      	adds	r3, #8
 80060ea:	4618      	mov	r0, r3
 80060ec:	f003 f824 	bl	8009138 <RCCEx_PLL2_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80060f6:	e004      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80060fe:	e000      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006102:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10d      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800610a:	4b3e      	ldr	r3, [pc, #248]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800610c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006114:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006118:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800611c:	4939      	ldr	r1, [pc, #228]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8006124:	e003      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006126:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800612a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800612e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	2100      	movs	r1, #0
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006144:	460b      	mov	r3, r1
 8006146:	4313      	orrs	r3, r2
 8006148:	d038      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800614a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800614e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006152:	2b30      	cmp	r3, #48	; 0x30
 8006154:	d01b      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006156:	2b30      	cmp	r3, #48	; 0x30
 8006158:	d815      	bhi.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800615a:	2b10      	cmp	r3, #16
 800615c:	d002      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800615e:	2b20      	cmp	r3, #32
 8006160:	d007      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006162:	e010      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006164:	4b27      	ldr	r3, [pc, #156]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	4a26      	ldr	r2, [pc, #152]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800616a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616e:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006170:	e00e      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006172:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006176:	3330      	adds	r3, #48	; 0x30
 8006178:	4618      	mov	r0, r3
 800617a:	f003 f875 	bl	8009268 <RCCEx_PLL3_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006184:	e004      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800618c:	e000      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800618e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006190:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10d      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006198:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800619a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800619e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80061aa:	4916      	ldr	r1, [pc, #88]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80061b2:	e003      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80061b8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	2100      	movs	r1, #0
 80061c6:	6039      	str	r1, [r7, #0]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	607b      	str	r3, [r7, #4]
 80061ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061d2:	460b      	mov	r3, r1
 80061d4:	4313      	orrs	r3, r2
 80061d6:	d00c      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061e6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80061ea:	4906      	ldr	r1, [pc, #24]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80061f2:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80061fc:	46bd      	mov	sp, r7
 80061fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006202:	bf00      	nop
 8006204:	44020c00 	.word	0x44020c00

08006208 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006208:	b480      	push	{r7}
 800620a:	b08b      	sub	sp, #44	; 0x2c
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006210:	4bad      	ldr	r3, [pc, #692]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006218:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800621a:	4bab      	ldr	r3, [pc, #684]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006224:	4ba8      	ldr	r3, [pc, #672]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	0a1b      	lsrs	r3, r3, #8
 800622a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800622e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006230:	4ba5      	ldr	r3, [pc, #660]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800623a:	4ba3      	ldr	r3, [pc, #652]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	08db      	lsrs	r3, r3, #3
 8006240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006252:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8126 	beq.w	80064aa <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	2b03      	cmp	r3, #3
 8006262:	d053      	beq.n	800630c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b03      	cmp	r3, #3
 8006268:	d86f      	bhi.n	800634a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d003      	beq.n	8006278 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d02b      	beq.n	80062ce <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8006276:	e068      	b.n	800634a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006278:	4b93      	ldr	r3, [pc, #588]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	08db      	lsrs	r3, r3, #3
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	4a92      	ldr	r2, [pc, #584]	; (80064cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
 8006288:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	ee07 3a90 	vmov	s15, r3
 8006290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	ee07 3a90 	vmov	s15, r3
 80062a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ac:	ed97 6a04 	vldr	s12, [r7, #16]
 80062b0:	eddf 5a87 	vldr	s11, [pc, #540]	; 80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80062b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80062cc:	e068      	b.n	80063a0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80062dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80062ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80062f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006306:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800630a:	e049      	b.n	80063a0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	eddf 6a70 	vldr	s13, [pc, #448]	; 80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800631a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	ee07 3a90 	vmov	s15, r3
 8006324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006328:	ed97 6a04 	vldr	s12, [r7, #16]
 800632c:	eddf 5a68 	vldr	s11, [pc, #416]	; 80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006338:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006344:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006348:	e02a      	b.n	80063a0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800634a:	4b5f      	ldr	r3, [pc, #380]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	08db      	lsrs	r3, r3, #3
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	4a5d      	ldr	r2, [pc, #372]	; (80064cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006356:	fa22 f303 	lsr.w	r3, r2, r3
 800635a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	ee07 3a90 	vmov	s15, r3
 800636c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006382:	eddf 5a53 	vldr	s11, [pc, #332]	; 80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800639e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063a0:	4b49      	ldr	r3, [pc, #292]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063ac:	d121      	bne.n	80063f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80063ae:	4b46      	ldr	r3, [pc, #280]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d017      	beq.n	80063ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063ba:	4b43      	ldr	r3, [pc, #268]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063be:	0a5b      	lsrs	r3, r3, #9
 80063c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c4:	ee07 3a90 	vmov	s15, r3
 80063c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80063cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063d0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80063d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80063d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	e006      	b.n	80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	e002      	b.n	80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063f8:	4b33      	ldr	r3, [pc, #204]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006404:	d121      	bne.n	800644a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006406:	4b30      	ldr	r3, [pc, #192]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d017      	beq.n	8006442 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006412:	4b2d      	ldr	r3, [pc, #180]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	0c1b      	lsrs	r3, r3, #16
 8006418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006428:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800642c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006438:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	605a      	str	r2, [r3, #4]
 8006440:	e006      	b.n	8006450 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	605a      	str	r2, [r3, #4]
 8006448:	e002      	b.n	8006450 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006450:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800645c:	d121      	bne.n	80064a2 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800645e:	4b1a      	ldr	r3, [pc, #104]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d017      	beq.n	800649a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800646a:	4b17      	ldr	r3, [pc, #92]	; (80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	0e1b      	lsrs	r3, r3, #24
 8006470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800647c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006480:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006484:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800648c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006490:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006498:	e010      	b.n	80064bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	609a      	str	r2, [r3, #8]
}
 80064a0:	e00c      	b.n	80064bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	609a      	str	r2, [r3, #8]
}
 80064a8:	e008      	b.n	80064bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	609a      	str	r2, [r3, #8]
}
 80064bc:	bf00      	nop
 80064be:	372c      	adds	r7, #44	; 0x2c
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	44020c00 	.word	0x44020c00
 80064cc:	03d09000 	.word	0x03d09000
 80064d0:	46000000 	.word	0x46000000
 80064d4:	4a742400 	.word	0x4a742400
 80064d8:	4af42400 	.word	0x4af42400

080064dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80064dc:	b480      	push	{r7}
 80064de:	b08b      	sub	sp, #44	; 0x2c
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80064e4:	4bad      	ldr	r3, [pc, #692]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ec:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80064ee:	4bab      	ldr	r3, [pc, #684]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80064f8:	4ba8      	ldr	r3, [pc, #672]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	0a1b      	lsrs	r3, r3, #8
 80064fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006502:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006504:	4ba5      	ldr	r3, [pc, #660]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800650e:	4ba3      	ldr	r3, [pc, #652]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	08db      	lsrs	r3, r3, #3
 8006514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	fb02 f303 	mul.w	r3, r2, r3
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8126 	beq.w	800677e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	2b03      	cmp	r3, #3
 8006536:	d053      	beq.n	80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	2b03      	cmp	r3, #3
 800653c:	d86f      	bhi.n	800661e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d003      	beq.n	800654c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d02b      	beq.n	80065a2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800654a:	e068      	b.n	800661e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800654c:	4b93      	ldr	r3, [pc, #588]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	08db      	lsrs	r3, r3, #3
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	4a92      	ldr	r2, [pc, #584]	; (80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006558:	fa22 f303 	lsr.w	r3, r2, r3
 800655c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	ee07 3a90 	vmov	s15, r3
 8006564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	ee07 3a90 	vmov	s15, r3
 800657c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006580:	ed97 6a04 	vldr	s12, [r7, #16]
 8006584:	eddf 5a87 	vldr	s11, [pc, #540]	; 80067a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80065a0:	e068      	b.n	8006674 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ac:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80067a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80065b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065be:	ed97 6a04 	vldr	s12, [r7, #16]
 80065c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80067a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80065c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80065de:	e049      	b.n	8006674 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eddf 6a70 	vldr	s13, [pc, #448]	; 80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80065ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fc:	ed97 6a04 	vldr	s12, [r7, #16]
 8006600:	eddf 5a68 	vldr	s11, [pc, #416]	; 80067a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006618:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800661c:	e02a      	b.n	8006674 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800661e:	4b5f      	ldr	r3, [pc, #380]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	4a5d      	ldr	r2, [pc, #372]	; (80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800662a:	fa22 f303 	lsr.w	r3, r2, r3
 800662e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	ee07 3a90 	vmov	s15, r3
 8006640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006652:	ed97 6a04 	vldr	s12, [r7, #16]
 8006656:	eddf 5a53 	vldr	s11, [pc, #332]	; 80067a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800665a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800666a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006672:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006674:	4b49      	ldr	r3, [pc, #292]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800667c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006680:	d121      	bne.n	80066c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006682:	4b46      	ldr	r3, [pc, #280]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d017      	beq.n	80066be <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800668e:	4b43      	ldr	r3, [pc, #268]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	0a5b      	lsrs	r3, r3, #9
 8006694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80066a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80066a8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80066ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066b4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	e006      	b.n	80066cc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	e002      	b.n	80066cc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066cc:	4b33      	ldr	r3, [pc, #204]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d8:	d121      	bne.n	800671e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80066da:	4b30      	ldr	r3, [pc, #192]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d017      	beq.n	8006716 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066e6:	4b2d      	ldr	r3, [pc, #180]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ea:	0c1b      	lsrs	r3, r3, #16
 80066ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80066f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006700:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800670c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	e006      	b.n	8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	605a      	str	r2, [r3, #4]
 800671c:	e002      	b.n	8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006724:	4b1d      	ldr	r3, [pc, #116]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800672c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006730:	d121      	bne.n	8006776 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006732:	4b1a      	ldr	r3, [pc, #104]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d017      	beq.n	800676e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800673e:	4b17      	ldr	r3, [pc, #92]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006742:	0e1b      	lsrs	r3, r3, #24
 8006744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006754:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006758:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800675c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006764:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800676c:	e010      	b.n	8006790 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	609a      	str	r2, [r3, #8]
}
 8006774:	e00c      	b.n	8006790 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	609a      	str	r2, [r3, #8]
}
 800677c:	e008      	b.n	8006790 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	609a      	str	r2, [r3, #8]
}
 8006790:	bf00      	nop
 8006792:	372c      	adds	r7, #44	; 0x2c
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	44020c00 	.word	0x44020c00
 80067a0:	03d09000 	.word	0x03d09000
 80067a4:	46000000 	.word	0x46000000
 80067a8:	4a742400 	.word	0x4a742400
 80067ac:	4af42400 	.word	0x4af42400

080067b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b08b      	sub	sp, #44	; 0x2c
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80067b8:	4bad      	ldr	r3, [pc, #692]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80067ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80067c2:	4bab      	ldr	r3, [pc, #684]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80067cc:	4ba8      	ldr	r3, [pc, #672]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	0a1b      	lsrs	r3, r3, #8
 80067d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067d6:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80067d8:	4ba5      	ldr	r3, [pc, #660]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80067e2:	4ba3      	ldr	r3, [pc, #652]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80067e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e6:	08db      	lsrs	r3, r3, #3
 80067e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	fb02 f303 	mul.w	r3, r2, r3
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fa:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8126 	beq.w	8006a52 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	2b03      	cmp	r3, #3
 800680a:	d053      	beq.n	80068b4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b03      	cmp	r3, #3
 8006810:	d86f      	bhi.n	80068f2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d003      	beq.n	8006820 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d02b      	beq.n	8006876 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800681e:	e068      	b.n	80068f2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006820:	4b93      	ldr	r3, [pc, #588]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	08db      	lsrs	r3, r3, #3
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	4a92      	ldr	r2, [pc, #584]	; (8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800682c:	fa22 f303 	lsr.w	r3, r2, r3
 8006830:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	ee07 3a90 	vmov	s15, r3
 8006838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	ee07 3a90 	vmov	s15, r3
 8006850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006854:	ed97 6a04 	vldr	s12, [r7, #16]
 8006858:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800685c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006870:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006874:	e068      	b.n	8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	ee07 3a90 	vmov	s15, r3
 800687c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006880:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006892:	ed97 6a04 	vldr	s12, [r7, #16]
 8006896:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800689a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80068b2:	e049      	b.n	8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068be:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80068c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	ee07 3a90 	vmov	s15, r3
 80068cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80068d4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80068d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80068f0:	e02a      	b.n	8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068f2:	4b5f      	ldr	r3, [pc, #380]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	08db      	lsrs	r3, r3, #3
 80068f8:	f003 0303 	and.w	r3, r3, #3
 80068fc:	4a5d      	ldr	r2, [pc, #372]	; (8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80068fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006902:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	ee07 3a90 	vmov	s15, r3
 8006914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006926:	ed97 6a04 	vldr	s12, [r7, #16]
 800692a:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800692e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006942:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006946:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006948:	4b49      	ldr	r3, [pc, #292]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006954:	d121      	bne.n	800699a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006956:	4b46      	ldr	r3, [pc, #280]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d017      	beq.n	8006992 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006962:	4b43      	ldr	r3, [pc, #268]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	0a5b      	lsrs	r3, r3, #9
 8006968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696c:	ee07 3a90 	vmov	s15, r3
 8006970:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006978:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800697c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006988:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	e006      	b.n	80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	e002      	b.n	80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069a0:	4b33      	ldr	r3, [pc, #204]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ac:	d121      	bne.n	80069f2 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80069ae:	4b30      	ldr	r3, [pc, #192]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d017      	beq.n	80069ea <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069ba:	4b2d      	ldr	r3, [pc, #180]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80069bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069be:	0c1b      	lsrs	r3, r3, #16
 80069c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c4:	ee07 3a90 	vmov	s15, r3
 80069c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80069cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069d0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80069d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80069d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069e0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	605a      	str	r2, [r3, #4]
 80069e8:	e006      	b.n	80069f8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	605a      	str	r2, [r3, #4]
 80069f0:	e002      	b.n	80069f8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069f8:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a04:	d121      	bne.n	8006a4a <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d017      	beq.n	8006a42 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a12:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a16:	0e1b      	lsrs	r3, r3, #24
 8006a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1c:	ee07 3a90 	vmov	s15, r3
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a28:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006a2c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a38:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006a40:	e010      	b.n	8006a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	609a      	str	r2, [r3, #8]
}
 8006a48:	e00c      	b.n	8006a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	609a      	str	r2, [r3, #8]
}
 8006a50:	e008      	b.n	8006a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	609a      	str	r2, [r3, #8]
}
 8006a64:	bf00      	nop
 8006a66:	372c      	adds	r7, #44	; 0x2c
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	44020c00 	.word	0x44020c00
 8006a74:	03d09000 	.word	0x03d09000
 8006a78:	46000000 	.word	0x46000000
 8006a7c:	4a742400 	.word	0x4a742400
 8006a80:	4af42400 	.word	0x4af42400

08006a84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006a84:	b590      	push	{r4, r7, lr}
 8006a86:	b08f      	sub	sp, #60	; 0x3c
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a92:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8006a96:	4321      	orrs	r1, r4
 8006a98:	d150      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006a9a:	4b26      	ldr	r3, [pc, #152]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006aa6:	4b23      	ldr	r3, [pc, #140]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d108      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aba:	d104      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac2:	f002 bb2a 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006ac6:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ad4:	d108      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006adc:	d104      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006ade:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae4:	f002 bb19 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006ae8:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006af4:	d119      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006afc:	d115      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006afe:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b0a:	d30a      	bcc.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b16:	4a08      	ldr	r2, [pc, #32]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006b1e:	f002 bafc 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006b26:	f002 baf8 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2e:	f002 baf4 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b32:	bf00      	nop
 8006b34:	44020c00 	.word	0x44020c00
 8006b38:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b40:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8006b44:	ea50 0104 	orrs.w	r1, r0, r4
 8006b48:	f001 8275 	beq.w	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b50:	2801      	cmp	r0, #1
 8006b52:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8006b56:	f082 82dd 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b5e:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8006b62:	ea50 0104 	orrs.w	r1, r0, r4
 8006b66:	f001 816c 	beq.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b6e:	2801      	cmp	r0, #1
 8006b70:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8006b74:	f082 82ce 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b7c:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8006b80:	ea50 0104 	orrs.w	r1, r0, r4
 8006b84:	f001 8602 	beq.w	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8006b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b8c:	2801      	cmp	r0, #1
 8006b8e:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8006b92:	f082 82bf 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b9a:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8006b9e:	ea50 0104 	orrs.w	r1, r0, r4
 8006ba2:	f001 854c 	beq.w	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8006ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006baa:	2801      	cmp	r0, #1
 8006bac:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8006bb0:	f082 82b0 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bb8:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8006bbc:	ea50 0104 	orrs.w	r1, r0, r4
 8006bc0:	f001 849e 	beq.w	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bc8:	2801      	cmp	r0, #1
 8006bca:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8006bce:	f082 82a1 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bd6:	f1a1 0420 	sub.w	r4, r1, #32
 8006bda:	ea50 0104 	orrs.w	r1, r0, r4
 8006bde:	f001 83e8 	beq.w	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006be6:	2801      	cmp	r0, #1
 8006be8:	f171 0120 	sbcs.w	r1, r1, #32
 8006bec:	f082 8292 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bf4:	f1a1 0410 	sub.w	r4, r1, #16
 8006bf8:	ea50 0104 	orrs.w	r1, r0, r4
 8006bfc:	f002 8256 	beq.w	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c04:	2801      	cmp	r0, #1
 8006c06:	f171 0110 	sbcs.w	r1, r1, #16
 8006c0a:	f082 8283 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c12:	f1a1 0408 	sub.w	r4, r1, #8
 8006c16:	ea50 0104 	orrs.w	r1, r0, r4
 8006c1a:	f002 81cc 	beq.w	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8006c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c22:	2801      	cmp	r0, #1
 8006c24:	f171 0108 	sbcs.w	r1, r1, #8
 8006c28:	f082 8274 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c30:	1f0c      	subs	r4, r1, #4
 8006c32:	ea50 0104 	orrs.w	r1, r0, r4
 8006c36:	f001 8648 	beq.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8006c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c3e:	2801      	cmp	r0, #1
 8006c40:	f171 0104 	sbcs.w	r1, r1, #4
 8006c44:	f082 8266 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c4c:	1e8c      	subs	r4, r1, #2
 8006c4e:	ea50 0104 	orrs.w	r1, r0, r4
 8006c52:	f002 8143 	beq.w	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006c56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c5a:	2801      	cmp	r0, #1
 8006c5c:	f171 0102 	sbcs.w	r1, r1, #2
 8006c60:	f082 8258 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c68:	1e4c      	subs	r4, r1, #1
 8006c6a:	ea50 0104 	orrs.w	r1, r0, r4
 8006c6e:	f002 80ce 	beq.w	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8006c72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c76:	2801      	cmp	r0, #1
 8006c78:	f171 0101 	sbcs.w	r1, r1, #1
 8006c7c:	f082 824a 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c84:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8006c88:	4321      	orrs	r1, r4
 8006c8a:	f002 8059 	beq.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8006c8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c92:	4cd9      	ldr	r4, [pc, #868]	; (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006c94:	42a0      	cmp	r0, r4
 8006c96:	f171 0100 	sbcs.w	r1, r1, #0
 8006c9a:	f082 823b 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ca2:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8006ca6:	4321      	orrs	r1, r4
 8006ca8:	f001 87d9 	beq.w	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cb0:	4cd2      	ldr	r4, [pc, #840]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006cb2:	42a0      	cmp	r0, r4
 8006cb4:	f171 0100 	sbcs.w	r1, r1, #0
 8006cb8:	f082 822c 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cc0:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8006cc4:	4321      	orrs	r1, r4
 8006cc6:	f001 8751 	beq.w	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8006cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cce:	4ccc      	ldr	r4, [pc, #816]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006cd0:	42a0      	cmp	r0, r4
 8006cd2:	f171 0100 	sbcs.w	r1, r1, #0
 8006cd6:	f082 821d 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cde:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8006ce2:	4321      	orrs	r1, r4
 8006ce4:	f001 869a 	beq.w	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8006ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cec:	4cc5      	ldr	r4, [pc, #788]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006cee:	42a0      	cmp	r0, r4
 8006cf0:	f171 0100 	sbcs.w	r1, r1, #0
 8006cf4:	f082 820e 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cfc:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8006d00:	4321      	orrs	r1, r4
 8006d02:	f001 8612 	beq.w	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8006d06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d0a:	4cbf      	ldr	r4, [pc, #764]	; (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006d0c:	42a0      	cmp	r0, r4
 8006d0e:	f171 0100 	sbcs.w	r1, r1, #0
 8006d12:	f082 81ff 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d1a:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8006d1e:	4321      	orrs	r1, r4
 8006d20:	f002 817e 	beq.w	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006d24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d28:	4cb8      	ldr	r4, [pc, #736]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d2a:	42a0      	cmp	r0, r4
 8006d2c:	f171 0100 	sbcs.w	r1, r1, #0
 8006d30:	f082 81f0 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d38:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8006d3c:	4321      	orrs	r1, r4
 8006d3e:	f000 829e 	beq.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8006d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d46:	4cb2      	ldr	r4, [pc, #712]	; (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d48:	42a0      	cmp	r0, r4
 8006d4a:	f171 0100 	sbcs.w	r1, r1, #0
 8006d4e:	f082 81e1 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d56:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8006d5a:	4321      	orrs	r1, r4
 8006d5c:	f000 826d 	beq.w	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d64:	4cab      	ldr	r4, [pc, #684]	; (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006d66:	42a0      	cmp	r0, r4
 8006d68:	f171 0100 	sbcs.w	r1, r1, #0
 8006d6c:	f082 81d2 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d74:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8006d78:	4321      	orrs	r1, r4
 8006d7a:	f001 800d 	beq.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8006d7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d82:	4ca5      	ldr	r4, [pc, #660]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d84:	42a0      	cmp	r0, r4
 8006d86:	f171 0100 	sbcs.w	r1, r1, #0
 8006d8a:	f082 81c3 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d92:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8006d96:	4321      	orrs	r1, r4
 8006d98:	f000 81d0 	beq.w	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006da0:	4c9e      	ldr	r4, [pc, #632]	; (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006da2:	42a0      	cmp	r0, r4
 8006da4:	f171 0100 	sbcs.w	r1, r1, #0
 8006da8:	f082 81b4 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006db0:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8006db4:	4321      	orrs	r1, r4
 8006db6:	f000 8142 	beq.w	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006dba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dbe:	4c98      	ldr	r4, [pc, #608]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006dc0:	42a0      	cmp	r0, r4
 8006dc2:	f171 0100 	sbcs.w	r1, r1, #0
 8006dc6:	f082 81a5 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dce:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8006dd2:	4321      	orrs	r1, r4
 8006dd4:	f001 824e 	beq.w	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006dd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ddc:	4c91      	ldr	r4, [pc, #580]	; (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006dde:	42a0      	cmp	r0, r4
 8006de0:	f171 0100 	sbcs.w	r1, r1, #0
 8006de4:	f082 8196 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dec:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8006df0:	4321      	orrs	r1, r4
 8006df2:	f001 8197 	beq.w	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dfa:	4c8b      	ldr	r4, [pc, #556]	; (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006dfc:	42a0      	cmp	r0, r4
 8006dfe:	f171 0100 	sbcs.w	r1, r1, #0
 8006e02:	f082 8187 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e0a:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8006e0e:	4321      	orrs	r1, r4
 8006e10:	f001 8154 	beq.w	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006e14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e18:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8006e1c:	f171 0100 	sbcs.w	r1, r1, #0
 8006e20:	f082 8178 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e28:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006e2c:	4321      	orrs	r1, r4
 8006e2e:	f001 80b7 	beq.w	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e36:	f248 0401 	movw	r4, #32769	; 0x8001
 8006e3a:	42a0      	cmp	r0, r4
 8006e3c:	f171 0100 	sbcs.w	r1, r1, #0
 8006e40:	f082 8168 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e48:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8006e4c:	4321      	orrs	r1, r4
 8006e4e:	f001 8064 	beq.w	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e56:	f244 0401 	movw	r4, #16385	; 0x4001
 8006e5a:	42a0      	cmp	r0, r4
 8006e5c:	f171 0100 	sbcs.w	r1, r1, #0
 8006e60:	f082 8158 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e68:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8006e6c:	4321      	orrs	r1, r4
 8006e6e:	f001 8011 	beq.w	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8006e72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e76:	f242 0401 	movw	r4, #8193	; 0x2001
 8006e7a:	42a0      	cmp	r0, r4
 8006e7c:	f171 0100 	sbcs.w	r1, r1, #0
 8006e80:	f082 8148 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e88:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8006e8c:	4321      	orrs	r1, r4
 8006e8e:	f000 871e 	beq.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8006e92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e96:	f241 0401 	movw	r4, #4097	; 0x1001
 8006e9a:	42a0      	cmp	r0, r4
 8006e9c:	f171 0100 	sbcs.w	r1, r1, #0
 8006ea0:	f082 8138 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ea8:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8006eac:	4321      	orrs	r1, r4
 8006eae:	f000 86a8 	beq.w	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8006eb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eb6:	f640 0401 	movw	r4, #2049	; 0x801
 8006eba:	42a0      	cmp	r0, r4
 8006ebc:	f171 0100 	sbcs.w	r1, r1, #0
 8006ec0:	f082 8128 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ec4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ec8:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8006ecc:	4321      	orrs	r1, r4
 8006ece:	f000 8632 	beq.w	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8006ed2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ed6:	f240 4401 	movw	r4, #1025	; 0x401
 8006eda:	42a0      	cmp	r0, r4
 8006edc:	f171 0100 	sbcs.w	r1, r1, #0
 8006ee0:	f082 8118 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ee4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ee8:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8006eec:	4321      	orrs	r1, r4
 8006eee:	f000 85b0 	beq.w	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8006ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ef6:	f240 2401 	movw	r4, #513	; 0x201
 8006efa:	42a0      	cmp	r0, r4
 8006efc:	f171 0100 	sbcs.w	r1, r1, #0
 8006f00:	f082 8108 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f08:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8006f0c:	4321      	orrs	r1, r4
 8006f0e:	f000 8535 	beq.w	800797c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006f12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f16:	f240 1401 	movw	r4, #257	; 0x101
 8006f1a:	42a0      	cmp	r0, r4
 8006f1c:	f171 0100 	sbcs.w	r1, r1, #0
 8006f20:	f082 80f8 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f28:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8006f2c:	4321      	orrs	r1, r4
 8006f2e:	f000 84ba 	beq.w	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f36:	2881      	cmp	r0, #129	; 0x81
 8006f38:	f171 0100 	sbcs.w	r1, r1, #0
 8006f3c:	f082 80ea 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f44:	2821      	cmp	r0, #33	; 0x21
 8006f46:	f171 0100 	sbcs.w	r1, r1, #0
 8006f4a:	d26f      	bcs.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f50:	4301      	orrs	r1, r0
 8006f52:	f002 80df 	beq.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f5a:	1e42      	subs	r2, r0, #1
 8006f5c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006f60:	2a20      	cmp	r2, #32
 8006f62:	f173 0100 	sbcs.w	r1, r3, #0
 8006f66:	f082 80d5 	bcs.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f6a:	2a1f      	cmp	r2, #31
 8006f6c:	f202 80d2 	bhi.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f70:	a101      	add	r1, pc, #4	; (adr r1, 8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8006f72:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	080072d9 	.word	0x080072d9
 8006f7c:	080073a5 	.word	0x080073a5
 8006f80:	08009115 	.word	0x08009115
 8006f84:	08007465 	.word	0x08007465
 8006f88:	08009115 	.word	0x08009115
 8006f8c:	08009115 	.word	0x08009115
 8006f90:	08009115 	.word	0x08009115
 8006f94:	08007535 	.word	0x08007535
 8006f98:	08009115 	.word	0x08009115
 8006f9c:	08009115 	.word	0x08009115
 8006fa0:	08009115 	.word	0x08009115
 8006fa4:	08009115 	.word	0x08009115
 8006fa8:	08009115 	.word	0x08009115
 8006fac:	08009115 	.word	0x08009115
 8006fb0:	08009115 	.word	0x08009115
 8006fb4:	08007617 	.word	0x08007617
 8006fb8:	08009115 	.word	0x08009115
 8006fbc:	08009115 	.word	0x08009115
 8006fc0:	08009115 	.word	0x08009115
 8006fc4:	08009115 	.word	0x08009115
 8006fc8:	08009115 	.word	0x08009115
 8006fcc:	08009115 	.word	0x08009115
 8006fd0:	08009115 	.word	0x08009115
 8006fd4:	08009115 	.word	0x08009115
 8006fd8:	08009115 	.word	0x08009115
 8006fdc:	08009115 	.word	0x08009115
 8006fe0:	08009115 	.word	0x08009115
 8006fe4:	08009115 	.word	0x08009115
 8006fe8:	08009115 	.word	0x08009115
 8006fec:	08009115 	.word	0x08009115
 8006ff0:	08009115 	.word	0x08009115
 8006ff4:	080076ed 	.word	0x080076ed
 8006ff8:	80000001 	.word	0x80000001
 8006ffc:	40000001 	.word	0x40000001
 8007000:	20000001 	.word	0x20000001
 8007004:	10000001 	.word	0x10000001
 8007008:	08000001 	.word	0x08000001
 800700c:	04000001 	.word	0x04000001
 8007010:	00800001 	.word	0x00800001
 8007014:	00400001 	.word	0x00400001
 8007018:	00200001 	.word	0x00200001
 800701c:	00100001 	.word	0x00100001
 8007020:	00080001 	.word	0x00080001
 8007024:	00040001 	.word	0x00040001
 8007028:	00020001 	.word	0x00020001
 800702c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007030:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007034:	430b      	orrs	r3, r1
 8007036:	f000 83c4 	beq.w	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800703a:	f002 b86b 	b.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800703e:	4ba1      	ldr	r3, [pc, #644]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007044:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007048:	633b      	str	r3, [r7, #48]	; 0x30
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007050:	d036      	beq.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007058:	d86b      	bhi.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007060:	d02b      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007068:	d863      	bhi.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007070:	d01b      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007078:	d85b      	bhi.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007086:	d008      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007088:	e053      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800708a:	f107 0320 	add.w	r3, r7, #32
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff f8ba 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007098:	e04e      	b.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800709a:	f107 0314 	add.w	r3, r7, #20
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff fa1c 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070a8:	e046      	b.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070aa:	f107 0308 	add.w	r3, r7, #8
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff fb7e 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070b8:	e03e      	b.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80070ba:	4b83      	ldr	r3, [pc, #524]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070be:	e03b      	b.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070c0:	4b80      	ldr	r3, [pc, #512]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070cc:	4b7d      	ldr	r3, [pc, #500]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d10c      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070de:	4b79      	ldr	r3, [pc, #484]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	08db      	lsrs	r3, r3, #3
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	4a78      	ldr	r2, [pc, #480]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80070ea:	fa22 f303 	lsr.w	r3, r2, r3
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
 80070f0:	e01e      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070f2:	4b74      	ldr	r3, [pc, #464]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070fe:	d106      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007106:	d102      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007108:	4b71      	ldr	r3, [pc, #452]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800710a:	637b      	str	r3, [r7, #52]	; 0x34
 800710c:	e010      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800710e:	4b6d      	ldr	r3, [pc, #436]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800711a:	d106      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007122:	d102      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007124:	4b6b      	ldr	r3, [pc, #428]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007126:	637b      	str	r3, [r7, #52]	; 0x34
 8007128:	e002      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800712e:	e003      	b.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007130:	e002      	b.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007136:	bf00      	nop
          }
        }
        break;
 8007138:	f001 bfef 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800713c:	4b61      	ldr	r3, [pc, #388]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800713e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007142:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8007146:	633b      	str	r3, [r7, #48]	; 0x30
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800714e:	d036      	beq.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007156:	d86b      	bhi.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800715e:	d02b      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007166:	d863      	bhi.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800716e:	d01b      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007176:	d85b      	bhi.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	2b00      	cmp	r3, #0
 800717c:	d004      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007184:	d008      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007186:	e053      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007188:	f107 0320 	add.w	r3, r7, #32
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff f83b 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007196:	e04e      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007198:	f107 0314 	add.w	r3, r7, #20
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff f99d 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071a6:	e046      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a8:	f107 0308 	add.w	r3, r7, #8
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff faff 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071b6:	e03e      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80071b8:	4b43      	ldr	r3, [pc, #268]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071bc:	e03b      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071be:	4b41      	ldr	r3, [pc, #260]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80071c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071ca:	4b3e      	ldr	r3, [pc, #248]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d10c      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d109      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071dc:	4b39      	ldr	r3, [pc, #228]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	08db      	lsrs	r3, r3, #3
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	4a39      	ldr	r2, [pc, #228]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ec:	637b      	str	r3, [r7, #52]	; 0x34
 80071ee:	e01e      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071f0:	4b34      	ldr	r3, [pc, #208]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071fc:	d106      	bne.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007204:	d102      	bne.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007206:	4b32      	ldr	r3, [pc, #200]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
 800720a:	e010      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800720c:	4b2d      	ldr	r3, [pc, #180]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007218:	d106      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007220:	d102      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007222:	4b2c      	ldr	r3, [pc, #176]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
 8007226:	e002      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800722c:	e003      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800722e:	e002      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007234:	bf00      	nop
          }
        }
        break;
 8007236:	f001 bf70 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800723a:	4b22      	ldr	r3, [pc, #136]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800723c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007244:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	2b00      	cmp	r3, #0
 800724a:	d108      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800724c:	f107 0320 	add.w	r3, r7, #32
 8007250:	4618      	mov	r0, r3
 8007252:	f7fe ffd9 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800725a:	f001 bf5e 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	2b40      	cmp	r3, #64	; 0x40
 8007262:	d108      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007264:	f107 0314 	add.w	r3, r7, #20
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff f937 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007272:	f001 bf52 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800727a:	f001 bf4e 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800727e:	4b11      	ldr	r3, [pc, #68]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007288:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	2b00      	cmp	r3, #0
 800728e:	d108      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007290:	f107 0320 	add.w	r3, r7, #32
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe ffb7 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800729e:	f001 bf3c 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	2b80      	cmp	r3, #128	; 0x80
 80072a6:	d108      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a8:	f107 0314 	add.w	r3, r7, #20
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff f915 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072b6:	f001 bf30 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072be:	f001 bf2c 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072c2:	bf00      	nop
 80072c4:	44020c00 	.word	0x44020c00
 80072c8:	00bb8000 	.word	0x00bb8000
 80072cc:	03d09000 	.word	0x03d09000
 80072d0:	003d0900 	.word	0x003d0900
 80072d4:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80072d8:	4b9d      	ldr	r3, [pc, #628]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80072da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d104      	bne.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80072ea:	f7fc ffd7 	bl	800429c <HAL_RCC_GetPCLK2Freq>
 80072ee:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80072f0:	f001 bf13 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80072f4:	4b96      	ldr	r3, [pc, #600]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007300:	d10a      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	2b01      	cmp	r3, #1
 8007306:	d107      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007308:	f107 0314 	add.w	r3, r7, #20
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff f8e5 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	637b      	str	r3, [r7, #52]	; 0x34
 8007316:	e043      	b.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007318:	4b8d      	ldr	r3, [pc, #564]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007324:	d10a      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	2b02      	cmp	r3, #2
 800732a:	d107      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800732c:	f107 0308 	add.w	r3, r7, #8
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fa3d 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
 800733a:	e031      	b.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800733c:	4b84      	ldr	r3, [pc, #528]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b02      	cmp	r3, #2
 8007346:	d10c      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	2b03      	cmp	r3, #3
 800734c:	d109      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800734e:	4b80      	ldr	r3, [pc, #512]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	08db      	lsrs	r3, r3, #3
 8007354:	f003 0303 	and.w	r3, r3, #3
 8007358:	4a7e      	ldr	r2, [pc, #504]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800735a:	fa22 f303 	lsr.w	r3, r2, r3
 800735e:	637b      	str	r3, [r7, #52]	; 0x34
 8007360:	e01e      	b.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007362:	4b7b      	ldr	r3, [pc, #492]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800736a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800736e:	d105      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	2b04      	cmp	r3, #4
 8007374:	d102      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007376:	4b78      	ldr	r3, [pc, #480]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
 800737a:	e011      	b.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800737c:	4b74      	ldr	r3, [pc, #464]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800737e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b02      	cmp	r3, #2
 8007388:	d106      	bne.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	2b05      	cmp	r3, #5
 800738e:	d103      	bne.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007394:	637b      	str	r3, [r7, #52]	; 0x34
 8007396:	e003      	b.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800739c:	f001 bebd 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80073a0:	f001 bebb 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80073a4:	4b6a      	ldr	r3, [pc, #424]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80073a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80073aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ae:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80073b6:	f7fc ff5b 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 80073ba:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80073bc:	f001 bead 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80073c0:	4b63      	ldr	r3, [pc, #396]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073cc:	d10a      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d107      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073d4:	f107 0314 	add.w	r3, r7, #20
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff f87f 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
 80073e2:	e03d      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	2b10      	cmp	r3, #16
 80073e8:	d108      	bne.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ea:	f107 0308 	add.w	r3, r7, #8
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff f9de 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073f8:	f001 be8f 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80073fc:	4b54      	ldr	r3, [pc, #336]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b02      	cmp	r3, #2
 8007406:	d10c      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2b18      	cmp	r3, #24
 800740c:	d109      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800740e:	4b50      	ldr	r3, [pc, #320]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	08db      	lsrs	r3, r3, #3
 8007414:	f003 0303 	and.w	r3, r3, #3
 8007418:	4a4e      	ldr	r2, [pc, #312]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800741a:	fa22 f303 	lsr.w	r3, r2, r3
 800741e:	637b      	str	r3, [r7, #52]	; 0x34
 8007420:	e01e      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007422:	4b4b      	ldr	r3, [pc, #300]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800742a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742e:	d105      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	2b20      	cmp	r3, #32
 8007434:	d102      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007436:	4b48      	ldr	r3, [pc, #288]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
 800743a:	e011      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800743c:	4b44      	ldr	r3, [pc, #272]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800743e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b02      	cmp	r3, #2
 8007448:	d106      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	2b28      	cmp	r3, #40	; 0x28
 800744e:	d103      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007454:	637b      	str	r3, [r7, #52]	; 0x34
 8007456:	e003      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800745c:	f001 be5d 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007460:	f001 be5b 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007464:	4b3a      	ldr	r3, [pc, #232]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007466:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800746a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800746e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	2b00      	cmp	r3, #0
 8007474:	d104      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007476:	f7fc fefb 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 800747a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800747c:	f001 be4d 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007480:	4b33      	ldr	r3, [pc, #204]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800748c:	d10a      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d107      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007494:	f107 0314 	add.w	r3, r7, #20
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff f81f 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
 80074a2:	e045      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80074a4:	4b2a      	ldr	r3, [pc, #168]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b0:	d10a      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	2b80      	cmp	r3, #128	; 0x80
 80074b6:	d107      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074b8:	f107 0308 	add.w	r3, r7, #8
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff f977 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
 80074c6:	e033      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80074c8:	4b21      	ldr	r3, [pc, #132]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d10c      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	2bc0      	cmp	r3, #192	; 0xc0
 80074d8:	d109      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074da:	4b1d      	ldr	r3, [pc, #116]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	08db      	lsrs	r3, r3, #3
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	4a1b      	ldr	r2, [pc, #108]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80074e6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ea:	637b      	str	r3, [r7, #52]	; 0x34
 80074ec:	e020      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80074ee:	4b18      	ldr	r3, [pc, #96]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074fa:	d106      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007502:	d102      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007504:	4b14      	ldr	r3, [pc, #80]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
 8007508:	e012      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800750a:	4b11      	ldr	r3, [pc, #68]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800750c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b02      	cmp	r3, #2
 8007516:	d107      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800751e:	d103      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
 8007526:	e003      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800752c:	f001 bdf5 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007530:	f001 bdf3 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007536:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800753a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800753e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10a      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007546:	f7fc fe93 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 800754a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800754c:	f001 bde5 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007550:	44020c00 	.word	0x44020c00
 8007554:	03d09000 	.word	0x03d09000
 8007558:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800755c:	4ba0      	ldr	r3, [pc, #640]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007568:	d10b      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007570:	d107      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007572:	f107 0314 	add.w	r3, r7, #20
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe ffb0 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
 8007580:	e047      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007582:	4b97      	ldr	r3, [pc, #604]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800758a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800758e:	d10b      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007596:	d107      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007598:	f107 0308 	add.w	r3, r7, #8
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff f907 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	637b      	str	r3, [r7, #52]	; 0x34
 80075a6:	e034      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80075a8:	4b8d      	ldr	r3, [pc, #564]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d10d      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80075ba:	d109      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075bc:	4b88      	ldr	r3, [pc, #544]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	08db      	lsrs	r3, r3, #3
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	4a87      	ldr	r2, [pc, #540]	; (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80075c8:	fa22 f303 	lsr.w	r3, r2, r3
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
 80075ce:	e020      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80075d0:	4b83      	ldr	r3, [pc, #524]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075dc:	d106      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e4:	d102      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80075e6:	4b80      	ldr	r3, [pc, #512]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80075e8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ea:	e012      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80075ec:	4b7c      	ldr	r3, [pc, #496]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d107      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007600:	d103      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
 8007608:	e003      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800760e:	f001 bd84 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007612:	f001 bd82 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007616:	4b72      	ldr	r3, [pc, #456]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800761c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007620:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	2b00      	cmp	r3, #0
 8007626:	d104      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007628:	f7fc fe22 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 800762c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800762e:	f001 bd74 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007632:	4b6b      	ldr	r3, [pc, #428]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800763a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800763e:	d10b      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007646:	d107      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007648:	f107 0314 	add.w	r3, r7, #20
 800764c:	4618      	mov	r0, r3
 800764e:	f7fe ff45 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
 8007656:	e047      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007658:	4b61      	ldr	r3, [pc, #388]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007664:	d10b      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800766c:	d107      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800766e:	f107 0308 	add.w	r3, r7, #8
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff f89c 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	637b      	str	r3, [r7, #52]	; 0x34
 800767c:	e034      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800767e:	4b58      	ldr	r3, [pc, #352]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b02      	cmp	r3, #2
 8007688:	d10d      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007690:	d109      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007692:	4b53      	ldr	r3, [pc, #332]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	08db      	lsrs	r3, r3, #3
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	4a51      	ldr	r2, [pc, #324]	; (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800769e:	fa22 f303 	lsr.w	r3, r2, r3
 80076a2:	637b      	str	r3, [r7, #52]	; 0x34
 80076a4:	e020      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80076a6:	4b4e      	ldr	r3, [pc, #312]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076b2:	d106      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ba:	d102      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80076bc:	4b4a      	ldr	r3, [pc, #296]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80076be:	637b      	str	r3, [r7, #52]	; 0x34
 80076c0:	e012      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80076c2:	4b47      	ldr	r3, [pc, #284]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80076c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d107      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80076d6:	d103      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80076d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
 80076de:	e003      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076e4:	f001 bd19 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076e8:	f001 bd17 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80076ec:	4b3c      	ldr	r3, [pc, #240]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80076ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80076f2:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80076f6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076fe:	f7fc fdb7 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8007702:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007704:	f001 bd09 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007708:	4b35      	ldr	r3, [pc, #212]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007710:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007714:	d10b      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771c:	d107      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800771e:	f107 0314 	add.w	r3, r7, #20
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe feda 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	637b      	str	r3, [r7, #52]	; 0x34
 800772c:	e047      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800772e:	4b2c      	ldr	r3, [pc, #176]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800773a:	d10b      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007742:	d107      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007744:	f107 0308 	add.w	r3, r7, #8
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff f831 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
 8007752:	e034      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007754:	4b22      	ldr	r3, [pc, #136]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d10d      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007766:	d109      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007768:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	08db      	lsrs	r3, r3, #3
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	4a1c      	ldr	r2, [pc, #112]	; (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007774:	fa22 f303 	lsr.w	r3, r2, r3
 8007778:	637b      	str	r3, [r7, #52]	; 0x34
 800777a:	e020      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800777c:	4b18      	ldr	r3, [pc, #96]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007788:	d106      	bne.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007790:	d102      	bne.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007792:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007794:	637b      	str	r3, [r7, #52]	; 0x34
 8007796:	e012      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007798:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800779a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d107      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80077ac:	d103      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80077ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
 80077b4:	e003      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077ba:	f001 bcae 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077be:	f001 bcac 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80077c2:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80077c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077c8:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80077cc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10b      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80077d4:	f7fc fd4c 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 80077d8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80077da:	f001 bc9e 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077de:	bf00      	nop
 80077e0:	44020c00 	.word	0x44020c00
 80077e4:	03d09000 	.word	0x03d09000
 80077e8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80077ec:	4ba0      	ldr	r3, [pc, #640]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077f8:	d10b      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007800:	d107      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007802:	f107 0314 	add.w	r3, r7, #20
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fe68 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
 8007810:	e047      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8007812:	4b97      	ldr	r3, [pc, #604]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800781a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800781e:	d10b      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007826:	d107      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007828:	f107 0308 	add.w	r3, r7, #8
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe ffbf 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	637b      	str	r3, [r7, #52]	; 0x34
 8007836:	e034      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007838:	4b8d      	ldr	r3, [pc, #564]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b02      	cmp	r3, #2
 8007842:	d10d      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800784a:	d109      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800784c:	4b88      	ldr	r3, [pc, #544]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	08db      	lsrs	r3, r3, #3
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	4a87      	ldr	r2, [pc, #540]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007858:	fa22 f303 	lsr.w	r3, r2, r3
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
 800785e:	e020      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007860:	4b83      	ldr	r3, [pc, #524]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800786c:	d106      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007874:	d102      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8007876:	4b80      	ldr	r3, [pc, #512]	; (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007878:	637b      	str	r3, [r7, #52]	; 0x34
 800787a:	e012      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800787c:	4b7c      	ldr	r3, [pc, #496]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800787e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b02      	cmp	r3, #2
 8007888:	d107      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007890:	d103      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8007892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007896:	637b      	str	r3, [r7, #52]	; 0x34
 8007898:	e003      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800789e:	f001 bc3c 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80078a2:	f001 bc3a 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80078a6:	4b72      	ldr	r3, [pc, #456]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80078ac:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80078b0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078b8:	f7fc fcda 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 80078bc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80078be:	f001 bc2c 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80078c2:	4b6b      	ldr	r3, [pc, #428]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078ce:	d10b      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078d6:	d107      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d8:	f107 0314 	add.w	r3, r7, #20
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe fdfd 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34
 80078e6:	e047      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80078e8:	4b61      	ldr	r3, [pc, #388]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f4:	d10b      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078fc:	d107      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078fe:	f107 0308 	add.w	r3, r7, #8
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe ff54 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	637b      	str	r3, [r7, #52]	; 0x34
 800790c:	e034      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800790e:	4b58      	ldr	r3, [pc, #352]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b02      	cmp	r3, #2
 8007918:	d10d      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007920:	d109      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007922:	4b53      	ldr	r3, [pc, #332]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	08db      	lsrs	r3, r3, #3
 8007928:	f003 0303 	and.w	r3, r3, #3
 800792c:	4a51      	ldr	r2, [pc, #324]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800792e:	fa22 f303 	lsr.w	r3, r2, r3
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
 8007934:	e020      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007936:	4b4e      	ldr	r3, [pc, #312]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800793e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007942:	d106      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007946:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800794a:	d102      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800794c:	4b4a      	ldr	r3, [pc, #296]	; (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
 8007950:	e012      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8007952:	4b47      	ldr	r3, [pc, #284]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b02      	cmp	r3, #2
 800795e:	d107      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007966:	d103      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
 800796e:	e003      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007974:	f001 bbd1 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007978:	f001 bbcf 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800797c:	4b3c      	ldr	r3, [pc, #240]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800797e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007982:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007986:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	2b00      	cmp	r3, #0
 800798c:	d104      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800798e:	f7fc fc6f 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8007992:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007994:	f001 bbc1 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007998:	4b35      	ldr	r3, [pc, #212]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079a4:	d10b      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079ac:	d107      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ae:	f107 0314 	add.w	r3, r7, #20
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fd92 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	637b      	str	r3, [r7, #52]	; 0x34
 80079bc:	e047      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80079be:	4b2c      	ldr	r3, [pc, #176]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ca:	d10b      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079d2:	d107      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079d4:	f107 0308 	add.w	r3, r7, #8
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe fee9 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	637b      	str	r3, [r7, #52]	; 0x34
 80079e2:	e034      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80079e4:	4b22      	ldr	r3, [pc, #136]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d10d      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079f6:	d109      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079f8:	4b1d      	ldr	r3, [pc, #116]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	08db      	lsrs	r3, r3, #3
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	4a1c      	ldr	r2, [pc, #112]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007a04:	fa22 f303 	lsr.w	r3, r2, r3
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
 8007a0a:	e020      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007a0c:	4b18      	ldr	r3, [pc, #96]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a18:	d106      	bne.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a20:	d102      	bne.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8007a22:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007a24:	637b      	str	r3, [r7, #52]	; 0x34
 8007a26:	e012      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007a28:	4b11      	ldr	r3, [pc, #68]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d107      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007a3c:	d103      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8007a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
 8007a44:	e003      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a4a:	f001 bb66 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a4e:	f001 bb64 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007a52:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a58:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8007a5c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a64:	f7fc fc04 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8007a68:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a6a:	f001 bb56 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a6e:	bf00      	nop
 8007a70:	44020c00 	.word	0x44020c00
 8007a74:	03d09000 	.word	0x03d09000
 8007a78:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007a7c:	4ba1      	ldr	r3, [pc, #644]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a88:	d10b      	bne.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a90:	d107      	bne.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a92:	f107 0314 	add.w	r3, r7, #20
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fd20 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa0:	e047      	b.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007aa2:	4b98      	ldr	r3, [pc, #608]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aae:	d10b      	bne.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ab6:	d107      	bne.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ab8:	f107 0308 	add.w	r3, r7, #8
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe fe77 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac6:	e034      	b.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007ac8:	4b8e      	ldr	r3, [pc, #568]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d10d      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007ada:	d109      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007adc:	4b89      	ldr	r3, [pc, #548]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	08db      	lsrs	r3, r3, #3
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	4a88      	ldr	r2, [pc, #544]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aec:	637b      	str	r3, [r7, #52]	; 0x34
 8007aee:	e020      	b.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007af0:	4b84      	ldr	r3, [pc, #528]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007afc:	d106      	bne.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b04:	d102      	bne.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8007b06:	4b81      	ldr	r3, [pc, #516]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0a:	e012      	b.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007b0c:	4b7d      	ldr	r3, [pc, #500]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d107      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8007b20:	d103      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8007b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b26:	637b      	str	r3, [r7, #52]	; 0x34
 8007b28:	e003      	b.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b2e:	f001 baf4 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b32:	f001 baf2 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007b36:	4b73      	ldr	r3, [pc, #460]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d104      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b48:	f7fc fb92 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8007b4c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b4e:	f001 bae4 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8007b52:	4b6c      	ldr	r3, [pc, #432]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b5e:	d10a      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d107      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b66:	f107 0314 	add.w	r3, r7, #20
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe fcb6 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	637b      	str	r3, [r7, #52]	; 0x34
 8007b74:	e043      	b.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8007b76:	4b63      	ldr	r3, [pc, #396]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b82:	d10a      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d107      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b8a:	f107 0308 	add.w	r3, r7, #8
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe fe0e 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
 8007b98:	e031      	b.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007b9a:	4b5a      	ldr	r3, [pc, #360]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d10c      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d109      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bac:	4b55      	ldr	r3, [pc, #340]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	08db      	lsrs	r3, r3, #3
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	4a54      	ldr	r2, [pc, #336]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bbe:	e01e      	b.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8007bc0:	4b50      	ldr	r3, [pc, #320]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bcc:	d105      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d102      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007bd4:	4b4d      	ldr	r3, [pc, #308]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd8:	e011      	b.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8007bda:	4b4a      	ldr	r3, [pc, #296]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d106      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	2b05      	cmp	r3, #5
 8007bec:	d103      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8007bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf4:	e003      	b.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bfa:	f001 ba8e 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bfe:	f001 ba8c 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007c02:	4b40      	ldr	r3, [pc, #256]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c0c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c14:	f7fc fb2c 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8007c18:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c1a:	f001 ba7e 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8007c1e:	4b39      	ldr	r3, [pc, #228]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c2a:	d10a      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	2b10      	cmp	r3, #16
 8007c30:	d107      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c32:	f107 0314 	add.w	r3, r7, #20
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fc50 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c40:	e043      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007c42:	4b30      	ldr	r3, [pc, #192]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c4e:	d10a      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	d107      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c56:	f107 0308 	add.w	r3, r7, #8
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fda8 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	637b      	str	r3, [r7, #52]	; 0x34
 8007c64:	e031      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007c66:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d10c      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	2b30      	cmp	r3, #48	; 0x30
 8007c76:	d109      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c78:	4b22      	ldr	r3, [pc, #136]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	08db      	lsrs	r3, r3, #3
 8007c7e:	f003 0303 	and.w	r3, r3, #3
 8007c82:	4a21      	ldr	r2, [pc, #132]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007c84:	fa22 f303 	lsr.w	r3, r2, r3
 8007c88:	637b      	str	r3, [r7, #52]	; 0x34
 8007c8a:	e01e      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007c8c:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c98:	d105      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	2b40      	cmp	r3, #64	; 0x40
 8007c9e:	d102      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8007ca0:	4b1a      	ldr	r3, [pc, #104]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca4:	e011      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007ca6:	4b17      	ldr	r3, [pc, #92]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d106      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	2b50      	cmp	r3, #80	; 0x50
 8007cb8:	d103      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc0:	e003      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cc6:	f001 ba28 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cca:	f001 ba26 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007cce:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cd4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007cd8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007ce0:	f7fc faf2 	bl	80042c8 <HAL_RCC_GetPCLK3Freq>
 8007ce4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ce6:	f001 ba18 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cf0:	d10e      	bne.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cf2:	f107 0314 	add.w	r3, r7, #20
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fbf0 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d00:	f001 ba0b 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d04:	44020c00 	.word	0x44020c00
 8007d08:	03d09000 	.word	0x03d09000
 8007d0c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d16:	d108      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d18:	f107 0308 	add.w	r3, r7, #8
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fe fd47 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d26:	f001 b9f8 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007d2a:	4ba4      	ldr	r3, [pc, #656]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d10d      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d3c:	d109      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d3e:	4b9f      	ldr	r3, [pc, #636]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	08db      	lsrs	r3, r3, #3
 8007d44:	f003 0303 	and.w	r3, r3, #3
 8007d48:	4a9d      	ldr	r2, [pc, #628]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d50:	e020      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007d52:	4b9a      	ldr	r3, [pc, #616]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d5e:	d106      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d66:	d102      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007d68:	4b96      	ldr	r3, [pc, #600]	; (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6c:	e012      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007d6e:	4b93      	ldr	r3, [pc, #588]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d107      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007d82:	d103      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d88:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8a:	e003      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d90:	f001 b9c3 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d94:	f001 b9c1 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007d98:	4b88      	ldr	r3, [pc, #544]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007daa:	f7fc fa45 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8007dae:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007db0:	f001 b9b3 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d104      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007dba:	f7fc f911 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8007dbe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007dc0:	f001 b9ab 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d108      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dca:	f107 0314 	add.w	r3, r7, #20
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fb84 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dd8:	f001 b99f 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007ddc:	4b77      	ldr	r3, [pc, #476]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007de8:	d105      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d102      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007df0:	4b75      	ldr	r3, [pc, #468]	; (8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007df2:	637b      	str	r3, [r7, #52]	; 0x34
 8007df4:	e023      	b.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007df6:	4b71      	ldr	r3, [pc, #452]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d10c      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	d109      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e08:	4b6c      	ldr	r3, [pc, #432]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	08db      	lsrs	r3, r3, #3
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	4a6b      	ldr	r2, [pc, #428]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007e14:	fa22 f303 	lsr.w	r3, r2, r3
 8007e18:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1a:	e010      	b.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007e1c:	4b67      	ldr	r3, [pc, #412]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e28:	d105      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	2b05      	cmp	r3, #5
 8007e2e:	d102      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007e30:	4b64      	ldr	r3, [pc, #400]	; (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007e32:	637b      	str	r3, [r7, #52]	; 0x34
 8007e34:	e003      	b.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e3a:	f001 b96e 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e3e:	f001 b96c 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007e42:	4b5e      	ldr	r3, [pc, #376]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007e4e:	4b5b      	ldr	r3, [pc, #364]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d106      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d103      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8007e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e66:	637b      	str	r3, [r7, #52]	; 0x34
 8007e68:	e012      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007e6a:	4b54      	ldr	r3, [pc, #336]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e78:	d106      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d103      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8007e80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
 8007e86:	e003      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007e8c:	f001 b945 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e90:	f001 b943 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007e94:	4b49      	ldr	r3, [pc, #292]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e9e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ea6:	f7fc f9e3 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8007eaa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007eac:	f001 b935 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb6:	d108      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb8:	f107 0308 	add.w	r3, r7, #8
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fe fc77 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ec6:	f001 b928 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007eca:	4b3c      	ldr	r3, [pc, #240]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d10d      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007edc:	d109      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ede:	4b37      	ldr	r3, [pc, #220]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	08db      	lsrs	r3, r3, #3
 8007ee4:	f003 0303 	and.w	r3, r3, #3
 8007ee8:	4a35      	ldr	r2, [pc, #212]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007eea:	fa22 f303 	lsr.w	r3, r2, r3
 8007eee:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef0:	e011      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007ef2:	4b32      	ldr	r3, [pc, #200]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007efe:	d106      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f06:	d102      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8007f08:	4b2e      	ldr	r3, [pc, #184]	; (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0c:	e003      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f12:	f001 b902 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f16:	f001 b900 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007f1a:	4b28      	ldr	r3, [pc, #160]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007f24:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f2c:	f7fc f9a0 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8007f30:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f32:	f001 b8f2 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f3c:	d108      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f3e:	f107 0308 	add.w	r3, r7, #8
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fc34 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f4c:	f001 b8e5 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007f50:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d10d      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f62:	d109      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f64:	4b15      	ldr	r3, [pc, #84]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	08db      	lsrs	r3, r3, #3
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	4a14      	ldr	r2, [pc, #80]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007f70:	fa22 f303 	lsr.w	r3, r2, r3
 8007f74:	637b      	str	r3, [r7, #52]	; 0x34
 8007f76:	e011      	b.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007f78:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f84:	d106      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007f8c:	d102      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007f90:	637b      	str	r3, [r7, #52]	; 0x34
 8007f92:	e003      	b.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f98:	f001 b8bf 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f9c:	f001 b8bd 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007fa0:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007fa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007fa6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007faa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10c      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007fb2:	f7fc f989 	bl	80042c8 <HAL_RCC_GetPCLK3Freq>
 8007fb6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007fb8:	f001 b8af 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fbc:	44020c00 	.word	0x44020c00
 8007fc0:	03d09000 	.word	0x03d09000
 8007fc4:	003d0900 	.word	0x003d0900
 8007fc8:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd2:	d108      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fd4:	f107 0308 	add.w	r3, r7, #8
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe fbe9 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fe2:	f001 b89a 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007fe6:	4b9f      	ldr	r3, [pc, #636]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d10d      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ff8:	d109      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ffa:	4b9a      	ldr	r3, [pc, #616]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	08db      	lsrs	r3, r3, #3
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	4a98      	ldr	r2, [pc, #608]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008006:	fa22 f303 	lsr.w	r3, r2, r3
 800800a:	637b      	str	r3, [r7, #52]	; 0x34
 800800c:	e011      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800800e:	4b95      	ldr	r3, [pc, #596]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800801a:	d106      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008022:	d102      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008024:	4b91      	ldr	r3, [pc, #580]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008026:	637b      	str	r3, [r7, #52]	; 0x34
 8008028:	e003      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800802e:	f001 b874 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008032:	f001 b872 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008036:	4b8b      	ldr	r3, [pc, #556]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800803c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008040:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	2b00      	cmp	r3, #0
 8008046:	d104      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008048:	f7fc f93e 	bl	80042c8 <HAL_RCC_GetPCLK3Freq>
 800804c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800804e:	f001 b864 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008058:	d108      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800805a:	f107 0308 	add.w	r3, r7, #8
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe fba6 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008068:	f001 b857 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800806c:	4b7d      	ldr	r3, [pc, #500]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	2b02      	cmp	r3, #2
 8008076:	d10d      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800807e:	d109      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008080:	4b78      	ldr	r3, [pc, #480]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	08db      	lsrs	r3, r3, #3
 8008086:	f003 0303 	and.w	r3, r3, #3
 800808a:	4a77      	ldr	r2, [pc, #476]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800808c:	fa22 f303 	lsr.w	r3, r2, r3
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
 8008092:	e011      	b.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008094:	4b73      	ldr	r3, [pc, #460]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800809c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a0:	d106      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080a8:	d102      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80080aa:	4b70      	ldr	r3, [pc, #448]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80080ac:	637b      	str	r3, [r7, #52]	; 0x34
 80080ae:	e003      	b.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080b4:	f001 b831 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080b8:	f001 b82f 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80080bc:	4b69      	ldr	r3, [pc, #420]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80080be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80080c2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d104      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80080ce:	f7fc f8cf 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 80080d2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80080d4:	f001 b821 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080de:	d108      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e0:	f107 0308 	add.w	r3, r7, #8
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe fb63 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080ee:	f001 b814 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80080f2:	4b5c      	ldr	r3, [pc, #368]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d10e      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008104:	d10a      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008106:	4b57      	ldr	r3, [pc, #348]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	08db      	lsrs	r3, r3, #3
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	4a55      	ldr	r2, [pc, #340]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008112:	fa22 f303 	lsr.w	r3, r2, r3
 8008116:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008118:	f000 bfff 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008120:	f000 bffb 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008124:	4b4f      	ldr	r3, [pc, #316]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008126:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800812a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800812e:	633b      	str	r3, [r7, #48]	; 0x30
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008136:	d056      	beq.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800813e:	f200 808b 	bhi.w	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008148:	d03e      	beq.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008150:	f200 8082 	bhi.w	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800815a:	d027      	beq.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008162:	d879      	bhi.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816a:	d017      	beq.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008172:	d871      	bhi.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	2b00      	cmp	r3, #0
 8008178:	d004      	beq.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008180:	d004      	beq.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008182:	e069      	b.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008184:	f7fc f8a0 	bl	80042c8 <HAL_RCC_GetPCLK3Freq>
 8008188:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800818a:	e068      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818c:	f107 0314 	add.w	r3, r7, #20
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe f9a3 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800819a:	e060      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800819c:	f107 0308 	add.w	r3, r7, #8
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe fb05 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081aa:	e058      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081ac:	4b2d      	ldr	r3, [pc, #180]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d103      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80081ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081be:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80081c0:	e04d      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081c6:	e04a      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80081c8:	4b26      	ldr	r3, [pc, #152]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081d6:	d103      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80081d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80081dc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80081de:	e03e      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081e4:	e03b      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081e6:	4b1f      	ldr	r3, [pc, #124]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081ec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081f2:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d10c      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80081fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d109      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008204:	4b17      	ldr	r3, [pc, #92]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	08db      	lsrs	r3, r3, #3
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	4a16      	ldr	r2, [pc, #88]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008210:	fa22 f303 	lsr.w	r3, r2, r3
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
 8008216:	e01e      	b.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008218:	4b12      	ldr	r3, [pc, #72]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008224:	d106      	bne.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822c:	d102      	bne.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800822e:	4b0f      	ldr	r3, [pc, #60]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008230:	637b      	str	r3, [r7, #52]	; 0x34
 8008232:	e010      	b.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008234:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008240:	d106      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008248:	d102      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800824a:	4b09      	ldr	r3, [pc, #36]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800824c:	637b      	str	r3, [r7, #52]	; 0x34
 800824e:	e002      	b.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008254:	e003      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008256:	e002      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800825c:	bf00      	nop
          }
        }
        break;
 800825e:	f000 bf5c 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008262:	bf00      	nop
 8008264:	44020c00 	.word	0x44020c00
 8008268:	03d09000 	.word	0x03d09000
 800826c:	003d0900 	.word	0x003d0900
 8008270:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008274:	4b9e      	ldr	r3, [pc, #632]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008276:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800827a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800827e:	633b      	str	r3, [r7, #48]	; 0x30
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008286:	d056      	beq.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800828e:	f200 808b 	bhi.w	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008298:	d03e      	beq.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082a0:	f200 8082 	bhi.w	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082aa:	d027      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082b2:	d879      	bhi.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ba:	d017      	beq.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c2:	d871      	bhi.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d004      	beq.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d0:	d004      	beq.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80082d2:	e069      	b.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80082d4:	f7fb ffcc 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 80082d8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80082da:	e068      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082dc:	f107 0314 	add.w	r3, r7, #20
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe f8fb 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082ea:	e060      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ec:	f107 0308 	add.w	r3, r7, #8
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe fa5d 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082fa:	e058      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082fc:	4b7c      	ldr	r3, [pc, #496]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80082fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b02      	cmp	r3, #2
 8008308:	d103      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800830a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008310:	e04d      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008316:	e04a      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008318:	4b75      	ldr	r3, [pc, #468]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800831a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800831e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008326:	d103      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008328:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800832c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800832e:	e03e      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008334:	e03b      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008336:	4b6e      	ldr	r3, [pc, #440]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800833c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008340:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008342:	4b6b      	ldr	r3, [pc, #428]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b02      	cmp	r3, #2
 800834c:	d10c      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	2b00      	cmp	r3, #0
 8008352:	d109      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008354:	4b66      	ldr	r3, [pc, #408]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	08db      	lsrs	r3, r3, #3
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	4a65      	ldr	r2, [pc, #404]	; (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008360:	fa22 f303 	lsr.w	r3, r2, r3
 8008364:	637b      	str	r3, [r7, #52]	; 0x34
 8008366:	e01e      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008368:	4b61      	ldr	r3, [pc, #388]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008374:	d106      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837c:	d102      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800837e:	4b5e      	ldr	r3, [pc, #376]	; (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008380:	637b      	str	r3, [r7, #52]	; 0x34
 8008382:	e010      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008384:	4b5a      	ldr	r3, [pc, #360]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800838c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008390:	d106      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008398:	d102      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800839a:	4b58      	ldr	r3, [pc, #352]	; (80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800839c:	637b      	str	r3, [r7, #52]	; 0x34
 800839e:	e002      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80083a4:	e003      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80083a6:	e002      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083ac:	bf00      	nop
          }
        }
        break;
 80083ae:	f000 beb4 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80083b2:	4b4f      	ldr	r3, [pc, #316]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80083b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80083b8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80083bc:	633b      	str	r3, [r7, #48]	; 0x30
 80083be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083c4:	d056      	beq.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083cc:	f200 808b 	bhi.w	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083d6:	d03e      	beq.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083de:	f200 8082 	bhi.w	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80083e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083e8:	d027      	beq.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083f0:	d879      	bhi.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083f8:	d017      	beq.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008400:	d871      	bhi.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800840e:	d004      	beq.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008410:	e069      	b.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008412:	f7fb ff59 	bl	80042c8 <HAL_RCC_GetPCLK3Freq>
 8008416:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008418:	e068      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800841a:	f107 0314 	add.w	r3, r7, #20
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe f85c 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008428:	e060      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800842a:	f107 0308 	add.w	r3, r7, #8
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe f9be 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008438:	e058      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800843a:	4b2d      	ldr	r3, [pc, #180]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800843c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b02      	cmp	r3, #2
 8008446:	d103      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800844c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800844e:	e04d      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008454:	e04a      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008456:	4b26      	ldr	r3, [pc, #152]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800845c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008464:	d103      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008466:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800846a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800846c:	e03e      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008472:	e03b      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008474:	4b1e      	ldr	r3, [pc, #120]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800847a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800847e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008480:	4b1b      	ldr	r3, [pc, #108]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b02      	cmp	r3, #2
 800848a:	d10c      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008492:	4b17      	ldr	r3, [pc, #92]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	08db      	lsrs	r3, r3, #3
 8008498:	f003 0303 	and.w	r3, r3, #3
 800849c:	4a15      	ldr	r2, [pc, #84]	; (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800849e:	fa22 f303 	lsr.w	r3, r2, r3
 80084a2:	637b      	str	r3, [r7, #52]	; 0x34
 80084a4:	e01e      	b.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084a6:	4b12      	ldr	r3, [pc, #72]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084b2:	d106      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ba:	d102      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80084bc:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80084be:	637b      	str	r3, [r7, #52]	; 0x34
 80084c0:	e010      	b.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084c2:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084ce:	d106      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80084d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084d6:	d102      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80084d8:	4b08      	ldr	r3, [pc, #32]	; (80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
 80084dc:	e002      	b.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80084e2:	e003      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80084e4:	e002      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084ea:	bf00      	nop
          }
        }
        break;
 80084ec:	f000 be15 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084f0:	44020c00 	.word	0x44020c00
 80084f4:	03d09000 	.word	0x03d09000
 80084f8:	003d0900 	.word	0x003d0900
 80084fc:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008500:	4b9e      	ldr	r3, [pc, #632]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008502:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008506:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800850a:	633b      	str	r3, [r7, #48]	; 0x30
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008512:	d056      	beq.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800851a:	f200 808b 	bhi.w	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008524:	d03e      	beq.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800852c:	f200 8082 	bhi.w	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008536:	d027      	beq.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800853e:	d879      	bhi.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008546:	d017      	beq.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800854e:	d871      	bhi.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	2b00      	cmp	r3, #0
 8008554:	d004      	beq.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800855c:	d004      	beq.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800855e:	e069      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008560:	f7fb feb2 	bl	80042c8 <HAL_RCC_GetPCLK3Freq>
 8008564:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008566:	e068      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008568:	f107 0314 	add.w	r3, r7, #20
 800856c:	4618      	mov	r0, r3
 800856e:	f7fd ffb5 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008576:	e060      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008578:	f107 0308 	add.w	r3, r7, #8
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe f917 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008586:	e058      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008588:	4b7c      	ldr	r3, [pc, #496]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800858a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b02      	cmp	r3, #2
 8008594:	d103      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8008596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800859a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800859c:	e04d      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800859e:	2300      	movs	r3, #0
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085a2:	e04a      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80085a4:	4b75      	ldr	r3, [pc, #468]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80085a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085b2:	d103      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80085b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085b8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80085ba:	e03e      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085c0:	e03b      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085c2:	4b6e      	ldr	r3, [pc, #440]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80085c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085c8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80085cc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085ce:	4b6b      	ldr	r3, [pc, #428]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d10c      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80085da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d109      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085e0:	4b66      	ldr	r3, [pc, #408]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	08db      	lsrs	r3, r3, #3
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	4a65      	ldr	r2, [pc, #404]	; (8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80085ec:	fa22 f303 	lsr.w	r3, r2, r3
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
 80085f2:	e01e      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085f4:	4b61      	ldr	r3, [pc, #388]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008600:	d106      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008608:	d102      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800860a:	4b5e      	ldr	r3, [pc, #376]	; (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800860c:	637b      	str	r3, [r7, #52]	; 0x34
 800860e:	e010      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008610:	4b5a      	ldr	r3, [pc, #360]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800861c:	d106      	bne.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008624:	d102      	bne.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008626:	4b58      	ldr	r3, [pc, #352]	; (8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008628:	637b      	str	r3, [r7, #52]	; 0x34
 800862a:	e002      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008630:	e003      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008632:	e002      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008638:	bf00      	nop
          }
        }
        break;
 800863a:	f000 bd6e 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800863e:	4b4f      	ldr	r3, [pc, #316]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008640:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008644:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008648:	633b      	str	r3, [r7, #48]	; 0x30
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008650:	d056      	beq.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008658:	f200 808b 	bhi.w	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008662:	d03e      	beq.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800866a:	f200 8082 	bhi.w	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008674:	d027      	beq.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800867c:	d879      	bhi.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008684:	d017      	beq.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800868c:	d871      	bhi.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800869a:	d004      	beq.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800869c:	e069      	b.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800869e:	f7fb fe13 	bl	80042c8 <HAL_RCC_GetPCLK3Freq>
 80086a2:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80086a4:	e068      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086a6:	f107 0314 	add.w	r3, r7, #20
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fd ff16 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086b4:	e060      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086b6:	f107 0308 	add.w	r3, r7, #8
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe f878 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086c4:	e058      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086c6:	4b2d      	ldr	r3, [pc, #180]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80086c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d103      	bne.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80086d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086d8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80086da:	e04d      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086e0:	e04a      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80086e2:	4b26      	ldr	r3, [pc, #152]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80086e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086f0:	d103      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80086f2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80086f8:	e03e      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086fe:	e03b      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008700:	4b1e      	ldr	r3, [pc, #120]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008706:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800870a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800870c:	4b1b      	ldr	r3, [pc, #108]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b02      	cmp	r3, #2
 8008716:	d10c      	bne.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871a:	2b00      	cmp	r3, #0
 800871c:	d109      	bne.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800871e:	4b17      	ldr	r3, [pc, #92]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	08db      	lsrs	r3, r3, #3
 8008724:	f003 0303 	and.w	r3, r3, #3
 8008728:	4a15      	ldr	r2, [pc, #84]	; (8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800872a:	fa22 f303 	lsr.w	r3, r2, r3
 800872e:	637b      	str	r3, [r7, #52]	; 0x34
 8008730:	e01e      	b.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008732:	4b12      	ldr	r3, [pc, #72]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800873a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800873e:	d106      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008746:	d102      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008748:	4b0e      	ldr	r3, [pc, #56]	; (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800874a:	637b      	str	r3, [r7, #52]	; 0x34
 800874c:	e010      	b.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800874e:	4b0b      	ldr	r3, [pc, #44]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800875a:	d106      	bne.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008762:	d102      	bne.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008764:	4b08      	ldr	r3, [pc, #32]	; (8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008766:	637b      	str	r3, [r7, #52]	; 0x34
 8008768:	e002      	b.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800876e:	e003      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008770:	e002      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008776:	bf00      	nop
          }
        }
        break;
 8008778:	f000 bccf 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800877c:	44020c00 	.word	0x44020c00
 8008780:	03d09000 	.word	0x03d09000
 8008784:	003d0900 	.word	0x003d0900
 8008788:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800878c:	4b9e      	ldr	r3, [pc, #632]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800878e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008792:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008796:	633b      	str	r3, [r7, #48]	; 0x30
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800879e:	d056      	beq.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087a6:	f200 808b 	bhi.w	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b0:	d03e      	beq.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b8:	f200 8082 	bhi.w	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087c2:	d027      	beq.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ca:	d879      	bhi.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087d2:	d017      	beq.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087da:	d871      	bhi.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80087dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d004      	beq.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087e8:	d004      	beq.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 80087ea:	e069      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80087ec:	f7fb fd6c 	bl	80042c8 <HAL_RCC_GetPCLK3Freq>
 80087f0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80087f2:	e068      	b.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fd fe6f 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008802:	e060      	b.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008804:	f107 0308 	add.w	r3, r7, #8
 8008808:	4618      	mov	r0, r3
 800880a:	f7fd ffd1 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008812:	e058      	b.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008814:	4b7c      	ldr	r3, [pc, #496]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b02      	cmp	r3, #2
 8008820:	d103      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8008822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008826:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008828:	e04d      	b.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800882e:	e04a      	b.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008830:	4b75      	ldr	r3, [pc, #468]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800883a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800883e:	d103      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8008840:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008846:	e03e      	b.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800884c:	e03b      	b.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800884e:	4b6e      	ldr	r3, [pc, #440]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008854:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008858:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800885a:	4b6b      	ldr	r3, [pc, #428]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b02      	cmp	r3, #2
 8008864:	d10c      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d109      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800886c:	4b66      	ldr	r3, [pc, #408]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	08db      	lsrs	r3, r3, #3
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	4a65      	ldr	r2, [pc, #404]	; (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008878:	fa22 f303 	lsr.w	r3, r2, r3
 800887c:	637b      	str	r3, [r7, #52]	; 0x34
 800887e:	e01e      	b.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008880:	4b61      	ldr	r3, [pc, #388]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800888c:	d106      	bne.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008894:	d102      	bne.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008896:	4b5e      	ldr	r3, [pc, #376]	; (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
 800889a:	e010      	b.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800889c:	4b5a      	ldr	r3, [pc, #360]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088a8:	d106      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b0:	d102      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80088b2:	4b58      	ldr	r3, [pc, #352]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80088b4:	637b      	str	r3, [r7, #52]	; 0x34
 80088b6:	e002      	b.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80088bc:	e003      	b.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80088be:	e002      	b.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088c4:	bf00      	nop
          }
        }
        break;
 80088c6:	f000 bc28 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80088ca:	4b4f      	ldr	r3, [pc, #316]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80088cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088d4:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80088d6:	4b4c      	ldr	r3, [pc, #304]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088e2:	d106      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d103      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80088ea:	4b4a      	ldr	r3, [pc, #296]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80088ee:	f000 bc14 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f8:	d108      	bne.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088fa:	f107 0320 	add.w	r3, r7, #32
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fd fc82 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008908:	f000 bc07 	b.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008912:	d107      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008914:	f107 0314 	add.w	r3, r7, #20
 8008918:	4618      	mov	r0, r3
 800891a:	f7fd fddf 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008922:	e3fa      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008928:	e3f7      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800892a:	4b37      	ldr	r3, [pc, #220]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800892c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	633b      	str	r3, [r7, #48]	; 0x30
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	2b04      	cmp	r3, #4
 800893a:	d861      	bhi.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008959 	.word	0x08008959
 8008948:	08008969 	.word	0x08008969
 800894c:	08008979 	.word	0x08008979
 8008950:	08008989 	.word	0x08008989
 8008954:	0800898f 	.word	0x0800898f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008958:	f107 0320 	add.w	r3, r7, #32
 800895c:	4618      	mov	r0, r3
 800895e:	f7fd fc53 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008966:	e04e      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008968:	f107 0314 	add.w	r3, r7, #20
 800896c:	4618      	mov	r0, r3
 800896e:	f7fd fdb5 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008976:	e046      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008978:	f107 0308 	add.w	r3, r7, #8
 800897c:	4618      	mov	r0, r3
 800897e:	f7fd ff17 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008986:	e03e      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008988:	4b23      	ldr	r3, [pc, #140]	; (8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800898a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800898c:	e03b      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800898e:	4b1e      	ldr	r3, [pc, #120]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008994:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008998:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800899a:	4b1b      	ldr	r3, [pc, #108]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d10c      	bne.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80089a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d109      	bne.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089ac:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	08db      	lsrs	r3, r3, #3
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	4a15      	ldr	r2, [pc, #84]	; (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80089b8:	fa22 f303 	lsr.w	r3, r2, r3
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34
 80089be:	e01e      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089c0:	4b11      	ldr	r3, [pc, #68]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089cc:	d106      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d4:	d102      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80089d6:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80089d8:	637b      	str	r3, [r7, #52]	; 0x34
 80089da:	e010      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089dc:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089e8:	d106      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80089ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089f0:	d102      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80089f2:	4b08      	ldr	r3, [pc, #32]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
 80089f6:	e002      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80089fc:	e003      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80089fe:	e002      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008a04:	bf00      	nop
          }
        }
        break;
 8008a06:	e388      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a08:	44020c00 	.word	0x44020c00
 8008a0c:	03d09000 	.word	0x03d09000
 8008a10:	003d0900 	.word	0x003d0900
 8008a14:	007a1200 	.word	0x007a1200
 8008a18:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008a1c:	4ba9      	ldr	r3, [pc, #676]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a26:	633b      	str	r3, [r7, #48]	; 0x30
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	2b20      	cmp	r3, #32
 8008a2c:	f200 809a 	bhi.w	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8008a30:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8008a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a36:	bf00      	nop
 8008a38:	08008abd 	.word	0x08008abd
 8008a3c:	08008b65 	.word	0x08008b65
 8008a40:	08008b65 	.word	0x08008b65
 8008a44:	08008b65 	.word	0x08008b65
 8008a48:	08008b65 	.word	0x08008b65
 8008a4c:	08008b65 	.word	0x08008b65
 8008a50:	08008b65 	.word	0x08008b65
 8008a54:	08008b65 	.word	0x08008b65
 8008a58:	08008acd 	.word	0x08008acd
 8008a5c:	08008b65 	.word	0x08008b65
 8008a60:	08008b65 	.word	0x08008b65
 8008a64:	08008b65 	.word	0x08008b65
 8008a68:	08008b65 	.word	0x08008b65
 8008a6c:	08008b65 	.word	0x08008b65
 8008a70:	08008b65 	.word	0x08008b65
 8008a74:	08008b65 	.word	0x08008b65
 8008a78:	08008add 	.word	0x08008add
 8008a7c:	08008b65 	.word	0x08008b65
 8008a80:	08008b65 	.word	0x08008b65
 8008a84:	08008b65 	.word	0x08008b65
 8008a88:	08008b65 	.word	0x08008b65
 8008a8c:	08008b65 	.word	0x08008b65
 8008a90:	08008b65 	.word	0x08008b65
 8008a94:	08008b65 	.word	0x08008b65
 8008a98:	08008aed 	.word	0x08008aed
 8008a9c:	08008b65 	.word	0x08008b65
 8008aa0:	08008b65 	.word	0x08008b65
 8008aa4:	08008b65 	.word	0x08008b65
 8008aa8:	08008b65 	.word	0x08008b65
 8008aac:	08008b65 	.word	0x08008b65
 8008ab0:	08008b65 	.word	0x08008b65
 8008ab4:	08008b65 	.word	0x08008b65
 8008ab8:	08008af3 	.word	0x08008af3
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008abc:	f107 0320 	add.w	r3, r7, #32
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fd fba1 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008aca:	e04e      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008acc:	f107 0314 	add.w	r3, r7, #20
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fd fd03 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ada:	e046      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008adc:	f107 0308 	add.w	r3, r7, #8
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fd fe65 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008aea:	e03e      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008aec:	4b76      	ldr	r3, [pc, #472]	; (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008aee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008af0:	e03b      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008af2:	4b74      	ldr	r3, [pc, #464]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008af8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008afe:	4b71      	ldr	r3, [pc, #452]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d10c      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d109      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b10:	4b6c      	ldr	r3, [pc, #432]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	4a6c      	ldr	r2, [pc, #432]	; (8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b20:	637b      	str	r3, [r7, #52]	; 0x34
 8008b22:	e01e      	b.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b24:	4b67      	ldr	r3, [pc, #412]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b30:	d106      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b38:	d102      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008b3a:	4b65      	ldr	r3, [pc, #404]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b3e:	e010      	b.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b40:	4b60      	ldr	r3, [pc, #384]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b4c:	d106      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b54:	d102      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008b56:	4b5f      	ldr	r3, [pc, #380]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008b58:	637b      	str	r3, [r7, #52]	; 0x34
 8008b5a:	e002      	b.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008b60:	e003      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8008b62:	e002      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b68:	bf00      	nop
          }
        }
        break;
 8008b6a:	e2d6      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008b6c:	4b55      	ldr	r3, [pc, #340]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b72:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008b76:	633b      	str	r3, [r7, #48]	; 0x30
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b7e:	d031      	beq.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b86:	d866      	bhi.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b8c:	d027      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	2bc0      	cmp	r3, #192	; 0xc0
 8008b92:	d860      	bhi.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	2b80      	cmp	r3, #128	; 0x80
 8008b98:	d019      	beq.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	2b80      	cmp	r3, #128	; 0x80
 8008b9e:	d85a      	bhi.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	2b40      	cmp	r3, #64	; 0x40
 8008baa:	d008      	beq.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008bac:	e053      	b.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bae:	f107 0320 	add.w	r3, r7, #32
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fd fb28 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bbc:	e04e      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bbe:	f107 0314 	add.w	r3, r7, #20
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fd fc8a 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bcc:	e046      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bce:	f107 0308 	add.w	r3, r7, #8
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fd fdec 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bdc:	e03e      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008bde:	4b3a      	ldr	r3, [pc, #232]	; (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008be0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008be2:	e03b      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008be4:	4b37      	ldr	r3, [pc, #220]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008bea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008bee:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bf0:	4b34      	ldr	r3, [pc, #208]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d10c      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d109      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c02:	4b30      	ldr	r3, [pc, #192]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	08db      	lsrs	r3, r3, #3
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	4a2f      	ldr	r2, [pc, #188]	; (8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c12:	637b      	str	r3, [r7, #52]	; 0x34
 8008c14:	e01e      	b.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c16:	4b2b      	ldr	r3, [pc, #172]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c22:	d106      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c2a:	d102      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008c2c:	4b28      	ldr	r3, [pc, #160]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c30:	e010      	b.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c32:	4b24      	ldr	r3, [pc, #144]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c3e:	d106      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8008c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c46:	d102      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008c48:	4b22      	ldr	r3, [pc, #136]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c4c:	e002      	b.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008c52:	e003      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008c54:	e002      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c5a:	bf00      	nop
          }
        }
        break;
 8008c5c:	e25d      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8008c5e:	4b19      	ldr	r3, [pc, #100]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c64:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008c68:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d103      	bne.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008c70:	f7fb fb14 	bl	800429c <HAL_RCC_GetPCLK2Freq>
 8008c74:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008c76:	e250      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008c78:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c84:	d10b      	bne.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c8c:	d107      	bne.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c8e:	f107 0314 	add.w	r3, r7, #20
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fd fc22 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c9c:	e04f      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008c9e:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008caa:	d115      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cb2:	d111      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cb4:	f107 0308 	add.w	r3, r7, #8
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fd fd79 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc2:	e03c      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008cc4:	44020c00 	.word	0x44020c00
 8008cc8:	00bb8000 	.word	0x00bb8000
 8008ccc:	03d09000 	.word	0x03d09000
 8008cd0:	003d0900 	.word	0x003d0900
 8008cd4:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008cd8:	4b94      	ldr	r3, [pc, #592]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d10d      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008cea:	d109      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cec:	4b8f      	ldr	r3, [pc, #572]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	08db      	lsrs	r3, r3, #3
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	4a8e      	ldr	r2, [pc, #568]	; (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cfe:	e01e      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008d00:	4b8a      	ldr	r3, [pc, #552]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d0c:	d106      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d14:	d102      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8008d16:	4b87      	ldr	r3, [pc, #540]	; (8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1a:	e010      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008d1c:	4b83      	ldr	r3, [pc, #524]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d28:	d106      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008d30:	d102      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8008d32:	4b81      	ldr	r3, [pc, #516]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
 8008d36:	e002      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d3c:	e1ed      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d3e:	e1ec      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008d40:	4b7a      	ldr	r3, [pc, #488]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008d4a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d103      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008d52:	f7fb fab9 	bl	80042c8 <HAL_RCC_GetPCLK3Freq>
 8008d56:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008d58:	e1df      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008d5a:	4b74      	ldr	r3, [pc, #464]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d66:	d10b      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d6e:	d107      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d70:	f107 0314 	add.w	r3, r7, #20
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fd fbb1 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7e:	e045      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008d80:	4b6a      	ldr	r3, [pc, #424]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d8c:	d10b      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d94:	d107      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d96:	f107 0308 	add.w	r3, r7, #8
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fd fd08 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	637b      	str	r3, [r7, #52]	; 0x34
 8008da4:	e032      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008da6:	4b61      	ldr	r3, [pc, #388]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d10d      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008db8:	d109      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008dba:	4b5c      	ldr	r3, [pc, #368]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	08db      	lsrs	r3, r3, #3
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	4a5a      	ldr	r2, [pc, #360]	; (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dca:	637b      	str	r3, [r7, #52]	; 0x34
 8008dcc:	e01e      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008dce:	4b57      	ldr	r3, [pc, #348]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dda:	d106      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008de2:	d102      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008de4:	4b53      	ldr	r3, [pc, #332]	; (8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008de6:	637b      	str	r3, [r7, #52]	; 0x34
 8008de8:	e010      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008dea:	4b50      	ldr	r3, [pc, #320]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008df6:	d106      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008dfe:	d102      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008e00:	4b4d      	ldr	r3, [pc, #308]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008e02:	637b      	str	r3, [r7, #52]	; 0x34
 8008e04:	e002      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e0a:	e186      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e0c:	e185      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008e0e:	4b47      	ldr	r3, [pc, #284]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e14:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008e18:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d103      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008e20:	f7fb fa3c 	bl	800429c <HAL_RCC_GetPCLK2Freq>
 8008e24:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008e26:	e178      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008e28:	4b40      	ldr	r3, [pc, #256]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e34:	d10b      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e3c:	d107      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e3e:	f107 0314 	add.w	r3, r7, #20
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fd fb4a 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4c:	e045      	b.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8008e4e:	4b37      	ldr	r3, [pc, #220]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5a:	d10b      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e62:	d107      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e64:	f107 0308 	add.w	r3, r7, #8
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fd fca1 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	637b      	str	r3, [r7, #52]	; 0x34
 8008e72:	e032      	b.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008e74:	4b2d      	ldr	r3, [pc, #180]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d10d      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8008e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e82:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008e86:	d109      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e88:	4b28      	ldr	r3, [pc, #160]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	08db      	lsrs	r3, r3, #3
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	4a27      	ldr	r2, [pc, #156]	; (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
 8008e98:	637b      	str	r3, [r7, #52]	; 0x34
 8008e9a:	e01e      	b.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008e9c:	4b23      	ldr	r3, [pc, #140]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea8:	d106      	bne.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eb0:	d102      	bne.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8008eb2:	4b20      	ldr	r3, [pc, #128]	; (8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb6:	e010      	b.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008eb8:	4b1c      	ldr	r3, [pc, #112]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec4:	d106      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008ecc:	d102      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8008ece:	4b1a      	ldr	r3, [pc, #104]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ed2:	e002      	b.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ed8:	e11f      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008eda:	e11e      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008edc:	4b13      	ldr	r3, [pc, #76]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ede:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d85f      	bhi.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8008eee:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8008ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08008f0d 	.word	0x08008f0d
 8008efc:	08008f1d 	.word	0x08008f1d
 8008f00:	08008f3d 	.word	0x08008f3d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008f04:	f7fb f998 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8008f08:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008f0a:	e053      	b.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f0c:	f107 0320 	add.w	r3, r7, #32
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fd f979 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f1a:	e04b      	b.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fd fadb 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f2a:	e043      	b.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008f2c:	44020c00 	.word	0x44020c00
 8008f30:	03d09000 	.word	0x03d09000
 8008f34:	003d0900 	.word	0x003d0900
 8008f38:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f3c:	4b79      	ldr	r3, [pc, #484]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008f42:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008f46:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f48:	4b76      	ldr	r3, [pc, #472]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d10c      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d109      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f5a:	4b72      	ldr	r3, [pc, #456]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	08db      	lsrs	r3, r3, #3
 8008f60:	f003 0303 	and.w	r3, r3, #3
 8008f64:	4a70      	ldr	r2, [pc, #448]	; (8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8008f66:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f6c:	e01e      	b.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f6e:	4b6d      	ldr	r3, [pc, #436]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f7a:	d106      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f82:	d102      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f84:	4b69      	ldr	r3, [pc, #420]	; (800912c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8008f86:	637b      	str	r3, [r7, #52]	; 0x34
 8008f88:	e010      	b.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f8a:	4b66      	ldr	r3, [pc, #408]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f96:	d106      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f9e:	d102      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008fa0:	4b63      	ldr	r3, [pc, #396]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8008fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8008fa4:	e002      	b.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008faa:	e003      	b.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008fac:	e002      	b.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008fb2:	bf00      	nop
          }
        }
        break;
 8008fb4:	e0b1      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008fb6:	4b5b      	ldr	r3, [pc, #364]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008fbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008fc0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008fc2:	4b58      	ldr	r3, [pc, #352]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d106      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d103      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8008fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fda:	637b      	str	r3, [r7, #52]	; 0x34
 8008fdc:	e01f      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008fde:	4b51      	ldr	r3, [pc, #324]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fec:	d106      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	2b40      	cmp	r3, #64	; 0x40
 8008ff2:	d103      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8008ff4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ffa:	e010      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008ffc:	4b49      	ldr	r3, [pc, #292]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009008:	d106      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	2b80      	cmp	r3, #128	; 0x80
 800900e:	d103      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009010:	f248 0312 	movw	r3, #32786	; 0x8012
 8009014:	637b      	str	r3, [r7, #52]	; 0x34
 8009016:	e002      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009018:	2300      	movs	r3, #0
 800901a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800901c:	e07d      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800901e:	e07c      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009020:	4b40      	ldr	r3, [pc, #256]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009026:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800902a:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800902c:	4b3d      	ldr	r3, [pc, #244]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009038:	d105      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	2b00      	cmp	r3, #0
 800903e:	d102      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009040:	4b3c      	ldr	r3, [pc, #240]	; (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009042:	637b      	str	r3, [r7, #52]	; 0x34
 8009044:	e031      	b.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009046:	4b37      	ldr	r3, [pc, #220]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009052:	d10a      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	2b10      	cmp	r3, #16
 8009058:	d107      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800905a:	f107 0320 	add.w	r3, r7, #32
 800905e:	4618      	mov	r0, r3
 8009060:	f7fd f8d2 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	637b      	str	r3, [r7, #52]	; 0x34
 8009068:	e01f      	b.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800906a:	4b2e      	ldr	r3, [pc, #184]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800906c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	2b02      	cmp	r3, #2
 8009076:	d106      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	2b20      	cmp	r3, #32
 800907c:	d103      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800907e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009082:	637b      	str	r3, [r7, #52]	; 0x34
 8009084:	e011      	b.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009086:	4b27      	ldr	r3, [pc, #156]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800908c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009094:	d106      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	2b30      	cmp	r3, #48	; 0x30
 800909a:	d103      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800909c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80090a0:	637b      	str	r3, [r7, #52]	; 0x34
 80090a2:	e002      	b.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80090a8:	e037      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090aa:	e036      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80090ac:	4b1d      	ldr	r3, [pc, #116]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80090b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090b6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	2b10      	cmp	r3, #16
 80090bc:	d107      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090be:	f107 0320 	add.w	r3, r7, #32
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fd f8a0 	bl	8006208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80090cc:	e025      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80090ce:	4b15      	ldr	r3, [pc, #84]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090da:	d10a      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	2b20      	cmp	r3, #32
 80090e0:	d107      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090e2:	f107 0308 	add.w	r3, r7, #8
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fd fb62 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	637b      	str	r3, [r7, #52]	; 0x34
 80090f0:	e00f      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80090f2:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090fe:	d105      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	2b30      	cmp	r3, #48	; 0x30
 8009104:	d102      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009106:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009108:	637b      	str	r3, [r7, #52]	; 0x34
 800910a:	e002      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8009110:	e003      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009112:	e002      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009118:	bf00      	nop
    }
  }

  return (frequency);
 800911a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800911c:	4618      	mov	r0, r3
 800911e:	373c      	adds	r7, #60	; 0x3c
 8009120:	46bd      	mov	sp, r7
 8009122:	bd90      	pop	{r4, r7, pc}
 8009124:	44020c00 	.word	0x44020c00
 8009128:	03d09000 	.word	0x03d09000
 800912c:	003d0900 	.word	0x003d0900
 8009130:	007a1200 	.word	0x007a1200
 8009134:	02dc6c00 	.word	0x02dc6c00

08009138 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009140:	4b48      	ldr	r3, [pc, #288]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a47      	ldr	r2, [pc, #284]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 8009146:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800914a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800914c:	f7f8 fa6c 	bl	8001628 <HAL_GetTick>
 8009150:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009152:	e008      	b.n	8009166 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009154:	f7f8 fa68 	bl	8001628 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b02      	cmp	r3, #2
 8009160:	d901      	bls.n	8009166 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e07a      	b.n	800925c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009166:	4b3f      	ldr	r3, [pc, #252]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1f0      	bne.n	8009154 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009172:	4b3c      	ldr	r3, [pc, #240]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800917a:	f023 0303 	bic.w	r3, r3, #3
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	6811      	ldr	r1, [r2, #0]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6852      	ldr	r2, [r2, #4]
 8009186:	0212      	lsls	r2, r2, #8
 8009188:	430a      	orrs	r2, r1
 800918a:	4936      	ldr	r1, [pc, #216]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 800918c:	4313      	orrs	r3, r2
 800918e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	3b01      	subs	r3, #1
 8009196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	3b01      	subs	r3, #1
 80091a0:	025b      	lsls	r3, r3, #9
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	041b      	lsls	r3, r3, #16
 80091ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	061b      	lsls	r3, r3, #24
 80091bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091c0:	4928      	ldr	r1, [pc, #160]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80091c6:	4b27      	ldr	r3, [pc, #156]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 80091c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ca:	f023 020c 	bic.w	r2, r3, #12
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	4924      	ldr	r1, [pc, #144]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80091d8:	4b22      	ldr	r3, [pc, #136]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	f023 0220 	bic.w	r2, r3, #32
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	69db      	ldr	r3, [r3, #28]
 80091e4:	491f      	ldr	r1, [pc, #124]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80091ea:	4b1e      	ldr	r3, [pc, #120]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 80091ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	491c      	ldr	r1, [pc, #112]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80091f8:	4b1a      	ldr	r3, [pc, #104]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a19      	ldr	r2, [pc, #100]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 80091fe:	f023 0310 	bic.w	r3, r3, #16
 8009202:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009204:	4b17      	ldr	r3, [pc, #92]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 8009206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009208:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800920c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6a12      	ldr	r2, [r2, #32]
 8009214:	00d2      	lsls	r2, r2, #3
 8009216:	4913      	ldr	r1, [pc, #76]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 8009218:	4313      	orrs	r3, r2
 800921a:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800921c:	4b11      	ldr	r3, [pc, #68]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	4a10      	ldr	r2, [pc, #64]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 8009222:	f043 0310 	orr.w	r3, r3, #16
 8009226:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009228:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a0d      	ldr	r2, [pc, #52]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 800922e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009232:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009234:	f7f8 f9f8 	bl	8001628 <HAL_GetTick>
 8009238:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800923a:	e008      	b.n	800924e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800923c:	f7f8 f9f4 	bl	8001628 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d901      	bls.n	800924e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e006      	b.n	800925c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800924e:	4b05      	ldr	r3, [pc, #20]	; (8009264 <RCCEx_PLL2_Config+0x12c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f0      	beq.n	800923c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800925a:	2300      	movs	r3, #0

}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	44020c00 	.word	0x44020c00

08009268 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009270:	4b48      	ldr	r3, [pc, #288]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a47      	ldr	r2, [pc, #284]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 8009276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800927a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800927c:	f7f8 f9d4 	bl	8001628 <HAL_GetTick>
 8009280:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009282:	e008      	b.n	8009296 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009284:	f7f8 f9d0 	bl	8001628 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d901      	bls.n	8009296 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e07a      	b.n	800938c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009296:	4b3f      	ldr	r3, [pc, #252]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f0      	bne.n	8009284 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80092a2:	4b3c      	ldr	r3, [pc, #240]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80092aa:	f023 0303 	bic.w	r3, r3, #3
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	6811      	ldr	r1, [r2, #0]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	6852      	ldr	r2, [r2, #4]
 80092b6:	0212      	lsls	r2, r2, #8
 80092b8:	430a      	orrs	r2, r1
 80092ba:	4936      	ldr	r1, [pc, #216]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	630b      	str	r3, [r1, #48]	; 0x30
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	3b01      	subs	r3, #1
 80092d0:	025b      	lsls	r3, r3, #9
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	431a      	orrs	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	3b01      	subs	r3, #1
 80092dc:	041b      	lsls	r3, r3, #16
 80092de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	061b      	lsls	r3, r3, #24
 80092ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80092f0:	4928      	ldr	r1, [pc, #160]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80092f6:	4b27      	ldr	r3, [pc, #156]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 80092f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fa:	f023 020c 	bic.w	r2, r3, #12
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	4924      	ldr	r1, [pc, #144]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 8009304:	4313      	orrs	r3, r2
 8009306:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009308:	4b22      	ldr	r3, [pc, #136]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 800930a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930c:	f023 0220 	bic.w	r2, r3, #32
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	491f      	ldr	r1, [pc, #124]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 8009316:	4313      	orrs	r3, r2
 8009318:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800931a:	4b1e      	ldr	r3, [pc, #120]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 800931c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	491c      	ldr	r1, [pc, #112]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 8009324:	4313      	orrs	r3, r2
 8009326:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009328:	4b1a      	ldr	r3, [pc, #104]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 800932a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932c:	4a19      	ldr	r2, [pc, #100]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 800932e:	f023 0310 	bic.w	r3, r3, #16
 8009332:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009334:	4b17      	ldr	r3, [pc, #92]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 8009336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009338:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800933c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6a12      	ldr	r2, [r2, #32]
 8009344:	00d2      	lsls	r2, r2, #3
 8009346:	4913      	ldr	r1, [pc, #76]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 8009348:	4313      	orrs	r3, r2
 800934a:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800934c:	4b11      	ldr	r3, [pc, #68]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 800934e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009350:	4a10      	ldr	r2, [pc, #64]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 8009352:	f043 0310 	orr.w	r3, r3, #16
 8009356:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009358:	4b0e      	ldr	r3, [pc, #56]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a0d      	ldr	r2, [pc, #52]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 800935e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009362:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009364:	f7f8 f960 	bl	8001628 <HAL_GetTick>
 8009368:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800936a:	e008      	b.n	800937e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800936c:	f7f8 f95c 	bl	8001628 <HAL_GetTick>
 8009370:	4602      	mov	r2, r0
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	2b02      	cmp	r3, #2
 8009378:	d901      	bls.n	800937e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e006      	b.n	800938c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800937e:	4b05      	ldr	r3, [pc, #20]	; (8009394 <RCCEx_PLL3_Config+0x12c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d0f0      	beq.n	800936c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	44020c00 	.word	0x44020c00

08009398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e049      	b.n	800943e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d106      	bne.n	80093c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7f7 ff06 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3304      	adds	r3, #4
 80093d4:	4619      	mov	r1, r3
 80093d6:	4610      	mov	r0, r2
 80093d8:	f000 fc28 	bl	8009c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e049      	b.n	80094ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	d106      	bne.n	8009472 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f841 	bl	80094f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2202      	movs	r2, #2
 8009476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3304      	adds	r3, #4
 8009482:	4619      	mov	r1, r3
 8009484:	4610      	mov	r0, r2
 8009486:	f000 fbd1 	bl	8009c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d109      	bne.n	800952c <HAL_TIM_PWM_Start+0x24>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	bf14      	ite	ne
 8009524:	2301      	movne	r3, #1
 8009526:	2300      	moveq	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	e03c      	b.n	80095a6 <HAL_TIM_PWM_Start+0x9e>
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	2b04      	cmp	r3, #4
 8009530:	d109      	bne.n	8009546 <HAL_TIM_PWM_Start+0x3e>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b01      	cmp	r3, #1
 800953c:	bf14      	ite	ne
 800953e:	2301      	movne	r3, #1
 8009540:	2300      	moveq	r3, #0
 8009542:	b2db      	uxtb	r3, r3
 8009544:	e02f      	b.n	80095a6 <HAL_TIM_PWM_Start+0x9e>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b08      	cmp	r3, #8
 800954a:	d109      	bne.n	8009560 <HAL_TIM_PWM_Start+0x58>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b01      	cmp	r3, #1
 8009556:	bf14      	ite	ne
 8009558:	2301      	movne	r3, #1
 800955a:	2300      	moveq	r3, #0
 800955c:	b2db      	uxtb	r3, r3
 800955e:	e022      	b.n	80095a6 <HAL_TIM_PWM_Start+0x9e>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b0c      	cmp	r3, #12
 8009564:	d109      	bne.n	800957a <HAL_TIM_PWM_Start+0x72>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b01      	cmp	r3, #1
 8009570:	bf14      	ite	ne
 8009572:	2301      	movne	r3, #1
 8009574:	2300      	moveq	r3, #0
 8009576:	b2db      	uxtb	r3, r3
 8009578:	e015      	b.n	80095a6 <HAL_TIM_PWM_Start+0x9e>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b10      	cmp	r3, #16
 800957e:	d109      	bne.n	8009594 <HAL_TIM_PWM_Start+0x8c>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b01      	cmp	r3, #1
 800958a:	bf14      	ite	ne
 800958c:	2301      	movne	r3, #1
 800958e:	2300      	moveq	r3, #0
 8009590:	b2db      	uxtb	r3, r3
 8009592:	e008      	b.n	80095a6 <HAL_TIM_PWM_Start+0x9e>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b01      	cmp	r3, #1
 800959e:	bf14      	ite	ne
 80095a0:	2301      	movne	r3, #1
 80095a2:	2300      	moveq	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e0e2      	b.n	8009774 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d104      	bne.n	80095be <HAL_TIM_PWM_Start+0xb6>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095bc:	e023      	b.n	8009606 <HAL_TIM_PWM_Start+0xfe>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	d104      	bne.n	80095ce <HAL_TIM_PWM_Start+0xc6>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2202      	movs	r2, #2
 80095c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095cc:	e01b      	b.n	8009606 <HAL_TIM_PWM_Start+0xfe>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d104      	bne.n	80095de <HAL_TIM_PWM_Start+0xd6>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095dc:	e013      	b.n	8009606 <HAL_TIM_PWM_Start+0xfe>
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b0c      	cmp	r3, #12
 80095e2:	d104      	bne.n	80095ee <HAL_TIM_PWM_Start+0xe6>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095ec:	e00b      	b.n	8009606 <HAL_TIM_PWM_Start+0xfe>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b10      	cmp	r3, #16
 80095f2:	d104      	bne.n	80095fe <HAL_TIM_PWM_Start+0xf6>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095fc:	e003      	b.n	8009606 <HAL_TIM_PWM_Start+0xfe>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2202      	movs	r2, #2
 8009602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2201      	movs	r2, #1
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	4618      	mov	r0, r3
 8009610:	f001 f89c 	bl	800a74c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a58      	ldr	r2, [pc, #352]	; (800977c <HAL_TIM_PWM_Start+0x274>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d02c      	beq.n	8009678 <HAL_TIM_PWM_Start+0x170>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a57      	ldr	r2, [pc, #348]	; (8009780 <HAL_TIM_PWM_Start+0x278>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d027      	beq.n	8009678 <HAL_TIM_PWM_Start+0x170>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a55      	ldr	r2, [pc, #340]	; (8009784 <HAL_TIM_PWM_Start+0x27c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d022      	beq.n	8009678 <HAL_TIM_PWM_Start+0x170>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a54      	ldr	r2, [pc, #336]	; (8009788 <HAL_TIM_PWM_Start+0x280>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d01d      	beq.n	8009678 <HAL_TIM_PWM_Start+0x170>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a52      	ldr	r2, [pc, #328]	; (800978c <HAL_TIM_PWM_Start+0x284>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d018      	beq.n	8009678 <HAL_TIM_PWM_Start+0x170>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a51      	ldr	r2, [pc, #324]	; (8009790 <HAL_TIM_PWM_Start+0x288>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d013      	beq.n	8009678 <HAL_TIM_PWM_Start+0x170>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a4f      	ldr	r2, [pc, #316]	; (8009794 <HAL_TIM_PWM_Start+0x28c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d00e      	beq.n	8009678 <HAL_TIM_PWM_Start+0x170>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a4e      	ldr	r2, [pc, #312]	; (8009798 <HAL_TIM_PWM_Start+0x290>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d009      	beq.n	8009678 <HAL_TIM_PWM_Start+0x170>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a4c      	ldr	r2, [pc, #304]	; (800979c <HAL_TIM_PWM_Start+0x294>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d004      	beq.n	8009678 <HAL_TIM_PWM_Start+0x170>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a4b      	ldr	r2, [pc, #300]	; (80097a0 <HAL_TIM_PWM_Start+0x298>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d101      	bne.n	800967c <HAL_TIM_PWM_Start+0x174>
 8009678:	2301      	movs	r3, #1
 800967a:	e000      	b.n	800967e <HAL_TIM_PWM_Start+0x176>
 800967c:	2300      	movs	r3, #0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d007      	beq.n	8009692 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a39      	ldr	r2, [pc, #228]	; (800977c <HAL_TIM_PWM_Start+0x274>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d04a      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a37      	ldr	r2, [pc, #220]	; (8009780 <HAL_TIM_PWM_Start+0x278>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d045      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ae:	d040      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096b8:	d03b      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a39      	ldr	r2, [pc, #228]	; (80097a4 <HAL_TIM_PWM_Start+0x29c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d036      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a37      	ldr	r2, [pc, #220]	; (80097a8 <HAL_TIM_PWM_Start+0x2a0>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d031      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a36      	ldr	r2, [pc, #216]	; (80097ac <HAL_TIM_PWM_Start+0x2a4>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d02c      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a34      	ldr	r2, [pc, #208]	; (80097b0 <HAL_TIM_PWM_Start+0x2a8>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d027      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a33      	ldr	r2, [pc, #204]	; (80097b4 <HAL_TIM_PWM_Start+0x2ac>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d022      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a31      	ldr	r2, [pc, #196]	; (80097b8 <HAL_TIM_PWM_Start+0x2b0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01d      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a22      	ldr	r2, [pc, #136]	; (8009784 <HAL_TIM_PWM_Start+0x27c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d018      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a20      	ldr	r2, [pc, #128]	; (8009788 <HAL_TIM_PWM_Start+0x280>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a2b      	ldr	r2, [pc, #172]	; (80097bc <HAL_TIM_PWM_Start+0x2b4>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00e      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a29      	ldr	r2, [pc, #164]	; (80097c0 <HAL_TIM_PWM_Start+0x2b8>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d009      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a1a      	ldr	r2, [pc, #104]	; (800978c <HAL_TIM_PWM_Start+0x284>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d004      	beq.n	8009732 <HAL_TIM_PWM_Start+0x22a>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a18      	ldr	r2, [pc, #96]	; (8009790 <HAL_TIM_PWM_Start+0x288>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d115      	bne.n	800975e <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	4b22      	ldr	r3, [pc, #136]	; (80097c4 <HAL_TIM_PWM_Start+0x2bc>)
 800973a:	4013      	ands	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b06      	cmp	r3, #6
 8009742:	d015      	beq.n	8009770 <HAL_TIM_PWM_Start+0x268>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800974a:	d011      	beq.n	8009770 <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f042 0201 	orr.w	r2, r2, #1
 800975a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975c:	e008      	b.n	8009770 <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f042 0201 	orr.w	r2, r2, #1
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e000      	b.n	8009772 <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009770:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	40012c00 	.word	0x40012c00
 8009780:	50012c00 	.word	0x50012c00
 8009784:	40013400 	.word	0x40013400
 8009788:	50013400 	.word	0x50013400
 800978c:	40014000 	.word	0x40014000
 8009790:	50014000 	.word	0x50014000
 8009794:	40014400 	.word	0x40014400
 8009798:	50014400 	.word	0x50014400
 800979c:	40014800 	.word	0x40014800
 80097a0:	50014800 	.word	0x50014800
 80097a4:	40000400 	.word	0x40000400
 80097a8:	50000400 	.word	0x50000400
 80097ac:	40000800 	.word	0x40000800
 80097b0:	50000800 	.word	0x50000800
 80097b4:	40000c00 	.word	0x40000c00
 80097b8:	50000c00 	.word	0x50000c00
 80097bc:	40001800 	.word	0x40001800
 80097c0:	50001800 	.word	0x50001800
 80097c4:	00010007 	.word	0x00010007

080097c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d101      	bne.n	80097e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80097e2:	2302      	movs	r3, #2
 80097e4:	e0ff      	b.n	80099e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b14      	cmp	r3, #20
 80097f2:	f200 80f0 	bhi.w	80099d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80097f6:	a201      	add	r2, pc, #4	; (adr r2, 80097fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fc:	08009851 	.word	0x08009851
 8009800:	080099d7 	.word	0x080099d7
 8009804:	080099d7 	.word	0x080099d7
 8009808:	080099d7 	.word	0x080099d7
 800980c:	08009891 	.word	0x08009891
 8009810:	080099d7 	.word	0x080099d7
 8009814:	080099d7 	.word	0x080099d7
 8009818:	080099d7 	.word	0x080099d7
 800981c:	080098d3 	.word	0x080098d3
 8009820:	080099d7 	.word	0x080099d7
 8009824:	080099d7 	.word	0x080099d7
 8009828:	080099d7 	.word	0x080099d7
 800982c:	08009913 	.word	0x08009913
 8009830:	080099d7 	.word	0x080099d7
 8009834:	080099d7 	.word	0x080099d7
 8009838:	080099d7 	.word	0x080099d7
 800983c:	08009955 	.word	0x08009955
 8009840:	080099d7 	.word	0x080099d7
 8009844:	080099d7 	.word	0x080099d7
 8009848:	080099d7 	.word	0x080099d7
 800984c:	08009995 	.word	0x08009995
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fb06 	bl	8009e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699a      	ldr	r2, [r3, #24]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0208 	orr.w	r2, r2, #8
 800986a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699a      	ldr	r2, [r3, #24]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0204 	bic.w	r2, r2, #4
 800987a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6999      	ldr	r1, [r3, #24]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	691a      	ldr	r2, [r3, #16]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	619a      	str	r2, [r3, #24]
      break;
 800988e:	e0a5      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fba8 	bl	8009fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	699a      	ldr	r2, [r3, #24]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699a      	ldr	r2, [r3, #24]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6999      	ldr	r1, [r3, #24]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	021a      	lsls	r2, r3, #8
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	619a      	str	r2, [r3, #24]
      break;
 80098d0:	e084      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fc37 	bl	800a14c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69da      	ldr	r2, [r3, #28]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f042 0208 	orr.w	r2, r2, #8
 80098ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	69da      	ldr	r2, [r3, #28]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0204 	bic.w	r2, r2, #4
 80098fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69d9      	ldr	r1, [r3, #28]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	691a      	ldr	r2, [r3, #16]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	61da      	str	r2, [r3, #28]
      break;
 8009910:	e064      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68b9      	ldr	r1, [r7, #8]
 8009918:	4618      	mov	r0, r3
 800991a:	f000 fcc5 	bl	800a2a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69da      	ldr	r2, [r3, #28]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800992c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69da      	ldr	r2, [r3, #28]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800993c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69d9      	ldr	r1, [r3, #28]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	021a      	lsls	r2, r3, #8
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	61da      	str	r2, [r3, #28]
      break;
 8009952:	e043      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68b9      	ldr	r1, [r7, #8]
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fd54 	bl	800a408 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f042 0208 	orr.w	r2, r2, #8
 800996e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0204 	bic.w	r2, r2, #4
 800997e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009992:	e023      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fdb6 	bl	800a50c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	021a      	lsls	r2, r3, #8
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	430a      	orrs	r2, r1
 80099d2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80099d4:	e002      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]
      break;
 80099da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop

080099f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d101      	bne.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c>
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e0fe      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x21a>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a48:	f000 80c9 	beq.w	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a50:	f200 80ce 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009a54:	4a6f      	ldr	r2, [pc, #444]	; (8009c14 <HAL_TIM_ConfigClockSource+0x224>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	f000 80c1 	beq.w	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009a5c:	4a6d      	ldr	r2, [pc, #436]	; (8009c14 <HAL_TIM_ConfigClockSource+0x224>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	f200 80c6 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009a64:	4a6c      	ldr	r2, [pc, #432]	; (8009c18 <HAL_TIM_ConfigClockSource+0x228>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	f000 80b9 	beq.w	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009a6c:	4a6a      	ldr	r2, [pc, #424]	; (8009c18 <HAL_TIM_ConfigClockSource+0x228>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	f200 80be 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009a74:	4a69      	ldr	r2, [pc, #420]	; (8009c1c <HAL_TIM_ConfigClockSource+0x22c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	f000 80b1 	beq.w	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009a7c:	4a67      	ldr	r2, [pc, #412]	; (8009c1c <HAL_TIM_ConfigClockSource+0x22c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	f200 80b6 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009a84:	4a66      	ldr	r2, [pc, #408]	; (8009c20 <HAL_TIM_ConfigClockSource+0x230>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	f000 80a9 	beq.w	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009a8c:	4a64      	ldr	r2, [pc, #400]	; (8009c20 <HAL_TIM_ConfigClockSource+0x230>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	f200 80ae 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009a94:	4a63      	ldr	r2, [pc, #396]	; (8009c24 <HAL_TIM_ConfigClockSource+0x234>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	f000 80a1 	beq.w	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009a9c:	4a61      	ldr	r2, [pc, #388]	; (8009c24 <HAL_TIM_ConfigClockSource+0x234>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	f200 80a6 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009aa4:	4a60      	ldr	r2, [pc, #384]	; (8009c28 <HAL_TIM_ConfigClockSource+0x238>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	f000 8099 	beq.w	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009aac:	4a5e      	ldr	r2, [pc, #376]	; (8009c28 <HAL_TIM_ConfigClockSource+0x238>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	f200 809e 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009ab4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ab8:	f000 8091 	beq.w	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009abc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ac0:	f200 8096 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ac8:	f000 8089 	beq.w	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ad0:	f200 808e 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad8:	d03e      	beq.n	8009b58 <HAL_TIM_ConfigClockSource+0x168>
 8009ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ade:	f200 8087 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae6:	f000 8086 	beq.w	8009bf6 <HAL_TIM_ConfigClockSource+0x206>
 8009aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aee:	d87f      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009af0:	2b70      	cmp	r3, #112	; 0x70
 8009af2:	d01a      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x13a>
 8009af4:	2b70      	cmp	r3, #112	; 0x70
 8009af6:	d87b      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009af8:	2b60      	cmp	r3, #96	; 0x60
 8009afa:	d050      	beq.n	8009b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8009afc:	2b60      	cmp	r3, #96	; 0x60
 8009afe:	d877      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009b00:	2b50      	cmp	r3, #80	; 0x50
 8009b02:	d03c      	beq.n	8009b7e <HAL_TIM_ConfigClockSource+0x18e>
 8009b04:	2b50      	cmp	r3, #80	; 0x50
 8009b06:	d873      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009b08:	2b40      	cmp	r3, #64	; 0x40
 8009b0a:	d058      	beq.n	8009bbe <HAL_TIM_ConfigClockSource+0x1ce>
 8009b0c:	2b40      	cmp	r3, #64	; 0x40
 8009b0e:	d86f      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009b10:	2b30      	cmp	r3, #48	; 0x30
 8009b12:	d064      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009b14:	2b30      	cmp	r3, #48	; 0x30
 8009b16:	d86b      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009b18:	2b20      	cmp	r3, #32
 8009b1a:	d060      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d867      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d05c      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009b24:	2b10      	cmp	r3, #16
 8009b26:	d05a      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0x1ee>
 8009b28:	e062      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b3a:	f000 fde7 	bl	800a70c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	609a      	str	r2, [r3, #8]
      break;
 8009b56:	e04f      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b68:	f000 fdd0 	bl	800a70c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689a      	ldr	r2, [r3, #8]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b7a:	609a      	str	r2, [r3, #8]
      break;
 8009b7c:	e03c      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f000 fd42 	bl	800a614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2150      	movs	r1, #80	; 0x50
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 fd9b 	bl	800a6d2 <TIM_ITRx_SetConfig>
      break;
 8009b9c:	e02c      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009baa:	461a      	mov	r2, r3
 8009bac:	f000 fd61 	bl	800a672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2160      	movs	r1, #96	; 0x60
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 fd8b 	bl	800a6d2 <TIM_ITRx_SetConfig>
      break;
 8009bbc:	e01c      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f000 fd22 	bl	800a614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2140      	movs	r1, #64	; 0x40
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fd7b 	bl	800a6d2 <TIM_ITRx_SetConfig>
      break;
 8009bdc:	e00c      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4619      	mov	r1, r3
 8009be8:	4610      	mov	r0, r2
 8009bea:	f000 fd72 	bl	800a6d2 <TIM_ITRx_SetConfig>
      break;
 8009bee:	e003      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf4:	e000      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8009bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	00100070 	.word	0x00100070
 8009c18:	00100060 	.word	0x00100060
 8009c1c:	00100050 	.word	0x00100050
 8009c20:	00100040 	.word	0x00100040
 8009c24:	00100030 	.word	0x00100030
 8009c28:	00100020 	.word	0x00100020

08009c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a74      	ldr	r2, [pc, #464]	; (8009e10 <TIM_Base_SetConfig+0x1e4>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d02b      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a73      	ldr	r2, [pc, #460]	; (8009e14 <TIM_Base_SetConfig+0x1e8>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d027      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c52:	d023      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c5a:	d01f      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a6e      	ldr	r2, [pc, #440]	; (8009e18 <TIM_Base_SetConfig+0x1ec>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d01b      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a6d      	ldr	r2, [pc, #436]	; (8009e1c <TIM_Base_SetConfig+0x1f0>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d017      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a6c      	ldr	r2, [pc, #432]	; (8009e20 <TIM_Base_SetConfig+0x1f4>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d013      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a6b      	ldr	r2, [pc, #428]	; (8009e24 <TIM_Base_SetConfig+0x1f8>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d00f      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a6a      	ldr	r2, [pc, #424]	; (8009e28 <TIM_Base_SetConfig+0x1fc>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d00b      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a69      	ldr	r2, [pc, #420]	; (8009e2c <TIM_Base_SetConfig+0x200>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d007      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a68      	ldr	r2, [pc, #416]	; (8009e30 <TIM_Base_SetConfig+0x204>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d003      	beq.n	8009c9c <TIM_Base_SetConfig+0x70>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a67      	ldr	r2, [pc, #412]	; (8009e34 <TIM_Base_SetConfig+0x208>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d108      	bne.n	8009cae <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a57      	ldr	r2, [pc, #348]	; (8009e10 <TIM_Base_SetConfig+0x1e4>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d05b      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a56      	ldr	r2, [pc, #344]	; (8009e14 <TIM_Base_SetConfig+0x1e8>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d057      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cc4:	d053      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ccc:	d04f      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a51      	ldr	r2, [pc, #324]	; (8009e18 <TIM_Base_SetConfig+0x1ec>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d04b      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a50      	ldr	r2, [pc, #320]	; (8009e1c <TIM_Base_SetConfig+0x1f0>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d047      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a4f      	ldr	r2, [pc, #316]	; (8009e20 <TIM_Base_SetConfig+0x1f4>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d043      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a4e      	ldr	r2, [pc, #312]	; (8009e24 <TIM_Base_SetConfig+0x1f8>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d03f      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a4d      	ldr	r2, [pc, #308]	; (8009e28 <TIM_Base_SetConfig+0x1fc>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d03b      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a4c      	ldr	r2, [pc, #304]	; (8009e2c <TIM_Base_SetConfig+0x200>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d037      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a4b      	ldr	r2, [pc, #300]	; (8009e30 <TIM_Base_SetConfig+0x204>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d033      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a4a      	ldr	r2, [pc, #296]	; (8009e34 <TIM_Base_SetConfig+0x208>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d02f      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a49      	ldr	r2, [pc, #292]	; (8009e38 <TIM_Base_SetConfig+0x20c>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d02b      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a48      	ldr	r2, [pc, #288]	; (8009e3c <TIM_Base_SetConfig+0x210>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d027      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a47      	ldr	r2, [pc, #284]	; (8009e40 <TIM_Base_SetConfig+0x214>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d023      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a46      	ldr	r2, [pc, #280]	; (8009e44 <TIM_Base_SetConfig+0x218>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d01f      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a45      	ldr	r2, [pc, #276]	; (8009e48 <TIM_Base_SetConfig+0x21c>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d01b      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a44      	ldr	r2, [pc, #272]	; (8009e4c <TIM_Base_SetConfig+0x220>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d017      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a43      	ldr	r2, [pc, #268]	; (8009e50 <TIM_Base_SetConfig+0x224>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d013      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a42      	ldr	r2, [pc, #264]	; (8009e54 <TIM_Base_SetConfig+0x228>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d00f      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a41      	ldr	r2, [pc, #260]	; (8009e58 <TIM_Base_SetConfig+0x22c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d00b      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a40      	ldr	r2, [pc, #256]	; (8009e5c <TIM_Base_SetConfig+0x230>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d007      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a3f      	ldr	r2, [pc, #252]	; (8009e60 <TIM_Base_SetConfig+0x234>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d003      	beq.n	8009d6e <TIM_Base_SetConfig+0x142>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a3e      	ldr	r2, [pc, #248]	; (8009e64 <TIM_Base_SetConfig+0x238>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d108      	bne.n	8009d80 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a1a      	ldr	r2, [pc, #104]	; (8009e10 <TIM_Base_SetConfig+0x1e4>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d023      	beq.n	8009df4 <TIM_Base_SetConfig+0x1c8>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a19      	ldr	r2, [pc, #100]	; (8009e14 <TIM_Base_SetConfig+0x1e8>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d01f      	beq.n	8009df4 <TIM_Base_SetConfig+0x1c8>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a1e      	ldr	r2, [pc, #120]	; (8009e30 <TIM_Base_SetConfig+0x204>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d01b      	beq.n	8009df4 <TIM_Base_SetConfig+0x1c8>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a1d      	ldr	r2, [pc, #116]	; (8009e34 <TIM_Base_SetConfig+0x208>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d017      	beq.n	8009df4 <TIM_Base_SetConfig+0x1c8>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a22      	ldr	r2, [pc, #136]	; (8009e50 <TIM_Base_SetConfig+0x224>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d013      	beq.n	8009df4 <TIM_Base_SetConfig+0x1c8>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a21      	ldr	r2, [pc, #132]	; (8009e54 <TIM_Base_SetConfig+0x228>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d00f      	beq.n	8009df4 <TIM_Base_SetConfig+0x1c8>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a20      	ldr	r2, [pc, #128]	; (8009e58 <TIM_Base_SetConfig+0x22c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d00b      	beq.n	8009df4 <TIM_Base_SetConfig+0x1c8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a1f      	ldr	r2, [pc, #124]	; (8009e5c <TIM_Base_SetConfig+0x230>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d007      	beq.n	8009df4 <TIM_Base_SetConfig+0x1c8>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a1e      	ldr	r2, [pc, #120]	; (8009e60 <TIM_Base_SetConfig+0x234>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d003      	beq.n	8009df4 <TIM_Base_SetConfig+0x1c8>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a1d      	ldr	r2, [pc, #116]	; (8009e64 <TIM_Base_SetConfig+0x238>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d103      	bne.n	8009dfc <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	691a      	ldr	r2, [r3, #16]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	615a      	str	r2, [r3, #20]
}
 8009e02:	bf00      	nop
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	40012c00 	.word	0x40012c00
 8009e14:	50012c00 	.word	0x50012c00
 8009e18:	40000400 	.word	0x40000400
 8009e1c:	50000400 	.word	0x50000400
 8009e20:	40000800 	.word	0x40000800
 8009e24:	50000800 	.word	0x50000800
 8009e28:	40000c00 	.word	0x40000c00
 8009e2c:	50000c00 	.word	0x50000c00
 8009e30:	40013400 	.word	0x40013400
 8009e34:	50013400 	.word	0x50013400
 8009e38:	40001800 	.word	0x40001800
 8009e3c:	50001800 	.word	0x50001800
 8009e40:	40001c00 	.word	0x40001c00
 8009e44:	50001c00 	.word	0x50001c00
 8009e48:	40002000 	.word	0x40002000
 8009e4c:	50002000 	.word	0x50002000
 8009e50:	40014000 	.word	0x40014000
 8009e54:	50014000 	.word	0x50014000
 8009e58:	40014400 	.word	0x40014400
 8009e5c:	50014400 	.word	0x50014400
 8009e60:	40014800 	.word	0x40014800
 8009e64:	50014800 	.word	0x50014800

08009e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b087      	sub	sp, #28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a1b      	ldr	r3, [r3, #32]
 8009e7c:	f023 0201 	bic.w	r2, r3, #1
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f023 0303 	bic.w	r3, r3, #3
 8009ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f023 0302 	bic.w	r3, r3, #2
 8009eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a40      	ldr	r2, [pc, #256]	; (8009fc4 <TIM_OC1_SetConfig+0x15c>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d023      	beq.n	8009f10 <TIM_OC1_SetConfig+0xa8>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a3f      	ldr	r2, [pc, #252]	; (8009fc8 <TIM_OC1_SetConfig+0x160>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d01f      	beq.n	8009f10 <TIM_OC1_SetConfig+0xa8>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a3e      	ldr	r2, [pc, #248]	; (8009fcc <TIM_OC1_SetConfig+0x164>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d01b      	beq.n	8009f10 <TIM_OC1_SetConfig+0xa8>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a3d      	ldr	r2, [pc, #244]	; (8009fd0 <TIM_OC1_SetConfig+0x168>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d017      	beq.n	8009f10 <TIM_OC1_SetConfig+0xa8>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a3c      	ldr	r2, [pc, #240]	; (8009fd4 <TIM_OC1_SetConfig+0x16c>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d013      	beq.n	8009f10 <TIM_OC1_SetConfig+0xa8>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a3b      	ldr	r2, [pc, #236]	; (8009fd8 <TIM_OC1_SetConfig+0x170>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d00f      	beq.n	8009f10 <TIM_OC1_SetConfig+0xa8>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a3a      	ldr	r2, [pc, #232]	; (8009fdc <TIM_OC1_SetConfig+0x174>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d00b      	beq.n	8009f10 <TIM_OC1_SetConfig+0xa8>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a39      	ldr	r2, [pc, #228]	; (8009fe0 <TIM_OC1_SetConfig+0x178>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d007      	beq.n	8009f10 <TIM_OC1_SetConfig+0xa8>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a38      	ldr	r2, [pc, #224]	; (8009fe4 <TIM_OC1_SetConfig+0x17c>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d003      	beq.n	8009f10 <TIM_OC1_SetConfig+0xa8>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a37      	ldr	r2, [pc, #220]	; (8009fe8 <TIM_OC1_SetConfig+0x180>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d10c      	bne.n	8009f2a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f023 0308 	bic.w	r3, r3, #8
 8009f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f023 0304 	bic.w	r3, r3, #4
 8009f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a25      	ldr	r2, [pc, #148]	; (8009fc4 <TIM_OC1_SetConfig+0x15c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d023      	beq.n	8009f7a <TIM_OC1_SetConfig+0x112>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a24      	ldr	r2, [pc, #144]	; (8009fc8 <TIM_OC1_SetConfig+0x160>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d01f      	beq.n	8009f7a <TIM_OC1_SetConfig+0x112>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a23      	ldr	r2, [pc, #140]	; (8009fcc <TIM_OC1_SetConfig+0x164>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d01b      	beq.n	8009f7a <TIM_OC1_SetConfig+0x112>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a22      	ldr	r2, [pc, #136]	; (8009fd0 <TIM_OC1_SetConfig+0x168>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d017      	beq.n	8009f7a <TIM_OC1_SetConfig+0x112>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a21      	ldr	r2, [pc, #132]	; (8009fd4 <TIM_OC1_SetConfig+0x16c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d013      	beq.n	8009f7a <TIM_OC1_SetConfig+0x112>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a20      	ldr	r2, [pc, #128]	; (8009fd8 <TIM_OC1_SetConfig+0x170>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d00f      	beq.n	8009f7a <TIM_OC1_SetConfig+0x112>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a1f      	ldr	r2, [pc, #124]	; (8009fdc <TIM_OC1_SetConfig+0x174>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d00b      	beq.n	8009f7a <TIM_OC1_SetConfig+0x112>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a1e      	ldr	r2, [pc, #120]	; (8009fe0 <TIM_OC1_SetConfig+0x178>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d007      	beq.n	8009f7a <TIM_OC1_SetConfig+0x112>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a1d      	ldr	r2, [pc, #116]	; (8009fe4 <TIM_OC1_SetConfig+0x17c>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d003      	beq.n	8009f7a <TIM_OC1_SetConfig+0x112>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a1c      	ldr	r2, [pc, #112]	; (8009fe8 <TIM_OC1_SetConfig+0x180>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d111      	bne.n	8009f9e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	621a      	str	r2, [r3, #32]
}
 8009fb8:	bf00      	nop
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	40012c00 	.word	0x40012c00
 8009fc8:	50012c00 	.word	0x50012c00
 8009fcc:	40013400 	.word	0x40013400
 8009fd0:	50013400 	.word	0x50013400
 8009fd4:	40014000 	.word	0x40014000
 8009fd8:	50014000 	.word	0x50014000
 8009fdc:	40014400 	.word	0x40014400
 8009fe0:	50014400 	.word	0x50014400
 8009fe4:	40014800 	.word	0x40014800
 8009fe8:	50014800 	.word	0x50014800

08009fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b087      	sub	sp, #28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	f023 0210 	bic.w	r2, r3, #16
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a01a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4313      	orrs	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f023 0320 	bic.w	r3, r3, #32
 800a03a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	4313      	orrs	r3, r2
 800a046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a36      	ldr	r2, [pc, #216]	; (800a124 <TIM_OC2_SetConfig+0x138>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d00b      	beq.n	800a068 <TIM_OC2_SetConfig+0x7c>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a35      	ldr	r2, [pc, #212]	; (800a128 <TIM_OC2_SetConfig+0x13c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d007      	beq.n	800a068 <TIM_OC2_SetConfig+0x7c>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a34      	ldr	r2, [pc, #208]	; (800a12c <TIM_OC2_SetConfig+0x140>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d003      	beq.n	800a068 <TIM_OC2_SetConfig+0x7c>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a33      	ldr	r2, [pc, #204]	; (800a130 <TIM_OC2_SetConfig+0x144>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d10d      	bne.n	800a084 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a06e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	4313      	orrs	r3, r2
 800a07a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a27      	ldr	r2, [pc, #156]	; (800a124 <TIM_OC2_SetConfig+0x138>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d023      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xe8>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a26      	ldr	r2, [pc, #152]	; (800a128 <TIM_OC2_SetConfig+0x13c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d01f      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xe8>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a25      	ldr	r2, [pc, #148]	; (800a12c <TIM_OC2_SetConfig+0x140>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d01b      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xe8>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a24      	ldr	r2, [pc, #144]	; (800a130 <TIM_OC2_SetConfig+0x144>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d017      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xe8>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a23      	ldr	r2, [pc, #140]	; (800a134 <TIM_OC2_SetConfig+0x148>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d013      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xe8>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a22      	ldr	r2, [pc, #136]	; (800a138 <TIM_OC2_SetConfig+0x14c>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d00f      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xe8>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a21      	ldr	r2, [pc, #132]	; (800a13c <TIM_OC2_SetConfig+0x150>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d00b      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xe8>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a20      	ldr	r2, [pc, #128]	; (800a140 <TIM_OC2_SetConfig+0x154>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d007      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xe8>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a1f      	ldr	r2, [pc, #124]	; (800a144 <TIM_OC2_SetConfig+0x158>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d003      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xe8>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a1e      	ldr	r2, [pc, #120]	; (800a148 <TIM_OC2_SetConfig+0x15c>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d113      	bne.n	800a0fc <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	621a      	str	r2, [r3, #32]
}
 800a116:	bf00      	nop
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	40012c00 	.word	0x40012c00
 800a128:	50012c00 	.word	0x50012c00
 800a12c:	40013400 	.word	0x40013400
 800a130:	50013400 	.word	0x50013400
 800a134:	40014000 	.word	0x40014000
 800a138:	50014000 	.word	0x50014000
 800a13c:	40014400 	.word	0x40014400
 800a140:	50014400 	.word	0x50014400
 800a144:	40014800 	.word	0x40014800
 800a148:	50014800 	.word	0x50014800

0800a14c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a17a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 0303 	bic.w	r3, r3, #3
 800a186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	021b      	lsls	r3, r3, #8
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a35      	ldr	r2, [pc, #212]	; (800a280 <TIM_OC3_SetConfig+0x134>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00b      	beq.n	800a1c6 <TIM_OC3_SetConfig+0x7a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a34      	ldr	r2, [pc, #208]	; (800a284 <TIM_OC3_SetConfig+0x138>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d007      	beq.n	800a1c6 <TIM_OC3_SetConfig+0x7a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a33      	ldr	r2, [pc, #204]	; (800a288 <TIM_OC3_SetConfig+0x13c>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d003      	beq.n	800a1c6 <TIM_OC3_SetConfig+0x7a>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a32      	ldr	r2, [pc, #200]	; (800a28c <TIM_OC3_SetConfig+0x140>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d10d      	bne.n	800a1e2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	021b      	lsls	r3, r3, #8
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a26      	ldr	r2, [pc, #152]	; (800a280 <TIM_OC3_SetConfig+0x134>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d023      	beq.n	800a232 <TIM_OC3_SetConfig+0xe6>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a25      	ldr	r2, [pc, #148]	; (800a284 <TIM_OC3_SetConfig+0x138>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d01f      	beq.n	800a232 <TIM_OC3_SetConfig+0xe6>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a24      	ldr	r2, [pc, #144]	; (800a288 <TIM_OC3_SetConfig+0x13c>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d01b      	beq.n	800a232 <TIM_OC3_SetConfig+0xe6>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a23      	ldr	r2, [pc, #140]	; (800a28c <TIM_OC3_SetConfig+0x140>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d017      	beq.n	800a232 <TIM_OC3_SetConfig+0xe6>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a22      	ldr	r2, [pc, #136]	; (800a290 <TIM_OC3_SetConfig+0x144>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d013      	beq.n	800a232 <TIM_OC3_SetConfig+0xe6>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a21      	ldr	r2, [pc, #132]	; (800a294 <TIM_OC3_SetConfig+0x148>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d00f      	beq.n	800a232 <TIM_OC3_SetConfig+0xe6>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a20      	ldr	r2, [pc, #128]	; (800a298 <TIM_OC3_SetConfig+0x14c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d00b      	beq.n	800a232 <TIM_OC3_SetConfig+0xe6>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a1f      	ldr	r2, [pc, #124]	; (800a29c <TIM_OC3_SetConfig+0x150>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d007      	beq.n	800a232 <TIM_OC3_SetConfig+0xe6>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a1e      	ldr	r2, [pc, #120]	; (800a2a0 <TIM_OC3_SetConfig+0x154>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d003      	beq.n	800a232 <TIM_OC3_SetConfig+0xe6>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a1d      	ldr	r2, [pc, #116]	; (800a2a4 <TIM_OC3_SetConfig+0x158>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d113      	bne.n	800a25a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	011b      	lsls	r3, r3, #4
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4313      	orrs	r3, r2
 800a258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	621a      	str	r2, [r3, #32]
}
 800a274:	bf00      	nop
 800a276:	371c      	adds	r7, #28
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	40012c00 	.word	0x40012c00
 800a284:	50012c00 	.word	0x50012c00
 800a288:	40013400 	.word	0x40013400
 800a28c:	50013400 	.word	0x50013400
 800a290:	40014000 	.word	0x40014000
 800a294:	50014000 	.word	0x50014000
 800a298:	40014400 	.word	0x40014400
 800a29c:	50014400 	.word	0x50014400
 800a2a0:	40014800 	.word	0x40014800
 800a2a4:	50014800 	.word	0x50014800

0800a2a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	021b      	lsls	r3, r3, #8
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	031b      	lsls	r3, r3, #12
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	4313      	orrs	r3, r2
 800a302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a36      	ldr	r2, [pc, #216]	; (800a3e0 <TIM_OC4_SetConfig+0x138>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d00b      	beq.n	800a324 <TIM_OC4_SetConfig+0x7c>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a35      	ldr	r2, [pc, #212]	; (800a3e4 <TIM_OC4_SetConfig+0x13c>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d007      	beq.n	800a324 <TIM_OC4_SetConfig+0x7c>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a34      	ldr	r2, [pc, #208]	; (800a3e8 <TIM_OC4_SetConfig+0x140>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d003      	beq.n	800a324 <TIM_OC4_SetConfig+0x7c>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a33      	ldr	r2, [pc, #204]	; (800a3ec <TIM_OC4_SetConfig+0x144>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d10d      	bne.n	800a340 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a32a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	031b      	lsls	r3, r3, #12
 800a332:	697a      	ldr	r2, [r7, #20]
 800a334:	4313      	orrs	r3, r2
 800a336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a33e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a27      	ldr	r2, [pc, #156]	; (800a3e0 <TIM_OC4_SetConfig+0x138>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d023      	beq.n	800a390 <TIM_OC4_SetConfig+0xe8>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a26      	ldr	r2, [pc, #152]	; (800a3e4 <TIM_OC4_SetConfig+0x13c>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d01f      	beq.n	800a390 <TIM_OC4_SetConfig+0xe8>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a25      	ldr	r2, [pc, #148]	; (800a3e8 <TIM_OC4_SetConfig+0x140>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d01b      	beq.n	800a390 <TIM_OC4_SetConfig+0xe8>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a24      	ldr	r2, [pc, #144]	; (800a3ec <TIM_OC4_SetConfig+0x144>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d017      	beq.n	800a390 <TIM_OC4_SetConfig+0xe8>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a23      	ldr	r2, [pc, #140]	; (800a3f0 <TIM_OC4_SetConfig+0x148>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d013      	beq.n	800a390 <TIM_OC4_SetConfig+0xe8>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a22      	ldr	r2, [pc, #136]	; (800a3f4 <TIM_OC4_SetConfig+0x14c>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d00f      	beq.n	800a390 <TIM_OC4_SetConfig+0xe8>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a21      	ldr	r2, [pc, #132]	; (800a3f8 <TIM_OC4_SetConfig+0x150>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d00b      	beq.n	800a390 <TIM_OC4_SetConfig+0xe8>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a20      	ldr	r2, [pc, #128]	; (800a3fc <TIM_OC4_SetConfig+0x154>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d007      	beq.n	800a390 <TIM_OC4_SetConfig+0xe8>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a1f      	ldr	r2, [pc, #124]	; (800a400 <TIM_OC4_SetConfig+0x158>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d003      	beq.n	800a390 <TIM_OC4_SetConfig+0xe8>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a1e      	ldr	r2, [pc, #120]	; (800a404 <TIM_OC4_SetConfig+0x15c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d113      	bne.n	800a3b8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a396:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a39e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	019b      	lsls	r3, r3, #6
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	019b      	lsls	r3, r3, #6
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	621a      	str	r2, [r3, #32]
}
 800a3d2:	bf00      	nop
 800a3d4:	371c      	adds	r7, #28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	40012c00 	.word	0x40012c00
 800a3e4:	50012c00 	.word	0x50012c00
 800a3e8:	40013400 	.word	0x40013400
 800a3ec:	50013400 	.word	0x50013400
 800a3f0:	40014000 	.word	0x40014000
 800a3f4:	50014000 	.word	0x50014000
 800a3f8:	40014400 	.word	0x40014400
 800a3fc:	50014400 	.word	0x50014400
 800a400:	40014800 	.word	0x40014800
 800a404:	50014800 	.word	0x50014800

0800a408 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a43a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	4313      	orrs	r3, r2
 800a444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a44c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	041b      	lsls	r3, r3, #16
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	4313      	orrs	r3, r2
 800a458:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a21      	ldr	r2, [pc, #132]	; (800a4e4 <TIM_OC5_SetConfig+0xdc>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d023      	beq.n	800a4aa <TIM_OC5_SetConfig+0xa2>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a20      	ldr	r2, [pc, #128]	; (800a4e8 <TIM_OC5_SetConfig+0xe0>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d01f      	beq.n	800a4aa <TIM_OC5_SetConfig+0xa2>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a1f      	ldr	r2, [pc, #124]	; (800a4ec <TIM_OC5_SetConfig+0xe4>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d01b      	beq.n	800a4aa <TIM_OC5_SetConfig+0xa2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a1e      	ldr	r2, [pc, #120]	; (800a4f0 <TIM_OC5_SetConfig+0xe8>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d017      	beq.n	800a4aa <TIM_OC5_SetConfig+0xa2>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a1d      	ldr	r2, [pc, #116]	; (800a4f4 <TIM_OC5_SetConfig+0xec>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d013      	beq.n	800a4aa <TIM_OC5_SetConfig+0xa2>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a1c      	ldr	r2, [pc, #112]	; (800a4f8 <TIM_OC5_SetConfig+0xf0>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d00f      	beq.n	800a4aa <TIM_OC5_SetConfig+0xa2>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a1b      	ldr	r2, [pc, #108]	; (800a4fc <TIM_OC5_SetConfig+0xf4>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d00b      	beq.n	800a4aa <TIM_OC5_SetConfig+0xa2>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a1a      	ldr	r2, [pc, #104]	; (800a500 <TIM_OC5_SetConfig+0xf8>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d007      	beq.n	800a4aa <TIM_OC5_SetConfig+0xa2>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a19      	ldr	r2, [pc, #100]	; (800a504 <TIM_OC5_SetConfig+0xfc>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d003      	beq.n	800a4aa <TIM_OC5_SetConfig+0xa2>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a18      	ldr	r2, [pc, #96]	; (800a508 <TIM_OC5_SetConfig+0x100>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d109      	bne.n	800a4be <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	021b      	lsls	r3, r3, #8
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	621a      	str	r2, [r3, #32]
}
 800a4d8:	bf00      	nop
 800a4da:	371c      	adds	r7, #28
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	40012c00 	.word	0x40012c00
 800a4e8:	50012c00 	.word	0x50012c00
 800a4ec:	40013400 	.word	0x40013400
 800a4f0:	50013400 	.word	0x50013400
 800a4f4:	40014000 	.word	0x40014000
 800a4f8:	50014000 	.word	0x50014000
 800a4fc:	40014400 	.word	0x40014400
 800a500:	50014400 	.word	0x50014400
 800a504:	40014800 	.word	0x40014800
 800a508:	50014800 	.word	0x50014800

0800a50c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a53e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	021b      	lsls	r3, r3, #8
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	4313      	orrs	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	051b      	lsls	r3, r3, #20
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a22      	ldr	r2, [pc, #136]	; (800a5ec <TIM_OC6_SetConfig+0xe0>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d023      	beq.n	800a5b0 <TIM_OC6_SetConfig+0xa4>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a21      	ldr	r2, [pc, #132]	; (800a5f0 <TIM_OC6_SetConfig+0xe4>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d01f      	beq.n	800a5b0 <TIM_OC6_SetConfig+0xa4>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a20      	ldr	r2, [pc, #128]	; (800a5f4 <TIM_OC6_SetConfig+0xe8>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d01b      	beq.n	800a5b0 <TIM_OC6_SetConfig+0xa4>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a1f      	ldr	r2, [pc, #124]	; (800a5f8 <TIM_OC6_SetConfig+0xec>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d017      	beq.n	800a5b0 <TIM_OC6_SetConfig+0xa4>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a1e      	ldr	r2, [pc, #120]	; (800a5fc <TIM_OC6_SetConfig+0xf0>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d013      	beq.n	800a5b0 <TIM_OC6_SetConfig+0xa4>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a1d      	ldr	r2, [pc, #116]	; (800a600 <TIM_OC6_SetConfig+0xf4>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d00f      	beq.n	800a5b0 <TIM_OC6_SetConfig+0xa4>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a1c      	ldr	r2, [pc, #112]	; (800a604 <TIM_OC6_SetConfig+0xf8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d00b      	beq.n	800a5b0 <TIM_OC6_SetConfig+0xa4>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a1b      	ldr	r2, [pc, #108]	; (800a608 <TIM_OC6_SetConfig+0xfc>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d007      	beq.n	800a5b0 <TIM_OC6_SetConfig+0xa4>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a1a      	ldr	r2, [pc, #104]	; (800a60c <TIM_OC6_SetConfig+0x100>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d003      	beq.n	800a5b0 <TIM_OC6_SetConfig+0xa4>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a19      	ldr	r2, [pc, #100]	; (800a610 <TIM_OC6_SetConfig+0x104>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d109      	bne.n	800a5c4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	695b      	ldr	r3, [r3, #20]
 800a5bc:	029b      	lsls	r3, r3, #10
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	621a      	str	r2, [r3, #32]
}
 800a5de:	bf00      	nop
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	40012c00 	.word	0x40012c00
 800a5f0:	50012c00 	.word	0x50012c00
 800a5f4:	40013400 	.word	0x40013400
 800a5f8:	50013400 	.word	0x50013400
 800a5fc:	40014000 	.word	0x40014000
 800a600:	50014000 	.word	0x50014000
 800a604:	40014400 	.word	0x40014400
 800a608:	50014400 	.word	0x50014400
 800a60c:	40014800 	.word	0x40014800
 800a610:	50014800 	.word	0x50014800

0800a614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	f023 0201 	bic.w	r2, r3, #1
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a63e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	011b      	lsls	r3, r3, #4
 800a644:	693a      	ldr	r2, [r7, #16]
 800a646:	4313      	orrs	r3, r2
 800a648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f023 030a 	bic.w	r3, r3, #10
 800a650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	4313      	orrs	r3, r2
 800a658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	621a      	str	r2, [r3, #32]
}
 800a666:	bf00      	nop
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a672:	b480      	push	{r7}
 800a674:	b087      	sub	sp, #28
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6a1b      	ldr	r3, [r3, #32]
 800a688:	f023 0210 	bic.w	r2, r3, #16
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a69c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	031b      	lsls	r3, r3, #12
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	011b      	lsls	r3, r3, #4
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	621a      	str	r2, [r3, #32]
}
 800a6c6:	bf00      	nop
 800a6c8:	371c      	adds	r7, #28
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b085      	sub	sp, #20
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a6e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	f043 0307 	orr.w	r3, r3, #7
 800a6f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	609a      	str	r2, [r3, #8]
}
 800a700:	bf00      	nop
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	021a      	lsls	r2, r3, #8
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	431a      	orrs	r2, r3
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4313      	orrs	r3, r2
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	4313      	orrs	r3, r2
 800a738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	609a      	str	r2, [r3, #8]
}
 800a740:	bf00      	nop
 800a742:	371c      	adds	r7, #28
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f003 031f 	and.w	r3, r3, #31
 800a75e:	2201      	movs	r2, #1
 800a760:	fa02 f303 	lsl.w	r3, r2, r3
 800a764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6a1a      	ldr	r2, [r3, #32]
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	43db      	mvns	r3, r3
 800a76e:	401a      	ands	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6a1a      	ldr	r2, [r3, #32]
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f003 031f 	and.w	r3, r3, #31
 800a77e:	6879      	ldr	r1, [r7, #4]
 800a780:	fa01 f303 	lsl.w	r3, r1, r3
 800a784:	431a      	orrs	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	621a      	str	r2, [r3, #32]
}
 800a78a:	bf00      	nop
 800a78c:	371c      	adds	r7, #28
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
	...

0800a798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d101      	bne.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	e0a1      	b.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a4a      	ldr	r2, [pc, #296]	; (800a900 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d00e      	beq.n	800a7f8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a49      	ldr	r2, [pc, #292]	; (800a904 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d009      	beq.n	800a7f8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a47      	ldr	r2, [pc, #284]	; (800a908 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d004      	beq.n	800a7f8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a46      	ldr	r2, [pc, #280]	; (800a90c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d108      	bne.n	800a80a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	4313      	orrs	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a814:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a34      	ldr	r2, [pc, #208]	; (800a900 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d04a      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a33      	ldr	r2, [pc, #204]	; (800a904 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d045      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a844:	d040      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a84e:	d03b      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a2e      	ldr	r2, [pc, #184]	; (800a910 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d036      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a2d      	ldr	r2, [pc, #180]	; (800a914 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d031      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a2b      	ldr	r2, [pc, #172]	; (800a918 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d02c      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a2a      	ldr	r2, [pc, #168]	; (800a91c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d027      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a28      	ldr	r2, [pc, #160]	; (800a920 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d022      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a27      	ldr	r2, [pc, #156]	; (800a924 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d01d      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a1d      	ldr	r2, [pc, #116]	; (800a908 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d018      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a1c      	ldr	r2, [pc, #112]	; (800a90c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d013      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a20      	ldr	r2, [pc, #128]	; (800a928 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d00e      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a1f      	ldr	r2, [pc, #124]	; (800a92c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d009      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a1d      	ldr	r2, [pc, #116]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d004      	beq.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a1c      	ldr	r2, [pc, #112]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d10c      	bne.n	800a8e2 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	40012c00 	.word	0x40012c00
 800a904:	50012c00 	.word	0x50012c00
 800a908:	40013400 	.word	0x40013400
 800a90c:	50013400 	.word	0x50013400
 800a910:	40000400 	.word	0x40000400
 800a914:	50000400 	.word	0x50000400
 800a918:	40000800 	.word	0x40000800
 800a91c:	50000800 	.word	0x50000800
 800a920:	40000c00 	.word	0x40000c00
 800a924:	50000c00 	.word	0x50000c00
 800a928:	40001800 	.word	0x40001800
 800a92c:	50001800 	.word	0x50001800
 800a930:	40014000 	.word	0x40014000
 800a934:	50014000 	.word	0x50014000

0800a938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a942:	2300      	movs	r3, #0
 800a944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d101      	bne.n	800a954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a950:	2302      	movs	r3, #2
 800a952:	e0a5      	b.n	800aaa0 <HAL_TIMEx_ConfigBreakDeadTime+0x168>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	4313      	orrs	r3, r2
 800a968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	4313      	orrs	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	4313      	orrs	r3, r2
 800a984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4313      	orrs	r3, r2
 800a992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	041b      	lsls	r3, r3, #16
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a36      	ldr	r2, [pc, #216]	; (800aaac <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d00e      	beq.n	800a9f6 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a34      	ldr	r2, [pc, #208]	; (800aab0 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d009      	beq.n	800a9f6 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a33      	ldr	r2, [pc, #204]	; (800aab4 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d004      	beq.n	800a9f6 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a31      	ldr	r2, [pc, #196]	; (800aab8 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d106      	bne.n	800aa04 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a28      	ldr	r2, [pc, #160]	; (800aaac <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d00e      	beq.n	800aa2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a27      	ldr	r2, [pc, #156]	; (800aab0 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d009      	beq.n	800aa2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a25      	ldr	r2, [pc, #148]	; (800aab4 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d004      	beq.n	800aa2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a24      	ldr	r2, [pc, #144]	; (800aab8 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d130      	bne.n	800aa8e <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	051b      	lsls	r3, r3, #20
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	4313      	orrs	r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a13      	ldr	r2, [pc, #76]	; (800aaac <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00e      	beq.n	800aa80 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a12      	ldr	r2, [pc, #72]	; (800aab0 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d009      	beq.n	800aa80 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a10      	ldr	r2, [pc, #64]	; (800aab4 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d004      	beq.n	800aa80 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a0f      	ldr	r2, [pc, #60]	; (800aab8 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d106      	bne.n	800aa8e <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	40012c00 	.word	0x40012c00
 800aab0:	50012c00 	.word	0x50012c00
 800aab4:	40013400 	.word	0x40013400
 800aab8:	50013400 	.word	0x50013400

0800aabc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e042      	b.n	800ab54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d106      	bne.n	800aae6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7f6 fae7 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2224      	movs	r2, #36	; 0x24
 800aaea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0201 	bic.w	r2, r2, #1
 800aafc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d002      	beq.n	800ab0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fa16 	bl	800af38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f825 	bl	800ab5c <UART_SetConfig>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d101      	bne.n	800ab1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e01b      	b.n	800ab54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689a      	ldr	r2, [r3, #8]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f042 0201 	orr.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fa95 	bl	800b07c <UART_CheckIdleState>
 800ab52:	4603      	mov	r3, r0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab60:	b094      	sub	sp, #80	; 0x50
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	4b78      	ldr	r3, [pc, #480]	; (800ad54 <UART_SetConfig+0x1f8>)
 800ab72:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	689a      	ldr	r2, [r3, #8]
 800ab78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	431a      	orrs	r2, r3
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	69db      	ldr	r3, [r3, #28]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4971      	ldr	r1, [pc, #452]	; (800ad58 <UART_SetConfig+0x1fc>)
 800ab94:	4019      	ands	r1, r3
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	68d9      	ldr	r1, [r3, #12]
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	ea40 0301 	orr.w	r3, r0, r1
 800abb6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	4b64      	ldr	r3, [pc, #400]	; (800ad54 <UART_SetConfig+0x1f8>)
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d009      	beq.n	800abdc <UART_SetConfig+0x80>
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	4b63      	ldr	r3, [pc, #396]	; (800ad5c <UART_SetConfig+0x200>)
 800abce:	429a      	cmp	r2, r3
 800abd0:	d004      	beq.n	800abdc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd4:	6a1a      	ldr	r2, [r3, #32]
 800abd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd8:	4313      	orrs	r3, r2
 800abda:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800abe6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800abea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abf0:	430b      	orrs	r3, r1
 800abf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfa:	f023 000f 	bic.w	r0, r3, #15
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	ea40 0301 	orr.w	r3, r0, r1
 800ac0a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	4b53      	ldr	r3, [pc, #332]	; (800ad60 <UART_SetConfig+0x204>)
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d102      	bne.n	800ac1c <UART_SetConfig+0xc0>
 800ac16:	2301      	movs	r3, #1
 800ac18:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac1a:	e066      	b.n	800acea <UART_SetConfig+0x18e>
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	4b50      	ldr	r3, [pc, #320]	; (800ad64 <UART_SetConfig+0x208>)
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d102      	bne.n	800ac2c <UART_SetConfig+0xd0>
 800ac26:	2302      	movs	r3, #2
 800ac28:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac2a:	e05e      	b.n	800acea <UART_SetConfig+0x18e>
 800ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	4b4d      	ldr	r3, [pc, #308]	; (800ad68 <UART_SetConfig+0x20c>)
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d102      	bne.n	800ac3c <UART_SetConfig+0xe0>
 800ac36:	2304      	movs	r3, #4
 800ac38:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac3a:	e056      	b.n	800acea <UART_SetConfig+0x18e>
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	4b4a      	ldr	r3, [pc, #296]	; (800ad6c <UART_SetConfig+0x210>)
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d102      	bne.n	800ac4c <UART_SetConfig+0xf0>
 800ac46:	2308      	movs	r3, #8
 800ac48:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac4a:	e04e      	b.n	800acea <UART_SetConfig+0x18e>
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	4b47      	ldr	r3, [pc, #284]	; (800ad70 <UART_SetConfig+0x214>)
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d102      	bne.n	800ac5c <UART_SetConfig+0x100>
 800ac56:	2310      	movs	r3, #16
 800ac58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac5a:	e046      	b.n	800acea <UART_SetConfig+0x18e>
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	4b44      	ldr	r3, [pc, #272]	; (800ad74 <UART_SetConfig+0x218>)
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d102      	bne.n	800ac6c <UART_SetConfig+0x110>
 800ac66:	2320      	movs	r3, #32
 800ac68:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac6a:	e03e      	b.n	800acea <UART_SetConfig+0x18e>
 800ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	4b41      	ldr	r3, [pc, #260]	; (800ad78 <UART_SetConfig+0x21c>)
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d102      	bne.n	800ac7c <UART_SetConfig+0x120>
 800ac76:	2340      	movs	r3, #64	; 0x40
 800ac78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac7a:	e036      	b.n	800acea <UART_SetConfig+0x18e>
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	4b3e      	ldr	r3, [pc, #248]	; (800ad7c <UART_SetConfig+0x220>)
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d102      	bne.n	800ac8c <UART_SetConfig+0x130>
 800ac86:	2380      	movs	r3, #128	; 0x80
 800ac88:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac8a:	e02e      	b.n	800acea <UART_SetConfig+0x18e>
 800ac8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	4b3b      	ldr	r3, [pc, #236]	; (800ad80 <UART_SetConfig+0x224>)
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d103      	bne.n	800ac9e <UART_SetConfig+0x142>
 800ac96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac9c:	e025      	b.n	800acea <UART_SetConfig+0x18e>
 800ac9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	4b38      	ldr	r3, [pc, #224]	; (800ad84 <UART_SetConfig+0x228>)
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d103      	bne.n	800acb0 <UART_SetConfig+0x154>
 800aca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acac:	64bb      	str	r3, [r7, #72]	; 0x48
 800acae:	e01c      	b.n	800acea <UART_SetConfig+0x18e>
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	4b34      	ldr	r3, [pc, #208]	; (800ad88 <UART_SetConfig+0x22c>)
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d103      	bne.n	800acc2 <UART_SetConfig+0x166>
 800acba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acbe:	64bb      	str	r3, [r7, #72]	; 0x48
 800acc0:	e013      	b.n	800acea <UART_SetConfig+0x18e>
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	4b31      	ldr	r3, [pc, #196]	; (800ad8c <UART_SetConfig+0x230>)
 800acc8:	429a      	cmp	r2, r3
 800acca:	d103      	bne.n	800acd4 <UART_SetConfig+0x178>
 800accc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acd0:	64bb      	str	r3, [r7, #72]	; 0x48
 800acd2:	e00a      	b.n	800acea <UART_SetConfig+0x18e>
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	4b1e      	ldr	r3, [pc, #120]	; (800ad54 <UART_SetConfig+0x1f8>)
 800acda:	429a      	cmp	r2, r3
 800acdc:	d103      	bne.n	800ace6 <UART_SetConfig+0x18a>
 800acde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ace2:	64bb      	str	r3, [r7, #72]	; 0x48
 800ace4:	e001      	b.n	800acea <UART_SetConfig+0x18e>
 800ace6:	2300      	movs	r3, #0
 800ace8:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	4b19      	ldr	r3, [pc, #100]	; (800ad54 <UART_SetConfig+0x1f8>)
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d005      	beq.n	800ad00 <UART_SetConfig+0x1a4>
 800acf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	4b18      	ldr	r3, [pc, #96]	; (800ad5c <UART_SetConfig+0x200>)
 800acfa:	429a      	cmp	r2, r3
 800acfc:	f040 8094 	bne.w	800ae28 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ad00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad02:	2200      	movs	r2, #0
 800ad04:	623b      	str	r3, [r7, #32]
 800ad06:	627a      	str	r2, [r7, #36]	; 0x24
 800ad08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ad0c:	f7fb feba 	bl	8006a84 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad10:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f000 80f7 	beq.w	800af08 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1e:	4a1c      	ldr	r2, [pc, #112]	; (800ad90 <UART_SetConfig+0x234>)
 800ad20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad24:	461a      	mov	r2, r3
 800ad26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad28:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad2c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	685a      	ldr	r2, [r3, #4]
 800ad32:	4613      	mov	r3, r2
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	4413      	add	r3, r2
 800ad38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d305      	bcc.n	800ad4a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d924      	bls.n	800ad94 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ad50:	e069      	b.n	800ae26 <UART_SetConfig+0x2ca>
 800ad52:	bf00      	nop
 800ad54:	44002400 	.word	0x44002400
 800ad58:	cfff69f3 	.word	0xcfff69f3
 800ad5c:	54002400 	.word	0x54002400
 800ad60:	40013800 	.word	0x40013800
 800ad64:	40004400 	.word	0x40004400
 800ad68:	40004800 	.word	0x40004800
 800ad6c:	40004c00 	.word	0x40004c00
 800ad70:	40005000 	.word	0x40005000
 800ad74:	40006400 	.word	0x40006400
 800ad78:	40007800 	.word	0x40007800
 800ad7c:	40007c00 	.word	0x40007c00
 800ad80:	40008000 	.word	0x40008000
 800ad84:	40006800 	.word	0x40006800
 800ad88:	40006c00 	.word	0x40006c00
 800ad8c:	40008400 	.word	0x40008400
 800ad90:	0800ba40 	.word	0x0800ba40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad96:	2200      	movs	r2, #0
 800ad98:	61bb      	str	r3, [r7, #24]
 800ad9a:	61fa      	str	r2, [r7, #28]
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada0:	4a64      	ldr	r2, [pc, #400]	; (800af34 <UART_SetConfig+0x3d8>)
 800ada2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	2200      	movs	r2, #0
 800adaa:	613b      	str	r3, [r7, #16]
 800adac:	617a      	str	r2, [r7, #20]
 800adae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800adb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800adb6:	f7f5 fa69 	bl	800028c <__aeabi_uldivmod>
 800adba:	4602      	mov	r2, r0
 800adbc:	460b      	mov	r3, r1
 800adbe:	4610      	mov	r0, r2
 800adc0:	4619      	mov	r1, r3
 800adc2:	f04f 0200 	mov.w	r2, #0
 800adc6:	f04f 0300 	mov.w	r3, #0
 800adca:	020b      	lsls	r3, r1, #8
 800adcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800add0:	0202      	lsls	r2, r0, #8
 800add2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800add4:	6849      	ldr	r1, [r1, #4]
 800add6:	0849      	lsrs	r1, r1, #1
 800add8:	2000      	movs	r0, #0
 800adda:	460c      	mov	r4, r1
 800addc:	4605      	mov	r5, r0
 800adde:	eb12 0804 	adds.w	r8, r2, r4
 800ade2:	eb43 0905 	adc.w	r9, r3, r5
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	60bb      	str	r3, [r7, #8]
 800adee:	60fa      	str	r2, [r7, #12]
 800adf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800adf4:	4640      	mov	r0, r8
 800adf6:	4649      	mov	r1, r9
 800adf8:	f7f5 fa48 	bl	800028c <__aeabi_uldivmod>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	4613      	mov	r3, r2
 800ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae0a:	d308      	bcc.n	800ae1e <UART_SetConfig+0x2c2>
 800ae0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae12:	d204      	bcs.n	800ae1e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800ae14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae1a:	60da      	str	r2, [r3, #12]
 800ae1c:	e003      	b.n	800ae26 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800ae24:	e070      	b.n	800af08 <UART_SetConfig+0x3ac>
 800ae26:	e06f      	b.n	800af08 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae30:	d13c      	bne.n	800aeac <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ae32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae34:	2200      	movs	r2, #0
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	607a      	str	r2, [r7, #4]
 800ae3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae3e:	f7fb fe21 	bl	8006a84 <HAL_RCCEx_GetPeriphCLKFreq>
 800ae42:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d05e      	beq.n	800af08 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	4a39      	ldr	r2, [pc, #228]	; (800af34 <UART_SetConfig+0x3d8>)
 800ae50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae54:	461a      	mov	r2, r3
 800ae56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae5c:	005a      	lsls	r2, r3, #1
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	085b      	lsrs	r3, r3, #1
 800ae64:	441a      	add	r2, r3
 800ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae72:	2b0f      	cmp	r3, #15
 800ae74:	d916      	bls.n	800aea4 <UART_SetConfig+0x348>
 800ae76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae7c:	d212      	bcs.n	800aea4 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	f023 030f 	bic.w	r3, r3, #15
 800ae86:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8a:	085b      	lsrs	r3, r3, #1
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	f003 0307 	and.w	r3, r3, #7
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae96:	4313      	orrs	r3, r2
 800ae98:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800ae9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800aea0:	60da      	str	r2, [r3, #12]
 800aea2:	e031      	b.n	800af08 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aeaa:	e02d      	b.n	800af08 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aeac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeae:	2200      	movs	r2, #0
 800aeb0:	469a      	mov	sl, r3
 800aeb2:	4693      	mov	fp, r2
 800aeb4:	4650      	mov	r0, sl
 800aeb6:	4659      	mov	r1, fp
 800aeb8:	f7fb fde4 	bl	8006a84 <HAL_RCCEx_GetPeriphCLKFreq>
 800aebc:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800aebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d021      	beq.n	800af08 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	4a1a      	ldr	r2, [pc, #104]	; (800af34 <UART_SetConfig+0x3d8>)
 800aeca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aece:	461a      	mov	r2, r3
 800aed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed2:	fbb3 f2f2 	udiv	r2, r3, r2
 800aed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	085b      	lsrs	r3, r3, #1
 800aedc:	441a      	add	r2, r3
 800aede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeea:	2b0f      	cmp	r3, #15
 800aeec:	d909      	bls.n	800af02 <UART_SetConfig+0x3a6>
 800aeee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aef4:	d205      	bcs.n	800af02 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	60da      	str	r2, [r3, #12]
 800af00:	e002      	b.n	800af08 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0a:	2201      	movs	r2, #1
 800af0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800af10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af12:	2201      	movs	r2, #1
 800af14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1a:	2200      	movs	r2, #0
 800af1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800af1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af20:	2200      	movs	r2, #0
 800af22:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800af24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3750      	adds	r7, #80	; 0x50
 800af2c:	46bd      	mov	sp, r7
 800af2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af32:	bf00      	nop
 800af34:	0800ba40 	.word	0x0800ba40

0800af38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	f003 0308 	and.w	r3, r3, #8
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	430a      	orrs	r2, r1
 800af82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	430a      	orrs	r2, r1
 800afa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afaa:	f003 0304 	and.w	r3, r3, #4
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00a      	beq.n	800afc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	430a      	orrs	r2, r1
 800afc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afcc:	f003 0310 	and.w	r3, r3, #16
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	430a      	orrs	r2, r1
 800afe8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afee:	f003 0320 	and.w	r3, r3, #32
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00a      	beq.n	800b00c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	430a      	orrs	r2, r1
 800b00a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01a      	beq.n	800b04e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	430a      	orrs	r2, r1
 800b02c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b036:	d10a      	bne.n	800b04e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	430a      	orrs	r2, r1
 800b04c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	430a      	orrs	r2, r1
 800b06e:	605a      	str	r2, [r3, #4]
  }
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b098      	sub	sp, #96	; 0x60
 800b080:	af02      	add	r7, sp, #8
 800b082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b08c:	f7f6 facc 	bl	8001628 <HAL_GetTick>
 800b090:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 0308 	and.w	r3, r3, #8
 800b09c:	2b08      	cmp	r3, #8
 800b09e:	d12f      	bne.n	800b100 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f88e 	bl	800b1d0 <UART_WaitOnFlagUntilTimeout>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d022      	beq.n	800b100 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	e853 3f00 	ldrex	r3, [r3]
 800b0c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0ce:	653b      	str	r3, [r7, #80]	; 0x50
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0d8:	647b      	str	r3, [r7, #68]	; 0x44
 800b0da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0e0:	e841 2300 	strex	r3, r2, [r1]
 800b0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e6      	bne.n	800b0ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2220      	movs	r2, #32
 800b0f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e063      	b.n	800b1c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 0304 	and.w	r3, r3, #4
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	d149      	bne.n	800b1a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b10e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b116:	2200      	movs	r2, #0
 800b118:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f857 	bl	800b1d0 <UART_WaitOnFlagUntilTimeout>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d03c      	beq.n	800b1a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	623b      	str	r3, [r7, #32]
   return(result);
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b13c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b146:	633b      	str	r3, [r7, #48]	; 0x30
 800b148:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b14c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b14e:	e841 2300 	strex	r3, r2, [r1]
 800b152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1e6      	bne.n	800b128 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3308      	adds	r3, #8
 800b160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	e853 3f00 	ldrex	r3, [r3]
 800b168:	60fb      	str	r3, [r7, #12]
   return(result);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f023 0301 	bic.w	r3, r3, #1
 800b170:	64bb      	str	r3, [r7, #72]	; 0x48
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3308      	adds	r3, #8
 800b178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b17a:	61fa      	str	r2, [r7, #28]
 800b17c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17e:	69b9      	ldr	r1, [r7, #24]
 800b180:	69fa      	ldr	r2, [r7, #28]
 800b182:	e841 2300 	strex	r3, r2, [r1]
 800b186:	617b      	str	r3, [r7, #20]
   return(result);
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1e5      	bne.n	800b15a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2220      	movs	r2, #32
 800b192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e012      	b.n	800b1c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2220      	movs	r2, #32
 800b1a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3758      	adds	r7, #88	; 0x58
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	603b      	str	r3, [r7, #0]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1e0:	e049      	b.n	800b276 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e8:	d045      	beq.n	800b276 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ea:	f7f6 fa1d 	bl	8001628 <HAL_GetTick>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	69ba      	ldr	r2, [r7, #24]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d302      	bcc.n	800b200 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b200:	2303      	movs	r3, #3
 800b202:	e048      	b.n	800b296 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f003 0304 	and.w	r3, r3, #4
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d031      	beq.n	800b276 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69db      	ldr	r3, [r3, #28]
 800b218:	f003 0308 	and.w	r3, r3, #8
 800b21c:	2b08      	cmp	r3, #8
 800b21e:	d110      	bne.n	800b242 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2208      	movs	r2, #8
 800b226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f000 f838 	bl	800b29e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2208      	movs	r2, #8
 800b232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e029      	b.n	800b296 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	69db      	ldr	r3, [r3, #28]
 800b248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b24c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b250:	d111      	bne.n	800b276 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b25a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f000 f81e 	bl	800b29e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2220      	movs	r2, #32
 800b266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b272:	2303      	movs	r3, #3
 800b274:	e00f      	b.n	800b296 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	69da      	ldr	r2, [r3, #28]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	4013      	ands	r3, r2
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	429a      	cmp	r2, r3
 800b284:	bf0c      	ite	eq
 800b286:	2301      	moveq	r3, #1
 800b288:	2300      	movne	r3, #0
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	461a      	mov	r2, r3
 800b28e:	79fb      	ldrb	r3, [r7, #7]
 800b290:	429a      	cmp	r2, r3
 800b292:	d0a6      	beq.n	800b1e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b095      	sub	sp, #84	; 0x54
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ae:	e853 3f00 	ldrex	r3, [r3]
 800b2b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800b2c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2cc:	e841 2300 	strex	r3, r2, [r1]
 800b2d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1e6      	bne.n	800b2a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3308      	adds	r3, #8
 800b2de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	e853 3f00 	ldrex	r3, [r3]
 800b2e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2ee:	f023 0301 	bic.w	r3, r3, #1
 800b2f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b304:	e841 2300 	strex	r3, r2, [r1]
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1e3      	bne.n	800b2d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b314:	2b01      	cmp	r3, #1
 800b316:	d118      	bne.n	800b34a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	e853 3f00 	ldrex	r3, [r3]
 800b324:	60bb      	str	r3, [r7, #8]
   return(result);
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f023 0310 	bic.w	r3, r3, #16
 800b32c:	647b      	str	r3, [r7, #68]	; 0x44
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b336:	61bb      	str	r3, [r7, #24]
 800b338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33a:	6979      	ldr	r1, [r7, #20]
 800b33c:	69ba      	ldr	r2, [r7, #24]
 800b33e:	e841 2300 	strex	r3, r2, [r1]
 800b342:	613b      	str	r3, [r7, #16]
   return(result);
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1e6      	bne.n	800b318 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2220      	movs	r2, #32
 800b34e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b35e:	bf00      	nop
 800b360:	3754      	adds	r7, #84	; 0x54
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b36a:	b480      	push	{r7}
 800b36c:	b085      	sub	sp, #20
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d101      	bne.n	800b380 <HAL_UARTEx_DisableFifoMode+0x16>
 800b37c:	2302      	movs	r3, #2
 800b37e:	e027      	b.n	800b3d0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2224      	movs	r2, #36	; 0x24
 800b38c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f022 0201 	bic.w	r2, r2, #1
 800b3a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2220      	movs	r2, #32
 800b3c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d101      	bne.n	800b3f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	e02d      	b.n	800b450 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2224      	movs	r2, #36	; 0x24
 800b400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0201 	bic.w	r2, r2, #1
 800b41a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	430a      	orrs	r2, r1
 800b42e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 f84f 	bl	800b4d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2220      	movs	r2, #32
 800b442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d101      	bne.n	800b470 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b46c:	2302      	movs	r3, #2
 800b46e:	e02d      	b.n	800b4cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2224      	movs	r2, #36	; 0x24
 800b47c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f022 0201 	bic.w	r2, r2, #1
 800b496:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 f811 	bl	800b4d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2220      	movs	r2, #32
 800b4be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d108      	bne.n	800b4f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4f4:	e031      	b.n	800b55a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4f6:	2308      	movs	r3, #8
 800b4f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4fa:	2308      	movs	r3, #8
 800b4fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	0e5b      	lsrs	r3, r3, #25
 800b506:	b2db      	uxtb	r3, r3
 800b508:	f003 0307 	and.w	r3, r3, #7
 800b50c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	0f5b      	lsrs	r3, r3, #29
 800b516:	b2db      	uxtb	r3, r3
 800b518:	f003 0307 	and.w	r3, r3, #7
 800b51c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b51e:	7bbb      	ldrb	r3, [r7, #14]
 800b520:	7b3a      	ldrb	r2, [r7, #12]
 800b522:	4911      	ldr	r1, [pc, #68]	; (800b568 <UARTEx_SetNbDataToProcess+0x94>)
 800b524:	5c8a      	ldrb	r2, [r1, r2]
 800b526:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b52a:	7b3a      	ldrb	r2, [r7, #12]
 800b52c:	490f      	ldr	r1, [pc, #60]	; (800b56c <UARTEx_SetNbDataToProcess+0x98>)
 800b52e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b530:	fb93 f3f2 	sdiv	r3, r3, r2
 800b534:	b29a      	uxth	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	7b7a      	ldrb	r2, [r7, #13]
 800b540:	4909      	ldr	r1, [pc, #36]	; (800b568 <UARTEx_SetNbDataToProcess+0x94>)
 800b542:	5c8a      	ldrb	r2, [r1, r2]
 800b544:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b548:	7b7a      	ldrb	r2, [r7, #13]
 800b54a:	4908      	ldr	r1, [pc, #32]	; (800b56c <UARTEx_SetNbDataToProcess+0x98>)
 800b54c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b54e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b552:	b29a      	uxth	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b55a:	bf00      	nop
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	0800ba58 	.word	0x0800ba58
 800b56c:	0800ba60 	.word	0x0800ba60

0800b570 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800b570:	b480      	push	{r7}
 800b572:	b08b      	sub	sp, #44	; 0x2c
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	fa93 f3a3 	rbit	r3, r3
 800b58a:	613b      	str	r3, [r7, #16]
  return result;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d101      	bne.n	800b59a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b596:	2320      	movs	r3, #32
 800b598:	e003      	b.n	800b5a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	fab3 f383 	clz	r3, r3
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	005b      	lsls	r3, r3, #1
 800b5a4:	2103      	movs	r1, #3
 800b5a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5aa:	43db      	mvns	r3, r3
 800b5ac:	401a      	ands	r2, r3
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5b2:	6a3b      	ldr	r3, [r7, #32]
 800b5b4:	fa93 f3a3 	rbit	r3, r3
 800b5b8:	61fb      	str	r3, [r7, #28]
  return result;
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d101      	bne.n	800b5c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b5c4:	2320      	movs	r3, #32
 800b5c6:	e003      	b.n	800b5d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	fab3 f383 	clz	r3, r3
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	005b      	lsls	r3, r3, #1
 800b5d2:	6879      	ldr	r1, [r7, #4]
 800b5d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d8:	431a      	orrs	r2, r3
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	601a      	str	r2, [r3, #0]
}
 800b5de:	bf00      	nop
 800b5e0:	372c      	adds	r7, #44	; 0x2c
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b085      	sub	sp, #20
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	60b9      	str	r1, [r7, #8]
 800b5f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	43db      	mvns	r3, r3
 800b5fe:	401a      	ands	r2, r3
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	fb01 f303 	mul.w	r3, r1, r3
 800b608:	431a      	orrs	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	605a      	str	r2, [r3, #4]
}
 800b60e:	bf00      	nop
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b08b      	sub	sp, #44	; 0x2c
 800b61e:	af00      	add	r7, sp, #0
 800b620:	60f8      	str	r0, [r7, #12]
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	689a      	ldr	r2, [r3, #8]
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	fa93 f3a3 	rbit	r3, r3
 800b634:	613b      	str	r3, [r7, #16]
  return result;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b640:	2320      	movs	r3, #32
 800b642:	e003      	b.n	800b64c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	fab3 f383 	clz	r3, r3
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	2103      	movs	r1, #3
 800b650:	fa01 f303 	lsl.w	r3, r1, r3
 800b654:	43db      	mvns	r3, r3
 800b656:	401a      	ands	r2, r3
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	fa93 f3a3 	rbit	r3, r3
 800b662:	61fb      	str	r3, [r7, #28]
  return result;
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b66e:	2320      	movs	r3, #32
 800b670:	e003      	b.n	800b67a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	fab3 f383 	clz	r3, r3
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	005b      	lsls	r3, r3, #1
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	fa01 f303 	lsl.w	r3, r1, r3
 800b682:	431a      	orrs	r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800b688:	bf00      	nop
 800b68a:	372c      	adds	r7, #44	; 0x2c
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800b694:	b480      	push	{r7}
 800b696:	b08b      	sub	sp, #44	; 0x2c
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	68da      	ldr	r2, [r3, #12]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	fa93 f3a3 	rbit	r3, r3
 800b6ae:	613b      	str	r3, [r7, #16]
  return result;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b6ba:	2320      	movs	r3, #32
 800b6bc:	e003      	b.n	800b6c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	fab3 f383 	clz	r3, r3
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	2103      	movs	r1, #3
 800b6ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ce:	43db      	mvns	r3, r3
 800b6d0:	401a      	ands	r2, r3
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	fa93 f3a3 	rbit	r3, r3
 800b6dc:	61fb      	str	r3, [r7, #28]
  return result;
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b6e8:	2320      	movs	r3, #32
 800b6ea:	e003      	b.n	800b6f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	fab3 f383 	clz	r3, r3
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	6879      	ldr	r1, [r7, #4]
 800b6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b6fc:	431a      	orrs	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	60da      	str	r2, [r3, #12]
}
 800b702:	bf00      	nop
 800b704:	372c      	adds	r7, #44	; 0x2c
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b70e:	b480      	push	{r7}
 800b710:	b08b      	sub	sp, #44	; 0x2c
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6a1a      	ldr	r2, [r3, #32]
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	fa93 f3a3 	rbit	r3, r3
 800b728:	613b      	str	r3, [r7, #16]
  return result;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b734:	2320      	movs	r3, #32
 800b736:	e003      	b.n	800b740 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	fab3 f383 	clz	r3, r3
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	210f      	movs	r1, #15
 800b744:	fa01 f303 	lsl.w	r3, r1, r3
 800b748:	43db      	mvns	r3, r3
 800b74a:	401a      	ands	r2, r3
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	fa93 f3a3 	rbit	r3, r3
 800b756:	61fb      	str	r3, [r7, #28]
  return result;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d101      	bne.n	800b766 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b762:	2320      	movs	r3, #32
 800b764:	e003      	b.n	800b76e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	fab3 f383 	clz	r3, r3
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	6879      	ldr	r1, [r7, #4]
 800b772:	fa01 f303 	lsl.w	r3, r1, r3
 800b776:	431a      	orrs	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800b77c:	bf00      	nop
 800b77e:	372c      	adds	r7, #44	; 0x2c
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b788:	b480      	push	{r7}
 800b78a:	b08b      	sub	sp, #44	; 0x2c
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	0a1b      	lsrs	r3, r3, #8
 800b79c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	fa93 f3a3 	rbit	r3, r3
 800b7a4:	613b      	str	r3, [r7, #16]
  return result;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b7b0:	2320      	movs	r3, #32
 800b7b2:	e003      	b.n	800b7bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	fab3 f383 	clz	r3, r3
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	210f      	movs	r1, #15
 800b7c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7c4:	43db      	mvns	r3, r3
 800b7c6:	401a      	ands	r2, r3
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	0a1b      	lsrs	r3, r3, #8
 800b7cc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7ce:	6a3b      	ldr	r3, [r7, #32]
 800b7d0:	fa93 f3a3 	rbit	r3, r3
 800b7d4:	61fb      	str	r3, [r7, #28]
  return result;
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b7e0:	2320      	movs	r3, #32
 800b7e2:	e003      	b.n	800b7ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e6:	fab3 f383 	clz	r3, r3
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800b7fa:	bf00      	nop
 800b7fc:	372c      	adds	r7, #44	; 0x2c
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b08a      	sub	sp, #40	; 0x28
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	fa93 f3a3 	rbit	r3, r3
 800b81c:	617b      	str	r3, [r7, #20]
  return result;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d101      	bne.n	800b82c <LL_GPIO_Init+0x26>
    return 32U;
 800b828:	2320      	movs	r3, #32
 800b82a:	e003      	b.n	800b834 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	fab3 f383 	clz	r3, r3
 800b832:	b2db      	uxtb	r3, r3
 800b834:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b836:	e058      	b.n	800b8ea <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	2101      	movs	r1, #1
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	fa01 f303 	lsl.w	r3, r1, r3
 800b844:	4013      	ands	r3, r2
 800b846:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800b848:	6a3b      	ldr	r3, [r7, #32]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d04a      	beq.n	800b8e4 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d003      	beq.n	800b85e <LL_GPIO_Init+0x58>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d10e      	bne.n	800b87c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	461a      	mov	r2, r3
 800b864:	6a39      	ldr	r1, [r7, #32]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff fed7 	bl	800b61a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	6819      	ldr	r1, [r3, #0]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	461a      	mov	r2, r3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7ff feb7 	bl	800b5ea <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	461a      	mov	r2, r3
 800b882:	6a39      	ldr	r1, [r7, #32]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff ff05 	bl	800b694 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d121      	bne.n	800b8d6 <LL_GPIO_Init+0xd0>
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	fa93 f3a3 	rbit	r3, r3
 800b89c:	60bb      	str	r3, [r7, #8]
  return result;
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <LL_GPIO_Init+0xa6>
    return 32U;
 800b8a8:	2320      	movs	r3, #32
 800b8aa:	e003      	b.n	800b8b4 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	fab3 f383 	clz	r3, r3
 800b8b2:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800b8b4:	2b07      	cmp	r3, #7
 800b8b6:	d807      	bhi.n	800b8c8 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	6a39      	ldr	r1, [r7, #32]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7ff ff24 	bl	800b70e <LL_GPIO_SetAFPin_0_7>
 800b8c6:	e006      	b.n	800b8d6 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	695b      	ldr	r3, [r3, #20]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	6a39      	ldr	r1, [r7, #32]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7ff ff59 	bl	800b788 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	6a39      	ldr	r1, [r7, #32]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff fe46 	bl	800b570 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d19f      	bne.n	800b838 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3728      	adds	r7, #40	; 0x28
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b902:	b480      	push	{r7}
 800b904:	b085      	sub	sp, #20
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b90a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b90e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	43db      	mvns	r3, r3
 800b918:	401a      	ands	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3714      	adds	r7, #20
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	460b      	mov	r3, r1
 800b936:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800b938:	78fb      	ldrb	r3, [r7, #3]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d106      	bne.n	800b94c <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b942:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	641a      	str	r2, [r3, #64]	; 0x40
 800b94a:	e00b      	b.n	800b964 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800b94c:	78fb      	ldrb	r3, [r7, #3]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d106      	bne.n	800b960 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b956:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	641a      	str	r2, [r3, #64]	; 0x40
 800b95e:	e001      	b.n	800b964 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	e000      	b.n	800b966 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	370c      	adds	r7, #12
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b972:	b084      	sub	sp, #16
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	f107 001c 	add.w	r0, r7, #28
 800b980:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98e:	f023 0201 	bic.w	r2, r3, #1
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800b996:	2100      	movs	r1, #0
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff ffc7 	bl	800b92c <USB_SetCurrentMode>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9b4:	b004      	add	sp, #16
 800b9b6:	4770      	bx	lr

0800b9b8 <memset>:
 800b9b8:	4402      	add	r2, r0
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d100      	bne.n	800b9c2 <memset+0xa>
 800b9c0:	4770      	bx	lr
 800b9c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9c6:	e7f9      	b.n	800b9bc <memset+0x4>

0800b9c8 <__libc_init_array>:
 800b9c8:	b570      	push	{r4, r5, r6, lr}
 800b9ca:	4d0d      	ldr	r5, [pc, #52]	; (800ba00 <__libc_init_array+0x38>)
 800b9cc:	2600      	movs	r6, #0
 800b9ce:	4c0d      	ldr	r4, [pc, #52]	; (800ba04 <__libc_init_array+0x3c>)
 800b9d0:	1b64      	subs	r4, r4, r5
 800b9d2:	10a4      	asrs	r4, r4, #2
 800b9d4:	42a6      	cmp	r6, r4
 800b9d6:	d109      	bne.n	800b9ec <__libc_init_array+0x24>
 800b9d8:	4d0b      	ldr	r5, [pc, #44]	; (800ba08 <__libc_init_array+0x40>)
 800b9da:	2600      	movs	r6, #0
 800b9dc:	4c0b      	ldr	r4, [pc, #44]	; (800ba0c <__libc_init_array+0x44>)
 800b9de:	f000 f817 	bl	800ba10 <_init>
 800b9e2:	1b64      	subs	r4, r4, r5
 800b9e4:	10a4      	asrs	r4, r4, #2
 800b9e6:	42a6      	cmp	r6, r4
 800b9e8:	d105      	bne.n	800b9f6 <__libc_init_array+0x2e>
 800b9ea:	bd70      	pop	{r4, r5, r6, pc}
 800b9ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f0:	3601      	adds	r6, #1
 800b9f2:	4798      	blx	r3
 800b9f4:	e7ee      	b.n	800b9d4 <__libc_init_array+0xc>
 800b9f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9fa:	3601      	adds	r6, #1
 800b9fc:	4798      	blx	r3
 800b9fe:	e7f2      	b.n	800b9e6 <__libc_init_array+0x1e>
 800ba00:	0800ba70 	.word	0x0800ba70
 800ba04:	0800ba70 	.word	0x0800ba70
 800ba08:	0800ba70 	.word	0x0800ba70
 800ba0c:	0800ba74 	.word	0x0800ba74

0800ba10 <_init>:
 800ba10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba12:	bf00      	nop
 800ba14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba16:	bc08      	pop	{r3}
 800ba18:	469e      	mov	lr, r3
 800ba1a:	4770      	bx	lr

0800ba1c <_fini>:
 800ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1e:	bf00      	nop
 800ba20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba22:	bc08      	pop	{r3}
 800ba24:	469e      	mov	lr, r3
 800ba26:	4770      	bx	lr
