
exti_test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb0  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a0fc  0800a0fc  0001a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a13c  0800a13c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a13c  0800a13c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a144  0800a144  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a144  0800a144  0001a144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a14c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  2000000c  0800a158  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800a158  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a323  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bff  00000000  00000000  0003a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  0003cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc5  00000000  00000000  0003e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036854  00000000  00000000  0003ef55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c40  00000000  00000000  000757a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015eb80  00000000  00000000  0008e3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d04  00000000  00000000  001ecf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001f1c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800a0e4 	.word	0x0800a0e4

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	0800a0e4 	.word	0x0800a0e4

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d0:	68fb      	ldr	r3, [r7, #12]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	44020c00 	.word	0x44020c00

080005e4 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005f2:	4909      	ldr	r1, [pc, #36]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000608:	68fb      	ldr	r3, [r7, #12]
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	44020c00 	.word	0x44020c00

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fdfe 	bl	8001220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f810 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f9da 	bl	80009e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800062c:	f000 f87c 	bl	8000728 <MX_ADC1_Init>
  MX_ETH_Init();
 8000630:	f000 f8de 	bl	80007f0 <MX_ETH_Init>
  MX_ICACHE_Init();
 8000634:	f000 f928 	bl	8000888 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 8000638:	f000 f932 	bl	80008a0 <MX_LPUART1_UART_Init>
  MX_UCPD1_Init();
 800063c:	f000 f97a 	bl	8000934 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000640:	f000 f99c 	bl	800097c <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x28>
	...

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	; 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2250      	movs	r2, #80	; 0x50
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 fd18 	bl	800a08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <SystemClock_Config+0xdc>)
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	4a2c      	ldr	r2, [pc, #176]	; (8000724 <SystemClock_Config+0xdc>)
 8000674:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000678:	6113      	str	r3, [r2, #16]
 800067a:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <SystemClock_Config+0xdc>)
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000686:	bf00      	nop
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <SystemClock_Config+0xdc>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	2b08      	cmp	r3, #8
 8000692:	d1f9      	bne.n	8000688 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000694:	2323      	movs	r3, #35	; 0x23
 8000696:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000698:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2340      	movs	r3, #64	; 0x40
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006b4:	2303      	movs	r3, #3
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80006cc:	230c      	movs	r3, #12
 80006ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fd8b 	bl	80031f8 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006e8:	f000 fa44 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	231f      	movs	r3, #31
 80006ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2103      	movs	r1, #3
 800070a:	4618      	mov	r0, r3
 800070c:	f003 f9ac 	bl	8003a68 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000716:	f000 fa2d 	bl	8000b74 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3770      	adds	r7, #112	; 0x70
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	44020800 	.word	0x44020800

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2220      	movs	r2, #32
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f009 fca9 	bl	800a08c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800073c:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <MX_ADC1_Init+0xc0>)
 800073e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800075a:	2204      	movs	r2, #4
 800075c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000760:	2200      	movs	r2, #0
 8000762:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800076c:	2201      	movs	r2, #1
 800076e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800078e:	2200      	movs	r2, #0
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000794:	2200      	movs	r2, #0
 8000796:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a0:	4810      	ldr	r0, [pc, #64]	; (80007e4 <MX_ADC1_Init+0xbc>)
 80007a2:	f000 ffcb 	bl	800173c <HAL_ADC_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80007ac:	f000 f9e2 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_ADC1_Init+0xc4>)
 80007b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b4:	2306      	movs	r3, #6
 80007b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007bc:	237f      	movs	r3, #127	; 0x7f
 80007be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c0:	2304      	movs	r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_ADC1_Init+0xbc>)
 80007ce:	f001 f909 	bl	80019e4 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80007d8:	f000 f9cc 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000120 	.word	0x20000120
 80007e8:	42028000 	.word	0x42028000
 80007ec:	4b840000 	.word	0x4b840000

080007f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_ETH_Init+0x80>)
 80007f6:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <MX_ETH_Init+0x84>)
 80007f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_ETH_Init+0x88>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_ETH_Init+0x88>)
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_ETH_Init+0x88>)
 8000808:	22e1      	movs	r2, #225	; 0xe1
 800080a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_ETH_Init+0x88>)
 800080e:	2200      	movs	r2, #0
 8000810:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_ETH_Init+0x88>)
 8000814:	2200      	movs	r2, #0
 8000816:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_ETH_Init+0x88>)
 800081a:	2200      	movs	r2, #0
 800081c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_ETH_Init+0x80>)
 8000820:	4a15      	ldr	r2, [pc, #84]	; (8000878 <MX_ETH_Init+0x88>)
 8000822:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_ETH_Init+0x80>)
 8000826:	2201      	movs	r2, #1
 8000828:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_ETH_Init+0x80>)
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_ETH_Init+0x8c>)
 800082e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_ETH_Init+0x80>)
 8000832:	4a13      	ldr	r2, [pc, #76]	; (8000880 <MX_ETH_Init+0x90>)
 8000834:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_ETH_Init+0x80>)
 8000838:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800083c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_ETH_Init+0x80>)
 8000840:	f001 fde2 	bl	8002408 <HAL_ETH_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800084a:	f000 f993 	bl	8000b74 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800084e:	2238      	movs	r2, #56	; 0x38
 8000850:	2100      	movs	r1, #0
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_ETH_Init+0x94>)
 8000854:	f009 fc1a 	bl	800a08c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_ETH_Init+0x94>)
 800085a:	2221      	movs	r2, #33	; 0x21
 800085c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_ETH_Init+0x94>)
 8000860:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000864:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_ETH_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000188 	.word	0x20000188
 8000874:	40028000 	.word	0x40028000
 8000878:	200005d4 	.word	0x200005d4
 800087c:	200000c0 	.word	0x200000c0
 8000880:	20000060 	.word	0x20000060
 8000884:	20000028 	.word	0x20000028

08000888 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800088c:	f002 fba6 	bl	8002fdc <HAL_ICACHE_Enable>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000896:	f000 f96d 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008a6:	4a21      	ldr	r2, [pc, #132]	; (800092c <MX_LPUART1_UART_Init+0x8c>)
 80008a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008ac:	4a20      	ldr	r2, [pc, #128]	; (8000930 <MX_LPUART1_UART_Init+0x90>)
 80008ae:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008c4:	220c      	movs	r2, #12
 80008c6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008dc:	2200      	movs	r2, #0
 80008de:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008e2:	f008 fc55 	bl	8009190 <HAL_UART_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80008ec:	f000 f942 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008f4:	f009 f8dc 	bl	8009ab0 <HAL_UARTEx_SetTxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80008fe:	f000 f939 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 8000906:	f009 f911 	bl	8009b2c <HAL_UARTEx_SetRxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000910:	f000 f930 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 8000916:	f009 f892 	bl	8009a3e <HAL_UARTEx_DisableFifoMode>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000920:	f000 f928 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000238 	.word	0x20000238
 800092c:	44002400 	.word	0x44002400
 8000930:	00033324 	.word	0x00033324

08000934 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800094a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800094e:	f7ff fe49 	bl	80005e4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000952:	2002      	movs	r0, #2
 8000954:	f7ff fe2a 	bl	80005ac <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000958:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800095c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800095e:	2303      	movs	r3, #3
 8000960:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	463b      	mov	r3, r7
 8000968:	4619      	mov	r1, r3
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_UCPD1_Init+0x44>)
 800096c:	f009 fab5 	bl	8009eda <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	42020400 	.word	0x42020400

0800097c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <MX_USB_PCD_Init+0x60>)
 8000984:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 8000988:	2208      	movs	r2, #8
 800098a:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 800098e:	2202      	movs	r2, #2
 8000990:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 8000994:	2202      	movs	r2, #2
 8000996:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009c4:	f002 fb1a 	bl	8002ffc <HAL_PCD_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80009ce:	f000 f8d1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200002cc 	.word	0x200002cc
 80009dc:	40016000 	.word	0x40016000

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f6:	4b50      	ldr	r3, [pc, #320]	; (8000b38 <MX_GPIO_Init+0x158>)
 80009f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <MX_GPIO_Init+0x158>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a06:	4b4c      	ldr	r3, [pc, #304]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0c:	f003 0310 	and.w	r3, r3, #16
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a14:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1a:	4a47      	ldr	r2, [pc, #284]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a24:	4b44      	ldr	r3, [pc, #272]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a32:	4b41      	ldr	r3, [pc, #260]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a38:	4a3f      	ldr	r2, [pc, #252]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a3a:	f043 0320 	orr.w	r3, r3, #32
 8000a3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a42:	4b3d      	ldr	r3, [pc, #244]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a50:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a56:	4a38      	ldr	r2, [pc, #224]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a60:	4b35      	ldr	r3, [pc, #212]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b32      	ldr	r3, [pc, #200]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a74:	4a30      	ldr	r2, [pc, #192]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a92:	4a29      	ldr	r2, [pc, #164]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a9c:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	481b      	ldr	r0, [pc, #108]	; (8000b3c <MX_GPIO_Init+0x15c>)
 8000ace:	f002 fa21 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_GPIO_Init+0x160>)
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4817      	ldr	r0, [pc, #92]	; (8000b44 <MX_GPIO_Init+0x164>)
 8000ae8:	f002 f8c2 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aec:	2310      	movs	r3, #16
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <MX_GPIO_Init+0x15c>)
 8000b04:	f002 f8b4 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_GPIO_Init+0x160>)
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <MX_GPIO_Init+0x168>)
 8000b1c:	f002 f8a8 	bl	8002c70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2018      	movs	r0, #24
 8000b26:	f001 fc3a 	bl	800239e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b2a:	2018      	movs	r0, #24
 8000b2c:	f001 fc51 	bl	80023d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b30:	bf00      	nop
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	44020c00 	.word	0x44020c00
 8000b3c:	42021400 	.word	0x42021400
 8000b40:	10110000 	.word	0x10110000
 8000b44:	42020800 	.word	0x42020800
 8000b48:	42021800 	.word	0x42021800

08000b4c <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b5c:	d103      	bne.n	8000b66 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8000b62:	f002 f9ef 	bl	8002f44 <HAL_GPIO_TogglePin>
	}
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	42021400 	.word	0x42021400

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>

08000b7e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0cc      	sub	sp, #304	; 0x130
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000b9a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000bba:	461a      	mov	r2, r3
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f009 fa65 	bl	800a08c <memset>
  if(hadc->Instance==ADC1)
 8000bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <HAL_ADC_MspInit+0x104>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d157      	bne.n	8000c84 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bd8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000bdc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f003 fa76 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8000c06:	f7ff ffb5 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <HAL_ADC_MspInit+0x108>)
 8000c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c10:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <HAL_ADC_MspInit+0x108>)
 8000c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <HAL_ADC_MspInit+0x108>)
 8000c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c20:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c32:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c36:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_ADC_MspInit+0x108>)
 8000c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c3e:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <HAL_ADC_MspInit+0x108>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_ADC_MspInit+0x108>)
 8000c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c4e:	f003 0201 	and.w	r2, r3, #1
 8000c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c64:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000c66:	2310      	movs	r3, #16
 8000c68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <HAL_ADC_MspInit+0x10c>)
 8000c80:	f001 fff6 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	42028000 	.word	0x42028000
 8000c94:	44020c00 	.word	0x44020c00
 8000c98:	42020000 	.word	0x42020000

08000c9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	; 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <HAL_ETH_MspInit+0x184>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f040 80ab 	bne.w	8000e16 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cc0:	4b58      	ldr	r3, [pc, #352]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000cc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000cd0:	4b54      	ldr	r3, [pc, #336]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cda:	623b      	str	r3, [r7, #32]
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000cde:	4b51      	ldr	r3, [pc, #324]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce4:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000cee:	4b4d      	ldr	r3, [pc, #308]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000cfc:	4b49      	ldr	r3, [pc, #292]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000d0c:	4b45      	ldr	r3, [pc, #276]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b42      	ldr	r3, [pc, #264]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d20:	4a40      	ldr	r2, [pc, #256]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d3e:	4a39      	ldr	r2, [pc, #228]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d48:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d5c:	4a31      	ldr	r2, [pc, #196]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d7a:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d92:	2332      	movs	r3, #50	; 0x32
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da2:	230b      	movs	r3, #11
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	481e      	ldr	r0, [pc, #120]	; (8000e28 <HAL_ETH_MspInit+0x18c>)
 8000dae:	f001 ff5f 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000db2:	2386      	movs	r3, #134	; 0x86
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <HAL_ETH_MspInit+0x190>)
 8000dce:	f001 ff4f 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de0:	2302      	movs	r3, #2
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de4:	230b      	movs	r3, #11
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4810      	ldr	r0, [pc, #64]	; (8000e30 <HAL_ETH_MspInit+0x194>)
 8000df0:	f001 ff3e 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000df4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e02:	2302      	movs	r3, #2
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e06:	230b      	movs	r3, #11
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <HAL_ETH_MspInit+0x198>)
 8000e12:	f001 ff2d 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	; 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40028000 	.word	0x40028000
 8000e24:	44020c00 	.word	0x44020c00
 8000e28:	42020800 	.word	0x42020800
 8000e2c:	42020000 	.word	0x42020000
 8000e30:	42020400 	.word	0x42020400
 8000e34:	42021800 	.word	0x42021800

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0cc      	sub	sp, #304	; 0x130
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e46:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e60:	4618      	mov	r0, r3
 8000e62:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000e66:	461a      	mov	r2, r3
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f009 f90f 	bl	800a08c <memset>
  if(huart->Instance==LPUART1)
 8000e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a33      	ldr	r2, [pc, #204]	; (8000f48 <HAL_UART_MspInit+0x110>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d15d      	bne.n	8000f3c <HAL_UART_MspInit+0x104>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e84:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e98:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 f920 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000eb2:	f7ff fe5f 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <HAL_UART_MspInit+0x114>)
 8000eb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ebc:	4a23      	ldr	r2, [pc, #140]	; (8000f4c <HAL_UART_MspInit+0x114>)
 8000ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000ec6:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <HAL_UART_MspInit+0x114>)
 8000ec8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ecc:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ed4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ede:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ee2:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_UART_MspInit+0x114>)
 8000ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eea:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <HAL_UART_MspInit+0x114>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_UART_MspInit+0x114>)
 8000ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000efa:	f003 0202 	and.w	r2, r3, #2
 8000efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f0c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f10:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000f12:	23c0      	movs	r3, #192	; 0xc0
 8000f14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <HAL_UART_MspInit+0x118>)
 8000f38:	f001 fe9a 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	44002400 	.word	0x44002400
 8000f4c:	44020c00 	.word	0x44020c00
 8000f50:	42020400 	.word	0x42020400

08000f54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0cc      	sub	sp, #304	; 0x130
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f62:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000f82:	461a      	mov	r2, r3
 8000f84:	2100      	movs	r1, #0
 8000f86:	f009 f881 	bl	800a08c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a33      	ldr	r2, [pc, #204]	; (8001064 <HAL_PCD_MspInit+0x110>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d15e      	bne.n	800105a <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fa0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	f04f 0310 	mov.w	r3, #16
 8000fac:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fb4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fb8:	2230      	movs	r2, #48	; 0x30
 8000fba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 f892 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 8000fce:	f7ff fdd1 	bl	8000b74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <HAL_PCD_MspInit+0x114>)
 8000fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fd8:	4a23      	ldr	r2, [pc, #140]	; (8001068 <HAL_PCD_MspInit+0x114>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <HAL_PCD_MspInit+0x114>)
 8000fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fe8:	f003 0201 	and.w	r2, r3, #1
 8000fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ff0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ffa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ffe:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001000:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001004:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800101a:	230a      	movs	r3, #10
 800101c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001024:	4619      	mov	r1, r3
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <HAL_PCD_MspInit+0x118>)
 8001028:	f001 fe22 	bl	8002c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_PCD_MspInit+0x114>)
 800102e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001032:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_PCD_MspInit+0x114>)
 8001034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001038:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_PCD_MspInit+0x114>)
 800103e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001042:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8001046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800104a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001054:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001058:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40016000 	.word	0x40016000
 8001068:	44020c00 	.word	0x44020c00
 800106c:	42020000 	.word	0x42020000

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 f90c 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010cc:	f001 ff54 	bl	8002f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010da:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <SystemInit+0xdc>)
 80010dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e0:	4a33      	ldr	r2, [pc, #204]	; (80011b0 <SystemInit+0xdc>)
 80010e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80010ea:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <SystemInit+0xe0>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80010f0:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <SystemInit+0xe0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80010f6:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <SystemInit+0xe0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <SystemInit+0xe0>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	492c      	ldr	r1, [pc, #176]	; (80011b4 <SystemInit+0xe0>)
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <SystemInit+0xe4>)
 8001104:	4013      	ands	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <SystemInit+0xe0>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800110e:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <SystemInit+0xe0>)
 8001110:	2200      	movs	r2, #0
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <SystemInit+0xe0>)
 8001116:	2200      	movs	r2, #0
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <SystemInit+0xe0>)
 800111c:	4a27      	ldr	r2, [pc, #156]	; (80011bc <SystemInit+0xe8>)
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <SystemInit+0xe0>)
 8001122:	2200      	movs	r2, #0
 8001124:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <SystemInit+0xe0>)
 8001128:	4a24      	ldr	r2, [pc, #144]	; (80011bc <SystemInit+0xe8>)
 800112a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <SystemInit+0xe0>)
 800112e:	2200      	movs	r2, #0
 8001130:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <SystemInit+0xe0>)
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <SystemInit+0xe8>)
 8001136:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <SystemInit+0xe0>)
 800113a:	2200      	movs	r2, #0
 800113c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <SystemInit+0xe0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <SystemInit+0xe0>)
 8001144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001148:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <SystemInit+0xe0>)
 800114c:	2200      	movs	r2, #0
 800114e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <SystemInit+0xdc>)
 8001152:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001156:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <SystemInit+0xec>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001160:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001168:	d003      	beq.n	8001172 <SystemInit+0x9e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001170:	d117      	bne.n	80011a2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <SystemInit+0xec>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <SystemInit+0xec>)
 8001180:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <SystemInit+0xf0>)
 8001182:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <SystemInit+0xec>)
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <SystemInit+0xf4>)
 8001188:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <SystemInit+0xec>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <SystemInit+0xec>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <SystemInit+0xec>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <SystemInit+0xec>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	61d3      	str	r3, [r2, #28]
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	44020c00 	.word	0x44020c00
 80011b8:	eae2eae3 	.word	0xeae2eae3
 80011bc:	01010280 	.word	0x01010280
 80011c0:	40022000 	.word	0x40022000
 80011c4:	08192a3b 	.word	0x08192a3b
 80011c8:	4c5d6e7f 	.word	0x4c5d6e7f

080011cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d0:	f7ff ff80 	bl	80010d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <LoopForever+0x6>)
  ldr r1, =_edata
 80011d6:	490d      	ldr	r1, [pc, #52]	; (800120c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <LoopForever+0xe>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011ec:	4c0a      	ldr	r4, [pc, #40]	; (8001218 <LoopForever+0x16>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011fa:	f008 ff4f 	bl	800a09c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fe:	f7ff fa0d 	bl	800061c <main>

08001202 <LoopForever>:

LoopForever:
    b LoopForever
 8001202:	e7fe      	b.n	8001202 <LoopForever>
  ldr   r0, =_estack
 8001204:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001210:	0800a14c 	.word	0x0800a14c
  ldr r2, =_sbss
 8001214:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001218:	200005e0 	.word	0x200005e0

0800121c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC1_IRQHandler>
	...

08001220 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f001 f8af 	bl	8002388 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800122a:	f002 fdd5 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 800122e:	4602      	mov	r2, r0
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_Init+0x40>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	490a      	ldr	r1, [pc, #40]	; (8001264 <HAL_Init+0x44>)
 800123a:	5ccb      	ldrb	r3, [r1, r3]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	4a09      	ldr	r2, [pc, #36]	; (8001268 <HAL_Init+0x48>)
 8001242:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001244:	200f      	movs	r0, #15
 8001246:	f000 f811 	bl	800126c <HAL_InitTick>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e002      	b.n	800125a <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fc93 	bl	8000b7e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	44020c00 	.word	0x44020c00
 8001264:	0800a0fc 	.word	0x0800a0fc
 8001268:	20000000 	.word	0x20000000

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_InitTick+0x60>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e021      	b.n	80012c4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_InitTick+0x64>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_InitTick+0x60>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f8a9 	bl	80023ee <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00e      	b.n	80012c4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d80a      	bhi.n	80012c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f001 f873 	bl	800239e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_InitTick+0x68>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000004 	.word	0x20000004

080012d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008
 80012fc:	200005dc 	.word	0x200005dc

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200005dc 	.word	0x200005dc

08001318 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001322:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001326:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800132a:	4905      	ldr	r1, [pc, #20]	; (8001340 <HAL_SBS_ETHInterfaceSelect+0x28>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4313      	orrs	r3, r2
 8001330:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	44000400 	.word	0x44000400

08001344 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80013da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	42028000 	.word	0x42028000

080013f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3360      	adds	r3, #96	; 0x60
 800140a:	461a      	mov	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <LL_ADC_SetOffset+0x44>)
 800141a:	4013      	ands	r3, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	4313      	orrs	r3, r2
 8001428:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001430:	bf00      	nop
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	03fff000 	.word	0x03fff000

08001440 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3360      	adds	r3, #96	; 0x60
 800144e:	461a      	mov	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3360      	adds	r3, #96	; 0x60
 800147c:	461a      	mov	r2, r3
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	431a      	orrs	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001496:	bf00      	nop
 8001498:	371c      	adds	r7, #28
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b087      	sub	sp, #28
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3360      	adds	r3, #96	; 0x60
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80014cc:	bf00      	nop
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3360      	adds	r3, #96	; 0x60
 80014e8:	461a      	mov	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001502:	bf00      	nop
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	615a      	str	r2, [r3, #20]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3330      	adds	r3, #48	; 0x30
 8001544:	461a      	mov	r2, r3
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	4413      	add	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	211f      	movs	r1, #31
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	0e9b      	lsrs	r3, r3, #26
 800156c:	f003 011f 	and.w	r1, r3, #31
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	431a      	orrs	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3314      	adds	r3, #20
 800159c:	461a      	mov	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	0e5b      	lsrs	r3, r3, #25
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	0d1b      	lsrs	r3, r3, #20
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2107      	movs	r1, #7
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	401a      	ands	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	0d1b      	lsrs	r3, r3, #20
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015d6:	bf00      	nop
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0318 	and.w	r3, r3, #24
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001608:	40d9      	lsrs	r1, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	400b      	ands	r3, r1
 800160e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	000fffff 	.word	0x000fffff

0800162c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800163c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6093      	str	r3, [r2, #8]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001664:	d101      	bne.n	800166a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001688:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800168c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016b4:	d101      	bne.n	80016ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <LL_ADC_IsEnabled+0x18>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <LL_ADC_IsEnabled+0x1a>
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d101      	bne.n	8001706 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b08      	cmp	r3, #8
 8001726:	d101      	bne.n	800172c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e136      	b.n	80019c4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fa11 	bl	8000b8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff67 	bl	8001650 <LL_ADC_IsDeepPowerDownEnabled>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff4d 	bl	800162c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff82 	bl	80016a0 <LL_ADC_IsInternalRegulatorEnabled>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff66 	bl	8001678 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017ac:	4b87      	ldr	r3, [pc, #540]	; (80019cc <HAL_ADC_Init+0x290>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	4a87      	ldr	r2, [pc, #540]	; (80019d0 <HAL_ADC_Init+0x294>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	3301      	adds	r3, #1
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff64 	bl	80016a0 <LL_ADC_IsInternalRegulatorEnabled>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	f043 0210 	orr.w	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff75 	bl	80016ee <LL_ADC_REG_IsConversionOngoing>
 8001804:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 80cf 	bne.w	80019b2 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 80cb 	bne.w	80019b2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001824:	f043 0202 	orr.w	r2, r3, #2
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff49 	bl	80016c8 <LL_ADC_IsEnabled>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d110      	bne.n	800185e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800183c:	4865      	ldr	r0, [pc, #404]	; (80019d4 <HAL_ADC_Init+0x298>)
 800183e:	f7ff ff43 	bl	80016c8 <LL_ADC_IsEnabled>
 8001842:	4604      	mov	r4, r0
 8001844:	4864      	ldr	r0, [pc, #400]	; (80019d8 <HAL_ADC_Init+0x29c>)
 8001846:	f7ff ff3f 	bl	80016c8 <LL_ADC_IsEnabled>
 800184a:	4603      	mov	r3, r0
 800184c:	4323      	orrs	r3, r4
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4619      	mov	r1, r3
 8001858:	4860      	ldr	r0, [pc, #384]	; (80019dc <HAL_ADC_Init+0x2a0>)
 800185a:	f7ff fd73 	bl	8001344 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7e5b      	ldrb	r3, [r3, #25]
 8001862:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001868:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800186e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001874:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	3b01      	subs	r3, #1
 8001892:	045b      	lsls	r3, r3, #17
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <HAL_ADC_Init+0x2a4>)
 80018be:	4013      	ands	r3, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	69b9      	ldr	r1, [r7, #24]
 80018c6:	430b      	orrs	r3, r1
 80018c8:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff15 	bl	8001714 <LL_ADC_INJ_IsConversionOngoing>
 80018ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d13d      	bne.n	800196e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d13a      	bne.n	800196e <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7e1b      	ldrb	r3, [r3, #24]
 80018fc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001904:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001914:	f023 0302 	bic.w	r3, r3, #2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	69b9      	ldr	r1, [r7, #24]
 800191e:	430b      	orrs	r3, r1
 8001920:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001928:	2b01      	cmp	r3, #1
 800192a:	d118      	bne.n	800195e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001936:	f023 0304 	bic.w	r3, r3, #4
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001948:	4311      	orrs	r1, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800194e:	430a      	orrs	r2, r1
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	e007      	b.n	800196e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10c      	bne.n	8001990 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f023 010f 	bic.w	r1, r3, #15
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	631a      	str	r2, [r3, #48]	; 0x30
 800198e:	e007      	b.n	80019a0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 020f 	bic.w	r2, r2, #15
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	f023 0303 	bic.w	r3, r3, #3
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	659a      	str	r2, [r3, #88]	; 0x58
 80019b0:	e007      	b.n	80019c2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f043 0210 	orr.w	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3724      	adds	r7, #36	; 0x24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	20000000 	.word	0x20000000
 80019d0:	053e2d63 	.word	0x053e2d63
 80019d4:	42028000 	.word	0x42028000
 80019d8:	42028100 	.word	0x42028100
 80019dc:	42028300 	.word	0x42028300
 80019e0:	fff04007 	.word	0xfff04007

080019e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0b6      	sub	sp, #216	; 0xd8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x22>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e3d8      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x7d4>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fe6b 	bl	80016ee <LL_ADC_REG_IsConversionOngoing>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 83bd 	bne.w	800219a <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d104      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fccf 	bl	80013d0 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f7ff fd78 	bl	8001534 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fe50 	bl	80016ee <LL_ADC_REG_IsConversionOngoing>
 8001a4e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fe5c 	bl	8001714 <LL_ADC_INJ_IsConversionOngoing>
 8001a5c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 81d9 	bne.w	8001e1c <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 81d4 	bne.w	8001e1c <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a7c:	d10f      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff fd7f 	bl	800158c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fd39 	bl	800150e <LL_ADC_SetSamplingTimeCommonConfig>
 8001a9c:	e00e      	b.n	8001abc <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6819      	ldr	r1, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f7ff fd6e 	bl	800158c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fd29 	bl	800150e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d022      	beq.n	8001b24 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6919      	ldr	r1, [r3, #16]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aee:	f7ff fc83 	bl	80013f8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6919      	ldr	r1, [r3, #16]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	461a      	mov	r2, r3
 8001b00:	f7ff fccf 	bl	80014a2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d102      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x136>
 8001b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b18:	e000      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x138>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f7ff fcdb 	bl	80014d8 <LL_ADC_SetOffsetSaturation>
 8001b22:	e17b      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fc88 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10a      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x16c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fc7d 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	f003 021f 	and.w	r2, r3, #31
 8001b4e:	e01e      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1aa>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fc72 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8001b6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8001b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8001b7e:	2320      	movs	r3, #32
 8001b80:	e004      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8001b82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x1c2>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0e9b      	lsrs	r3, r3, #26
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	e018      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001bc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8001bca:	2320      	movs	r3, #32
 8001bcc:	e004      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8001bce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d106      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fc41 	bl	800146c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fc25 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x232>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fc1a 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	0e9b      	lsrs	r3, r3, #26
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	e01e      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x270>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fc0f 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e004      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8001c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x288>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0e9b      	lsrs	r3, r3, #26
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	e018      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x2ba>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8001c90:	2320      	movs	r3, #32
 8001c92:	e004      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8001c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d106      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fbde 	bl	800146c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fbc2 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x2f8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2102      	movs	r1, #2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fbb7 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	f003 021f 	and.w	r2, r3, #31
 8001cda:	e01e      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x336>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fbac 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e004      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8001d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x34e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	0e9b      	lsrs	r3, r3, #26
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	e016      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x37c>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8001d52:	2320      	movs	r3, #32
 8001d54:	e004      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8001d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d106      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fb7d 	bl	800146c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2103      	movs	r1, #3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fb61 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10a      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x3ba>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2103      	movs	r1, #3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fb56 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	0e9b      	lsrs	r3, r3, #26
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	e017      	b.n	8001dce <HAL_ADC_ConfigChannel+0x3ea>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2103      	movs	r1, #3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fb4b 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001daa:	4603      	mov	r3, r0
 8001dac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001db8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	e003      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8001dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d105      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x402>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	0e9b      	lsrs	r3, r3, #26
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	e011      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x426>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	e003      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8001e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d106      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	2103      	movs	r1, #3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fb28 	bl	800146c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fc51 	bl	80016c8 <LL_ADC_IsEnabled>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f040 813f 	bne.w	80020ac <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6819      	ldr	r1, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f7ff fbd2 	bl	80015e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a8e      	ldr	r2, [pc, #568]	; (8002080 <HAL_ADC_ConfigChannel+0x69c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	f040 8130 	bne.w	80020ac <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10b      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x490>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	3301      	adds	r3, #1
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2b09      	cmp	r3, #9
 8001e6a:	bf94      	ite	ls
 8001e6c:	2301      	movls	r3, #1
 8001e6e:	2300      	movhi	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e019      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x4c4>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e84:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e003      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2b09      	cmp	r3, #9
 8001ea0:	bf94      	ite	ls
 8001ea2:	2301      	movls	r3, #1
 8001ea4:	2300      	movhi	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d079      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x4e4>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	0e9b      	lsrs	r3, r3, #26
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	069b      	lsls	r3, r3, #26
 8001ec2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec6:	e015      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x510>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	e003      	b.n	8001eec <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	069b      	lsls	r3, r3, #26
 8001ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x530>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0e9b      	lsrs	r3, r3, #26
 8001f06:	3301      	adds	r3, #1
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	e017      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x560>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	e003      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8001f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	ea42 0103 	orr.w	r1, r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10a      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x586>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	051b      	lsls	r3, r3, #20
 8001f68:	e018      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x5b8>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8001f82:	2320      	movs	r3, #32
 8001f84:	e003      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8001f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	e080      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d107      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x5d8>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	069b      	lsls	r3, r3, #26
 8001fb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fba:	e015      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x604>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	e003      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	069b      	lsls	r3, r3, #26
 8001fe4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x624>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0e9b      	lsrs	r3, r3, #26
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2101      	movs	r1, #1
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	e017      	b.n	8002038 <HAL_ADC_ConfigChannel+0x654>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	61fb      	str	r3, [r7, #28]
  return result;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002020:	2320      	movs	r3, #32
 8002022:	e003      	b.n	800202c <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	3301      	adds	r3, #1
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	ea42 0103 	orr.w	r1, r2, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x680>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	3301      	adds	r3, #1
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	3b1e      	subs	r3, #30
 800205c:	051b      	lsls	r3, r3, #20
 800205e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002062:	e01d      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x6bc>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	613b      	str	r3, [r7, #16]
  return result;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d103      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800207c:	2320      	movs	r3, #32
 800207e:	e005      	b.n	800208c <HAL_ADC_ConfigChannel+0x6a8>
 8002080:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f003 021f 	and.w	r2, r3, #31
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	3b1e      	subs	r3, #30
 800209a:	051b      	lsls	r3, r3, #20
 800209c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7ff fa70 	bl	800158c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_ADC_ConfigChannel+0x7dc>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d079      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b8:	4842      	ldr	r0, [pc, #264]	; (80021c4 <HAL_ADC_ConfigChannel+0x7e0>)
 80020ba:	f7ff f969 	bl	8001390 <LL_ADC_GetCommonPathInternalCh>
 80020be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <HAL_ADC_ConfigChannel+0x7e4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d124      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d11e      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <HAL_ADC_ConfigChannel+0x7e8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d164      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ea:	4619      	mov	r1, r3
 80020ec:	4835      	ldr	r0, [pc, #212]	; (80021c4 <HAL_ADC_ConfigChannel+0x7e0>)
 80020ee:	f7ff f93c 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HAL_ADC_ConfigChannel+0x7ec>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	4a36      	ldr	r2, [pc, #216]	; (80021d4 <HAL_ADC_ConfigChannel+0x7f0>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	099b      	lsrs	r3, r3, #6
 8002100:	3301      	adds	r3, #1
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002106:	e002      	b.n	800210e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3b01      	subs	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f9      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002114:	e04a      	b.n	80021ac <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2f      	ldr	r2, [pc, #188]	; (80021d8 <HAL_ADC_ConfigChannel+0x7f4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d113      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002120:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10d      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a2a      	ldr	r2, [pc, #168]	; (80021dc <HAL_ADC_ConfigChannel+0x7f8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d13a      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002136:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800213a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213e:	4619      	mov	r1, r3
 8002140:	4820      	ldr	r0, [pc, #128]	; (80021c4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002142:	f7ff f912 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002146:	e031      	b.n	80021ac <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a24      	ldr	r2, [pc, #144]	; (80021e0 <HAL_ADC_ConfigChannel+0x7fc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d113      	bne.n	800217a <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002152:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <HAL_ADC_ConfigChannel+0x7e8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d121      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800216c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002170:	4619      	mov	r1, r3
 8002172:	4814      	ldr	r0, [pc, #80]	; (80021c4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002174:	f7ff f8f9 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002178:	e018      	b.n	80021ac <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_ADC_ConfigChannel+0x800>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d113      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_ADC_ConfigChannel+0x7e8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00e      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff f90a 	bl	80013ac <LL_ADC_EnableChannelVDDcore>
 8002198:	e008      	b.n	80021ac <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f043 0220 	orr.w	r2, r3, #32
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80021b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	37d8      	adds	r7, #216	; 0xd8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	80080000 	.word	0x80080000
 80021c4:	42028300 	.word	0x42028300
 80021c8:	c3210000 	.word	0xc3210000
 80021cc:	42028000 	.word	0x42028000
 80021d0:	20000000 	.word	0x20000000
 80021d4:	053e2d63 	.word	0x053e2d63
 80021d8:	43290000 	.word	0x43290000
 80021dc:	42028100 	.word	0x42028100
 80021e0:	c7520000 	.word	0xc7520000
 80021e4:	475a0000 	.word	0x475a0000

080021e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <__NVIC_SetPriorityGrouping+0x44>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002204:	4013      	ands	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221a:	4a04      	ldr	r2, [pc, #16]	; (800222c <__NVIC_SetPriorityGrouping+0x44>)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	60d3      	str	r3, [r2, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <__NVIC_GetPriorityGrouping+0x18>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 0307 	and.w	r3, r3, #7
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db0b      	blt.n	8002276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	4907      	ldr	r1, [pc, #28]	; (8002284 <__NVIC_EnableIRQ+0x38>)
 8002266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2001      	movs	r0, #1
 800226e:	fa00 f202 	lsl.w	r2, r0, r2
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	; (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002354:	d301      	bcc.n	800235a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002356:	2301      	movs	r3, #1
 8002358:	e00f      	b.n	800237a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <SysTick_Config+0x40>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002362:	210f      	movs	r1, #15
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	f7ff ff8e 	bl	8002288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <SysTick_Config+0x40>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <SysTick_Config+0x40>)
 8002374:	2207      	movs	r2, #7
 8002376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	e000e010 	.word	0xe000e010

08002388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff29 	bl	80021e8 <__NVIC_SetPriorityGrouping>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff40 	bl	8002230 <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff90 	bl	80022dc <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5f 	bl	8002288 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff33 	bl	800224c <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffa4 	bl	8002344 <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0d2      	b.n	80025c0 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2223      	movs	r2, #35	; 0x23
 8002428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7fe fc35 	bl	8000c9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8002432:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <HAL_ETH_Init+0x1c0>)
 8002434:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002438:	4a63      	ldr	r2, [pc, #396]	; (80025c8 <HAL_ETH_Init+0x1c0>)
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002442:	4b61      	ldr	r3, [pc, #388]	; (80025c8 <HAL_ETH_Init+0x1c0>)
 8002444:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7a1b      	ldrb	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d103      	bne.n	8002460 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8002458:	2000      	movs	r0, #0
 800245a:	f7fe ff5d 	bl	8001318 <HAL_SBS_ETHInterfaceSelect>
 800245e:	e003      	b.n	8002468 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8002460:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002464:	f7fe ff58 	bl	8001318 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8002468:	4b58      	ldr	r3, [pc, #352]	; (80025cc <HAL_ETH_Init+0x1c4>)
 800246a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002484:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002486:	f7fe ff3b 	bl	8001300 <HAL_GetTick>
 800248a:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800248c:	e011      	b.n	80024b2 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800248e:	f7fe ff37 	bl	8001300 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800249c:	d909      	bls.n	80024b2 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2204      	movs	r2, #4
 80024a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	22e0      	movs	r2, #224	; 0xe0
 80024aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e086      	b.n	80025c0 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e4      	bne.n	800248e <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f885 	bl	80025d4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80024ca:	f001 fdb1 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a3f      	ldr	r2, [pc, #252]	; (80025d0 <HAL_ETH_Init+0x1c8>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0c9a      	lsrs	r2, r3, #18
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3a01      	subs	r2, #1
 80024de:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa80 	bl	80029e8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80024f4:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002500:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002504:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	22e0      	movs	r2, #224	; 0xe0
 8002520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e04b      	b.n	80025c0 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002530:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002534:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002538:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6952      	ldr	r2, [r2, #20]
 8002540:	0051      	lsls	r1, r2, #1
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	430b      	orrs	r3, r1
 8002548:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800254c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fae6 	bl	8002b22 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fb2c 	bl	8002bb4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	3305      	adds	r3, #5
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	021a      	lsls	r2, r3, #8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	3303      	adds	r3, #3
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	061a      	lsls	r2, r3, #24
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	3302      	adds	r3, #2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	3301      	adds	r3, #1
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800259a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80025a8:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025aa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2210      	movs	r2, #16
 80025ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	44020c00 	.word	0x44020c00
 80025cc:	44000400 	.word	0x44000400
 80025d0:	431bde83 	.word	0x431bde83

080025d4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025ee:	f001 fd1f 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 80025f2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <HAL_ETH_SetMDIOClockRange+0xb8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d908      	bls.n	800260e <HAL_ETH_SetMDIOClockRange+0x3a>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4a24      	ldr	r2, [pc, #144]	; (8002690 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d804      	bhi.n	800260e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e034      	b.n	8002678 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d908      	bls.n	8002628 <HAL_ETH_SetMDIOClockRange+0x54>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d204      	bcs.n	8002628 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e027      	b.n	8002678 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d303      	bcc.n	8002638 <HAL_ETH_SetMDIOClockRange+0x64>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4a19      	ldr	r2, [pc, #100]	; (8002698 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d91e      	bls.n	8002676 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4a17      	ldr	r2, [pc, #92]	; (8002698 <HAL_ETH_SetMDIOClockRange+0xc4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d908      	bls.n	8002652 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d804      	bhi.n	8002652 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e012      	b.n	8002678 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d908      	bls.n	800266c <HAL_ETH_SetMDIOClockRange+0x98>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <HAL_ETH_SetMDIOClockRange+0xcc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d804      	bhi.n	800266c <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e005      	b.n	8002678 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e000      	b.n	8002678 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002676:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	01312cff 	.word	0x01312cff
 8002690:	02160ebf 	.word	0x02160ebf
 8002694:	03938700 	.word	0x03938700
 8002698:	05f5e0ff 	.word	0x05f5e0ff
 800269c:	08f0d17f 	.word	0x08f0d17f
 80026a0:	0ee6b280 	.word	0x0ee6b280

080026a4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80026b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	791b      	ldrb	r3, [r3, #4]
 80026bc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80026be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	7b1b      	ldrb	r3, [r3, #12]
 80026c4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80026c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	7b5b      	ldrb	r3, [r3, #13]
 80026cc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80026ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	7b9b      	ldrb	r3, [r3, #14]
 80026d4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80026d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	7bdb      	ldrb	r3, [r3, #15]
 80026dc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80026de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	7c12      	ldrb	r2, [r2, #16]
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d102      	bne.n	80026ee <ETH_SetMACConfig+0x4a>
 80026e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80026ec:	e000      	b.n	80026f0 <ETH_SetMACConfig+0x4c>
 80026ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80026f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	7c52      	ldrb	r2, [r2, #17]
 80026f6:	2a00      	cmp	r2, #0
 80026f8:	d102      	bne.n	8002700 <ETH_SetMACConfig+0x5c>
 80026fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026fe:	e000      	b.n	8002702 <ETH_SetMACConfig+0x5e>
 8002700:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002702:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	7c9b      	ldrb	r3, [r3, #18]
 8002708:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800270a:	431a      	orrs	r2, r3
               macconf->Speed |
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002710:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002716:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	7f1b      	ldrb	r3, [r3, #28]
 800271c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800271e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	7f5b      	ldrb	r3, [r3, #29]
 8002724:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002726:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	7f92      	ldrb	r2, [r2, #30]
 800272c:	2a00      	cmp	r2, #0
 800272e:	d102      	bne.n	8002736 <ETH_SetMACConfig+0x92>
 8002730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002734:	e000      	b.n	8002738 <ETH_SetMACConfig+0x94>
 8002736:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002738:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	7fdb      	ldrb	r3, [r3, #31]
 800273e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002740:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002748:	2a00      	cmp	r2, #0
 800274a:	d102      	bne.n	8002752 <ETH_SetMACConfig+0xae>
 800274c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002750:	e000      	b.n	8002754 <ETH_SetMACConfig+0xb0>
 8002752:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002754:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800275a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002762:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002764:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b57      	ldr	r3, [pc, #348]	; (80028d4 <ETH_SetMACConfig+0x230>)
 8002776:	4013      	ands	r3, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	430b      	orrs	r3, r1
 8002780:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800278e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002790:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002798:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800279a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80027a2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80027a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80027ac:	2a00      	cmp	r2, #0
 80027ae:	d102      	bne.n	80027b6 <ETH_SetMACConfig+0x112>
 80027b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027b4:	e000      	b.n	80027b8 <ETH_SetMACConfig+0x114>
 80027b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80027b8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <ETH_SetMACConfig+0x234>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	68f9      	ldr	r1, [r7, #12]
 80027d2:	430b      	orrs	r3, r1
 80027d4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027dc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	68f9      	ldr	r1, [r7, #12]
 80027fa:	430b      	orrs	r3, r1
 80027fc:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002804:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800280a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002812:	2a00      	cmp	r2, #0
 8002814:	d101      	bne.n	800281a <ETH_SetMACConfig+0x176>
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	e000      	b.n	800281c <ETH_SetMACConfig+0x178>
 800281a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800281c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002822:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800282e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002832:	4013      	ands	r3, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	68f9      	ldr	r1, [r7, #12]
 800283a:	430b      	orrs	r3, r1
 800283c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002844:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800284c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	f023 0103 	bic.w	r1, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	430a      	orrs	r2, r1
 8002866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002872:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800288e:	2a00      	cmp	r2, #0
 8002890:	d101      	bne.n	8002896 <ETH_SetMACConfig+0x1f2>
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	e000      	b.n	8002898 <ETH_SetMACConfig+0x1f4>
 8002896:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002898:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80028a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80028a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80028aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80028b8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	00048083 	.word	0x00048083
 80028d8:	c0f88000 	.word	0xc0f88000

080028dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80028f4:	f023 0302 	bic.w	r3, r3, #2
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	6811      	ldr	r1, [r2, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	430b      	orrs	r3, r1
 8002902:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002906:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	791b      	ldrb	r3, [r3, #4]
 800290c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002912:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	7b1b      	ldrb	r3, [r3, #12]
 8002918:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	430b      	orrs	r3, r1
 8002938:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800293c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	7b5b      	ldrb	r3, [r3, #13]
 8002942:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002954:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <ETH_SetDMAConfig+0x104>)
 800295a:	4013      	ands	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	68f9      	ldr	r1, [r7, #12]
 8002962:	430b      	orrs	r3, r1
 8002964:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002968:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	7d1b      	ldrb	r3, [r3, #20]
 8002974:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002976:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	7f5b      	ldrb	r3, [r3, #29]
 800297c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <ETH_SetDMAConfig+0x108>)
 8002990:	4013      	ands	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	68f9      	ldr	r1, [r7, #12]
 8002998:	430b      	orrs	r3, r1
 800299a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800299e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	7f1b      	ldrb	r3, [r3, #28]
 80029a6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029c0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	68f9      	ldr	r1, [r7, #12]
 80029ca:	430b      	orrs	r3, r1
 80029cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029d0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	fffec000 	.word	0xfffec000
 80029e4:	ffc0efef 	.word	0xffc0efef

080029e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b0a4      	sub	sp, #144	; 0x90
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029f6:	2300      	movs	r3, #0
 80029f8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a28:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002a40:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002a44:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002a62:	2300      	movs	r3, #0
 8002a64:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002a80:	2320      	movs	r3, #32
 8002a82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002a92:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a9c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fde6 	bl	80026a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002adc:	2301      	movs	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002af2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002af6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002afc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002b08:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b0e:	f107 0308 	add.w	r3, r7, #8
 8002b12:	4619      	mov	r1, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fee1 	bl	80028dc <ETH_SetDMAConfig>
}
 8002b1a:	bf00      	nop
 8002b1c:	3790      	adds	r7, #144	; 0x90
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e01d      	b.n	8002b6c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68d9      	ldr	r1, [r3, #12]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	3206      	adds	r2, #6
 8002b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d9de      	bls.n	8002b30 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b80:	461a      	mov	r2, r3
 8002b82:	2303      	movs	r3, #3
 8002b84:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b94:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e023      	b.n	8002c0a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6919      	ldr	r1, [r3, #16]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	3212      	adds	r2, #18
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3301      	adds	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d9d8      	bls.n	8002bc2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c36:	461a      	mov	r2, r3
 8002c38:	2303      	movs	r3, #3
 8002c3a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c7e:	e136      	b.n	8002eee <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8128 	beq.w	8002ee8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x38>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b12      	cmp	r3, #18
 8002ca6:	d125      	bne.n	8002cf4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	08da      	lsrs	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3208      	adds	r2, #8
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	08da      	lsrs	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3208      	adds	r2, #8
 8002cee:	6979      	ldr	r1, [r7, #20]
 8002cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0203 	and.w	r2, r3, #3
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d00b      	beq.n	8002d48 <HAL_GPIO_Init+0xd8>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d007      	beq.n	8002d48 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d3c:	2b11      	cmp	r3, #17
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b12      	cmp	r3, #18
 8002d46:	d130      	bne.n	8002daa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d7e:	2201      	movs	r2, #1
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 0201 	and.w	r2, r3, #1
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d017      	beq.n	8002de2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d07c      	beq.n	8002ee8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002dee:	4a47      	ldr	r2, [pc, #284]	; (8002f0c <HAL_GPIO_Init+0x29c>)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	3318      	adds	r3, #24
 8002df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfa:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0a9a      	lsrs	r2, r3, #10
 8002e16:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <HAL_GPIO_Init+0x2a0>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	f002 0203 	and.w	r2, r2, #3
 8002e20:	00d2      	lsls	r2, r2, #3
 8002e22:	4093      	lsls	r3, r2
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e2a:	4938      	ldr	r1, [pc, #224]	; (8002f0c <HAL_GPIO_Init+0x29c>)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3318      	adds	r3, #24
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002e38:	4b34      	ldr	r3, [pc, #208]	; (8002f0c <HAL_GPIO_Init+0x29c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4013      	ands	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002e5c:	4a2b      	ldr	r2, [pc, #172]	; (8002f0c <HAL_GPIO_Init+0x29c>)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_GPIO_Init+0x29c>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002e86:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <HAL_GPIO_Init+0x29c>)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <HAL_GPIO_Init+0x29c>)
 8002e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e92:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002eb2:	4a16      	ldr	r2, [pc, #88]	; (8002f0c <HAL_GPIO_Init+0x29c>)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002eba:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <HAL_GPIO_Init+0x29c>)
 8002ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <HAL_GPIO_Init+0x29c>)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3301      	adds	r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f47f aec1 	bne.w	8002c80 <HAL_GPIO_Init+0x10>
  }
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	44022000 	.word	0x44022000
 8002f10:	002f7f7f 	.word	0x002f7f7f

08002f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
 8002f20:	4613      	mov	r3, r2
 8002f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	041a      	lsls	r2, r3, #16
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	43d9      	mvns	r1, r3
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	400b      	ands	r3, r1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fdd8 	bl	8000b4c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d006      	beq.n	8002fb6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002fa8:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f807 	bl	8002fc4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	44022000 	.word	0x44022000

08002fc4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_ICACHE_Enable+0x1c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_ICACHE_Enable+0x1c>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40030400 	.word	0x40030400

08002ffc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	b08f      	sub	sp, #60	; 0x3c
 8003000:	af0a      	add	r7, sp, #40	; 0x28
 8003002:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0cd      	b.n	80031aa <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd ff96 	bl	8000f54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2203      	movs	r2, #3
 800302c:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f006 ffce 	bl	8009fd6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e03e      	b.n	80030be <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	333d      	adds	r3, #61	; 0x3d
 8003050:	2201      	movs	r2, #1
 8003052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	333c      	adds	r3, #60	; 0x3c
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	440b      	add	r3, r1
 8003076:	333f      	adds	r3, #63	; 0x3f
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	334c      	adds	r3, #76	; 0x4c
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	3350      	adds	r3, #80	; 0x50
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	3354      	adds	r3, #84	; 0x54
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	3301      	adds	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3bb      	bcc.n	8003040 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e044      	b.n	8003158 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	f203 137d 	addw	r3, r3, #381	; 0x17d
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	440b      	add	r3, r1
 8003108:	f203 137f 	addw	r3, r3, #383	; 0x17f
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	440b      	add	r3, r1
 800311e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	440b      	add	r3, r1
 8003134:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	440b      	add	r3, r1
 800314a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	3301      	adds	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	d3b5      	bcc.n	80030ce <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	687e      	ldr	r6, [r7, #4]
 800316a:	466d      	mov	r5, sp
 800316c:	f106 0410 	add.w	r4, r6, #16
 8003170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003178:	e894 0003 	ldmia.w	r4, {r0, r1}
 800317c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003180:	1d33      	adds	r3, r6, #4
 8003182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003184:	6838      	ldr	r0, [r7, #0]
 8003186:	f006 ff5e 	bl	800a046 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d102      	bne.n	80031a8 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f805 	bl	80031b2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	f043 0202 	orr.w	r2, r3, #2
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f000 bc28 	b.w	8003a5c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320c:	4b94      	ldr	r3, [pc, #592]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f003 0318 	and.w	r3, r3, #24
 8003214:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003216:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	d05b      	beq.n	80032e4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b08      	cmp	r3, #8
 8003230:	d005      	beq.n	800323e <HAL_RCC_OscConfig+0x46>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	2b18      	cmp	r3, #24
 8003236:	d114      	bne.n	8003262 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d111      	bne.n	8003262 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	f000 bc08 	b.w	8003a5c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800324c:	4b84      	ldr	r3, [pc, #528]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	4981      	ldr	r1, [pc, #516]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 800325c:	4313      	orrs	r3, r2
 800325e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003260:	e040      	b.n	80032e4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d023      	beq.n	80032b2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800326a:	4b7d      	ldr	r3, [pc, #500]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7c      	ldr	r2, [pc, #496]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe f843 	bl	8001300 <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800327e:	f7fe f83f 	bl	8001300 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e3e5      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003290:	4b73      	ldr	r3, [pc, #460]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800329c:	4b70      	ldr	r3, [pc, #448]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	496d      	ldr	r1, [pc, #436]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	618b      	str	r3, [r1, #24]
 80032b0:	e018      	b.n	80032e4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032b2:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6a      	ldr	r2, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80032b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fe f81f 	bl	8001300 <HAL_GetTick>
 80032c2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80032c6:	f7fe f81b 	bl	8001300 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e3c1      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80032d8:	4b61      	ldr	r3, [pc, #388]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80a0 	beq.w	8003432 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_OscConfig+0x10c>
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b18      	cmp	r3, #24
 80032fc:	d109      	bne.n	8003312 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 8092 	bne.w	8003432 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e3a4      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x132>
 800331c:	4b50      	ldr	r3, [pc, #320]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a4f      	ldr	r2, [pc, #316]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	e058      	b.n	80033dc <HAL_RCC_OscConfig+0x1e4>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d112      	bne.n	8003358 <HAL_RCC_OscConfig+0x160>
 8003332:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a4a      	ldr	r2, [pc, #296]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b48      	ldr	r3, [pc, #288]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a47      	ldr	r2, [pc, #284]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003344:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b45      	ldr	r3, [pc, #276]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a44      	ldr	r2, [pc, #272]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e041      	b.n	80033dc <HAL_RCC_OscConfig+0x1e4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003360:	d112      	bne.n	8003388 <HAL_RCC_OscConfig+0x190>
 8003362:	4b3f      	ldr	r3, [pc, #252]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a3e      	ldr	r2, [pc, #248]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b3c      	ldr	r3, [pc, #240]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a3b      	ldr	r2, [pc, #236]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003374:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b39      	ldr	r3, [pc, #228]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a38      	ldr	r2, [pc, #224]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e029      	b.n	80033dc <HAL_RCC_OscConfig+0x1e4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003390:	d112      	bne.n	80033b8 <HAL_RCC_OscConfig+0x1c0>
 8003392:	4b33      	ldr	r3, [pc, #204]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a32      	ldr	r2, [pc, #200]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	4b30      	ldr	r3, [pc, #192]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2f      	ldr	r2, [pc, #188]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80033a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a2c      	ldr	r2, [pc, #176]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e011      	b.n	80033dc <HAL_RCC_OscConfig+0x1e4>
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a28      	ldr	r2, [pc, #160]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b26      	ldr	r3, [pc, #152]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a25      	ldr	r2, [pc, #148]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b23      	ldr	r3, [pc, #140]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 80033d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80033da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fd ff8c 	bl	8001300 <HAL_GetTick>
 80033e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80033ec:	f7fd ff88 	bl	8001300 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e32e      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	4b18      	ldr	r3, [pc, #96]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x1f4>
 800340a:	e012      	b.n	8003432 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fd ff78 	bl	8001300 <HAL_GetTick>
 8003410:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003414:	f7fd ff74 	bl	8001300 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e31a      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_RCC_OscConfig+0x268>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 809a 	beq.w	8003574 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x25a>
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2b18      	cmp	r3, #24
 800344a:	d149      	bne.n	80034e0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d146      	bne.n	80034e0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e2fe      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
 800345e:	bf00      	nop
 8003460:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d11c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800346a:	4b9a      	ldr	r3, [pc, #616]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0218 	and.w	r2, r3, #24
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	429a      	cmp	r2, r3
 8003478:	d014      	beq.n	80034a4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800347a:	4b96      	ldr	r3, [pc, #600]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 0218 	bic.w	r2, r3, #24
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	4993      	ldr	r1, [pc, #588]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800348c:	f000 fdd0 	bl	8004030 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003490:	4b91      	ldr	r3, [pc, #580]	; (80036d8 <HAL_RCC_OscConfig+0x4e0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd fee9 	bl	800126c <HAL_InitTick>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e2db      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd ff2c 	bl	8001300 <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80034ac:	f7fd ff28 	bl	8001300 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e2ce      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034be:	4b85      	ldr	r3, [pc, #532]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80034ca:	4b82      	ldr	r3, [pc, #520]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	497e      	ldr	r1, [pc, #504]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80034de:	e049      	b.n	8003574 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02c      	beq.n	8003542 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80034e8:	4b7a      	ldr	r3, [pc, #488]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 0218 	bic.w	r2, r3, #24
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	4977      	ldr	r1, [pc, #476]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fd fefb 	bl	8001300 <HAL_GetTick>
 800350a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800350e:	f7fd fef7 	bl	8001300 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e29d      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003520:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800352c:	4b69      	ldr	r3, [pc, #420]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	4966      	ldr	r1, [pc, #408]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	610b      	str	r3, [r1, #16]
 8003540:	e018      	b.n	8003574 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003542:	4b64      	ldr	r3, [pc, #400]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a63      	ldr	r2, [pc, #396]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fd fed7 	bl	8001300 <HAL_GetTick>
 8003552:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003556:	f7fd fed3 	bl	8001300 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e279      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003568:	4b5a      	ldr	r3, [pc, #360]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f0      	bne.n	8003556 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d03c      	beq.n	80035fa <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01c      	beq.n	80035c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003588:	4b52      	ldr	r3, [pc, #328]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 800358a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800358e:	4a51      	ldr	r2, [pc, #324]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003594:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7fd feb2 	bl	8001300 <HAL_GetTick>
 800359c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80035a0:	f7fd feae 	bl	8001300 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e254      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80035b2:	4b48      	ldr	r3, [pc, #288]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80035b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ef      	beq.n	80035a0 <HAL_RCC_OscConfig+0x3a8>
 80035c0:	e01b      	b.n	80035fa <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c2:	4b44      	ldr	r3, [pc, #272]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80035c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035c8:	4a42      	ldr	r2, [pc, #264]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80035ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7fd fe95 	bl	8001300 <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80035da:	f7fd fe91 	bl	8001300 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e237      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80035ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1ef      	bne.n	80035da <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80d2 	beq.w	80037ac <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003608:	4b34      	ldr	r3, [pc, #208]	; (80036dc <HAL_RCC_OscConfig+0x4e4>)
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d118      	bne.n	8003646 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003614:	4b31      	ldr	r3, [pc, #196]	; (80036dc <HAL_RCC_OscConfig+0x4e4>)
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	4a30      	ldr	r2, [pc, #192]	; (80036dc <HAL_RCC_OscConfig+0x4e4>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003620:	f7fd fe6e 	bl	8001300 <HAL_GetTick>
 8003624:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003628:	f7fd fe6a 	bl	8001300 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e210      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800363a:	4b28      	ldr	r3, [pc, #160]	; (80036dc <HAL_RCC_OscConfig+0x4e4>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d108      	bne.n	8003660 <HAL_RCC_OscConfig+0x468>
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003654:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800365e:	e074      	b.n	800374a <HAL_RCC_OscConfig+0x552>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d118      	bne.n	800369a <HAL_RCC_OscConfig+0x4a2>
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 800366a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800366e:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 800367a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003684:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 800368a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800368e:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 8003690:	f023 0304 	bic.w	r3, r3, #4
 8003694:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003698:	e057      	b.n	800374a <HAL_RCC_OscConfig+0x552>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d11e      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4e8>
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80036a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80036aa:	f043 0304 	orr.w	r3, r3, #4
 80036ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80036b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036b8:	4a06      	ldr	r2, [pc, #24]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80036ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80036c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036c8:	4a02      	ldr	r2, [pc, #8]	; (80036d4 <HAL_RCC_OscConfig+0x4dc>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036d2:	e03a      	b.n	800374a <HAL_RCC_OscConfig+0x552>
 80036d4:	44020c00 	.word	0x44020c00
 80036d8:	20000004 	.word	0x20000004
 80036dc:	44020800 	.word	0x44020800
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b85      	cmp	r3, #133	; 0x85
 80036e6:	d118      	bne.n	800371a <HAL_RCC_OscConfig+0x522>
 80036e8:	4ba2      	ldr	r3, [pc, #648]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80036ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036ee:	4aa1      	ldr	r2, [pc, #644]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036f8:	4b9e      	ldr	r3, [pc, #632]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80036fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036fe:	4a9d      	ldr	r2, [pc, #628]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003704:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003708:	4b9a      	ldr	r3, [pc, #616]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 800370a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800370e:	4a99      	ldr	r2, [pc, #612]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003718:	e017      	b.n	800374a <HAL_RCC_OscConfig+0x552>
 800371a:	4b96      	ldr	r3, [pc, #600]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 800371c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003720:	4a94      	ldr	r2, [pc, #592]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800372a:	4b92      	ldr	r3, [pc, #584]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 800372c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003730:	4a90      	ldr	r2, [pc, #576]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003732:	f023 0304 	bic.w	r3, r3, #4
 8003736:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800373a:	4b8e      	ldr	r3, [pc, #568]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 800373c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003740:	4a8c      	ldr	r2, [pc, #560]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003746:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d016      	beq.n	8003780 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fd fdd5 	bl	8001300 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fd fdd1 	bl	8001300 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e175      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003770:	4b80      	ldr	r3, [pc, #512]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0ed      	beq.n	800375a <HAL_RCC_OscConfig+0x562>
 800377e:	e015      	b.n	80037ac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd fdbe 	bl	8001300 <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003786:	e00a      	b.n	800379e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fd fdba 	bl	8001300 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e15e      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800379e:	4b75      	ldr	r3, [pc, #468]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80037a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ed      	bne.n	8003788 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d036      	beq.n	8003826 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d019      	beq.n	80037f4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037c0:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a6b      	ldr	r2, [pc, #428]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80037c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fd fd98 	bl	8001300 <HAL_GetTick>
 80037d0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80037d4:	f7fd fd94 	bl	8001300 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e13a      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80037e6:	4b63      	ldr	r3, [pc, #396]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x5dc>
 80037f2:	e018      	b.n	8003826 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037f4:	4b5f      	ldr	r3, [pc, #380]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a5e      	ldr	r2, [pc, #376]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80037fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fd fd7e 	bl	8001300 <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003808:	f7fd fd7a 	bl	8001300 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e120      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800381a:	4b56      	ldr	r3, [pc, #344]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8115 	beq.w	8003a5a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b18      	cmp	r3, #24
 8003834:	f000 80af 	beq.w	8003996 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	2b02      	cmp	r3, #2
 800383e:	f040 8086 	bne.w	800394e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003842:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800384c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384e:	f7fd fd57 	bl	8001300 <HAL_GetTick>
 8003852:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003856:	f7fd fd53 	bl	8001300 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e0f9      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003868:	4b42      	ldr	r3, [pc, #264]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f0      	bne.n	8003856 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003874:	4b3f      	ldr	r3, [pc, #252]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800387c:	f023 0303 	bic.w	r3, r3, #3
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003888:	0212      	lsls	r2, r2, #8
 800388a:	430a      	orrs	r2, r1
 800388c:	4939      	ldr	r1, [pc, #228]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	628b      	str	r3, [r1, #40]	; 0x28
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	3b01      	subs	r3, #1
 8003898:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	3b01      	subs	r3, #1
 80038a2:	025b      	lsls	r3, r3, #9
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	3b01      	subs	r3, #1
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038c2:	492c      	ldr	r1, [pc, #176]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80038c8:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	4a29      	ldr	r2, [pc, #164]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80038ce:	f023 0310 	bic.w	r3, r3, #16
 80038d2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80038de:	4b25      	ldr	r3, [pc, #148]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	4a24      	ldr	r2, [pc, #144]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80038e4:	f043 0310 	orr.w	r3, r3, #16
 80038e8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80038ea:	4b22      	ldr	r3, [pc, #136]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	f023 020c 	bic.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	491f      	ldr	r1, [pc, #124]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	f023 0220 	bic.w	r2, r3, #32
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003908:	491a      	ldr	r1, [pc, #104]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 800390a:	4313      	orrs	r3, r2
 800390c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003918:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a15      	ldr	r2, [pc, #84]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fd fceb 	bl	8001300 <HAL_GetTick>
 800392a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800392e:	f7fd fce7 	bl	8001300 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e08d      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x736>
 800394c:	e085      	b.n	8003a5a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <HAL_RCC_OscConfig+0x77c>)
 8003954:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fd fcd1 	bl	8001300 <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003960:	e00a      	b.n	8003978 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003962:	f7fd fccd 	bl	8001300 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d903      	bls.n	8003978 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e073      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
 8003974:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003978:	4b3a      	ldr	r3, [pc, #232]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ee      	bne.n	8003962 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003984:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	4a36      	ldr	r2, [pc, #216]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 800398a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800398e:	f023 0303 	bic.w	r3, r3, #3
 8003992:	6293      	str	r3, [r2, #40]	; 0x28
 8003994:	e061      	b.n	8003a5a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003996:	4b33      	ldr	r3, [pc, #204]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800399c:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 800399e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d031      	beq.n	8003a0e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d12a      	bne.n	8003a0e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d122      	bne.n	8003a0e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d11a      	bne.n	8003a0e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	0a5b      	lsrs	r3, r3, #9
 80039dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d111      	bne.n	8003a0e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d108      	bne.n	8003a0e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	0e1b      	lsrs	r3, r3, #24
 8003a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e024      	b.n	8003a5c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a12:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	08db      	lsrs	r3, r3, #3
 8003a18:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d01a      	beq.n	8003a5a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 8003a2a:	f023 0310 	bic.w	r3, r3, #16
 8003a2e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fc66 	bl	8001300 <HAL_GetTick>
 8003a34:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003a36:	bf00      	nop
 8003a38:	f7fd fc62 	bl	8001300 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d0f9      	beq.n	8003a38 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	4a06      	ldr	r2, [pc, #24]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_RCC_OscConfig+0x86c>)
 8003a54:	f043 0310 	orr.w	r3, r3, #16
 8003a58:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	44020c00 	.word	0x44020c00

08003a68 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e19e      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b83      	ldr	r3, [pc, #524]	; (8003c8c <HAL_RCC_ClockConfig+0x224>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d910      	bls.n	8003aac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b80      	ldr	r3, [pc, #512]	; (8003c8c <HAL_RCC_ClockConfig+0x224>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 020f 	bic.w	r2, r3, #15
 8003a92:	497e      	ldr	r1, [pc, #504]	; (8003c8c <HAL_RCC_ClockConfig+0x224>)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b7c      	ldr	r3, [pc, #496]	; (8003c8c <HAL_RCC_ClockConfig+0x224>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e186      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d012      	beq.n	8003ade <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	4b74      	ldr	r3, [pc, #464]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d909      	bls.n	8003ade <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003aca:	4b71      	ldr	r3, [pc, #452]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	496d      	ldr	r1, [pc, #436]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d012      	beq.n	8003b10 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d909      	bls.n	8003b10 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003afc:	4b64      	ldr	r3, [pc, #400]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	4961      	ldr	r1, [pc, #388]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d010      	beq.n	8003b3e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d908      	bls.n	8003b3e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003b2c:	4b58      	ldr	r3, [pc, #352]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4955      	ldr	r1, [pc, #340]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d010      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	4b50      	ldr	r3, [pc, #320]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d908      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003b5a:	4b4d      	ldr	r3, [pc, #308]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f023 020f 	bic.w	r2, r3, #15
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	494a      	ldr	r1, [pc, #296]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8093 	beq.w	8003ca0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b82:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d121      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e113      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d115      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e107      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003bb2:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0fb      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc2:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e0f3      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003bd2:	4b2f      	ldr	r3, [pc, #188]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f023 0203 	bic.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	492c      	ldr	r1, [pc, #176]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be4:	f7fd fb8c 	bl	8001300 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d112      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf4:	f7fd fb84 	bl	8001300 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e0d7      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c0a:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 0318 	and.w	r3, r3, #24
 8003c12:	2b18      	cmp	r3, #24
 8003c14:	d1ee      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x18c>
 8003c16:	e043      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d112      	bne.n	8003c46 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c22:	f7fd fb6d 	bl	8001300 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0c0      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f003 0318 	and.w	r3, r3, #24
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d1ee      	bne.n	8003c22 <HAL_RCC_ClockConfig+0x1ba>
 8003c44:	e02c      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d122      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c50:	f7fd fb56 	bl	8001300 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0a9      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_RCC_ClockConfig+0x228>)
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 0318 	and.w	r3, r3, #24
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d1ee      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x1e8>
 8003c72:	e015      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c74:	f7fd fb44 	bl	8001300 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d906      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e097      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
 8003c8a:	bf00      	nop
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c94:	4b4b      	ldr	r3, [pc, #300]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f003 0318 	and.w	r3, r3, #24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e9      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d010      	beq.n	8003cce <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	4b44      	ldr	r3, [pc, #272]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d208      	bcs.n	8003cce <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003cbc:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f023 020f 	bic.w	r2, r3, #15
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	493e      	ldr	r1, [pc, #248]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cce:	4b3e      	ldr	r3, [pc, #248]	; (8003dc8 <HAL_RCC_ClockConfig+0x360>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d210      	bcs.n	8003cfe <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cdc:	4b3a      	ldr	r3, [pc, #232]	; (8003dc8 <HAL_RCC_ClockConfig+0x360>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 020f 	bic.w	r2, r3, #15
 8003ce4:	4938      	ldr	r1, [pc, #224]	; (8003dc8 <HAL_RCC_ClockConfig+0x360>)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cec:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <HAL_RCC_ClockConfig+0x360>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e05d      	b.n	8003dba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d010      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	4b2d      	ldr	r3, [pc, #180]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d208      	bcs.n	8003d2c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003d1a:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4927      	ldr	r1, [pc, #156]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d012      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d209      	bcs.n	8003d5e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	491a      	ldr	r1, [pc, #104]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d012      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	0a1b      	lsrs	r3, r3, #8
 8003d74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d209      	bcs.n	8003d90 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003d90:	f000 f822 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_ClockConfig+0x35c>)
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	490b      	ldr	r1, [pc, #44]	; (8003dcc <HAL_RCC_ClockConfig+0x364>)
 8003da0:	5ccb      	ldrb	r3, [r1, r3]
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x368>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x36c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd fa5c 	bl	800126c <HAL_InitTick>
 8003db4:	4603      	mov	r3, r0
 8003db6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003db8:	7afb      	ldrb	r3, [r7, #11]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	44020c00 	.word	0x44020c00
 8003dc8:	40022000 	.word	0x40022000
 8003dcc:	0800a0fc 	.word	0x0800a0fc
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	20000004 	.word	0x20000004

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003dde:	4b8c      	ldr	r3, [pc, #560]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f003 0318 	and.w	r3, r3, #24
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d102      	bne.n	8003df0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003dea:	4b8a      	ldr	r3, [pc, #552]	; (8004014 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	e107      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003df0:	4b87      	ldr	r3, [pc, #540]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 0318 	and.w	r3, r3, #24
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d112      	bne.n	8003e22 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003dfc:	4b84      	ldr	r3, [pc, #528]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d009      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e08:	4b81      	ldr	r3, [pc, #516]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	08db      	lsrs	r3, r3, #3
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	4a81      	ldr	r2, [pc, #516]	; (8004018 <HAL_RCC_GetSysClockFreq+0x240>)
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	e0f1      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003e1c:	4b7e      	ldr	r3, [pc, #504]	; (8004018 <HAL_RCC_GetSysClockFreq+0x240>)
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e0ee      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e22:	4b7b      	ldr	r3, [pc, #492]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0318 	and.w	r3, r3, #24
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d102      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e2e:	4b7b      	ldr	r3, [pc, #492]	; (800401c <HAL_RCC_GetSysClockFreq+0x244>)
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	e0e5      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e34:	4b76      	ldr	r3, [pc, #472]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 0318 	and.w	r3, r3, #24
 8003e3c:	2b18      	cmp	r3, #24
 8003e3e:	f040 80dd 	bne.w	8003ffc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003e42:	4b73      	ldr	r3, [pc, #460]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003e4c:	4b70      	ldr	r3, [pc, #448]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	0a1b      	lsrs	r3, r3, #8
 8003e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003e58:	4b6d      	ldr	r3, [pc, #436]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003e64:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003e68:	08db      	lsrs	r3, r3, #3
 8003e6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80b7 	beq.w	8003ff6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCC_GetSysClockFreq+0xbe>
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d056      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x16a>
 8003e94:	e077      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003e96:	4b5e      	ldr	r3, [pc, #376]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02d      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ea2:	4b5b      	ldr	r3, [pc, #364]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	08db      	lsrs	r3, r3, #3
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	4a5a      	ldr	r2, [pc, #360]	; (8004018 <HAL_RCC_GetSysClockFreq+0x240>)
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	ee07 3a90 	vmov	s15, r3
 8003ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ecc:	4b50      	ldr	r3, [pc, #320]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003edc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ee0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004020 <HAL_RCC_GetSysClockFreq+0x248>
 8003ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003eec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003efc:	e065      	b.n	8003fca <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	ee07 3a90 	vmov	s15, r3
 8003f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f08:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004024 <HAL_RCC_GetSysClockFreq+0x24c>
 8003f0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f10:	4b3f      	ldr	r3, [pc, #252]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f18:	ee07 3a90 	vmov	s15, r3
 8003f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f20:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f24:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004020 <HAL_RCC_GetSysClockFreq+0x248>
 8003f28:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003f40:	e043      	b.n	8003fca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	ee07 3a90 	vmov	s15, r3
 8003f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004028 <HAL_RCC_GetSysClockFreq+0x250>
 8003f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f54:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5c:	ee07 3a90 	vmov	s15, r3
 8003f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f64:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f68:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004020 <HAL_RCC_GetSysClockFreq+0x248>
 8003f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f80:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003f84:	e021      	b.n	8003fca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	ee07 3a90 	vmov	s15, r3
 8003f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f90:	eddf 6a26 	vldr	s13, [pc, #152]	; 800402c <HAL_RCC_GetSysClockFreq+0x254>
 8003f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fac:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004020 <HAL_RCC_GetSysClockFreq+0x248>
 8003fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003fc8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fce:	0a5b      	lsrs	r3, r3, #9
 8003fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fe2:	edd7 6a06 	vldr	s13, [r7, #24]
 8003fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fee:	ee17 3a90 	vmov	r3, s15
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	e004      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	e001      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_GetSysClockFreq+0x240>)
 8003ffe:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004000:	69fb      	ldr	r3, [r7, #28]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3724      	adds	r7, #36	; 0x24
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	44020c00 	.word	0x44020c00
 8004014:	003d0900 	.word	0x003d0900
 8004018:	03d09000 	.word	0x03d09000
 800401c:	007a1200 	.word	0x007a1200
 8004020:	46000000 	.word	0x46000000
 8004024:	4c742400 	.word	0x4c742400
 8004028:	4af42400 	.word	0x4af42400
 800402c:	4a742400 	.word	0x4a742400

08004030 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004034:	f7ff fed0 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_RCC_GetHCLKFreq+0x2c>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800403e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004042:	4907      	ldr	r1, [pc, #28]	; (8004060 <HAL_RCC_GetHCLKFreq+0x30>)
 8004044:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004046:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800404a:	fa22 f303 	lsr.w	r3, r2, r3
 800404e:	4a05      	ldr	r2, [pc, #20]	; (8004064 <HAL_RCC_GetHCLKFreq+0x34>)
 8004050:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <HAL_RCC_GetHCLKFreq+0x34>)
 8004054:	681b      	ldr	r3, [r3, #0]
}
 8004056:	4618      	mov	r0, r3
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	44020c00 	.word	0x44020c00
 8004060:	0800a0fc 	.word	0x0800a0fc
 8004064:	20000000 	.word	0x20000000

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800406c:	f7ff ffe0 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4904      	ldr	r1, [pc, #16]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	44020c00 	.word	0x44020c00
 8004090:	0800a10c 	.word	0x0800a10c

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004098:	f7ff ffca 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4904      	ldr	r1, [pc, #16]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	44020c00 	.word	0x44020c00
 80040bc:	0800a10c 	.word	0x0800a10c

080040c0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80040c4:	f7ff ffb4 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	0b1b      	lsrs	r3, r3, #12
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4904      	ldr	r1, [pc, #16]	; (80040e8 <HAL_RCC_GetPCLK3Freq+0x28>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	44020c00 	.word	0x44020c00
 80040e8:	0800a10c 	.word	0x0800a10c

080040ec <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80040ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f0:	b0d8      	sub	sp, #352	; 0x160
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8004110:	2500      	movs	r5, #0
 8004112:	ea54 0305 	orrs.w	r3, r4, r5
 8004116:	d00b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004118:	4bcd      	ldr	r3, [pc, #820]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800411a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800411e:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8004122:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	4ac9      	ldr	r2, [pc, #804]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800412a:	430b      	orrs	r3, r1
 800412c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004130:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	f002 0801 	and.w	r8, r2, #1
 800413c:	f04f 0900 	mov.w	r9, #0
 8004140:	ea58 0309 	orrs.w	r3, r8, r9
 8004144:	d042      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004146:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800414a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414c:	2b05      	cmp	r3, #5
 800414e:	d823      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004150:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	080041a1 	.word	0x080041a1
 800415c:	08004171 	.word	0x08004171
 8004160:	08004185 	.word	0x08004185
 8004164:	080041a1 	.word	0x080041a1
 8004168:	080041a1 	.word	0x080041a1
 800416c:	080041a1 	.word	0x080041a1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004170:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004174:	3308      	adds	r3, #8
 8004176:	4618      	mov	r0, r3
 8004178:	f004 feda 	bl	8008f30 <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004182:	e00e      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004188:	3330      	adds	r3, #48	; 0x30
 800418a:	4618      	mov	r0, r3
 800418c:	f004 ff68 	bl	8009060 <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80041a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80041aa:	4ba9      	ldr	r3, [pc, #676]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80041b0:	f023 0107 	bic.w	r1, r3, #7
 80041b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	4aa5      	ldr	r2, [pc, #660]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041bc:	430b      	orrs	r3, r1
 80041be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80041c2:	e003      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041c8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f002 0a02 	and.w	sl, r2, #2
 80041d8:	f04f 0b00 	mov.w	fp, #0
 80041dc:	ea5a 030b 	orrs.w	r3, sl, fp
 80041e0:	f000 8088 	beq.w	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80041e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	2b28      	cmp	r3, #40	; 0x28
 80041ec:	d868      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80041ee:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	080042c9 	.word	0x080042c9
 80041f8:	080042c1 	.word	0x080042c1
 80041fc:	080042c1 	.word	0x080042c1
 8004200:	080042c1 	.word	0x080042c1
 8004204:	080042c1 	.word	0x080042c1
 8004208:	080042c1 	.word	0x080042c1
 800420c:	080042c1 	.word	0x080042c1
 8004210:	080042c1 	.word	0x080042c1
 8004214:	08004299 	.word	0x08004299
 8004218:	080042c1 	.word	0x080042c1
 800421c:	080042c1 	.word	0x080042c1
 8004220:	080042c1 	.word	0x080042c1
 8004224:	080042c1 	.word	0x080042c1
 8004228:	080042c1 	.word	0x080042c1
 800422c:	080042c1 	.word	0x080042c1
 8004230:	080042c1 	.word	0x080042c1
 8004234:	080042ad 	.word	0x080042ad
 8004238:	080042c1 	.word	0x080042c1
 800423c:	080042c1 	.word	0x080042c1
 8004240:	080042c1 	.word	0x080042c1
 8004244:	080042c1 	.word	0x080042c1
 8004248:	080042c1 	.word	0x080042c1
 800424c:	080042c1 	.word	0x080042c1
 8004250:	080042c1 	.word	0x080042c1
 8004254:	080042c9 	.word	0x080042c9
 8004258:	080042c1 	.word	0x080042c1
 800425c:	080042c1 	.word	0x080042c1
 8004260:	080042c1 	.word	0x080042c1
 8004264:	080042c1 	.word	0x080042c1
 8004268:	080042c1 	.word	0x080042c1
 800426c:	080042c1 	.word	0x080042c1
 8004270:	080042c1 	.word	0x080042c1
 8004274:	080042c9 	.word	0x080042c9
 8004278:	080042c1 	.word	0x080042c1
 800427c:	080042c1 	.word	0x080042c1
 8004280:	080042c1 	.word	0x080042c1
 8004284:	080042c1 	.word	0x080042c1
 8004288:	080042c1 	.word	0x080042c1
 800428c:	080042c1 	.word	0x080042c1
 8004290:	080042c1 	.word	0x080042c1
 8004294:	080042c9 	.word	0x080042c9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800429c:	3308      	adds	r3, #8
 800429e:	4618      	mov	r0, r3
 80042a0:	f004 fe46 	bl	8008f30 <RCCEx_PLL2_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80042aa:	e00e      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042b0:	3330      	adds	r3, #48	; 0x30
 80042b2:	4618      	mov	r0, r3
 80042b4:	f004 fed4 	bl	8009060 <RCCEx_PLL3_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80042be:	e004      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042c6:	e000      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80042c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10c      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80042d2:	4b5f      	ldr	r3, [pc, #380]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80042d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80042d8:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80042dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	4a5b      	ldr	r2, [pc, #364]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80042e4:	430b      	orrs	r3, r1
 80042e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80042ea:	e003      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	f002 0304 	and.w	r3, r2, #4
 8004300:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800430a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d04e      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004314:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800431e:	d02c      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004320:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004324:	d825      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432a:	d028      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800432c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004330:	d81f      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004332:	2bc0      	cmp	r3, #192	; 0xc0
 8004334:	d025      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004336:	2bc0      	cmp	r3, #192	; 0xc0
 8004338:	d81b      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800433a:	2b80      	cmp	r3, #128	; 0x80
 800433c:	d00f      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	d817      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01f      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	d113      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800434a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800434e:	3308      	adds	r3, #8
 8004350:	4618      	mov	r0, r3
 8004352:	f004 fded 	bl	8008f30 <RCCEx_PLL2_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800435c:	e014      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800435e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004362:	3330      	adds	r3, #48	; 0x30
 8004364:	4618      	mov	r0, r3
 8004366:	f004 fe7b 	bl	8009060 <RCCEx_PLL3_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004370:	e00a      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004378:	e006      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800437a:	bf00      	nop
 800437c:	e004      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800437e:	bf00      	nop
 8004380:	e002      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004388:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10c      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004390:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004392:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004396:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800439a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800439e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a0:	4a2b      	ldr	r2, [pc, #172]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80043a2:	430b      	orrs	r3, r1
 80043a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f002 0308 	and.w	r3, r2, #8
 80043be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80043c8:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d056      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80043d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80043dc:	d031      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80043de:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80043e2:	d82a      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80043e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e8:	d02d      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80043ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ee:	d824      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80043f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043f4:	d029      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80043f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043fa:	d81e      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004400:	d011      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d818      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d023      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800440c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004410:	d113      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004412:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004416:	3308      	adds	r3, #8
 8004418:	4618      	mov	r0, r3
 800441a:	f004 fd89 	bl	8008f30 <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004424:	e017      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004426:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800442a:	3330      	adds	r3, #48	; 0x30
 800442c:	4618      	mov	r0, r3
 800442e:	f004 fe17 	bl	8009060 <RCCEx_PLL3_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004438:	e00d      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004440:	e009      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004442:	bf00      	nop
 8004444:	e007      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004446:	bf00      	nop
 8004448:	e005      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800444a:	bf00      	nop
 800444c:	e003      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800444e:	bf00      	nop
 8004450:	44020c00 	.word	0x44020c00
        break;
 8004454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004456:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800445e:	4bbb      	ldr	r3, [pc, #748]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004460:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004464:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004468:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800446c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800446e:	4ab7      	ldr	r2, [pc, #732]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004470:	430b      	orrs	r3, r1
 8004472:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800447c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f002 0310 	and.w	r3, r2, #16
 800448c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004496:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d053      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80044a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80044aa:	d031      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80044ac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80044b0:	d82a      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80044b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b6:	d02d      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80044b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044bc:	d824      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80044be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044c2:	d029      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80044c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044c8:	d81e      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80044ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ce:	d011      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80044d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d4:	d818      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d020      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x430>
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044de:	d113      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044e4:	3308      	adds	r3, #8
 80044e6:	4618      	mov	r0, r3
 80044e8:	f004 fd22 	bl	8008f30 <RCCEx_PLL2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80044f2:	e014      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044f8:	3330      	adds	r3, #48	; 0x30
 80044fa:	4618      	mov	r0, r3
 80044fc:	f004 fdb0 	bl	8009060 <RCCEx_PLL3_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004506:	e00a      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800450e:	e006      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004510:	bf00      	nop
 8004512:	e004      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004514:	bf00      	nop
 8004516:	e002      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004518:	bf00      	nop
 800451a:	e000      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800451c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10c      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004526:	4b89      	ldr	r3, [pc, #548]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800452c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004530:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004536:	4a85      	ldr	r2, [pc, #532]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004538:	430b      	orrs	r3, r1
 800453a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800453e:	e003      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004544:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f002 0320 	and.w	r3, r2, #32
 8004554:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004558:	2300      	movs	r3, #0
 800455a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800455e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8004562:	460b      	mov	r3, r1
 8004564:	4313      	orrs	r3, r2
 8004566:	d053      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004568:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004572:	d031      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004574:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004578:	d82a      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800457a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800457e:	d02d      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004584:	d824      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004586:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800458a:	d029      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800458c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004590:	d81e      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004596:	d011      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d818      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d020      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a6:	d113      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045ac:	3308      	adds	r3, #8
 80045ae:	4618      	mov	r0, r3
 80045b0:	f004 fcbe 	bl	8008f30 <RCCEx_PLL2_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80045ba:	e014      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045c0:	3330      	adds	r3, #48	; 0x30
 80045c2:	4618      	mov	r0, r3
 80045c4:	f004 fd4c 	bl	8009060 <RCCEx_PLL3_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80045ce:	e00a      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045d6:	e006      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80045d8:	bf00      	nop
 80045da:	e004      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80045dc:	bf00      	nop
 80045de:	e002      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80045e0:	bf00      	nop
 80045e2:	e000      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80045e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10c      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80045ee:	4b57      	ldr	r3, [pc, #348]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80045f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80045f4:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 80045f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a53      	ldr	r2, [pc, #332]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004600:	430b      	orrs	r3, r1
 8004602:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004606:	e003      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800460c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004610:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800461c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004620:	2300      	movs	r3, #0
 8004622:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004626:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800462a:	460b      	mov	r3, r1
 800462c:	4313      	orrs	r3, r2
 800462e:	d053      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004630:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004636:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800463a:	d031      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800463c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004640:	d82a      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004646:	d02d      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464c:	d824      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800464e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004652:	d029      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004654:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004658:	d81e      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800465a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800465e:	d011      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004660:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004664:	d818      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d020      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800466a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800466e:	d113      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004670:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004674:	3308      	adds	r3, #8
 8004676:	4618      	mov	r0, r3
 8004678:	f004 fc5a 	bl	8008f30 <RCCEx_PLL2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004682:	e014      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004684:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004688:	3330      	adds	r3, #48	; 0x30
 800468a:	4618      	mov	r0, r3
 800468c:	f004 fce8 	bl	8009060 <RCCEx_PLL3_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004696:	e00a      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800469e:	e006      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80046a0:	bf00      	nop
 80046a2:	e004      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80046a4:	bf00      	nop
 80046a6:	e002      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80046ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80046b6:	4b25      	ldr	r3, [pc, #148]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80046b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046bc:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80046c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c6:	4a21      	ldr	r2, [pc, #132]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80046c8:	430b      	orrs	r3, r1
 80046ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80046ce:	e003      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046d4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80046e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80046e8:	2300      	movs	r3, #0
 80046ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046ee:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80046f2:	460b      	mov	r3, r1
 80046f4:	4313      	orrs	r3, r2
 80046f6:	d055      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80046f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046fe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004702:	d033      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004704:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004708:	d82c      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800470a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800470e:	d02f      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004710:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004714:	d826      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004716:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800471a:	d02b      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800471c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004720:	d820      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004726:	d013      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800472c:	d81a      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d022      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004732:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004736:	d115      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004738:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800473c:	3308      	adds	r3, #8
 800473e:	4618      	mov	r0, r3
 8004740:	f004 fbf6 	bl	8008f30 <RCCEx_PLL2_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800474a:	e016      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800474c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004750:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004754:	3330      	adds	r3, #48	; 0x30
 8004756:	4618      	mov	r0, r3
 8004758:	f004 fc82 	bl	8009060 <RCCEx_PLL3_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004762:	e00a      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800476a:	e006      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800476c:	bf00      	nop
 800476e:	e004      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004770:	bf00      	nop
 8004772:	e002      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8004782:	4bbb      	ldr	r3, [pc, #748]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004788:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800478c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004792:	4ab7      	ldr	r2, [pc, #732]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004794:	430b      	orrs	r3, r1
 8004796:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800479a:	e003      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047a0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80047a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80047b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80047ba:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d053      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80047c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80047ce:	d031      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80047d0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80047d4:	d82a      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x740>
 80047d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047da:	d02d      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80047dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e0:	d824      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x740>
 80047e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047e6:	d029      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x750>
 80047e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047ec:	d81e      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x740>
 80047ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f2:	d011      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80047f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f8:	d818      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x740>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d020      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80047fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004802:	d113      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004804:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004808:	3308      	adds	r3, #8
 800480a:	4618      	mov	r0, r3
 800480c:	f004 fb90 	bl	8008f30 <RCCEx_PLL2_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004816:	e014      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004818:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800481c:	3330      	adds	r3, #48	; 0x30
 800481e:	4618      	mov	r0, r3
 8004820:	f004 fc1e 	bl	8009060 <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800482a:	e00a      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004832:	e006      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004834:	bf00      	nop
 8004836:	e004      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004838:	bf00      	nop
 800483a:	e002      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800483c:	bf00      	nop
 800483e:	e000      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004842:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10c      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800484a:	4b89      	ldr	r3, [pc, #548]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800484c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004850:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004854:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485a:	4a85      	ldr	r2, [pc, #532]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800485c:	430b      	orrs	r3, r1
 800485e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004862:	e003      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004868:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800486c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004878:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800487c:	2300      	movs	r3, #0
 800487e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004882:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004886:	460b      	mov	r3, r1
 8004888:	4313      	orrs	r3, r2
 800488a:	d055      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800488c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004894:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004898:	d031      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x812>
 800489a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800489e:	d82a      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80048a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a4:	d02d      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80048a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048aa:	d824      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80048ac:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80048b0:	d029      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80048b2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80048b6:	d81e      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80048b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048bc:	d011      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80048be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048c2:	d818      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d020      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80048c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048cc:	d113      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048d2:	3308      	adds	r3, #8
 80048d4:	4618      	mov	r0, r3
 80048d6:	f004 fb2b 	bl	8008f30 <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80048e0:	e014      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048e6:	3330      	adds	r3, #48	; 0x30
 80048e8:	4618      	mov	r0, r3
 80048ea:	f004 fbb9 	bl	8009060 <RCCEx_PLL3_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80048f4:	e00a      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048fc:	e006      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80048fe:	bf00      	nop
 8004900:	e004      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004902:	bf00      	nop
 8004904:	e002      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004906:	bf00      	nop
 8004908:	e000      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800490a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10d      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004914:	4b56      	ldr	r3, [pc, #344]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004916:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800491a:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 800491e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004926:	4a52      	ldr	r2, [pc, #328]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004928:	430b      	orrs	r3, r1
 800492a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800492e:	e003      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004934:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004938:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004944:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800494e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	d044      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004958:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800495c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004960:	2b05      	cmp	r3, #5
 8004962:	d823      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004964:	a201      	add	r2, pc, #4	; (adr r2, 800496c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	080049b5 	.word	0x080049b5
 8004970:	08004985 	.word	0x08004985
 8004974:	08004999 	.word	0x08004999
 8004978:	080049b5 	.word	0x080049b5
 800497c:	080049b5 	.word	0x080049b5
 8004980:	080049b5 	.word	0x080049b5
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004984:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004988:	3308      	adds	r3, #8
 800498a:	4618      	mov	r0, r3
 800498c:	f004 fad0 	bl	8008f30 <RCCEx_PLL2_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004996:	e00e      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004998:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800499c:	3330      	adds	r3, #48	; 0x30
 800499e:	4618      	mov	r0, r3
 80049a0:	f004 fb5e 	bl	8009060 <RCCEx_PLL3_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80049aa:	e004      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80049b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10d      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80049be:	4b2c      	ldr	r3, [pc, #176]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80049c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80049c4:	f023 0107 	bic.w	r1, r3, #7
 80049c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d0:	4a27      	ldr	r2, [pc, #156]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80049d2:	430b      	orrs	r3, r1
 80049d4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80049d8:	e003      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80049e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80049ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049f2:	2300      	movs	r3, #0
 80049f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049f8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80049fc:	460b      	mov	r3, r1
 80049fe:	4313      	orrs	r3, r2
 8004a00:	d04f      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004a02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	2b50      	cmp	r3, #80	; 0x50
 8004a0c:	d029      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004a0e:	2b50      	cmp	r3, #80	; 0x50
 8004a10:	d823      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d027      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d81f      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004a1a:	2b30      	cmp	r3, #48	; 0x30
 8004a1c:	d025      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004a1e:	2b30      	cmp	r3, #48	; 0x30
 8004a20:	d81b      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d00f      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d817      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d022      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d113      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a36:	3308      	adds	r3, #8
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f004 fa79 	bl	8008f30 <RCCEx_PLL2_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004a44:	e017      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a4a:	3330      	adds	r3, #48	; 0x30
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f004 fb07 	bl	8009060 <RCCEx_PLL3_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004a58:	e00d      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a60:	e009      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004a62:	bf00      	nop
 8004a64:	e007      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004a66:	bf00      	nop
 8004a68:	e005      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004a6a:	bf00      	nop
 8004a6c:	e003      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8004a6e:	bf00      	nop
 8004a70:	44020c00 	.word	0x44020c00
        break;
 8004a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a76:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10d      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8004a7e:	4baf      	ldr	r3, [pc, #700]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004a84:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	4aaa      	ldr	r2, [pc, #680]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a92:	430b      	orrs	r3, r1
 8004a94:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004a98:	e003      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a9e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004aae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ab8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	d055      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004ac2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004ace:	d031      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004ad0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004ad4:	d82a      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ada:	d02d      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004adc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ae0:	d824      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004ae2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ae6:	d029      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004ae8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aec:	d81e      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af2:	d011      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af8:	d818      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d020      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004afe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b02:	d113      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b08:	3308      	adds	r3, #8
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f004 fa10 	bl	8008f30 <RCCEx_PLL2_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004b16:	e014      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b1c:	3330      	adds	r3, #48	; 0x30
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f004 fa9e 	bl	8009060 <RCCEx_PLL3_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b32:	e006      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004b34:	bf00      	nop
 8004b36:	e004      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004b38:	bf00      	nop
 8004b3a:	e002      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004b3c:	bf00      	nop
 8004b3e:	e000      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10d      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004b4a:	4b7c      	ldr	r3, [pc, #496]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b50:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004b54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b5c:	4a77      	ldr	r2, [pc, #476]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b64:	e003      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b6a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	d03d      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004b8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b9a:	d01b      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004b9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ba0:	d814      	bhi.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ba6:	d017      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bac:	d80e      	bhi.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d014      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb6:	d109      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bbc:	3330      	adds	r3, #48	; 0x30
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f004 fa4e 	bl	8009060 <RCCEx_PLL3_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004bca:	e008      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bd2:	e004      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004bd4:	bf00      	nop
 8004bd6:	e002      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004bd8:	bf00      	nop
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10d      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004be6:	4b55      	ldr	r3, [pc, #340]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004be8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004bec:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	4a50      	ldr	r2, [pc, #320]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c00:	e003      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c06:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004c16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c20:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4313      	orrs	r3, r2
 8004c28:	d03d      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004c2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c36:	d01b      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004c38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c3c:	d814      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004c3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c42:	d017      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004c44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c48:	d80e      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d014      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004c4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c52:	d109      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c58:	3330      	adds	r3, #48	; 0x30
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f004 fa00 	bl	8009060 <RCCEx_PLL3_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004c66:	e008      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c6e:	e004      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004c70:	bf00      	nop
 8004c72:	e002      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10d      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004c82:	4b2e      	ldr	r3, [pc, #184]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004c84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c88:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c94:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004c96:	430b      	orrs	r3, r1
 8004c98:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c9c:	e003      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ca2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004cbc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	d040      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cd2:	d01b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004cd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cd8:	d814      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cde:	d017      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce4:	d80e      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d014      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cee:	d109      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cf4:	3330      	adds	r3, #48	; 0x30
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f004 f9b2 	bl	8009060 <RCCEx_PLL3_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004d02:	e008      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d0a:	e004      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004d0c:	bf00      	nop
 8004d0e:	e002      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004d10:	bf00      	nop
 8004d12:	e000      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d110      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004d20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d24:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d30:	4a02      	ldr	r2, [pc, #8]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004d3a:	bf00      	nop
 8004d3c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d44:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	2100      	movs	r1, #0
 8004d52:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004d5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	d03d      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d74:	d01b      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004d76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d7a:	d814      	bhi.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004d7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d80:	d017      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004d82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d86:	d80e      	bhi.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d014      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d90:	d109      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d96:	3330      	adds	r3, #48	; 0x30
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f004 f961 	bl	8009060 <RCCEx_PLL3_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004da4:	e008      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004dac:	e004      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004dae:	bf00      	nop
 8004db0:	e002      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10d      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004dc0:	4bbe      	ldr	r3, [pc, #760]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004dc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004dc6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dd2:	4aba      	ldr	r2, [pc, #744]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004dda:	e003      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004de0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004df0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dfa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4313      	orrs	r3, r2
 8004e02:	d035      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e10:	d015      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004e12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e16:	d80e      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d012      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e20:	d109      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e26:	3330      	adds	r3, #48	; 0x30
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f004 f919 	bl	8009060 <RCCEx_PLL3_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004e34:	e006      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e3c:	e002      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10d      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004e4c:	4b9b      	ldr	r3, [pc, #620]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e52:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8004e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e5e:	4a97      	ldr	r2, [pc, #604]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e60:	430b      	orrs	r3, r1
 8004e62:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004e66:	e003      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e6c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	2100      	movs	r1, #0
 8004e7a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004e90:	4b8a      	ldr	r3, [pc, #552]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	4a89      	ldr	r2, [pc, #548]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e9a:	61d3      	str	r3, [r2, #28]
 8004e9c:	4b87      	ldr	r3, [pc, #540]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e9e:	69d9      	ldr	r1, [r3, #28]
 8004ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ea4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004ea8:	4a84      	ldr	r2, [pc, #528]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004ec4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	d055      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ed2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ed6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004eda:	d031      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004edc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004ee0:	d82a      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee6:	d02d      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d824      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef2:	d029      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef8:	d81e      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efe:	d011      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f04:	d818      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d020      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0e:	d113      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f14:	3308      	adds	r3, #8
 8004f16:	4618      	mov	r0, r3
 8004f18:	f004 f80a 	bl	8008f30 <RCCEx_PLL2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004f22:	e014      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f28:	3330      	adds	r3, #48	; 0x30
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f004 f898 	bl	8009060 <RCCEx_PLL3_Config>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004f36:	e00a      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f3e:	e006      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004f40:	bf00      	nop
 8004f42:	e004      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004f44:	bf00      	nop
 8004f46:	e002      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10d      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004f56:	4b59      	ldr	r3, [pc, #356]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004f58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004f5c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f68:	4a54      	ldr	r2, [pc, #336]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004f70:	e003      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f90:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	d055      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fa2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004fa6:	d031      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004fa8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004fac:	d82a      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb2:	d02d      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb8:	d824      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004fba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fbe:	d029      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004fc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fc4:	d81e      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fca:	d011      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd0:	d818      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d020      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fda:	d113      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f003 ffa4 	bl	8008f30 <RCCEx_PLL2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004fee:	e014      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ff4:	3330      	adds	r3, #48	; 0x30
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f004 f832 	bl	8009060 <RCCEx_PLL3_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005002:	e00a      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800500a:	e006      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800500c:	bf00      	nop
 800500e:	e004      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005010:	bf00      	nop
 8005012:	e002      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005014:	bf00      	nop
 8005016:	e000      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005022:	4b26      	ldr	r3, [pc, #152]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005024:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005028:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800502c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005030:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005034:	4a21      	ldr	r2, [pc, #132]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005036:	430b      	orrs	r3, r1
 8005038:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800503c:	e003      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005042:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005046:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	2100      	movs	r1, #0
 8005050:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800505c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005060:	460b      	mov	r3, r1
 8005062:	4313      	orrs	r3, r2
 8005064:	d057      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005066:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800506a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800506e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005072:	d033      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005078:	d82c      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800507a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800507e:	d02f      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005080:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005084:	d826      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800508a:	d02b      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800508c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005090:	d820      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005096:	d013      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800509c:	d81a      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d022      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80050a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a6:	d115      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050ac:	3308      	adds	r3, #8
 80050ae:	4618      	mov	r0, r3
 80050b0:	f003 ff3e 	bl	8008f30 <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80050ba:	e016      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80050bc:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050c4:	3330      	adds	r3, #48	; 0x30
 80050c6:	4618      	mov	r0, r3
 80050c8:	f003 ffca 	bl	8009060 <RCCEx_PLL3_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80050d2:	e00a      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80050da:	e006      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80050dc:	bf00      	nop
 80050de:	e004      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80050e0:	bf00      	nop
 80050e2:	e002      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80050e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10d      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80050f2:	4bbb      	ldr	r3, [pc, #748]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80050f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80050f8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80050fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005100:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005104:	4ab6      	ldr	r2, [pc, #728]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005106:	430b      	orrs	r3, r1
 8005108:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800510c:	e003      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005112:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005116:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	2100      	movs	r1, #0
 8005120:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800512c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005130:	460b      	mov	r3, r1
 8005132:	4313      	orrs	r3, r2
 8005134:	d055      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005136:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800513a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800513e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005142:	d031      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005144:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005148:	d82a      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800514a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800514e:	d02d      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005154:	d824      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005156:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800515a:	d029      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800515c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005160:	d81e      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005166:	d011      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800516c:	d818      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d020      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005176:	d113      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005178:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800517c:	3308      	adds	r3, #8
 800517e:	4618      	mov	r0, r3
 8005180:	f003 fed6 	bl	8008f30 <RCCEx_PLL2_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800518a:	e014      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800518c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005190:	3330      	adds	r3, #48	; 0x30
 8005192:	4618      	mov	r0, r3
 8005194:	f003 ff64 	bl	8009060 <RCCEx_PLL3_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800519e:	e00a      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80051a6:	e006      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80051a8:	bf00      	nop
 80051aa:	e004      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80051ac:	bf00      	nop
 80051ae:	e002      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80051b0:	bf00      	nop
 80051b2:	e000      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80051b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10d      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80051be:	4b88      	ldr	r3, [pc, #544]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80051c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80051c4:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80051c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051d0:	4a83      	ldr	r2, [pc, #524]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80051d2:	430b      	orrs	r3, r1
 80051d4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80051d8:	e003      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80051e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	2100      	movs	r1, #0
 80051ec:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051f8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80051fc:	460b      	mov	r3, r1
 80051fe:	4313      	orrs	r3, r2
 8005200:	d055      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005202:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005206:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800520a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800520e:	d031      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005210:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005214:	d82a      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800521a:	d02d      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800521c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005220:	d824      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005222:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005226:	d029      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005228:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800522c:	d81e      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800522e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005232:	d011      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005238:	d818      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d020      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800523e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005242:	d113      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005248:	3308      	adds	r3, #8
 800524a:	4618      	mov	r0, r3
 800524c:	f003 fe70 	bl	8008f30 <RCCEx_PLL2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005256:	e014      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005258:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800525c:	3330      	adds	r3, #48	; 0x30
 800525e:	4618      	mov	r0, r3
 8005260:	f003 fefe 	bl	8009060 <RCCEx_PLL3_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800526a:	e00a      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005272:	e006      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005274:	bf00      	nop
 8005276:	e004      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005278:	bf00      	nop
 800527a:	e002      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800527c:	bf00      	nop
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005282:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800528a:	4b55      	ldr	r3, [pc, #340]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800528c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005290:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005294:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005298:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800529c:	4a50      	ldr	r2, [pc, #320]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800529e:	430b      	orrs	r3, r1
 80052a0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80052a4:	e003      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052aa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80052ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	2100      	movs	r1, #0
 80052b8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052c4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80052c8:	460b      	mov	r3, r1
 80052ca:	4313      	orrs	r3, r2
 80052cc:	d055      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80052ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052da:	d031      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80052dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052e0:	d82a      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80052e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e6:	d02d      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d824      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80052ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052f2:	d029      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80052f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052f8:	d81e      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80052fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fe:	d011      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005304:	d818      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d020      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800530a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800530e:	d113      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005310:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005314:	3308      	adds	r3, #8
 8005316:	4618      	mov	r0, r3
 8005318:	f003 fe0a 	bl	8008f30 <RCCEx_PLL2_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005322:	e014      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005324:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005328:	3330      	adds	r3, #48	; 0x30
 800532a:	4618      	mov	r0, r3
 800532c:	f003 fe98 	bl	8009060 <RCCEx_PLL3_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005336:	e00a      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800533e:	e006      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005340:	bf00      	nop
 8005342:	e004      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005344:	bf00      	nop
 8005346:	e002      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005348:	bf00      	nop
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800534c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10d      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005356:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005358:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800535c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005360:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005364:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005368:	4a1d      	ldr	r2, [pc, #116]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800536a:	430b      	orrs	r3, r1
 800536c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005370:	e003      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005372:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005376:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800537a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800538a:	2300      	movs	r3, #0
 800538c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005390:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005394:	460b      	mov	r3, r1
 8005396:	4313      	orrs	r3, r2
 8005398:	d055      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800539a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800539e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053a6:	d035      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80053a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ac:	d82e      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80053ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053b2:	d031      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80053b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053b8:	d828      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80053ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053be:	d01b      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80053c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053c4:	d822      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80053ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ce:	d009      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80053d0:	e01c      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053d2:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	4a02      	ldr	r2, [pc, #8]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80053d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053de:	e01c      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80053e0:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053e8:	3308      	adds	r3, #8
 80053ea:	4618      	mov	r0, r3
 80053ec:	f003 fda0 	bl	8008f30 <RCCEx_PLL2_Config>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053f6:	e010      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053fc:	3330      	adds	r3, #48	; 0x30
 80053fe:	4618      	mov	r0, r3
 8005400:	f003 fe2e 	bl	8009060 <RCCEx_PLL3_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800540a:	e006      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005412:	e002      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005414:	bf00      	nop
 8005416:	e000      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10d      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005422:	4bc3      	ldr	r3, [pc, #780]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005428:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800542c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005430:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005434:	4abe      	ldr	r2, [pc, #760]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005436:	430b      	orrs	r3, r1
 8005438:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800543c:	e003      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005442:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005446:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005456:	2300      	movs	r3, #0
 8005458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800545c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005460:	460b      	mov	r3, r1
 8005462:	4313      	orrs	r3, r2
 8005464:	d051      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005466:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800546a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800546e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005472:	d033      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005478:	d82c      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800547a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800547e:	d02d      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005480:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005484:	d826      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800548a:	d019      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800548c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005490:	d820      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005496:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800549a:	d007      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800549c:	e01a      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800549e:	4ba4      	ldr	r3, [pc, #656]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	4aa3      	ldr	r2, [pc, #652]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80054aa:	e018      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054b0:	3308      	adds	r3, #8
 80054b2:	4618      	mov	r0, r3
 80054b4:	f003 fd3c 	bl	8008f30 <RCCEx_PLL2_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80054be:	e00e      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054c4:	3330      	adds	r3, #48	; 0x30
 80054c6:	4618      	mov	r0, r3
 80054c8:	f003 fdca 	bl	8009060 <RCCEx_PLL3_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80054d2:	e004      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80054da:	e000      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80054dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10d      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80054e6:	4b92      	ldr	r3, [pc, #584]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054ec:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80054f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80054f8:	4a8d      	ldr	r2, [pc, #564]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054fa:	430b      	orrs	r3, r1
 80054fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005500:	e003      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005502:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005506:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800550a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005516:	67bb      	str	r3, [r7, #120]	; 0x78
 8005518:	2300      	movs	r3, #0
 800551a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800551c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005520:	460b      	mov	r3, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	d032      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005526:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800552a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800552e:	2b05      	cmp	r3, #5
 8005530:	d80f      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005532:	2b03      	cmp	r3, #3
 8005534:	d211      	bcs.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005536:	2b01      	cmp	r3, #1
 8005538:	d911      	bls.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800553a:	2b02      	cmp	r3, #2
 800553c:	d109      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800553e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005542:	3308      	adds	r3, #8
 8005544:	4618      	mov	r0, r3
 8005546:	f003 fcf3 	bl	8008f30 <RCCEx_PLL2_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005550:	e006      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005558:	e002      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800555e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005560:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10d      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005568:	4b71      	ldr	r3, [pc, #452]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800556a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800556e:	f023 0107 	bic.w	r1, r3, #7
 8005572:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005576:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800557a:	4a6d      	ldr	r2, [pc, #436]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800557c:	430b      	orrs	r3, r1
 800557e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005582:	e003      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005588:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800558c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	2100      	movs	r1, #0
 8005596:	6739      	str	r1, [r7, #112]	; 0x70
 8005598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800559c:	677b      	str	r3, [r7, #116]	; 0x74
 800559e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80055a2:	460b      	mov	r3, r1
 80055a4:	4313      	orrs	r3, r2
 80055a6:	d024      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80055a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d005      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80055be:	e002      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80055c0:	bf00      	nop
 80055c2:	e000      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80055c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10d      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80055ce:	4b58      	ldr	r3, [pc, #352]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055d4:	f023 0108 	bic.w	r1, r3, #8
 80055d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055e0:	4a53      	ldr	r2, [pc, #332]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055e2:	430b      	orrs	r3, r1
 80055e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80055e8:	e003      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80055ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80055fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005600:	2300      	movs	r3, #0
 8005602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005604:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005608:	460b      	mov	r3, r1
 800560a:	4313      	orrs	r3, r2
 800560c:	f000 80b9 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005610:	4b48      	ldr	r3, [pc, #288]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	4a47      	ldr	r2, [pc, #284]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800561c:	f7fb fe70 	bl	8001300 <HAL_GetTick>
 8005620:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005624:	e00b      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005626:	f7fb fe6b 	bl	8001300 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d903      	bls.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800563c:	e005      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800563e:	4b3d      	ldr	r3, [pc, #244]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0ed      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800564a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 8093 	bne.w	800577a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005654:	4b36      	ldr	r3, [pc, #216]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005662:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d023      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800566a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800566e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8005672:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005676:	4293      	cmp	r3, r2
 8005678:	d01b      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800567a:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800567c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005688:	4b29      	ldr	r3, [pc, #164]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800568a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800568e:	4a28      	ldr	r2, [pc, #160]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005694:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005698:	4b25      	ldr	r3, [pc, #148]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800569a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800569e:	4a24      	ldr	r2, [pc, #144]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80056a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056a8:	4a21      	ldr	r2, [pc, #132]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80056aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80056ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d019      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fb fe1f 	bl	8001300 <HAL_GetTick>
 80056c2:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056c6:	e00d      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c8:	f7fb fe1a 	bl	8001300 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80056d2:	1ad2      	subs	r2, r2, r3
 80056d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80056d8:	429a      	cmp	r2, r3
 80056da:	d903      	bls.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 80056e2:	e006      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e4:	4b12      	ldr	r3, [pc, #72]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80056e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0ea      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80056f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d13a      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80056fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056fe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800570a:	d115      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005714:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005718:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005722:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005726:	4a02      	ldr	r2, [pc, #8]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005728:	430b      	orrs	r3, r1
 800572a:	61d3      	str	r3, [r2, #28]
 800572c:	e00a      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800572e:	bf00      	nop
 8005730:	44020c00 	.word	0x44020c00
 8005734:	44020800 	.word	0x44020800
 8005738:	4b9f      	ldr	r3, [pc, #636]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	4a9e      	ldr	r2, [pc, #632]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800573e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005742:	61d3      	str	r3, [r2, #28]
 8005744:	4b9c      	ldr	r3, [pc, #624]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800574a:	4a9b      	ldr	r2, [pc, #620]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800574c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005750:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005754:	4b98      	ldr	r3, [pc, #608]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005756:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800575a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800575e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005766:	4a94      	ldr	r2, [pc, #592]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005768:	430b      	orrs	r3, r1
 800576a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800576e:	e008      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005770:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005774:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800577e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005782:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800578e:	663b      	str	r3, [r7, #96]	; 0x60
 8005790:	2300      	movs	r3, #0
 8005792:	667b      	str	r3, [r7, #100]	; 0x64
 8005794:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005798:	460b      	mov	r3, r1
 800579a:	4313      	orrs	r3, r2
 800579c:	d035      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800579e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80057a6:	2b30      	cmp	r3, #48	; 0x30
 80057a8:	d014      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80057aa:	2b30      	cmp	r3, #48	; 0x30
 80057ac:	d80e      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d012      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d80a      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d010      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d106      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057be:	4b7e      	ldr	r3, [pc, #504]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	4a7d      	ldr	r2, [pc, #500]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c8:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80057ca:	e008      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80057d2:	e004      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80057d4:	bf00      	nop
 80057d6:	e002      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80057dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10d      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80057e6:	4b74      	ldr	r3, [pc, #464]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057ec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80057f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057f4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80057f8:	4a6f      	ldr	r2, [pc, #444]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057fa:	430b      	orrs	r3, r1
 80057fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005800:	e003      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005802:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005806:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800580a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005816:	65bb      	str	r3, [r7, #88]	; 0x58
 8005818:	2300      	movs	r3, #0
 800581a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800581c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005820:	460b      	mov	r3, r1
 8005822:	4313      	orrs	r3, r2
 8005824:	d033      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005826:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800582a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005832:	2b40      	cmp	r3, #64	; 0x40
 8005834:	d007      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8005836:	e010      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005838:	4b5f      	ldr	r3, [pc, #380]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	4a5e      	ldr	r2, [pc, #376]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800583e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005842:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005844:	e00d      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005846:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800584a:	3308      	adds	r3, #8
 800584c:	4618      	mov	r0, r3
 800584e:	f003 fb6f 	bl	8008f30 <RCCEx_PLL2_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005862:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10d      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800586a:	4b53      	ldr	r3, [pc, #332]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800586c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005870:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005874:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005878:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800587c:	4a4e      	ldr	r2, [pc, #312]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800587e:	430b      	orrs	r3, r1
 8005880:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005884:	e003      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005886:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800588a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800588e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005896:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800589a:	653b      	str	r3, [r7, #80]	; 0x50
 800589c:	2300      	movs	r3, #0
 800589e:	657b      	str	r3, [r7, #84]	; 0x54
 80058a0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80058a4:	460b      	mov	r3, r1
 80058a6:	4313      	orrs	r3, r2
 80058a8:	d033      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80058aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80058b6:	2b80      	cmp	r3, #128	; 0x80
 80058b8:	d007      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80058ba:	e010      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058bc:	4b3e      	ldr	r3, [pc, #248]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	4a3d      	ldr	r2, [pc, #244]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80058c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80058c8:	e00d      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058ce:	3308      	adds	r3, #8
 80058d0:	4618      	mov	r0, r3
 80058d2:	f003 fb2d 	bl	8008f30 <RCCEx_PLL2_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80058dc:	e003      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80058e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80058ee:	4b32      	ldr	r3, [pc, #200]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80058f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80058f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80058f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058fc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005900:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005902:	430b      	orrs	r3, r1
 8005904:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005908:	e003      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800590e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005920:	2300      	movs	r3, #0
 8005922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005924:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005928:	460b      	mov	r3, r1
 800592a:	4313      	orrs	r3, r2
 800592c:	d04a      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800592e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005936:	2b04      	cmp	r3, #4
 8005938:	d827      	bhi.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800593a:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	08005955 	.word	0x08005955
 8005944:	08005963 	.word	0x08005963
 8005948:	08005977 	.word	0x08005977
 800594c:	08005993 	.word	0x08005993
 8005950:	08005993 	.word	0x08005993
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005954:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800595a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800595e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005960:	e018      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005962:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005966:	3308      	adds	r3, #8
 8005968:	4618      	mov	r0, r3
 800596a:	f003 fae1 	bl	8008f30 <RCCEx_PLL2_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005974:	e00e      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005976:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800597a:	3330      	adds	r3, #48	; 0x30
 800597c:	4618      	mov	r0, r3
 800597e:	f003 fb6f 	bl	8009060 <RCCEx_PLL3_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005988:	e004      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005990:	e000      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005994:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10f      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800599c:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800599e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059a2:	f023 0107 	bic.w	r1, r3, #7
 80059a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ae:	4a02      	ldr	r2, [pc, #8]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059b0:	430b      	orrs	r3, r1
 80059b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059b6:	e005      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80059b8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059bc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059c0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80059c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80059d0:	643b      	str	r3, [r7, #64]	; 0x40
 80059d2:	2300      	movs	r3, #0
 80059d4:	647b      	str	r3, [r7, #68]	; 0x44
 80059d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80059da:	460b      	mov	r3, r1
 80059dc:	4313      	orrs	r3, r2
 80059de:	f000 8081 	beq.w	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80059e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d85f      	bhi.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a79 	.word	0x08005a79
 80059f8:	08005aaf 	.word	0x08005aaf
 80059fc:	08005aaf 	.word	0x08005aaf
 8005a00:	08005aaf 	.word	0x08005aaf
 8005a04:	08005aaf 	.word	0x08005aaf
 8005a08:	08005aaf 	.word	0x08005aaf
 8005a0c:	08005aaf 	.word	0x08005aaf
 8005a10:	08005aaf 	.word	0x08005aaf
 8005a14:	08005a87 	.word	0x08005a87
 8005a18:	08005aaf 	.word	0x08005aaf
 8005a1c:	08005aaf 	.word	0x08005aaf
 8005a20:	08005aaf 	.word	0x08005aaf
 8005a24:	08005aaf 	.word	0x08005aaf
 8005a28:	08005aaf 	.word	0x08005aaf
 8005a2c:	08005aaf 	.word	0x08005aaf
 8005a30:	08005aaf 	.word	0x08005aaf
 8005a34:	08005a9b 	.word	0x08005a9b
 8005a38:	08005aaf 	.word	0x08005aaf
 8005a3c:	08005aaf 	.word	0x08005aaf
 8005a40:	08005aaf 	.word	0x08005aaf
 8005a44:	08005aaf 	.word	0x08005aaf
 8005a48:	08005aaf 	.word	0x08005aaf
 8005a4c:	08005aaf 	.word	0x08005aaf
 8005a50:	08005aaf 	.word	0x08005aaf
 8005a54:	08005ab7 	.word	0x08005ab7
 8005a58:	08005aaf 	.word	0x08005aaf
 8005a5c:	08005aaf 	.word	0x08005aaf
 8005a60:	08005aaf 	.word	0x08005aaf
 8005a64:	08005aaf 	.word	0x08005aaf
 8005a68:	08005aaf 	.word	0x08005aaf
 8005a6c:	08005aaf 	.word	0x08005aaf
 8005a70:	08005aaf 	.word	0x08005aaf
 8005a74:	08005ab7 	.word	0x08005ab7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a78:	4bab      	ldr	r3, [pc, #684]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	4aaa      	ldr	r2, [pc, #680]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a82:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005a84:	e018      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f003 fa4f 	bl	8008f30 <RCCEx_PLL2_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005a98:	e00e      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a9e:	3330      	adds	r3, #48	; 0x30
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f003 fadd 	bl	8009060 <RCCEx_PLL3_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005aac:	e004      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005ab4:	e000      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8005ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10d      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005ac0:	4b99      	ldr	r3, [pc, #612]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ac6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005aca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ace:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ad2:	4a95      	ldr	r2, [pc, #596]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ada:	e003      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005adc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ae0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af2:	2300      	movs	r3, #0
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005afa:	460b      	mov	r3, r1
 8005afc:	4313      	orrs	r3, r2
 8005afe:	d04e      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005b00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0c:	d02e      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b12:	d827      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005b14:	2bc0      	cmp	r3, #192	; 0xc0
 8005b16:	d02b      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8005b18:	2bc0      	cmp	r3, #192	; 0xc0
 8005b1a:	d823      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005b1c:	2b80      	cmp	r3, #128	; 0x80
 8005b1e:	d017      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d81f      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d007      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005b2c:	e01a      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b2e:	4b7e      	ldr	r3, [pc, #504]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	4a7d      	ldr	r2, [pc, #500]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b38:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005b3a:	e01a      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b40:	3308      	adds	r3, #8
 8005b42:	4618      	mov	r0, r3
 8005b44:	f003 f9f4 	bl	8008f30 <RCCEx_PLL2_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005b4e:	e010      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b54:	3330      	adds	r3, #48	; 0x30
 8005b56:	4618      	mov	r0, r3
 8005b58:	f003 fa82 	bl	8009060 <RCCEx_PLL3_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005b62:	e006      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b6a:	e002      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10d      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005b7a:	4b6b      	ldr	r3, [pc, #428]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b80:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b8c:	4a66      	ldr	r2, [pc, #408]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b94:	e003      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b9a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005b9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
 8005bac:	2300      	movs	r3, #0
 8005bae:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	d055      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bbe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005bc2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005bc6:	d031      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005bc8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005bcc:	d82a      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd2:	d02d      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd8:	d824      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005bda:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bde:	d029      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005be0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005be4:	d81e      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bea:	d011      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf0:	d818      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d020      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bfa:	d113      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c00:	3308      	adds	r3, #8
 8005c02:	4618      	mov	r0, r3
 8005c04:	f003 f994 	bl	8008f30 <RCCEx_PLL2_Config>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005c0e:	e014      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c14:	3330      	adds	r3, #48	; 0x30
 8005c16:	4618      	mov	r0, r3
 8005c18:	f003 fa22 	bl	8009060 <RCCEx_PLL3_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005c22:	e00a      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c2a:	e006      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005c2c:	bf00      	nop
 8005c2e:	e004      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005c30:	bf00      	nop
 8005c32:	e002      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005c34:	bf00      	nop
 8005c36:	e000      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10d      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005c42:	4b39      	ldr	r3, [pc, #228]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c48:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c50:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005c54:	4a34      	ldr	r2, [pc, #208]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005c56:	430b      	orrs	r3, r1
 8005c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c5c:	e003      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c62:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005c66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	d058      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005c82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c8a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005c8e:	d031      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005c90:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005c94:	d82a      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c9a:	d02d      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ca0:	d824      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ca6:	d029      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8005ca8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cac:	d81e      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb2:	d011      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb8:	d818      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d020      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	d113      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cc8:	3308      	adds	r3, #8
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f003 f930 	bl	8008f30 <RCCEx_PLL2_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005cd6:	e014      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cdc:	3330      	adds	r3, #48	; 0x30
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f003 f9be 	bl	8009060 <RCCEx_PLL3_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005cea:	e00a      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005cf2:	e006      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005cf4:	bf00      	nop
 8005cf6:	e004      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005cf8:	bf00      	nop
 8005cfa:	e002      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005cfc:	bf00      	nop
 8005cfe:	e000      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d110      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005d0a:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d1c:	4902      	ldr	r1, [pc, #8]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005d24:	e006      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005d26:	bf00      	nop
 8005d28:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d30:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	6239      	str	r1, [r7, #32]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
 8005d46:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	d055      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d58:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005d5c:	d031      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005d5e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005d62:	d82a      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d68:	d02d      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8005d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d6e:	d824      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005d70:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005d74:	d029      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8005d76:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005d7a:	d81e      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d011      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d86:	d818      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d020      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d90:	d113      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d96:	3308      	adds	r3, #8
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f003 f8c9 	bl	8008f30 <RCCEx_PLL2_Config>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005da4:	e014      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005da6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005daa:	3330      	adds	r3, #48	; 0x30
 8005dac:	4618      	mov	r0, r3
 8005dae:	f003 f957 	bl	8009060 <RCCEx_PLL3_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005db8:	e00a      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005dc0:	e006      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005dc2:	bf00      	nop
 8005dc4:	e004      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10d      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005dd8:	4b88      	ldr	r3, [pc, #544]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dde:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8005de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dea:	4984      	ldr	r1, [pc, #528]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005df2:	e003      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005df8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	2100      	movs	r1, #0
 8005e06:	61b9      	str	r1, [r7, #24]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	61fb      	str	r3, [r7, #28]
 8005e0e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e12:	460b      	mov	r3, r1
 8005e14:	4313      	orrs	r3, r2
 8005e16:	d03d      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d81c      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005e24:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e67 	.word	0x08005e67
 8005e30:	08005e3d 	.word	0x08005e3d
 8005e34:	08005e4b 	.word	0x08005e4b
 8005e38:	08005e67 	.word	0x08005e67
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3c:	4b6f      	ldr	r3, [pc, #444]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	4a6e      	ldr	r2, [pc, #440]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e46:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005e48:	e00e      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e4e:	3308      	adds	r3, #8
 8005e50:	4618      	mov	r0, r3
 8005e52:	f003 f86d 	bl	8008f30 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005e5c:	e004      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e64:	e000      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8005e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10d      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005e70:	4b62      	ldr	r3, [pc, #392]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e76:	f023 0203 	bic.w	r2, r3, #3
 8005e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e7e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005e82:	495e      	ldr	r1, [pc, #376]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005e8a:	e003      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e90:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	6139      	str	r1, [r7, #16]
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4313      	orrs	r3, r2
 8005eae:	d03a      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005eb4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ebc:	d00e      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8005ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec2:	d815      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d017      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ecc:	d110      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ece:	4b4b      	ldr	r3, [pc, #300]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed2:	4a4a      	ldr	r2, [pc, #296]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed8:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005eda:	e00e      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f003 f824 	bl	8008f30 <RCCEx_PLL2_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005eee:	e004      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005ef6:	e000      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005efa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10d      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005f02:	4b3e      	ldr	r3, [pc, #248]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005f14:	4939      	ldr	r1, [pc, #228]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005f1c:	e003      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f22:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	2100      	movs	r1, #0
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	d038      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f46:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005f4a:	2b30      	cmp	r3, #48	; 0x30
 8005f4c:	d01b      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005f4e:	2b30      	cmp	r3, #48	; 0x30
 8005f50:	d815      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005f52:	2b10      	cmp	r3, #16
 8005f54:	d002      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d007      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8005f5a:	e010      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5c:	4b27      	ldr	r3, [pc, #156]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f66:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f68:	e00e      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f6e:	3330      	adds	r3, #48	; 0x30
 8005f70:	4618      	mov	r0, r3
 8005f72:	f003 f875 	bl	8009060 <RCCEx_PLL3_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005f7c:	e004      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f88:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10d      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005f90:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005fa2:	4916      	ldr	r1, [pc, #88]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005faa:	e003      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005fb0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	6039      	str	r1, [r7, #0]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	d00c      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fde:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005fe2:	4906      	ldr	r1, [pc, #24]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8005fea:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ffa:	bf00      	nop
 8005ffc:	44020c00 	.word	0x44020c00

08006000 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006000:	b480      	push	{r7}
 8006002:	b08b      	sub	sp, #44	; 0x2c
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006008:	4bad      	ldr	r3, [pc, #692]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800600a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006010:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006012:	4bab      	ldr	r3, [pc, #684]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800601c:	4ba8      	ldr	r3, [pc, #672]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	0a1b      	lsrs	r3, r3, #8
 8006022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006026:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006028:	4ba5      	ldr	r3, [pc, #660]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006032:	4ba3      	ldr	r3, [pc, #652]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	08db      	lsrs	r3, r3, #3
 8006038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8126 	beq.w	80062a2 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d053      	beq.n	8006104 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b03      	cmp	r3, #3
 8006060:	d86f      	bhi.n	8006142 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d003      	beq.n	8006070 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d02b      	beq.n	80060c6 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800606e:	e068      	b.n	8006142 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006070:	4b93      	ldr	r3, [pc, #588]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	08db      	lsrs	r3, r3, #3
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	4a92      	ldr	r2, [pc, #584]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
 8006080:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80060a8:	eddf 5a87 	vldr	s11, [pc, #540]	; 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80060ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80060c4:	e068      	b.n	8006198 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	ee07 3a90 	vmov	s15, r3
 80060cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80060d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80060e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80060ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006102:	e049      	b.n	8006198 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610e:	eddf 6a70 	vldr	s13, [pc, #448]	; 80062d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	ee07 3a90 	vmov	s15, r3
 800611c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006120:	ed97 6a04 	vldr	s12, [r7, #16]
 8006124:	eddf 5a68 	vldr	s11, [pc, #416]	; 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800612c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006140:	e02a      	b.n	8006198 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006142:	4b5f      	ldr	r3, [pc, #380]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	08db      	lsrs	r3, r3, #3
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	4a5d      	ldr	r2, [pc, #372]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800614e:	fa22 f303 	lsr.w	r3, r2, r3
 8006152:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	ee07 3a90 	vmov	s15, r3
 8006164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006176:	ed97 6a04 	vldr	s12, [r7, #16]
 800617a:	eddf 5a53 	vldr	s11, [pc, #332]	; 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800617e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800618a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006192:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006196:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006198:	4b49      	ldr	r3, [pc, #292]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061a4:	d121      	bne.n	80061ea <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80061a6:	4b46      	ldr	r3, [pc, #280]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d017      	beq.n	80061e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80061b2:	4b43      	ldr	r3, [pc, #268]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80061b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b6:	0a5b      	lsrs	r3, r3, #9
 80061b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061bc:	ee07 3a90 	vmov	s15, r3
 80061c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80061c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80061cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80061d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	e006      	b.n	80061f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	e002      	b.n	80061f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061f0:	4b33      	ldr	r3, [pc, #204]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061fc:	d121      	bne.n	8006242 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80061fe:	4b30      	ldr	r3, [pc, #192]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d017      	beq.n	800623a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800620a:	4b2d      	ldr	r3, [pc, #180]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800620c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800621c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006220:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006224:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006230:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	605a      	str	r2, [r3, #4]
 8006238:	e006      	b.n	8006248 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	605a      	str	r2, [r3, #4]
 8006240:	e002      	b.n	8006248 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006248:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006254:	d121      	bne.n	800629a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006256:	4b1a      	ldr	r3, [pc, #104]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d017      	beq.n	8006292 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006262:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006266:	0e1b      	lsrs	r3, r3, #24
 8006268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006278:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800627c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006288:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006290:	e010      	b.n	80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	609a      	str	r2, [r3, #8]
}
 8006298:	e00c      	b.n	80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	609a      	str	r2, [r3, #8]
}
 80062a0:	e008      	b.n	80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	609a      	str	r2, [r3, #8]
}
 80062b4:	bf00      	nop
 80062b6:	372c      	adds	r7, #44	; 0x2c
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	44020c00 	.word	0x44020c00
 80062c4:	03d09000 	.word	0x03d09000
 80062c8:	46000000 	.word	0x46000000
 80062cc:	4a742400 	.word	0x4a742400
 80062d0:	4af42400 	.word	0x4af42400

080062d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b08b      	sub	sp, #44	; 0x2c
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80062dc:	4bad      	ldr	r3, [pc, #692]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80062e6:	4bab      	ldr	r3, [pc, #684]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80062f0:	4ba8      	ldr	r3, [pc, #672]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	0a1b      	lsrs	r3, r3, #8
 80062f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062fa:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80062fc:	4ba5      	ldr	r3, [pc, #660]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006306:	4ba3      	ldr	r3, [pc, #652]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	08db      	lsrs	r3, r3, #3
 800630c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	fb02 f303 	mul.w	r3, r2, r3
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 8126 	beq.w	8006576 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2b03      	cmp	r3, #3
 800632e:	d053      	beq.n	80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b03      	cmp	r3, #3
 8006334:	d86f      	bhi.n	8006416 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d003      	beq.n	8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d02b      	beq.n	800639a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8006342:	e068      	b.n	8006416 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006344:	4b93      	ldr	r3, [pc, #588]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	08db      	lsrs	r3, r3, #3
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	4a92      	ldr	r2, [pc, #584]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
 8006354:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006378:	ed97 6a04 	vldr	s12, [r7, #16]
 800637c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800659c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800638c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006394:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006398:	e068      	b.n	800646c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	ee07 3a90 	vmov	s15, r3
 80063a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80063a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80063ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800659c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80063be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80063d6:	e049      	b.n	800646c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e2:	eddf 6a70 	vldr	s13, [pc, #448]	; 80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80063e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	ee07 3a90 	vmov	s15, r3
 80063f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80063f8:	eddf 5a68 	vldr	s11, [pc, #416]	; 800659c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80063fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006410:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006414:	e02a      	b.n	800646c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006416:	4b5f      	ldr	r3, [pc, #380]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	08db      	lsrs	r3, r3, #3
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	4a5d      	ldr	r2, [pc, #372]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644a:	ed97 6a04 	vldr	s12, [r7, #16]
 800644e:	eddf 5a53 	vldr	s11, [pc, #332]	; 800659c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800645e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006466:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800646a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800646c:	4b49      	ldr	r3, [pc, #292]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006478:	d121      	bne.n	80064be <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800647a:	4b46      	ldr	r3, [pc, #280]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d017      	beq.n	80064b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006486:	4b43      	ldr	r3, [pc, #268]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648a:	0a5b      	lsrs	r3, r3, #9
 800648c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006490:	ee07 3a90 	vmov	s15, r3
 8006494:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800649c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80064a0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80064a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ac:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	e006      	b.n	80064c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	e002      	b.n	80064c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064c4:	4b33      	ldr	r3, [pc, #204]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064d0:	d121      	bne.n	8006516 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80064d2:	4b30      	ldr	r3, [pc, #192]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d017      	beq.n	800650e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064de:	4b2d      	ldr	r3, [pc, #180]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	0c1b      	lsrs	r3, r3, #16
 80064e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80064f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80064f8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80064fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006504:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	605a      	str	r2, [r3, #4]
 800650c:	e006      	b.n	800651c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	605a      	str	r2, [r3, #4]
 8006514:	e002      	b.n	800651c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800651c:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006528:	d121      	bne.n	800656e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800652a:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d017      	beq.n	8006566 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006536:	4b17      	ldr	r3, [pc, #92]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653a:	0e1b      	lsrs	r3, r3, #24
 800653c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006540:	ee07 3a90 	vmov	s15, r3
 8006544:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800654c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006550:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800655c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006564:	e010      	b.n	8006588 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	609a      	str	r2, [r3, #8]
}
 800656c:	e00c      	b.n	8006588 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	609a      	str	r2, [r3, #8]
}
 8006574:	e008      	b.n	8006588 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	609a      	str	r2, [r3, #8]
}
 8006588:	bf00      	nop
 800658a:	372c      	adds	r7, #44	; 0x2c
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	44020c00 	.word	0x44020c00
 8006598:	03d09000 	.word	0x03d09000
 800659c:	46000000 	.word	0x46000000
 80065a0:	4a742400 	.word	0x4a742400
 80065a4:	4af42400 	.word	0x4af42400

080065a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b08b      	sub	sp, #44	; 0x2c
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80065b0:	4bad      	ldr	r3, [pc, #692]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80065ba:	4bab      	ldr	r3, [pc, #684]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80065c4:	4ba8      	ldr	r3, [pc, #672]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	0a1b      	lsrs	r3, r3, #8
 80065ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065ce:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80065d0:	4ba5      	ldr	r3, [pc, #660]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	f003 0310 	and.w	r3, r3, #16
 80065d8:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80065da:	4ba3      	ldr	r3, [pc, #652]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065de:	08db      	lsrs	r3, r3, #3
 80065e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8126 	beq.w	800684a <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	2b03      	cmp	r3, #3
 8006602:	d053      	beq.n	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b03      	cmp	r3, #3
 8006608:	d86f      	bhi.n	80066ea <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d003      	beq.n	8006618 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d02b      	beq.n	800666e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8006616:	e068      	b.n	80066ea <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006618:	4b93      	ldr	r3, [pc, #588]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	08db      	lsrs	r3, r3, #3
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	4a92      	ldr	r2, [pc, #584]	; (800686c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006624:	fa22 f303 	lsr.w	r3, r2, r3
 8006628:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	ee07 3a90 	vmov	s15, r3
 800663a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	ee07 3a90 	vmov	s15, r3
 8006648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006650:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006870 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800665c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006668:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800666c:	e068      	b.n	8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	ee07 3a90 	vmov	s15, r3
 8006674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006678:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006874 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800667c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668a:	ed97 6a04 	vldr	s12, [r7, #16]
 800668e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006870 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800669e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80066aa:	e049      	b.n	8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b6:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006878 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80066ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	ee07 3a90 	vmov	s15, r3
 80066c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80066cc:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006870 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80066d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80066e8:	e02a      	b.n	8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066ea:	4b5f      	ldr	r3, [pc, #380]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	08db      	lsrs	r3, r3, #3
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	4a5d      	ldr	r2, [pc, #372]	; (800686c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80066f6:	fa22 f303 	lsr.w	r3, r2, r3
 80066fa:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	ee07 3a90 	vmov	s15, r3
 8006702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006722:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006870 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800673e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006740:	4b49      	ldr	r3, [pc, #292]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800674c:	d121      	bne.n	8006792 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800674e:	4b46      	ldr	r3, [pc, #280]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d017      	beq.n	800678a <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800675a:	4b43      	ldr	r3, [pc, #268]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	0a5b      	lsrs	r3, r3, #9
 8006760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800676c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006770:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006774:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800677c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006780:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	e006      	b.n	8006798 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	e002      	b.n	8006798 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006798:	4b33      	ldr	r3, [pc, #204]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a4:	d121      	bne.n	80067ea <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80067a6:	4b30      	ldr	r3, [pc, #192]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d017      	beq.n	80067e2 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067b2:	4b2d      	ldr	r3, [pc, #180]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	0c1b      	lsrs	r3, r3, #16
 80067b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80067c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80067cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80067d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067d8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	605a      	str	r2, [r3, #4]
 80067e0:	e006      	b.n	80067f0 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	605a      	str	r2, [r3, #4]
 80067e8:	e002      	b.n	80067f0 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067f0:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067fc:	d121      	bne.n	8006842 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80067fe:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d017      	beq.n	800683a <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800680a:	4b17      	ldr	r3, [pc, #92]	; (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	0e1b      	lsrs	r3, r3, #24
 8006810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800681c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006820:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006824:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800682c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006830:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006838:	e010      	b.n	800685c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	609a      	str	r2, [r3, #8]
}
 8006840:	e00c      	b.n	800685c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	e008      	b.n	800685c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	609a      	str	r2, [r3, #8]
}
 800685c:	bf00      	nop
 800685e:	372c      	adds	r7, #44	; 0x2c
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	44020c00 	.word	0x44020c00
 800686c:	03d09000 	.word	0x03d09000
 8006870:	46000000 	.word	0x46000000
 8006874:	4a742400 	.word	0x4a742400
 8006878:	4af42400 	.word	0x4af42400

0800687c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800687c:	b590      	push	{r4, r7, lr}
 800687e:	b08f      	sub	sp, #60	; 0x3c
 8006880:	af00      	add	r7, sp, #0
 8006882:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800688a:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800688e:	4321      	orrs	r1, r4
 8006890:	d150      	bne.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006892:	4b26      	ldr	r3, [pc, #152]	; (800692c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800689e:	4b23      	ldr	r3, [pc, #140]	; (800692c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d108      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b2:	d104      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80068b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ba:	f002 bb2a 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80068be:	4b1b      	ldr	r3, [pc, #108]	; (800692c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068cc:	d108      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d4:	d104      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80068d6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
 80068dc:	f002 bb19 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80068e0:	4b12      	ldr	r3, [pc, #72]	; (800692c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ec:	d119      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068f4:	d115      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80068fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006902:	d30a      	bcc.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006904:	4b09      	ldr	r3, [pc, #36]	; (800692c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	0a1b      	lsrs	r3, r3, #8
 800690a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800690e:	4a08      	ldr	r2, [pc, #32]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006910:	fbb2 f3f3 	udiv	r3, r2, r3
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006916:	f002 bafc 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800691e:	f002 baf8 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
 8006926:	f002 baf4 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800692a:	bf00      	nop
 800692c:	44020c00 	.word	0x44020c00
 8006930:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006934:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006938:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 800693c:	ea50 0104 	orrs.w	r1, r0, r4
 8006940:	f001 8275 	beq.w	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006948:	2801      	cmp	r0, #1
 800694a:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800694e:	f082 82dd 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006956:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800695a:	ea50 0104 	orrs.w	r1, r0, r4
 800695e:	f001 816c 	beq.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006962:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006966:	2801      	cmp	r0, #1
 8006968:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800696c:	f082 82ce 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006970:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006974:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8006978:	ea50 0104 	orrs.w	r1, r0, r4
 800697c:	f001 8602 	beq.w	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8006980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006984:	2801      	cmp	r0, #1
 8006986:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800698a:	f082 82bf 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800698e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006992:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8006996:	ea50 0104 	orrs.w	r1, r0, r4
 800699a:	f001 854c 	beq.w	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800699e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069a2:	2801      	cmp	r0, #1
 80069a4:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 80069a8:	f082 82b0 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069b0:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 80069b4:	ea50 0104 	orrs.w	r1, r0, r4
 80069b8:	f001 849e 	beq.w	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80069bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069c0:	2801      	cmp	r0, #1
 80069c2:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 80069c6:	f082 82a1 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ce:	f1a1 0420 	sub.w	r4, r1, #32
 80069d2:	ea50 0104 	orrs.w	r1, r0, r4
 80069d6:	f001 83e8 	beq.w	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80069da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069de:	2801      	cmp	r0, #1
 80069e0:	f171 0120 	sbcs.w	r1, r1, #32
 80069e4:	f082 8292 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ec:	f1a1 0410 	sub.w	r4, r1, #16
 80069f0:	ea50 0104 	orrs.w	r1, r0, r4
 80069f4:	f002 8256 	beq.w	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80069f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069fc:	2801      	cmp	r0, #1
 80069fe:	f171 0110 	sbcs.w	r1, r1, #16
 8006a02:	f082 8283 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a0a:	f1a1 0408 	sub.w	r4, r1, #8
 8006a0e:	ea50 0104 	orrs.w	r1, r0, r4
 8006a12:	f002 81cc 	beq.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8006a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a1a:	2801      	cmp	r0, #1
 8006a1c:	f171 0108 	sbcs.w	r1, r1, #8
 8006a20:	f082 8274 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a28:	1f0c      	subs	r4, r1, #4
 8006a2a:	ea50 0104 	orrs.w	r1, r0, r4
 8006a2e:	f001 8648 	beq.w	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8006a32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a36:	2801      	cmp	r0, #1
 8006a38:	f171 0104 	sbcs.w	r1, r1, #4
 8006a3c:	f082 8266 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a44:	1e8c      	subs	r4, r1, #2
 8006a46:	ea50 0104 	orrs.w	r1, r0, r4
 8006a4a:	f002 8143 	beq.w	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a52:	2801      	cmp	r0, #1
 8006a54:	f171 0102 	sbcs.w	r1, r1, #2
 8006a58:	f082 8258 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a60:	1e4c      	subs	r4, r1, #1
 8006a62:	ea50 0104 	orrs.w	r1, r0, r4
 8006a66:	f002 80ce 	beq.w	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8006a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a6e:	2801      	cmp	r0, #1
 8006a70:	f171 0101 	sbcs.w	r1, r1, #1
 8006a74:	f082 824a 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a7c:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8006a80:	4321      	orrs	r1, r4
 8006a82:	f002 8059 	beq.w	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8006a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a8a:	4cd9      	ldr	r4, [pc, #868]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006a8c:	42a0      	cmp	r0, r4
 8006a8e:	f171 0100 	sbcs.w	r1, r1, #0
 8006a92:	f082 823b 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a9a:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8006a9e:	4321      	orrs	r1, r4
 8006aa0:	f001 87d9 	beq.w	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aa8:	4cd2      	ldr	r4, [pc, #840]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006aaa:	42a0      	cmp	r0, r4
 8006aac:	f171 0100 	sbcs.w	r1, r1, #0
 8006ab0:	f082 822c 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ab8:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8006abc:	4321      	orrs	r1, r4
 8006abe:	f001 8751 	beq.w	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8006ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ac6:	4ccc      	ldr	r4, [pc, #816]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006ac8:	42a0      	cmp	r0, r4
 8006aca:	f171 0100 	sbcs.w	r1, r1, #0
 8006ace:	f082 821d 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ad2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ad6:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8006ada:	4321      	orrs	r1, r4
 8006adc:	f001 869a 	beq.w	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8006ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ae4:	4cc5      	ldr	r4, [pc, #788]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006ae6:	42a0      	cmp	r0, r4
 8006ae8:	f171 0100 	sbcs.w	r1, r1, #0
 8006aec:	f082 820e 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006af4:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8006af8:	4321      	orrs	r1, r4
 8006afa:	f001 8612 	beq.w	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8006afe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b02:	4cbf      	ldr	r4, [pc, #764]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006b04:	42a0      	cmp	r0, r4
 8006b06:	f171 0100 	sbcs.w	r1, r1, #0
 8006b0a:	f082 81ff 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b12:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8006b16:	4321      	orrs	r1, r4
 8006b18:	f002 817e 	beq.w	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b20:	4cb8      	ldr	r4, [pc, #736]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b22:	42a0      	cmp	r0, r4
 8006b24:	f171 0100 	sbcs.w	r1, r1, #0
 8006b28:	f082 81f0 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b30:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8006b34:	4321      	orrs	r1, r4
 8006b36:	f000 829e 	beq.w	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8006b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b3e:	4cb2      	ldr	r4, [pc, #712]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b40:	42a0      	cmp	r0, r4
 8006b42:	f171 0100 	sbcs.w	r1, r1, #0
 8006b46:	f082 81e1 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b4e:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8006b52:	4321      	orrs	r1, r4
 8006b54:	f000 826d 	beq.w	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b5c:	4cab      	ldr	r4, [pc, #684]	; (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b5e:	42a0      	cmp	r0, r4
 8006b60:	f171 0100 	sbcs.w	r1, r1, #0
 8006b64:	f082 81d2 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b6c:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8006b70:	4321      	orrs	r1, r4
 8006b72:	f001 800d 	beq.w	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8006b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b7a:	4ca5      	ldr	r4, [pc, #660]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006b7c:	42a0      	cmp	r0, r4
 8006b7e:	f171 0100 	sbcs.w	r1, r1, #0
 8006b82:	f082 81c3 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b8a:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8006b8e:	4321      	orrs	r1, r4
 8006b90:	f000 81d0 	beq.w	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b98:	4c9e      	ldr	r4, [pc, #632]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006b9a:	42a0      	cmp	r0, r4
 8006b9c:	f171 0100 	sbcs.w	r1, r1, #0
 8006ba0:	f082 81b4 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ba8:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8006bac:	4321      	orrs	r1, r4
 8006bae:	f000 8142 	beq.w	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bb6:	4c98      	ldr	r4, [pc, #608]	; (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006bb8:	42a0      	cmp	r0, r4
 8006bba:	f171 0100 	sbcs.w	r1, r1, #0
 8006bbe:	f082 81a5 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bc6:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8006bca:	4321      	orrs	r1, r4
 8006bcc:	f001 824e 	beq.w	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bd4:	4c91      	ldr	r4, [pc, #580]	; (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006bd6:	42a0      	cmp	r0, r4
 8006bd8:	f171 0100 	sbcs.w	r1, r1, #0
 8006bdc:	f082 8196 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006be4:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8006be8:	4321      	orrs	r1, r4
 8006bea:	f001 8197 	beq.w	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bf2:	4c8b      	ldr	r4, [pc, #556]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006bf4:	42a0      	cmp	r0, r4
 8006bf6:	f171 0100 	sbcs.w	r1, r1, #0
 8006bfa:	f082 8187 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c02:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8006c06:	4321      	orrs	r1, r4
 8006c08:	f001 8154 	beq.w	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c10:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8006c14:	f171 0100 	sbcs.w	r1, r1, #0
 8006c18:	f082 8178 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c20:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006c24:	4321      	orrs	r1, r4
 8006c26:	f001 80b7 	beq.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006c2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c2e:	f248 0401 	movw	r4, #32769	; 0x8001
 8006c32:	42a0      	cmp	r0, r4
 8006c34:	f171 0100 	sbcs.w	r1, r1, #0
 8006c38:	f082 8168 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c40:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8006c44:	4321      	orrs	r1, r4
 8006c46:	f001 8064 	beq.w	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c4e:	f244 0401 	movw	r4, #16385	; 0x4001
 8006c52:	42a0      	cmp	r0, r4
 8006c54:	f171 0100 	sbcs.w	r1, r1, #0
 8006c58:	f082 8158 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c60:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8006c64:	4321      	orrs	r1, r4
 8006c66:	f001 8011 	beq.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8006c6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c6e:	f242 0401 	movw	r4, #8193	; 0x2001
 8006c72:	42a0      	cmp	r0, r4
 8006c74:	f171 0100 	sbcs.w	r1, r1, #0
 8006c78:	f082 8148 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c80:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8006c84:	4321      	orrs	r1, r4
 8006c86:	f000 871e 	beq.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8006c8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c8e:	f241 0401 	movw	r4, #4097	; 0x1001
 8006c92:	42a0      	cmp	r0, r4
 8006c94:	f171 0100 	sbcs.w	r1, r1, #0
 8006c98:	f082 8138 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ca0:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8006ca4:	4321      	orrs	r1, r4
 8006ca6:	f000 86a8 	beq.w	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8006caa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cae:	f640 0401 	movw	r4, #2049	; 0x801
 8006cb2:	42a0      	cmp	r0, r4
 8006cb4:	f171 0100 	sbcs.w	r1, r1, #0
 8006cb8:	f082 8128 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cc0:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8006cc4:	4321      	orrs	r1, r4
 8006cc6:	f000 8632 	beq.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8006cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cce:	f240 4401 	movw	r4, #1025	; 0x401
 8006cd2:	42a0      	cmp	r0, r4
 8006cd4:	f171 0100 	sbcs.w	r1, r1, #0
 8006cd8:	f082 8118 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ce0:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8006ce4:	4321      	orrs	r1, r4
 8006ce6:	f000 85b0 	beq.w	800784a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8006cea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cee:	f240 2401 	movw	r4, #513	; 0x201
 8006cf2:	42a0      	cmp	r0, r4
 8006cf4:	f171 0100 	sbcs.w	r1, r1, #0
 8006cf8:	f082 8108 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d00:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8006d04:	4321      	orrs	r1, r4
 8006d06:	f000 8535 	beq.w	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d0e:	f240 1401 	movw	r4, #257	; 0x101
 8006d12:	42a0      	cmp	r0, r4
 8006d14:	f171 0100 	sbcs.w	r1, r1, #0
 8006d18:	f082 80f8 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d20:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8006d24:	4321      	orrs	r1, r4
 8006d26:	f000 84ba 	beq.w	800769e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d2e:	2881      	cmp	r0, #129	; 0x81
 8006d30:	f171 0100 	sbcs.w	r1, r1, #0
 8006d34:	f082 80ea 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d3c:	2821      	cmp	r0, #33	; 0x21
 8006d3e:	f171 0100 	sbcs.w	r1, r1, #0
 8006d42:	d26f      	bcs.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d48:	4301      	orrs	r1, r0
 8006d4a:	f002 80df 	beq.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d52:	1e42      	subs	r2, r0, #1
 8006d54:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006d58:	2a20      	cmp	r2, #32
 8006d5a:	f173 0100 	sbcs.w	r1, r3, #0
 8006d5e:	f082 80d5 	bcs.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d62:	2a1f      	cmp	r2, #31
 8006d64:	f202 80d2 	bhi.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d68:	a101      	add	r1, pc, #4	; (adr r1, 8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8006d6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d6e:	bf00      	nop
 8006d70:	080070d1 	.word	0x080070d1
 8006d74:	0800719d 	.word	0x0800719d
 8006d78:	08008f0d 	.word	0x08008f0d
 8006d7c:	0800725d 	.word	0x0800725d
 8006d80:	08008f0d 	.word	0x08008f0d
 8006d84:	08008f0d 	.word	0x08008f0d
 8006d88:	08008f0d 	.word	0x08008f0d
 8006d8c:	0800732d 	.word	0x0800732d
 8006d90:	08008f0d 	.word	0x08008f0d
 8006d94:	08008f0d 	.word	0x08008f0d
 8006d98:	08008f0d 	.word	0x08008f0d
 8006d9c:	08008f0d 	.word	0x08008f0d
 8006da0:	08008f0d 	.word	0x08008f0d
 8006da4:	08008f0d 	.word	0x08008f0d
 8006da8:	08008f0d 	.word	0x08008f0d
 8006dac:	0800740f 	.word	0x0800740f
 8006db0:	08008f0d 	.word	0x08008f0d
 8006db4:	08008f0d 	.word	0x08008f0d
 8006db8:	08008f0d 	.word	0x08008f0d
 8006dbc:	08008f0d 	.word	0x08008f0d
 8006dc0:	08008f0d 	.word	0x08008f0d
 8006dc4:	08008f0d 	.word	0x08008f0d
 8006dc8:	08008f0d 	.word	0x08008f0d
 8006dcc:	08008f0d 	.word	0x08008f0d
 8006dd0:	08008f0d 	.word	0x08008f0d
 8006dd4:	08008f0d 	.word	0x08008f0d
 8006dd8:	08008f0d 	.word	0x08008f0d
 8006ddc:	08008f0d 	.word	0x08008f0d
 8006de0:	08008f0d 	.word	0x08008f0d
 8006de4:	08008f0d 	.word	0x08008f0d
 8006de8:	08008f0d 	.word	0x08008f0d
 8006dec:	080074e5 	.word	0x080074e5
 8006df0:	80000001 	.word	0x80000001
 8006df4:	40000001 	.word	0x40000001
 8006df8:	20000001 	.word	0x20000001
 8006dfc:	10000001 	.word	0x10000001
 8006e00:	08000001 	.word	0x08000001
 8006e04:	04000001 	.word	0x04000001
 8006e08:	00800001 	.word	0x00800001
 8006e0c:	00400001 	.word	0x00400001
 8006e10:	00200001 	.word	0x00200001
 8006e14:	00100001 	.word	0x00100001
 8006e18:	00080001 	.word	0x00080001
 8006e1c:	00040001 	.word	0x00040001
 8006e20:	00020001 	.word	0x00020001
 8006e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e28:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	f000 83c4 	beq.w	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006e32:	f002 b86b 	b.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006e36:	4ba1      	ldr	r3, [pc, #644]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e3c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006e40:	633b      	str	r3, [r7, #48]	; 0x30
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e48:	d036      	beq.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e50:	d86b      	bhi.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e58:	d02b      	beq.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e60:	d863      	bhi.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e68:	d01b      	beq.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e70:	d85b      	bhi.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7e:	d008      	beq.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8006e80:	e053      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e82:	f107 0320 	add.w	r3, r7, #32
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff f8ba 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e90:	e04e      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e92:	f107 0314 	add.w	r3, r7, #20
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fa1c 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ea0:	e046      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ea2:	f107 0308 	add.w	r3, r7, #8
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff fb7e 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006eb0:	e03e      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006eb2:	4b83      	ldr	r3, [pc, #524]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006eb4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006eb6:	e03b      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006eb8:	4b80      	ldr	r3, [pc, #512]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006eba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ebe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ec4:	4b7d      	ldr	r3, [pc, #500]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d10c      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ed6:	4b79      	ldr	r3, [pc, #484]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	08db      	lsrs	r3, r3, #3
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	4a78      	ldr	r2, [pc, #480]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee8:	e01e      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eea:	4b74      	ldr	r3, [pc, #464]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef6:	d106      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efe:	d102      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f00:	4b71      	ldr	r3, [pc, #452]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
 8006f04:	e010      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f06:	4b6d      	ldr	r3, [pc, #436]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f12:	d106      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1a:	d102      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006f1c:	4b6b      	ldr	r3, [pc, #428]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f20:	e002      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006f26:	e003      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006f28:	e002      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f2e:	bf00      	nop
          }
        }
        break;
 8006f30:	f001 bfef 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006f34:	4b61      	ldr	r3, [pc, #388]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f3a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f46:	d036      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f4e:	d86b      	bhi.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006f56:	d02b      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006f5e:	d863      	bhi.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f66:	d01b      	beq.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f6e:	d85b      	bhi.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f7c:	d008      	beq.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8006f7e:	e053      	b.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f80:	f107 0320 	add.w	r3, r7, #32
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff f83b 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f8e:	e04e      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f90:	f107 0314 	add.w	r3, r7, #20
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff f99d 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f9e:	e046      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fa0:	f107 0308 	add.w	r3, r7, #8
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff faff 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fae:	e03e      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006fb0:	4b43      	ldr	r3, [pc, #268]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006fb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fb4:	e03b      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fb6:	4b41      	ldr	r3, [pc, #260]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fbc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fc2:	4b3e      	ldr	r3, [pc, #248]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d10c      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fd4:	4b39      	ldr	r3, [pc, #228]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	08db      	lsrs	r3, r3, #3
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	4a39      	ldr	r2, [pc, #228]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fe6:	e01e      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fe8:	4b34      	ldr	r3, [pc, #208]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff4:	d106      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffc:	d102      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006ffe:	4b32      	ldr	r3, [pc, #200]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007000:	637b      	str	r3, [r7, #52]	; 0x34
 8007002:	e010      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007004:	4b2d      	ldr	r3, [pc, #180]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007010:	d106      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007018:	d102      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800701a:	4b2c      	ldr	r3, [pc, #176]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800701c:	637b      	str	r3, [r7, #52]	; 0x34
 800701e:	e002      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007024:	e003      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007026:	e002      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800702c:	bf00      	nop
          }
        }
        break;
 800702e:	f001 bf70 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007032:	4b22      	ldr	r3, [pc, #136]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007034:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	2b00      	cmp	r3, #0
 8007042:	d108      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007044:	f107 0320 	add.w	r3, r7, #32
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe ffd9 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007052:	f001 bf5e 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	2b40      	cmp	r3, #64	; 0x40
 800705a:	d108      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800705c:	f107 0314 	add.w	r3, r7, #20
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff f937 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800706a:	f001 bf52 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007072:	f001 bf4e 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007076:	4b11      	ldr	r3, [pc, #68]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007078:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800707c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007080:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	2b00      	cmp	r3, #0
 8007086:	d108      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007088:	f107 0320 	add.w	r3, r7, #32
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe ffb7 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007096:	f001 bf3c 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	2b80      	cmp	r3, #128	; 0x80
 800709e:	d108      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070a0:	f107 0314 	add.w	r3, r7, #20
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff f915 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070ae:	f001 bf30 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070b6:	f001 bf2c 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80070ba:	bf00      	nop
 80070bc:	44020c00 	.word	0x44020c00
 80070c0:	00bb8000 	.word	0x00bb8000
 80070c4:	03d09000 	.word	0x03d09000
 80070c8:	003d0900 	.word	0x003d0900
 80070cc:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80070d0:	4b9d      	ldr	r3, [pc, #628]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d104      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80070e2:	f7fc ffd7 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 80070e6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80070e8:	f001 bf13 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80070ec:	4b96      	ldr	r3, [pc, #600]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070f8:	d10a      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d107      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007100:	f107 0314 	add.w	r3, r7, #20
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff f8e5 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
 800710e:	e043      	b.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007110:	4b8d      	ldr	r3, [pc, #564]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800711c:	d10a      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	2b02      	cmp	r3, #2
 8007122:	d107      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007124:	f107 0308 	add.w	r3, r7, #8
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff fa3d 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	637b      	str	r3, [r7, #52]	; 0x34
 8007132:	e031      	b.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007134:	4b84      	ldr	r3, [pc, #528]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b02      	cmp	r3, #2
 800713e:	d10c      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	2b03      	cmp	r3, #3
 8007144:	d109      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007146:	4b80      	ldr	r3, [pc, #512]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	08db      	lsrs	r3, r3, #3
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	4a7e      	ldr	r2, [pc, #504]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007152:	fa22 f303 	lsr.w	r3, r2, r3
 8007156:	637b      	str	r3, [r7, #52]	; 0x34
 8007158:	e01e      	b.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800715a:	4b7b      	ldr	r3, [pc, #492]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007166:	d105      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	2b04      	cmp	r3, #4
 800716c:	d102      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800716e:	4b78      	ldr	r3, [pc, #480]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
 8007172:	e011      	b.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007174:	4b74      	ldr	r3, [pc, #464]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b02      	cmp	r3, #2
 8007180:	d106      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	2b05      	cmp	r3, #5
 8007186:	d103      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
 800718e:	e003      	b.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007194:	f001 bebd 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007198:	f001 bebb 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800719c:	4b6a      	ldr	r3, [pc, #424]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800719e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80071a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071a6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80071ae:	f7fc ff5b 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80071b2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80071b4:	f001 bead 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80071b8:	4b63      	ldr	r3, [pc, #396]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071c4:	d10a      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d107      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071cc:	f107 0314 	add.w	r3, r7, #20
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff f87f 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	637b      	str	r3, [r7, #52]	; 0x34
 80071da:	e03d      	b.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d108      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071e2:	f107 0308 	add.w	r3, r7, #8
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff f9de 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071f0:	f001 be8f 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80071f4:	4b54      	ldr	r3, [pc, #336]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d10c      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	2b18      	cmp	r3, #24
 8007204:	d109      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007206:	4b50      	ldr	r3, [pc, #320]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	08db      	lsrs	r3, r3, #3
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	4a4e      	ldr	r2, [pc, #312]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007212:	fa22 f303 	lsr.w	r3, r2, r3
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
 8007218:	e01e      	b.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800721a:	4b4b      	ldr	r3, [pc, #300]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007226:	d105      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	2b20      	cmp	r3, #32
 800722c:	d102      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800722e:	4b48      	ldr	r3, [pc, #288]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
 8007232:	e011      	b.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007234:	4b44      	ldr	r3, [pc, #272]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b02      	cmp	r3, #2
 8007240:	d106      	bne.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	2b28      	cmp	r3, #40	; 0x28
 8007246:	d103      	bne.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800724c:	637b      	str	r3, [r7, #52]	; 0x34
 800724e:	e003      	b.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007254:	f001 be5d 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007258:	f001 be5b 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800725c:	4b3a      	ldr	r3, [pc, #232]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800725e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007262:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007266:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	2b00      	cmp	r3, #0
 800726c:	d104      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800726e:	f7fc fefb 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8007272:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007274:	f001 be4d 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007278:	4b33      	ldr	r3, [pc, #204]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007284:	d10a      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	2b40      	cmp	r3, #64	; 0x40
 800728a:	d107      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800728c:	f107 0314 	add.w	r3, r7, #20
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff f81f 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
 800729a:	e045      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800729c:	4b2a      	ldr	r3, [pc, #168]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a8:	d10a      	bne.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	2b80      	cmp	r3, #128	; 0x80
 80072ae:	d107      	bne.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072b0:	f107 0308 	add.w	r3, r7, #8
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff f977 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
 80072be:	e033      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80072c0:	4b21      	ldr	r3, [pc, #132]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d10c      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	2bc0      	cmp	r3, #192	; 0xc0
 80072d0:	d109      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072d2:	4b1d      	ldr	r3, [pc, #116]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	08db      	lsrs	r3, r3, #3
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	4a1b      	ldr	r2, [pc, #108]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80072de:	fa22 f303 	lsr.w	r3, r2, r3
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
 80072e4:	e020      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80072e6:	4b18      	ldr	r3, [pc, #96]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f2:	d106      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fa:	d102      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80072fc:	4b14      	ldr	r3, [pc, #80]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007300:	e012      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007302:	4b11      	ldr	r3, [pc, #68]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b02      	cmp	r3, #2
 800730e:	d107      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007316:	d103      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
 800731e:	e003      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007324:	f001 bdf5 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007328:	f001 bdf3 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800732e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007332:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007336:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800733e:	f7fc fe93 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8007342:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007344:	f001 bde5 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007348:	44020c00 	.word	0x44020c00
 800734c:	03d09000 	.word	0x03d09000
 8007350:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007354:	4ba0      	ldr	r3, [pc, #640]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800735c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007360:	d10b      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007368:	d107      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800736a:	f107 0314 	add.w	r3, r7, #20
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe ffb0 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	637b      	str	r3, [r7, #52]	; 0x34
 8007378:	e047      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800737a:	4b97      	ldr	r3, [pc, #604]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007386:	d10b      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800738e:	d107      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007390:	f107 0308 	add.w	r3, r7, #8
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff f907 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
 800739e:	e034      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80073a0:	4b8d      	ldr	r3, [pc, #564]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d10d      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80073b2:	d109      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073b4:	4b88      	ldr	r3, [pc, #544]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	08db      	lsrs	r3, r3, #3
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	4a87      	ldr	r2, [pc, #540]	; (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
 80073c6:	e020      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80073c8:	4b83      	ldr	r3, [pc, #524]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d4:	d106      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073dc:	d102      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80073de:	4b80      	ldr	r3, [pc, #512]	; (80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
 80073e2:	e012      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80073e4:	4b7c      	ldr	r3, [pc, #496]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d107      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80073f8:	d103      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80073fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007400:	e003      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007406:	f001 bd84 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800740a:	f001 bd82 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800740e:	4b72      	ldr	r3, [pc, #456]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007414:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007418:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	2b00      	cmp	r3, #0
 800741e:	d104      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007420:	f7fc fe22 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8007424:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007426:	f001 bd74 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800742a:	4b6b      	ldr	r3, [pc, #428]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007436:	d10b      	bne.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743e:	d107      	bne.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007440:	f107 0314 	add.w	r3, r7, #20
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe ff45 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	637b      	str	r3, [r7, #52]	; 0x34
 800744e:	e047      	b.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007450:	4b61      	ldr	r3, [pc, #388]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800745c:	d10b      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007464:	d107      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007466:	f107 0308 	add.w	r3, r7, #8
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff f89c 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
 8007474:	e034      	b.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007476:	4b58      	ldr	r3, [pc, #352]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b02      	cmp	r3, #2
 8007480:	d10d      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007488:	d109      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800748a:	4b53      	ldr	r3, [pc, #332]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	08db      	lsrs	r3, r3, #3
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	4a51      	ldr	r2, [pc, #324]	; (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007496:	fa22 f303 	lsr.w	r3, r2, r3
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
 800749c:	e020      	b.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800749e:	4b4e      	ldr	r3, [pc, #312]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074aa:	d106      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074b2:	d102      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80074b4:	4b4a      	ldr	r3, [pc, #296]	; (80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80074b6:	637b      	str	r3, [r7, #52]	; 0x34
 80074b8:	e012      	b.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80074ba:	4b47      	ldr	r3, [pc, #284]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d107      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80074ce:	d103      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80074d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
 80074d6:	e003      	b.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074dc:	f001 bd19 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80074e0:	f001 bd17 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80074e4:	4b3c      	ldr	r3, [pc, #240]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074ea:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80074ee:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d104      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80074f6:	f7fc fdb7 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80074fa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80074fc:	f001 bd09 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007500:	4b35      	ldr	r3, [pc, #212]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800750c:	d10b      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007514:	d107      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007516:	f107 0314 	add.w	r3, r7, #20
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe feda 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
 8007524:	e047      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007526:	4b2c      	ldr	r3, [pc, #176]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800752e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007532:	d10b      	bne.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753a:	d107      	bne.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800753c:	f107 0308 	add.w	r3, r7, #8
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff f831 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	637b      	str	r3, [r7, #52]	; 0x34
 800754a:	e034      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800754c:	4b22      	ldr	r3, [pc, #136]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b02      	cmp	r3, #2
 8007556:	d10d      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800755e:	d109      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007560:	4b1d      	ldr	r3, [pc, #116]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	08db      	lsrs	r3, r3, #3
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	4a1c      	ldr	r2, [pc, #112]	; (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800756c:	fa22 f303 	lsr.w	r3, r2, r3
 8007570:	637b      	str	r3, [r7, #52]	; 0x34
 8007572:	e020      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007574:	4b18      	ldr	r3, [pc, #96]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800757c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007580:	d106      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007588:	d102      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800758a:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
 800758e:	e012      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b02      	cmp	r3, #2
 800759c:	d107      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80075a4:	d103      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075aa:	637b      	str	r3, [r7, #52]	; 0x34
 80075ac:	e003      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075b2:	f001 bcae 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075b6:	f001 bcac 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80075ba:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075c0:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80075c4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10b      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80075cc:	f7fc fd4c 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80075d0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80075d2:	f001 bc9e 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075d6:	bf00      	nop
 80075d8:	44020c00 	.word	0x44020c00
 80075dc:	03d09000 	.word	0x03d09000
 80075e0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80075e4:	4ba0      	ldr	r3, [pc, #640]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075f0:	d10b      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075f8:	d107      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075fa:	f107 0314 	add.w	r3, r7, #20
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fe68 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
 8007608:	e047      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800760a:	4b97      	ldr	r3, [pc, #604]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007616:	d10b      	bne.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800761e:	d107      	bne.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007620:	f107 0308 	add.w	r3, r7, #8
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe ffbf 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
 800762e:	e034      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007630:	4b8d      	ldr	r3, [pc, #564]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b02      	cmp	r3, #2
 800763a:	d10d      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007642:	d109      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007644:	4b88      	ldr	r3, [pc, #544]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	08db      	lsrs	r3, r3, #3
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	4a87      	ldr	r2, [pc, #540]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
 8007656:	e020      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007658:	4b83      	ldr	r3, [pc, #524]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007664:	d106      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800766c:	d102      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800766e:	4b80      	ldr	r3, [pc, #512]	; (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007670:	637b      	str	r3, [r7, #52]	; 0x34
 8007672:	e012      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007674:	4b7c      	ldr	r3, [pc, #496]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b02      	cmp	r3, #2
 8007680:	d107      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007688:	d103      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
 8007690:	e003      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007696:	f001 bc3c 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800769a:	f001 bc3a 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800769e:	4b72      	ldr	r3, [pc, #456]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80076a4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80076a8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d104      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076b0:	f7fc fcda 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80076b4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80076b6:	f001 bc2c 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80076ba:	4b6b      	ldr	r3, [pc, #428]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076c6:	d10b      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076ce:	d107      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d0:	f107 0314 	add.w	r3, r7, #20
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fdfd 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
 80076de:	e047      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80076e0:	4b61      	ldr	r3, [pc, #388]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ec:	d10b      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076f4:	d107      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076f6:	f107 0308 	add.w	r3, r7, #8
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe ff54 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
 8007704:	e034      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007706:	4b58      	ldr	r3, [pc, #352]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b02      	cmp	r3, #2
 8007710:	d10d      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007718:	d109      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800771a:	4b53      	ldr	r3, [pc, #332]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	08db      	lsrs	r3, r3, #3
 8007720:	f003 0303 	and.w	r3, r3, #3
 8007724:	4a51      	ldr	r2, [pc, #324]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007726:	fa22 f303 	lsr.w	r3, r2, r3
 800772a:	637b      	str	r3, [r7, #52]	; 0x34
 800772c:	e020      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800772e:	4b4e      	ldr	r3, [pc, #312]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800773a:	d106      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007742:	d102      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8007744:	4b4a      	ldr	r3, [pc, #296]	; (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007746:	637b      	str	r3, [r7, #52]	; 0x34
 8007748:	e012      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800774a:	4b47      	ldr	r3, [pc, #284]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800774c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b02      	cmp	r3, #2
 8007756:	d107      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800775e:	d103      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
 8007766:	e003      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800776c:	f001 bbd1 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007770:	f001 bbcf 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007774:	4b3c      	ldr	r3, [pc, #240]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007776:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800777a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800777e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007786:	f7fc fc6f 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 800778a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800778c:	f001 bbc1 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007790:	4b35      	ldr	r3, [pc, #212]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800779c:	d10b      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077a4:	d107      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077a6:	f107 0314 	add.w	r3, r7, #20
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fd92 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
 80077b4:	e047      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80077b6:	4b2c      	ldr	r3, [pc, #176]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077c2:	d10b      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077ca:	d107      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077cc:	f107 0308 	add.w	r3, r7, #8
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fee9 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
 80077da:	e034      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80077dc:	4b22      	ldr	r3, [pc, #136]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d10d      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077ee:	d109      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077f0:	4b1d      	ldr	r3, [pc, #116]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	08db      	lsrs	r3, r3, #3
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	4a1c      	ldr	r2, [pc, #112]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80077fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
 8007802:	e020      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007804:	4b18      	ldr	r3, [pc, #96]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800780c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007810:	d106      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007818:	d102      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800781a:	4b15      	ldr	r3, [pc, #84]	; (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800781c:	637b      	str	r3, [r7, #52]	; 0x34
 800781e:	e012      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007820:	4b11      	ldr	r3, [pc, #68]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d107      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007834:	d103      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8007836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800783a:	637b      	str	r3, [r7, #52]	; 0x34
 800783c:	e003      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007842:	f001 bb66 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007846:	f001 bb64 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800784c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007850:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8007854:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10b      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800785c:	f7fc fc04 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8007860:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007862:	f001 bb56 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007866:	bf00      	nop
 8007868:	44020c00 	.word	0x44020c00
 800786c:	03d09000 	.word	0x03d09000
 8007870:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007874:	4ba1      	ldr	r3, [pc, #644]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800787c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007880:	d10b      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007888:	d107      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800788a:	f107 0314 	add.w	r3, r7, #20
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe fd20 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	637b      	str	r3, [r7, #52]	; 0x34
 8007898:	e047      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800789a:	4b98      	ldr	r3, [pc, #608]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a6:	d10b      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ae:	d107      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b0:	f107 0308 	add.w	r3, r7, #8
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe fe77 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
 80078be:	e034      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80078c0:	4b8e      	ldr	r3, [pc, #568]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d10d      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80078d2:	d109      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078d4:	4b89      	ldr	r3, [pc, #548]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	08db      	lsrs	r3, r3, #3
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	4a88      	ldr	r2, [pc, #544]	; (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34
 80078e6:	e020      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80078e8:	4b84      	ldr	r3, [pc, #528]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f4:	d106      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078fc:	d102      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80078fe:	4b81      	ldr	r3, [pc, #516]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
 8007902:	e012      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007904:	4b7d      	ldr	r3, [pc, #500]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b02      	cmp	r3, #2
 8007910:	d107      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8007918:	d103      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800791a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800791e:	637b      	str	r3, [r7, #52]	; 0x34
 8007920:	e003      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007926:	f001 baf4 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800792a:	f001 baf2 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800792e:	4b73      	ldr	r3, [pc, #460]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007930:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007934:	f003 0307 	and.w	r3, r3, #7
 8007938:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	2b00      	cmp	r3, #0
 800793e:	d104      	bne.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007940:	f7fc fb92 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8007944:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8007946:	f001 bae4 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800794a:	4b6c      	ldr	r3, [pc, #432]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007956:	d10a      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8007958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795a:	2b01      	cmp	r3, #1
 800795c:	d107      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800795e:	f107 0314 	add.w	r3, r7, #20
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fcb6 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	637b      	str	r3, [r7, #52]	; 0x34
 800796c:	e043      	b.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800796e:	4b63      	ldr	r3, [pc, #396]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800797a:	d10a      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	2b02      	cmp	r3, #2
 8007980:	d107      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007982:	f107 0308 	add.w	r3, r7, #8
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fe0e 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
 8007990:	e031      	b.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007992:	4b5a      	ldr	r3, [pc, #360]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b02      	cmp	r3, #2
 800799c:	d10c      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d109      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079a4:	4b55      	ldr	r3, [pc, #340]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	08db      	lsrs	r3, r3, #3
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	4a54      	ldr	r2, [pc, #336]	; (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80079b0:	fa22 f303 	lsr.w	r3, r2, r3
 80079b4:	637b      	str	r3, [r7, #52]	; 0x34
 80079b6:	e01e      	b.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80079b8:	4b50      	ldr	r3, [pc, #320]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c4:	d105      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d102      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80079cc:	4b4d      	ldr	r3, [pc, #308]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
 80079d0:	e011      	b.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80079d2:	4b4a      	ldr	r3, [pc, #296]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80079d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d106      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	d103      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80079e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ea:	637b      	str	r3, [r7, #52]	; 0x34
 80079ec:	e003      	b.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079f2:	f001 ba8e 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80079f6:	f001 ba8c 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80079fa:	4b40      	ldr	r3, [pc, #256]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80079fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a04:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d104      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a0c:	f7fc fb2c 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8007a10:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a12:	f001 ba7e 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8007a16:	4b39      	ldr	r3, [pc, #228]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a22:	d10a      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	2b10      	cmp	r3, #16
 8007a28:	d107      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a2a:	f107 0314 	add.w	r3, r7, #20
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fc50 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	637b      	str	r3, [r7, #52]	; 0x34
 8007a38:	e043      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007a3a:	4b30      	ldr	r3, [pc, #192]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a46:	d10a      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d107      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fda8 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a5c:	e031      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007a5e:	4b27      	ldr	r3, [pc, #156]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d10c      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	2b30      	cmp	r3, #48	; 0x30
 8007a6e:	d109      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a70:	4b22      	ldr	r3, [pc, #136]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	08db      	lsrs	r3, r3, #3
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	4a21      	ldr	r2, [pc, #132]	; (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a80:	637b      	str	r3, [r7, #52]	; 0x34
 8007a82:	e01e      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007a84:	4b1d      	ldr	r3, [pc, #116]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a90:	d105      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	d102      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8007a98:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a9c:	e011      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007a9e:	4b17      	ldr	r3, [pc, #92]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d106      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	2b50      	cmp	r3, #80	; 0x50
 8007ab0:	d103      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab8:	e003      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007abe:	f001 ba28 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ac2:	f001 ba26 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007acc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007ad0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d104      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007ad8:	f7fc faf2 	bl	80040c0 <HAL_RCC_GetPCLK3Freq>
 8007adc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ade:	f001 ba18 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ae8:	d10e      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aea:	f107 0314 	add.w	r3, r7, #20
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fbf0 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007af8:	f001 ba0b 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007afc:	44020c00 	.word	0x44020c00
 8007b00:	03d09000 	.word	0x03d09000
 8007b04:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b0e:	d108      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b10:	f107 0308 	add.w	r3, r7, #8
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fd47 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b1e:	f001 b9f8 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007b22:	4ba4      	ldr	r3, [pc, #656]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d10d      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b34:	d109      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b36:	4b9f      	ldr	r3, [pc, #636]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	08db      	lsrs	r3, r3, #3
 8007b3c:	f003 0303 	and.w	r3, r3, #3
 8007b40:	4a9d      	ldr	r2, [pc, #628]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007b42:	fa22 f303 	lsr.w	r3, r2, r3
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
 8007b48:	e020      	b.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007b4a:	4b9a      	ldr	r3, [pc, #616]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b56:	d106      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b5e:	d102      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007b60:	4b96      	ldr	r3, [pc, #600]	; (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
 8007b64:	e012      	b.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007b66:	4b93      	ldr	r3, [pc, #588]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d107      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007b7a:	d103      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
 8007b82:	e003      	b.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b88:	f001 b9c3 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b8c:	f001 b9c1 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007b90:	4b88      	ldr	r3, [pc, #544]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d104      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007ba2:	f7fc fa45 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8007ba6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007ba8:	f001 b9b3 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d104      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007bb2:	f7fc f911 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8007bb6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007bb8:	f001 b9ab 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d108      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc2:	f107 0314 	add.w	r3, r7, #20
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe fb84 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bd0:	f001 b99f 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007bd4:	4b77      	ldr	r3, [pc, #476]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007be0:	d105      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d102      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007be8:	4b75      	ldr	r3, [pc, #468]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
 8007bec:	e023      	b.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007bee:	4b71      	ldr	r3, [pc, #452]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d10c      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d109      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c00:	4b6c      	ldr	r3, [pc, #432]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	08db      	lsrs	r3, r3, #3
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	4a6b      	ldr	r2, [pc, #428]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c10:	637b      	str	r3, [r7, #52]	; 0x34
 8007c12:	e010      	b.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007c14:	4b67      	ldr	r3, [pc, #412]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c20:	d105      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	2b05      	cmp	r3, #5
 8007c26:	d102      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007c28:	4b64      	ldr	r3, [pc, #400]	; (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2c:	e003      	b.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c32:	f001 b96e 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c36:	f001 b96c 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007c3a:	4b5e      	ldr	r3, [pc, #376]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007c46:	4b5b      	ldr	r3, [pc, #364]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d106      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8007c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c60:	e012      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007c62:	4b54      	ldr	r3, [pc, #336]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c70:	d106      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	2b08      	cmp	r3, #8
 8007c76:	d103      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8007c78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7e:	e003      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007c84:	f001 b945 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c88:	f001 b943 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c8c:	4b49      	ldr	r3, [pc, #292]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c96:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d104      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c9e:	f7fc f9e3 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8007ca2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ca4:	f001 b935 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cae:	d108      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cb0:	f107 0308 	add.w	r3, r7, #8
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe fc77 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cbe:	f001 b928 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007cc2:	4b3c      	ldr	r3, [pc, #240]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d10d      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd4:	d109      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cd6:	4b37      	ldr	r3, [pc, #220]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	08db      	lsrs	r3, r3, #3
 8007cdc:	f003 0303 	and.w	r3, r3, #3
 8007ce0:	4a35      	ldr	r2, [pc, #212]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce8:	e011      	b.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007cea:	4b32      	ldr	r3, [pc, #200]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf6:	d106      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007cfe:	d102      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8007d00:	4b2e      	ldr	r3, [pc, #184]	; (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007d02:	637b      	str	r3, [r7, #52]	; 0x34
 8007d04:	e003      	b.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d0a:	f001 b902 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d0e:	f001 b900 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007d12:	4b28      	ldr	r3, [pc, #160]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007d1c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d24:	f7fc f9a0 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8007d28:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d2a:	f001 b8f2 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d34:	d108      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d36:	f107 0308 	add.w	r3, r7, #8
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fc34 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d44:	f001 b8e5 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007d48:	4b1a      	ldr	r3, [pc, #104]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d10d      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d5a:	d109      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d5c:	4b15      	ldr	r3, [pc, #84]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	08db      	lsrs	r3, r3, #3
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	4a14      	ldr	r2, [pc, #80]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007d68:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6e:	e011      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007d70:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d7c:	d106      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007d84:	d102      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007d88:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8a:	e003      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d90:	f001 b8bf 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d94:	f001 b8bd 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007d98:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007da2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10c      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007daa:	f7fc f989 	bl	80040c0 <HAL_RCC_GetPCLK3Freq>
 8007dae:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007db0:	f001 b8af 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007db4:	44020c00 	.word	0x44020c00
 8007db8:	03d09000 	.word	0x03d09000
 8007dbc:	003d0900 	.word	0x003d0900
 8007dc0:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dca:	d108      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dcc:	f107 0308 	add.w	r3, r7, #8
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe fbe9 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dda:	f001 b89a 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007dde:	4b9f      	ldr	r3, [pc, #636]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d10d      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007df0:	d109      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007df2:	4b9a      	ldr	r3, [pc, #616]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	08db      	lsrs	r3, r3, #3
 8007df8:	f003 0303 	and.w	r3, r3, #3
 8007dfc:	4a98      	ldr	r2, [pc, #608]	; (8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8007e02:	637b      	str	r3, [r7, #52]	; 0x34
 8007e04:	e011      	b.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007e06:	4b95      	ldr	r3, [pc, #596]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e12:	d106      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e1a:	d102      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8007e1c:	4b91      	ldr	r3, [pc, #580]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e20:	e003      	b.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e26:	f001 b874 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e2a:	f001 b872 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007e2e:	4b8b      	ldr	r3, [pc, #556]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e34:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007e38:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d104      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007e40:	f7fc f93e 	bl	80040c0 <HAL_RCC_GetPCLK3Freq>
 8007e44:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e46:	f001 b864 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e50:	d108      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e52:	f107 0308 	add.w	r3, r7, #8
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fba6 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e60:	f001 b857 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007e64:	4b7d      	ldr	r3, [pc, #500]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d10d      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e76:	d109      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e78:	4b78      	ldr	r3, [pc, #480]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	08db      	lsrs	r3, r3, #3
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	4a77      	ldr	r2, [pc, #476]	; (8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007e84:	fa22 f303 	lsr.w	r3, r2, r3
 8007e88:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8a:	e011      	b.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007e8c:	4b73      	ldr	r3, [pc, #460]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e98:	d106      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ea0:	d102      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8007ea2:	4b70      	ldr	r3, [pc, #448]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea6:	e003      	b.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007eac:	f001 b831 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007eb0:	f001 b82f 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007eb4:	4b69      	ldr	r3, [pc, #420]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007eb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007eba:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007ebe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ec6:	f7fc f8cf 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8007eca:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ecc:	f001 b821 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ed6:	d108      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ed8:	f107 0308 	add.w	r3, r7, #8
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe fb63 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ee6:	f001 b814 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007eea:	4b5c      	ldr	r3, [pc, #368]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d10e      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007efc:	d10a      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007efe:	4b57      	ldr	r3, [pc, #348]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	08db      	lsrs	r3, r3, #3
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	4a55      	ldr	r2, [pc, #340]	; (8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f10:	f000 bfff 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f18:	f000 bffb 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007f1c:	4b4f      	ldr	r3, [pc, #316]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007f22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f26:	633b      	str	r3, [r7, #48]	; 0x30
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007f2e:	d056      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007f36:	f200 808b 	bhi.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f40:	d03e      	beq.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f48:	f200 8082 	bhi.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f52:	d027      	beq.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f5a:	d879      	bhi.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f62:	d017      	beq.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f6a:	d871      	bhi.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d004      	beq.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f78:	d004      	beq.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8007f7a:	e069      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007f7c:	f7fc f8a0 	bl	80040c0 <HAL_RCC_GetPCLK3Freq>
 8007f80:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007f82:	e068      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f84:	f107 0314 	add.w	r3, r7, #20
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe f9a3 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f92:	e060      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f94:	f107 0308 	add.w	r3, r7, #8
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe fb05 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fa2:	e058      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007fa4:	4b2d      	ldr	r3, [pc, #180]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d103      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8007fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007fb8:	e04d      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fbe:	e04a      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007fc0:	4b26      	ldr	r3, [pc, #152]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fce:	d103      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007fd0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007fd4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007fd6:	e03e      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fdc:	e03b      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fde:	4b1f      	ldr	r3, [pc, #124]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fe4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007fe8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fea:	4b1c      	ldr	r3, [pc, #112]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d10c      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d109      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ffc:	4b17      	ldr	r3, [pc, #92]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	08db      	lsrs	r3, r3, #3
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	4a16      	ldr	r2, [pc, #88]	; (8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008008:	fa22 f303 	lsr.w	r3, r2, r3
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
 800800e:	e01e      	b.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008010:	4b12      	ldr	r3, [pc, #72]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800801c:	d106      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008024:	d102      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008026:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
 800802a:	e010      	b.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800802c:	4b0b      	ldr	r3, [pc, #44]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008038:	d106      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800803a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008040:	d102      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008042:	4b09      	ldr	r3, [pc, #36]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
 8008046:	e002      	b.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800804c:	e003      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800804e:	e002      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008054:	bf00      	nop
          }
        }
        break;
 8008056:	f000 bf5c 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800805a:	bf00      	nop
 800805c:	44020c00 	.word	0x44020c00
 8008060:	03d09000 	.word	0x03d09000
 8008064:	003d0900 	.word	0x003d0900
 8008068:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800806c:	4b9e      	ldr	r3, [pc, #632]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800806e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008072:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008076:	633b      	str	r3, [r7, #48]	; 0x30
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800807e:	d056      	beq.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008082:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008086:	f200 808b 	bhi.w	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008090:	d03e      	beq.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008098:	f200 8082 	bhi.w	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080a2:	d027      	beq.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080aa:	d879      	bhi.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080b2:	d017      	beq.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ba:	d871      	bhi.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d004      	beq.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c8:	d004      	beq.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80080ca:	e069      	b.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80080cc:	f7fb ffcc 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80080d0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80080d2:	e068      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080d4:	f107 0314 	add.w	r3, r7, #20
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe f8fb 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080e2:	e060      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e4:	f107 0308 	add.w	r3, r7, #8
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fe fa5d 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080f2:	e058      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080f4:	4b7c      	ldr	r3, [pc, #496]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d103      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008106:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008108:	e04d      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800810e:	e04a      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008110:	4b75      	ldr	r3, [pc, #468]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800811a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800811e:	d103      	bne.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008120:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008124:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008126:	e03e      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800812c:	e03b      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800812e:	4b6e      	ldr	r3, [pc, #440]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008134:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008138:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800813a:	4b6b      	ldr	r3, [pc, #428]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b02      	cmp	r3, #2
 8008144:	d10c      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d109      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800814c:	4b66      	ldr	r3, [pc, #408]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	08db      	lsrs	r3, r3, #3
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	4a65      	ldr	r2, [pc, #404]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008158:	fa22 f303 	lsr.w	r3, r2, r3
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
 800815e:	e01e      	b.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008160:	4b61      	ldr	r3, [pc, #388]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816c:	d106      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008174:	d102      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008176:	4b5e      	ldr	r3, [pc, #376]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008178:	637b      	str	r3, [r7, #52]	; 0x34
 800817a:	e010      	b.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800817c:	4b5a      	ldr	r3, [pc, #360]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008188:	d106      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800818a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008190:	d102      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008192:	4b58      	ldr	r3, [pc, #352]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008194:	637b      	str	r3, [r7, #52]	; 0x34
 8008196:	e002      	b.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800819c:	e003      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800819e:	e002      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081a4:	bf00      	nop
          }
        }
        break;
 80081a6:	f000 beb4 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80081aa:	4b4f      	ldr	r3, [pc, #316]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80081ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80081b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80081b4:	633b      	str	r3, [r7, #48]	; 0x30
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081bc:	d056      	beq.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081c4:	f200 808b 	bhi.w	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081ce:	d03e      	beq.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081d6:	f200 8082 	bhi.w	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081e0:	d027      	beq.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081e8:	d879      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f0:	d017      	beq.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f8:	d871      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008206:	d004      	beq.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008208:	e069      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800820a:	f7fb ff59 	bl	80040c0 <HAL_RCC_GetPCLK3Freq>
 800820e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008210:	e068      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008212:	f107 0314 	add.w	r3, r7, #20
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe f85c 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008220:	e060      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008222:	f107 0308 	add.w	r3, r7, #8
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe f9be 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008230:	e058      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008232:	4b2d      	ldr	r3, [pc, #180]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b02      	cmp	r3, #2
 800823e:	d103      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008244:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008246:	e04d      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800824c:	e04a      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800824e:	4b26      	ldr	r3, [pc, #152]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800825c:	d103      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800825e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008262:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008264:	e03e      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800826a:	e03b      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800826c:	4b1e      	ldr	r3, [pc, #120]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800826e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008272:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008276:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008278:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b02      	cmp	r3, #2
 8008282:	d10c      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800828a:	4b17      	ldr	r3, [pc, #92]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	4a15      	ldr	r2, [pc, #84]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008296:	fa22 f303 	lsr.w	r3, r2, r3
 800829a:	637b      	str	r3, [r7, #52]	; 0x34
 800829c:	e01e      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800829e:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082aa:	d106      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b2:	d102      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80082b4:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80082b6:	637b      	str	r3, [r7, #52]	; 0x34
 80082b8:	e010      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082ba:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082c6:	d106      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082ce:	d102      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80082d0:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
 80082d4:	e002      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80082da:	e003      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80082dc:	e002      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082e2:	bf00      	nop
          }
        }
        break;
 80082e4:	f000 be15 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082e8:	44020c00 	.word	0x44020c00
 80082ec:	03d09000 	.word	0x03d09000
 80082f0:	003d0900 	.word	0x003d0900
 80082f4:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80082f8:	4b9e      	ldr	r3, [pc, #632]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80082fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80082fe:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8008302:	633b      	str	r3, [r7, #48]	; 0x30
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800830a:	d056      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008312:	f200 808b 	bhi.w	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800831c:	d03e      	beq.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008324:	f200 8082 	bhi.w	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800832e:	d027      	beq.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008336:	d879      	bhi.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800833e:	d017      	beq.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008346:	d871      	bhi.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	2b00      	cmp	r3, #0
 800834c:	d004      	beq.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008354:	d004      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008356:	e069      	b.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008358:	f7fb feb2 	bl	80040c0 <HAL_RCC_GetPCLK3Freq>
 800835c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800835e:	e068      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008360:	f107 0314 	add.w	r3, r7, #20
 8008364:	4618      	mov	r0, r3
 8008366:	f7fd ffb5 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800836e:	e060      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008370:	f107 0308 	add.w	r3, r7, #8
 8008374:	4618      	mov	r0, r3
 8008376:	f7fe f917 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800837e:	e058      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008380:	4b7c      	ldr	r3, [pc, #496]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b02      	cmp	r3, #2
 800838c:	d103      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800838e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008392:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008394:	e04d      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800839a:	e04a      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800839c:	4b75      	ldr	r3, [pc, #468]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800839e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083aa:	d103      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80083ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80083b2:	e03e      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083b8:	e03b      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083ba:	4b6e      	ldr	r3, [pc, #440]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083c6:	4b6b      	ldr	r3, [pc, #428]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d10c      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d109      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083d8:	4b66      	ldr	r3, [pc, #408]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	08db      	lsrs	r3, r3, #3
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	4a65      	ldr	r2, [pc, #404]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80083e4:	fa22 f303 	lsr.w	r3, r2, r3
 80083e8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ea:	e01e      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083ec:	4b61      	ldr	r3, [pc, #388]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f8:	d106      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008400:	d102      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008402:	4b5e      	ldr	r3, [pc, #376]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008404:	637b      	str	r3, [r7, #52]	; 0x34
 8008406:	e010      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008408:	4b5a      	ldr	r3, [pc, #360]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008414:	d106      	bne.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800841c:	d102      	bne.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800841e:	4b58      	ldr	r3, [pc, #352]	; (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
 8008422:	e002      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008428:	e003      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800842a:	e002      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008430:	bf00      	nop
          }
        }
        break;
 8008432:	f000 bd6e 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008436:	4b4f      	ldr	r3, [pc, #316]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008438:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800843c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008440:	633b      	str	r3, [r7, #48]	; 0x30
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008448:	d056      	beq.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008450:	f200 808b 	bhi.w	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800845a:	d03e      	beq.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008462:	f200 8082 	bhi.w	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800846c:	d027      	beq.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008474:	d879      	bhi.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800847c:	d017      	beq.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008484:	d871      	bhi.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	2b00      	cmp	r3, #0
 800848a:	d004      	beq.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008492:	d004      	beq.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008494:	e069      	b.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008496:	f7fb fe13 	bl	80040c0 <HAL_RCC_GetPCLK3Freq>
 800849a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800849c:	e068      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800849e:	f107 0314 	add.w	r3, r7, #20
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fd ff16 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084ac:	e060      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe f878 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084bc:	e058      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084be:	4b2d      	ldr	r3, [pc, #180]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80084c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d103      	bne.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80084cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084d0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084d2:	e04d      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084d8:	e04a      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80084da:	4b26      	ldr	r3, [pc, #152]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80084dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084e8:	d103      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80084ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084f0:	e03e      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084f6:	e03b      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084f8:	4b1e      	ldr	r3, [pc, #120]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80084fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008504:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b02      	cmp	r3, #2
 800850e:	d10c      	bne.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	2b00      	cmp	r3, #0
 8008514:	d109      	bne.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008516:	4b17      	ldr	r3, [pc, #92]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	08db      	lsrs	r3, r3, #3
 800851c:	f003 0303 	and.w	r3, r3, #3
 8008520:	4a15      	ldr	r2, [pc, #84]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008522:	fa22 f303 	lsr.w	r3, r2, r3
 8008526:	637b      	str	r3, [r7, #52]	; 0x34
 8008528:	e01e      	b.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800852a:	4b12      	ldr	r3, [pc, #72]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008536:	d106      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853e:	d102      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008540:	4b0e      	ldr	r3, [pc, #56]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008542:	637b      	str	r3, [r7, #52]	; 0x34
 8008544:	e010      	b.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008546:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800854e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008552:	d106      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800855a:	d102      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800855c:	4b08      	ldr	r3, [pc, #32]	; (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800855e:	637b      	str	r3, [r7, #52]	; 0x34
 8008560:	e002      	b.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008566:	e003      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008568:	e002      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800856e:	bf00      	nop
          }
        }
        break;
 8008570:	f000 bccf 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008574:	44020c00 	.word	0x44020c00
 8008578:	03d09000 	.word	0x03d09000
 800857c:	003d0900 	.word	0x003d0900
 8008580:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008584:	4b9e      	ldr	r3, [pc, #632]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008586:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800858a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800858e:	633b      	str	r3, [r7, #48]	; 0x30
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008596:	d056      	beq.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800859e:	f200 808b 	bhi.w	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a8:	d03e      	beq.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b0:	f200 8082 	bhi.w	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085ba:	d027      	beq.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085c2:	d879      	bhi.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ca:	d017      	beq.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085d2:	d871      	bhi.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d004      	beq.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085e0:	d004      	beq.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 80085e2:	e069      	b.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80085e4:	f7fb fd6c 	bl	80040c0 <HAL_RCC_GetPCLK3Freq>
 80085e8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80085ea:	e068      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ec:	f107 0314 	add.w	r3, r7, #20
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fd fe6f 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085fa:	e060      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085fc:	f107 0308 	add.w	r3, r7, #8
 8008600:	4618      	mov	r0, r3
 8008602:	f7fd ffd1 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800860a:	e058      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800860c:	4b7c      	ldr	r3, [pc, #496]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800860e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b02      	cmp	r3, #2
 8008618:	d103      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800861a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008620:	e04d      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008626:	e04a      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008628:	4b75      	ldr	r3, [pc, #468]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800862a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800862e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008636:	d103      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8008638:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800863c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800863e:	e03e      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008644:	e03b      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008646:	4b6e      	ldr	r3, [pc, #440]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800864c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008652:	4b6b      	ldr	r3, [pc, #428]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b02      	cmp	r3, #2
 800865c:	d10c      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d109      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008664:	4b66      	ldr	r3, [pc, #408]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	08db      	lsrs	r3, r3, #3
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	4a65      	ldr	r2, [pc, #404]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008670:	fa22 f303 	lsr.w	r3, r2, r3
 8008674:	637b      	str	r3, [r7, #52]	; 0x34
 8008676:	e01e      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008678:	4b61      	ldr	r3, [pc, #388]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008684:	d106      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868c:	d102      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800868e:	4b5e      	ldr	r3, [pc, #376]	; (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008690:	637b      	str	r3, [r7, #52]	; 0x34
 8008692:	e010      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008694:	4b5a      	ldr	r3, [pc, #360]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086a0:	d106      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086a8:	d102      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80086aa:	4b58      	ldr	r3, [pc, #352]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80086ac:	637b      	str	r3, [r7, #52]	; 0x34
 80086ae:	e002      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80086b4:	e003      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80086b6:	e002      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086bc:	bf00      	nop
          }
        }
        break;
 80086be:	f000 bc28 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80086c2:	4b4f      	ldr	r3, [pc, #316]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80086c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086cc:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80086ce:	4b4c      	ldr	r3, [pc, #304]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086da:	d106      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d103      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80086e2:	4b4a      	ldr	r3, [pc, #296]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80086e4:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80086e6:	f000 bc14 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086f0:	d108      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086f2:	f107 0320 	add.w	r3, r7, #32
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fd fc82 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008700:	f000 bc07 	b.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800870a:	d107      	bne.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800870c:	f107 0314 	add.w	r3, r7, #20
 8008710:	4618      	mov	r0, r3
 8008712:	f7fd fddf 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800871a:	e3fa      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008720:	e3f7      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008722:	4b37      	ldr	r3, [pc, #220]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	633b      	str	r3, [r7, #48]	; 0x30
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	2b04      	cmp	r3, #4
 8008732:	d861      	bhi.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8008734:	a201      	add	r2, pc, #4	; (adr r2, 800873c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	08008751 	.word	0x08008751
 8008740:	08008761 	.word	0x08008761
 8008744:	08008771 	.word	0x08008771
 8008748:	08008781 	.word	0x08008781
 800874c:	08008787 	.word	0x08008787
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008750:	f107 0320 	add.w	r3, r7, #32
 8008754:	4618      	mov	r0, r3
 8008756:	f7fd fc53 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800875e:	e04e      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008760:	f107 0314 	add.w	r3, r7, #20
 8008764:	4618      	mov	r0, r3
 8008766:	f7fd fdb5 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800876e:	e046      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008770:	f107 0308 	add.w	r3, r7, #8
 8008774:	4618      	mov	r0, r3
 8008776:	f7fd ff17 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800877e:	e03e      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008780:	4b23      	ldr	r3, [pc, #140]	; (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8008782:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008784:	e03b      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008786:	4b1e      	ldr	r3, [pc, #120]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800878c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008790:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008792:	4b1b      	ldr	r3, [pc, #108]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b02      	cmp	r3, #2
 800879c:	d10c      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d109      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087a4:	4b16      	ldr	r3, [pc, #88]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	08db      	lsrs	r3, r3, #3
 80087aa:	f003 0303 	and.w	r3, r3, #3
 80087ae:	4a15      	ldr	r2, [pc, #84]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80087b0:	fa22 f303 	lsr.w	r3, r2, r3
 80087b4:	637b      	str	r3, [r7, #52]	; 0x34
 80087b6:	e01e      	b.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087b8:	4b11      	ldr	r3, [pc, #68]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087c4:	d106      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087cc:	d102      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087ce:	4b0e      	ldr	r3, [pc, #56]	; (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80087d0:	637b      	str	r3, [r7, #52]	; 0x34
 80087d2:	e010      	b.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087e0:	d106      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087e8:	d102      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80087ea:	4b08      	ldr	r3, [pc, #32]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80087ec:	637b      	str	r3, [r7, #52]	; 0x34
 80087ee:	e002      	b.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80087f4:	e003      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80087f6:	e002      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087fc:	bf00      	nop
          }
        }
        break;
 80087fe:	e388      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008800:	44020c00 	.word	0x44020c00
 8008804:	03d09000 	.word	0x03d09000
 8008808:	003d0900 	.word	0x003d0900
 800880c:	007a1200 	.word	0x007a1200
 8008810:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008814:	4ba9      	ldr	r3, [pc, #676]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800881a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800881e:	633b      	str	r3, [r7, #48]	; 0x30
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	2b20      	cmp	r3, #32
 8008824:	f200 809a 	bhi.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8008828:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882e:	bf00      	nop
 8008830:	080088b5 	.word	0x080088b5
 8008834:	0800895d 	.word	0x0800895d
 8008838:	0800895d 	.word	0x0800895d
 800883c:	0800895d 	.word	0x0800895d
 8008840:	0800895d 	.word	0x0800895d
 8008844:	0800895d 	.word	0x0800895d
 8008848:	0800895d 	.word	0x0800895d
 800884c:	0800895d 	.word	0x0800895d
 8008850:	080088c5 	.word	0x080088c5
 8008854:	0800895d 	.word	0x0800895d
 8008858:	0800895d 	.word	0x0800895d
 800885c:	0800895d 	.word	0x0800895d
 8008860:	0800895d 	.word	0x0800895d
 8008864:	0800895d 	.word	0x0800895d
 8008868:	0800895d 	.word	0x0800895d
 800886c:	0800895d 	.word	0x0800895d
 8008870:	080088d5 	.word	0x080088d5
 8008874:	0800895d 	.word	0x0800895d
 8008878:	0800895d 	.word	0x0800895d
 800887c:	0800895d 	.word	0x0800895d
 8008880:	0800895d 	.word	0x0800895d
 8008884:	0800895d 	.word	0x0800895d
 8008888:	0800895d 	.word	0x0800895d
 800888c:	0800895d 	.word	0x0800895d
 8008890:	080088e5 	.word	0x080088e5
 8008894:	0800895d 	.word	0x0800895d
 8008898:	0800895d 	.word	0x0800895d
 800889c:	0800895d 	.word	0x0800895d
 80088a0:	0800895d 	.word	0x0800895d
 80088a4:	0800895d 	.word	0x0800895d
 80088a8:	0800895d 	.word	0x0800895d
 80088ac:	0800895d 	.word	0x0800895d
 80088b0:	080088eb 	.word	0x080088eb
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088b4:	f107 0320 	add.w	r3, r7, #32
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fd fba1 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088c2:	e04e      	b.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088c4:	f107 0314 	add.w	r3, r7, #20
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fd fd03 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088d2:	e046      	b.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088d4:	f107 0308 	add.w	r3, r7, #8
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fd fe65 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088e2:	e03e      	b.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80088e4:	4b76      	ldr	r3, [pc, #472]	; (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80088e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088e8:	e03b      	b.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088ea:	4b74      	ldr	r3, [pc, #464]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088f0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80088f4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088f6:	4b71      	ldr	r3, [pc, #452]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d10c      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d109      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008908:	4b6c      	ldr	r3, [pc, #432]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	08db      	lsrs	r3, r3, #3
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	4a6c      	ldr	r2, [pc, #432]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
 8008918:	637b      	str	r3, [r7, #52]	; 0x34
 800891a:	e01e      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800891c:	4b67      	ldr	r3, [pc, #412]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008928:	d106      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800892a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008930:	d102      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008932:	4b65      	ldr	r3, [pc, #404]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008934:	637b      	str	r3, [r7, #52]	; 0x34
 8008936:	e010      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008938:	4b60      	ldr	r3, [pc, #384]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008944:	d106      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8008946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800894c:	d102      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800894e:	4b5f      	ldr	r3, [pc, #380]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008950:	637b      	str	r3, [r7, #52]	; 0x34
 8008952:	e002      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008958:	e003      	b.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800895a:	e002      	b.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800895c:	2300      	movs	r3, #0
 800895e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008960:	bf00      	nop
          }
        }
        break;
 8008962:	e2d6      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008964:	4b55      	ldr	r3, [pc, #340]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800896a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800896e:	633b      	str	r3, [r7, #48]	; 0x30
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008976:	d031      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800897e:	d866      	bhi.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	2bc0      	cmp	r3, #192	; 0xc0
 8008984:	d027      	beq.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	2bc0      	cmp	r3, #192	; 0xc0
 800898a:	d860      	bhi.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d019      	beq.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	2b80      	cmp	r3, #128	; 0x80
 8008996:	d85a      	bhi.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	2b40      	cmp	r3, #64	; 0x40
 80089a2:	d008      	beq.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80089a4:	e053      	b.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089a6:	f107 0320 	add.w	r3, r7, #32
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fd fb28 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089b4:	e04e      	b.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089b6:	f107 0314 	add.w	r3, r7, #20
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fd fc8a 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089c4:	e046      	b.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089c6:	f107 0308 	add.w	r3, r7, #8
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fd fdec 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089d4:	e03e      	b.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80089d6:	4b3a      	ldr	r3, [pc, #232]	; (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80089d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089da:	e03b      	b.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089dc:	4b37      	ldr	r3, [pc, #220]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80089de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80089e6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089e8:	4b34      	ldr	r3, [pc, #208]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d10c      	bne.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d109      	bne.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089fa:	4b30      	ldr	r3, [pc, #192]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	08db      	lsrs	r3, r3, #3
 8008a00:	f003 0303 	and.w	r3, r3, #3
 8008a04:	4a2f      	ldr	r2, [pc, #188]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008a06:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0c:	e01e      	b.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a0e:	4b2b      	ldr	r3, [pc, #172]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a1a:	d106      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a22:	d102      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a24:	4b28      	ldr	r3, [pc, #160]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008a26:	637b      	str	r3, [r7, #52]	; 0x34
 8008a28:	e010      	b.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a2a:	4b24      	ldr	r3, [pc, #144]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a36:	d106      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a3e:	d102      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008a40:	4b22      	ldr	r3, [pc, #136]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008a42:	637b      	str	r3, [r7, #52]	; 0x34
 8008a44:	e002      	b.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008a4a:	e003      	b.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008a4c:	e002      	b.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008a52:	bf00      	nop
          }
        }
        break;
 8008a54:	e25d      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8008a56:	4b19      	ldr	r3, [pc, #100]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a5c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008a60:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d103      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008a68:	f7fb fb14 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8008a6c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008a6e:	e250      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008a70:	4b12      	ldr	r3, [pc, #72]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a7c:	d10b      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a84:	d107      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a86:	f107 0314 	add.w	r3, r7, #20
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fd fc22 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	637b      	str	r3, [r7, #52]	; 0x34
 8008a94:	e04f      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa2:	d115      	bne.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aaa:	d111      	bne.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aac:	f107 0308 	add.w	r3, r7, #8
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fd fd79 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aba:	e03c      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008abc:	44020c00 	.word	0x44020c00
 8008ac0:	00bb8000 	.word	0x00bb8000
 8008ac4:	03d09000 	.word	0x03d09000
 8008ac8:	003d0900 	.word	0x003d0900
 8008acc:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008ad0:	4b94      	ldr	r3, [pc, #592]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0302 	and.w	r3, r3, #2
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d10d      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008ae2:	d109      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ae4:	4b8f      	ldr	r3, [pc, #572]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	08db      	lsrs	r3, r3, #3
 8008aea:	f003 0303 	and.w	r3, r3, #3
 8008aee:	4a8e      	ldr	r2, [pc, #568]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008af0:	fa22 f303 	lsr.w	r3, r2, r3
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
 8008af6:	e01e      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008af8:	4b8a      	ldr	r3, [pc, #552]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b04:	d106      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b0c:	d102      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8008b0e:	4b87      	ldr	r3, [pc, #540]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008b10:	637b      	str	r3, [r7, #52]	; 0x34
 8008b12:	e010      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008b14:	4b83      	ldr	r3, [pc, #524]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b20:	d106      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008b28:	d102      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8008b2a:	4b81      	ldr	r3, [pc, #516]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b2e:	e002      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b34:	e1ed      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b36:	e1ec      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008b38:	4b7a      	ldr	r3, [pc, #488]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b3e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008b42:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008b4a:	f7fb fab9 	bl	80040c0 <HAL_RCC_GetPCLK3Freq>
 8008b4e:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008b50:	e1df      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008b52:	4b74      	ldr	r3, [pc, #464]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b5e:	d10b      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b66:	d107      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b68:	f107 0314 	add.w	r3, r7, #20
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fd fbb1 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	637b      	str	r3, [r7, #52]	; 0x34
 8008b76:	e045      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008b78:	4b6a      	ldr	r3, [pc, #424]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b84:	d10b      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b8c:	d107      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b8e:	f107 0308 	add.w	r3, r7, #8
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fd fd08 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9c:	e032      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008b9e:	4b61      	ldr	r3, [pc, #388]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d10d      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bb0:	d109      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bb2:	4b5c      	ldr	r3, [pc, #368]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	08db      	lsrs	r3, r3, #3
 8008bb8:	f003 0303 	and.w	r3, r3, #3
 8008bbc:	4a5a      	ldr	r2, [pc, #360]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bc4:	e01e      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008bc6:	4b57      	ldr	r3, [pc, #348]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bd2:	d106      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bda:	d102      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008bdc:	4b53      	ldr	r3, [pc, #332]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008bde:	637b      	str	r3, [r7, #52]	; 0x34
 8008be0:	e010      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008be2:	4b50      	ldr	r3, [pc, #320]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bee:	d106      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008bf6:	d102      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008bf8:	4b4d      	ldr	r3, [pc, #308]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8008bfc:	e002      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c02:	e186      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c04:	e185      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008c06:	4b47      	ldr	r3, [pc, #284]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c0c:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008c10:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d103      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008c18:	f7fb fa3c 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8008c1c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008c1e:	e178      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008c20:	4b40      	ldr	r3, [pc, #256]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c2c:	d10b      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c34:	d107      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c36:	f107 0314 	add.w	r3, r7, #20
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fd fb4a 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
 8008c44:	e045      	b.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8008c46:	4b37      	ldr	r3, [pc, #220]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c52:	d10b      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c5a:	d107      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c5c:	f107 0308 	add.w	r3, r7, #8
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fd fca1 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	637b      	str	r3, [r7, #52]	; 0x34
 8008c6a:	e032      	b.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008c6c:	4b2d      	ldr	r3, [pc, #180]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0302 	and.w	r3, r3, #2
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d10d      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008c7e:	d109      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c80:	4b28      	ldr	r3, [pc, #160]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	08db      	lsrs	r3, r3, #3
 8008c86:	f003 0303 	and.w	r3, r3, #3
 8008c8a:	4a27      	ldr	r2, [pc, #156]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
 8008c92:	e01e      	b.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008c94:	4b23      	ldr	r3, [pc, #140]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca0:	d106      	bne.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ca8:	d102      	bne.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8008caa:	4b20      	ldr	r3, [pc, #128]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
 8008cae:	e010      	b.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008cb0:	4b1c      	ldr	r3, [pc, #112]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cbc:	d106      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008cc4:	d102      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8008cc6:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8008cca:	e002      	b.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008cd0:	e11f      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cd2:	e11e      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008cd4:	4b13      	ldr	r3, [pc, #76]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008cd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008cda:	f003 0303 	and.w	r3, r3, #3
 8008cde:	633b      	str	r3, [r7, #48]	; 0x30
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d85f      	bhi.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8008ce6:	a201      	add	r2, pc, #4	; (adr r2, 8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8008ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cec:	08008cfd 	.word	0x08008cfd
 8008cf0:	08008d05 	.word	0x08008d05
 8008cf4:	08008d15 	.word	0x08008d15
 8008cf8:	08008d35 	.word	0x08008d35

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008cfc:	f7fb f998 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8008d00:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008d02:	e053      	b.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d04:	f107 0320 	add.w	r3, r7, #32
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fd f979 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d12:	e04b      	b.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d14:	f107 0314 	add.w	r3, r7, #20
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fd fadb 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d22:	e043      	b.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008d24:	44020c00 	.word	0x44020c00
 8008d28:	03d09000 	.word	0x03d09000
 8008d2c:	003d0900 	.word	0x003d0900
 8008d30:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d34:	4b79      	ldr	r3, [pc, #484]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d3a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d40:	4b76      	ldr	r3, [pc, #472]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d10c      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d52:	4b72      	ldr	r3, [pc, #456]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	08db      	lsrs	r3, r3, #3
 8008d58:	f003 0303 	and.w	r3, r3, #3
 8008d5c:	4a70      	ldr	r2, [pc, #448]	; (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8008d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d62:	637b      	str	r3, [r7, #52]	; 0x34
 8008d64:	e01e      	b.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d66:	4b6d      	ldr	r3, [pc, #436]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d72:	d106      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7a:	d102      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d7c:	4b69      	ldr	r3, [pc, #420]	; (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8008d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d80:	e010      	b.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d82:	4b66      	ldr	r3, [pc, #408]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d8e:	d106      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8008d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d96:	d102      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d98:	4b63      	ldr	r3, [pc, #396]	; (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8008d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d9c:	e002      	b.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008da2:	e003      	b.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008da4:	e002      	b.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008daa:	bf00      	nop
          }
        }
        break;
 8008dac:	e0b1      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008dae:	4b5b      	ldr	r3, [pc, #364]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008db4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008db8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008dba:	4b58      	ldr	r3, [pc, #352]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d106      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d103      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8008dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd4:	e01f      	b.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008dd6:	4b51      	ldr	r3, [pc, #324]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008de4:	d106      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	2b40      	cmp	r3, #64	; 0x40
 8008dea:	d103      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8008dec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008df0:	637b      	str	r3, [r7, #52]	; 0x34
 8008df2:	e010      	b.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008df4:	4b49      	ldr	r3, [pc, #292]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e00:	d106      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	2b80      	cmp	r3, #128	; 0x80
 8008e06:	d103      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8008e08:	f248 0312 	movw	r3, #32786	; 0x8012
 8008e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e0e:	e002      	b.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008e14:	e07d      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e16:	e07c      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008e18:	4b40      	ldr	r3, [pc, #256]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e22:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008e24:	4b3d      	ldr	r3, [pc, #244]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e30:	d105      	bne.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d102      	bne.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8008e38:	4b3c      	ldr	r3, [pc, #240]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e3c:	e031      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008e3e:	4b37      	ldr	r3, [pc, #220]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e4a:	d10a      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4e:	2b10      	cmp	r3, #16
 8008e50:	d107      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e52:	f107 0320 	add.w	r3, r7, #32
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fd f8d2 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e60:	e01f      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008e62:	4b2e      	ldr	r3, [pc, #184]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d106      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	d103      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8008e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e7c:	e011      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008e7e:	4b27      	ldr	r3, [pc, #156]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e8c:	d106      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	2b30      	cmp	r3, #48	; 0x30
 8008e92:	d103      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8008e94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008e98:	637b      	str	r3, [r7, #52]	; 0x34
 8008e9a:	e002      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008ea0:	e037      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ea2:	e036      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008ea4:	4b1d      	ldr	r3, [pc, #116]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008ea6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008eaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008eae:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	2b10      	cmp	r3, #16
 8008eb4:	d107      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008eb6:	f107 0320 	add.w	r3, r7, #32
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fd f8a0 	bl	8006000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008ec4:	e025      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008ec6:	4b15      	ldr	r3, [pc, #84]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed2:	d10a      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	d107      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eda:	f107 0308 	add.w	r3, r7, #8
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fd fb62 	bl	80065a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee8:	e00f      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008eea:	4b0c      	ldr	r3, [pc, #48]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ef6:	d105      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	2b30      	cmp	r3, #48	; 0x30
 8008efc:	d102      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8008efe:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008f00:	637b      	str	r3, [r7, #52]	; 0x34
 8008f02:	e002      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8008f08:	e003      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f0a:	e002      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f10:	bf00      	nop
    }
  }

  return (frequency);
 8008f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	373c      	adds	r7, #60	; 0x3c
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd90      	pop	{r4, r7, pc}
 8008f1c:	44020c00 	.word	0x44020c00
 8008f20:	03d09000 	.word	0x03d09000
 8008f24:	003d0900 	.word	0x003d0900
 8008f28:	007a1200 	.word	0x007a1200
 8008f2c:	02dc6c00 	.word	0x02dc6c00

08008f30 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008f38:	4b48      	ldr	r3, [pc, #288]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a47      	ldr	r2, [pc, #284]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f42:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f44:	f7f8 f9dc 	bl	8001300 <HAL_GetTick>
 8008f48:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f4a:	e008      	b.n	8008f5e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f4c:	f7f8 f9d8 	bl	8001300 <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d901      	bls.n	8008f5e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e07a      	b.n	8009054 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f5e:	4b3f      	ldr	r3, [pc, #252]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f0      	bne.n	8008f4c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008f6a:	4b3c      	ldr	r3, [pc, #240]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f72:	f023 0303 	bic.w	r3, r3, #3
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6811      	ldr	r1, [r2, #0]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	6852      	ldr	r2, [r2, #4]
 8008f7e:	0212      	lsls	r2, r2, #8
 8008f80:	430a      	orrs	r2, r1
 8008f82:	4936      	ldr	r1, [pc, #216]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	025b      	lsls	r3, r3, #9
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	041b      	lsls	r3, r3, #16
 8008fa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	061b      	lsls	r3, r3, #24
 8008fb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fb8:	4928      	ldr	r1, [pc, #160]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008fbe:	4b27      	ldr	r3, [pc, #156]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	f023 020c 	bic.w	r2, r3, #12
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	4924      	ldr	r1, [pc, #144]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008fd0:	4b22      	ldr	r3, [pc, #136]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	f023 0220 	bic.w	r2, r3, #32
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	491f      	ldr	r1, [pc, #124]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008fe2:	4b1e      	ldr	r3, [pc, #120]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fea:	491c      	ldr	r1, [pc, #112]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008ff0:	4b1a      	ldr	r3, [pc, #104]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	4a19      	ldr	r2, [pc, #100]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008ff6:	f023 0310 	bic.w	r3, r3, #16
 8008ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008ffc:	4b17      	ldr	r3, [pc, #92]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009000:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009004:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	6a12      	ldr	r2, [r2, #32]
 800900c:	00d2      	lsls	r2, r2, #3
 800900e:	4913      	ldr	r1, [pc, #76]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8009010:	4313      	orrs	r3, r2
 8009012:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009014:	4b11      	ldr	r3, [pc, #68]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	4a10      	ldr	r2, [pc, #64]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 800901a:	f043 0310 	orr.w	r3, r3, #16
 800901e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009020:	4b0e      	ldr	r3, [pc, #56]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a0d      	ldr	r2, [pc, #52]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8009026:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800902a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800902c:	f7f8 f968 	bl	8001300 <HAL_GetTick>
 8009030:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009032:	e008      	b.n	8009046 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009034:	f7f8 f964 	bl	8001300 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d901      	bls.n	8009046 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e006      	b.n	8009054 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009046:	4b05      	ldr	r3, [pc, #20]	; (800905c <RCCEx_PLL2_Config+0x12c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f0      	beq.n	8009034 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009052:	2300      	movs	r3, #0

}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	44020c00 	.word	0x44020c00

08009060 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009068:	4b48      	ldr	r3, [pc, #288]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a47      	ldr	r2, [pc, #284]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 800906e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009072:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009074:	f7f8 f944 	bl	8001300 <HAL_GetTick>
 8009078:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800907a:	e008      	b.n	800908e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800907c:	f7f8 f940 	bl	8001300 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e07a      	b.n	8009184 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800908e:	4b3f      	ldr	r3, [pc, #252]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1f0      	bne.n	800907c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800909a:	4b3c      	ldr	r3, [pc, #240]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 800909c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80090a2:	f023 0303 	bic.w	r3, r3, #3
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6811      	ldr	r1, [r2, #0]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	6852      	ldr	r2, [r2, #4]
 80090ae:	0212      	lsls	r2, r2, #8
 80090b0:	430a      	orrs	r2, r1
 80090b2:	4936      	ldr	r1, [pc, #216]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 80090b4:	4313      	orrs	r3, r2
 80090b6:	630b      	str	r3, [r1, #48]	; 0x30
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	3b01      	subs	r3, #1
 80090be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	025b      	lsls	r3, r3, #9
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	431a      	orrs	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	041b      	lsls	r3, r3, #16
 80090d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	061b      	lsls	r3, r3, #24
 80090e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090e8:	4928      	ldr	r1, [pc, #160]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090ee:	4b27      	ldr	r3, [pc, #156]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	f023 020c 	bic.w	r2, r3, #12
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	4924      	ldr	r1, [pc, #144]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009100:	4b22      	ldr	r3, [pc, #136]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 8009102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009104:	f023 0220 	bic.w	r2, r3, #32
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	491f      	ldr	r1, [pc, #124]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 800910e:	4313      	orrs	r3, r2
 8009110:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009112:	4b1e      	ldr	r3, [pc, #120]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 8009114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	491c      	ldr	r1, [pc, #112]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 800911c:	4313      	orrs	r3, r2
 800911e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009120:	4b1a      	ldr	r3, [pc, #104]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 8009122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009124:	4a19      	ldr	r2, [pc, #100]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 8009126:	f023 0310 	bic.w	r3, r3, #16
 800912a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800912c:	4b17      	ldr	r3, [pc, #92]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 800912e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009130:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009134:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6a12      	ldr	r2, [r2, #32]
 800913c:	00d2      	lsls	r2, r2, #3
 800913e:	4913      	ldr	r1, [pc, #76]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 8009140:	4313      	orrs	r3, r2
 8009142:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009144:	4b11      	ldr	r3, [pc, #68]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 8009146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009148:	4a10      	ldr	r2, [pc, #64]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 800914a:	f043 0310 	orr.w	r3, r3, #16
 800914e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009150:	4b0e      	ldr	r3, [pc, #56]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a0d      	ldr	r2, [pc, #52]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 8009156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800915a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800915c:	f7f8 f8d0 	bl	8001300 <HAL_GetTick>
 8009160:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009162:	e008      	b.n	8009176 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009164:	f7f8 f8cc 	bl	8001300 <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	2b02      	cmp	r3, #2
 8009170:	d901      	bls.n	8009176 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e006      	b.n	8009184 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009176:	4b05      	ldr	r3, [pc, #20]	; (800918c <RCCEx_PLL3_Config+0x12c>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0f0      	beq.n	8009164 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	44020c00 	.word	0x44020c00

08009190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e042      	b.n	8009228 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d106      	bne.n	80091ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7f7 fe3f 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2224      	movs	r2, #36	; 0x24
 80091be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 0201 	bic.w	r2, r2, #1
 80091d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d002      	beq.n	80091e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fa16 	bl	800960c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f825 	bl	8009230 <UART_SetConfig>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e01b      	b.n	8009228 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800920e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f042 0201 	orr.w	r2, r2, #1
 800921e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fa95 	bl	8009750 <UART_CheckIdleState>
 8009226:	4603      	mov	r3, r0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009234:	b094      	sub	sp, #80	; 0x50
 8009236:	af00      	add	r7, sp, #0
 8009238:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	4b78      	ldr	r3, [pc, #480]	; (8009428 <UART_SetConfig+0x1f8>)
 8009246:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	689a      	ldr	r2, [r3, #8]
 800924c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	431a      	orrs	r2, r3
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	431a      	orrs	r2, r3
 8009258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	4313      	orrs	r3, r2
 800925e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4971      	ldr	r1, [pc, #452]	; (800942c <UART_SetConfig+0x1fc>)
 8009268:	4019      	ands	r1, r3
 800926a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009270:	430b      	orrs	r3, r1
 8009272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009280:	68d9      	ldr	r1, [r3, #12]
 8009282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	ea40 0301 	orr.w	r3, r0, r1
 800928a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	4b64      	ldr	r3, [pc, #400]	; (8009428 <UART_SetConfig+0x1f8>)
 8009298:	429a      	cmp	r2, r3
 800929a:	d009      	beq.n	80092b0 <UART_SetConfig+0x80>
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	4b63      	ldr	r3, [pc, #396]	; (8009430 <UART_SetConfig+0x200>)
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d004      	beq.n	80092b0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	6a1a      	ldr	r2, [r3, #32]
 80092aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ac:	4313      	orrs	r3, r2
 80092ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80092ba:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c4:	430b      	orrs	r3, r1
 80092c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	f023 000f 	bic.w	r0, r3, #15
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	ea40 0301 	orr.w	r3, r0, r1
 80092de:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	4b53      	ldr	r3, [pc, #332]	; (8009434 <UART_SetConfig+0x204>)
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d102      	bne.n	80092f0 <UART_SetConfig+0xc0>
 80092ea:	2301      	movs	r3, #1
 80092ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ee:	e066      	b.n	80093be <UART_SetConfig+0x18e>
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	4b50      	ldr	r3, [pc, #320]	; (8009438 <UART_SetConfig+0x208>)
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d102      	bne.n	8009300 <UART_SetConfig+0xd0>
 80092fa:	2302      	movs	r3, #2
 80092fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092fe:	e05e      	b.n	80093be <UART_SetConfig+0x18e>
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	4b4d      	ldr	r3, [pc, #308]	; (800943c <UART_SetConfig+0x20c>)
 8009306:	429a      	cmp	r2, r3
 8009308:	d102      	bne.n	8009310 <UART_SetConfig+0xe0>
 800930a:	2304      	movs	r3, #4
 800930c:	64bb      	str	r3, [r7, #72]	; 0x48
 800930e:	e056      	b.n	80093be <UART_SetConfig+0x18e>
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	4b4a      	ldr	r3, [pc, #296]	; (8009440 <UART_SetConfig+0x210>)
 8009316:	429a      	cmp	r2, r3
 8009318:	d102      	bne.n	8009320 <UART_SetConfig+0xf0>
 800931a:	2308      	movs	r3, #8
 800931c:	64bb      	str	r3, [r7, #72]	; 0x48
 800931e:	e04e      	b.n	80093be <UART_SetConfig+0x18e>
 8009320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	4b47      	ldr	r3, [pc, #284]	; (8009444 <UART_SetConfig+0x214>)
 8009326:	429a      	cmp	r2, r3
 8009328:	d102      	bne.n	8009330 <UART_SetConfig+0x100>
 800932a:	2310      	movs	r3, #16
 800932c:	64bb      	str	r3, [r7, #72]	; 0x48
 800932e:	e046      	b.n	80093be <UART_SetConfig+0x18e>
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	4b44      	ldr	r3, [pc, #272]	; (8009448 <UART_SetConfig+0x218>)
 8009336:	429a      	cmp	r2, r3
 8009338:	d102      	bne.n	8009340 <UART_SetConfig+0x110>
 800933a:	2320      	movs	r3, #32
 800933c:	64bb      	str	r3, [r7, #72]	; 0x48
 800933e:	e03e      	b.n	80093be <UART_SetConfig+0x18e>
 8009340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	4b41      	ldr	r3, [pc, #260]	; (800944c <UART_SetConfig+0x21c>)
 8009346:	429a      	cmp	r2, r3
 8009348:	d102      	bne.n	8009350 <UART_SetConfig+0x120>
 800934a:	2340      	movs	r3, #64	; 0x40
 800934c:	64bb      	str	r3, [r7, #72]	; 0x48
 800934e:	e036      	b.n	80093be <UART_SetConfig+0x18e>
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	4b3e      	ldr	r3, [pc, #248]	; (8009450 <UART_SetConfig+0x220>)
 8009356:	429a      	cmp	r2, r3
 8009358:	d102      	bne.n	8009360 <UART_SetConfig+0x130>
 800935a:	2380      	movs	r3, #128	; 0x80
 800935c:	64bb      	str	r3, [r7, #72]	; 0x48
 800935e:	e02e      	b.n	80093be <UART_SetConfig+0x18e>
 8009360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	4b3b      	ldr	r3, [pc, #236]	; (8009454 <UART_SetConfig+0x224>)
 8009366:	429a      	cmp	r2, r3
 8009368:	d103      	bne.n	8009372 <UART_SetConfig+0x142>
 800936a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800936e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009370:	e025      	b.n	80093be <UART_SetConfig+0x18e>
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	4b38      	ldr	r3, [pc, #224]	; (8009458 <UART_SetConfig+0x228>)
 8009378:	429a      	cmp	r2, r3
 800937a:	d103      	bne.n	8009384 <UART_SetConfig+0x154>
 800937c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009380:	64bb      	str	r3, [r7, #72]	; 0x48
 8009382:	e01c      	b.n	80093be <UART_SetConfig+0x18e>
 8009384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	4b34      	ldr	r3, [pc, #208]	; (800945c <UART_SetConfig+0x22c>)
 800938a:	429a      	cmp	r2, r3
 800938c:	d103      	bne.n	8009396 <UART_SetConfig+0x166>
 800938e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009392:	64bb      	str	r3, [r7, #72]	; 0x48
 8009394:	e013      	b.n	80093be <UART_SetConfig+0x18e>
 8009396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	4b31      	ldr	r3, [pc, #196]	; (8009460 <UART_SetConfig+0x230>)
 800939c:	429a      	cmp	r2, r3
 800939e:	d103      	bne.n	80093a8 <UART_SetConfig+0x178>
 80093a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80093a6:	e00a      	b.n	80093be <UART_SetConfig+0x18e>
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	4b1e      	ldr	r3, [pc, #120]	; (8009428 <UART_SetConfig+0x1f8>)
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d103      	bne.n	80093ba <UART_SetConfig+0x18a>
 80093b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80093b8:	e001      	b.n	80093be <UART_SetConfig+0x18e>
 80093ba:	2300      	movs	r3, #0
 80093bc:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	4b19      	ldr	r3, [pc, #100]	; (8009428 <UART_SetConfig+0x1f8>)
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d005      	beq.n	80093d4 <UART_SetConfig+0x1a4>
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	4b18      	ldr	r3, [pc, #96]	; (8009430 <UART_SetConfig+0x200>)
 80093ce:	429a      	cmp	r2, r3
 80093d0:	f040 8094 	bne.w	80094fc <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80093d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093d6:	2200      	movs	r2, #0
 80093d8:	623b      	str	r3, [r7, #32]
 80093da:	627a      	str	r2, [r7, #36]	; 0x24
 80093dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80093e0:	f7fd fa4c 	bl	800687c <HAL_RCCEx_GetPeriphCLKFreq>
 80093e4:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80093e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 80f7 	beq.w	80095dc <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	4a1c      	ldr	r2, [pc, #112]	; (8009464 <UART_SetConfig+0x234>)
 80093f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009400:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	4613      	mov	r3, r2
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	4413      	add	r3, r2
 800940c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800940e:	429a      	cmp	r2, r3
 8009410:	d305      	bcc.n	800941e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800941a:	429a      	cmp	r2, r3
 800941c:	d924      	bls.n	8009468 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009424:	e069      	b.n	80094fa <UART_SetConfig+0x2ca>
 8009426:	bf00      	nop
 8009428:	44002400 	.word	0x44002400
 800942c:	cfff69f3 	.word	0xcfff69f3
 8009430:	54002400 	.word	0x54002400
 8009434:	40013800 	.word	0x40013800
 8009438:	40004400 	.word	0x40004400
 800943c:	40004800 	.word	0x40004800
 8009440:	40004c00 	.word	0x40004c00
 8009444:	40005000 	.word	0x40005000
 8009448:	40006400 	.word	0x40006400
 800944c:	40007800 	.word	0x40007800
 8009450:	40007c00 	.word	0x40007c00
 8009454:	40008000 	.word	0x40008000
 8009458:	40006800 	.word	0x40006800
 800945c:	40006c00 	.word	0x40006c00
 8009460:	40008400 	.word	0x40008400
 8009464:	0800a114 	.word	0x0800a114
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946a:	2200      	movs	r2, #0
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	61fa      	str	r2, [r7, #28]
 8009470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	4a64      	ldr	r2, [pc, #400]	; (8009608 <UART_SetConfig+0x3d8>)
 8009476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800947a:	b29b      	uxth	r3, r3
 800947c:	2200      	movs	r2, #0
 800947e:	613b      	str	r3, [r7, #16]
 8009480:	617a      	str	r2, [r7, #20]
 8009482:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009486:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800948a:	f7f6 feff 	bl	800028c <__aeabi_uldivmod>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4610      	mov	r0, r2
 8009494:	4619      	mov	r1, r3
 8009496:	f04f 0200 	mov.w	r2, #0
 800949a:	f04f 0300 	mov.w	r3, #0
 800949e:	020b      	lsls	r3, r1, #8
 80094a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094a4:	0202      	lsls	r2, r0, #8
 80094a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094a8:	6849      	ldr	r1, [r1, #4]
 80094aa:	0849      	lsrs	r1, r1, #1
 80094ac:	2000      	movs	r0, #0
 80094ae:	460c      	mov	r4, r1
 80094b0:	4605      	mov	r5, r0
 80094b2:	eb12 0804 	adds.w	r8, r2, r4
 80094b6:	eb43 0905 	adc.w	r9, r3, r5
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	60bb      	str	r3, [r7, #8]
 80094c2:	60fa      	str	r2, [r7, #12]
 80094c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094c8:	4640      	mov	r0, r8
 80094ca:	4649      	mov	r1, r9
 80094cc:	f7f6 fede 	bl	800028c <__aeabi_uldivmod>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4613      	mov	r3, r2
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094de:	d308      	bcc.n	80094f2 <UART_SetConfig+0x2c2>
 80094e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094e6:	d204      	bcs.n	80094f2 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80094e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094ee:	60da      	str	r2, [r3, #12]
 80094f0:	e003      	b.n	80094fa <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80094f8:	e070      	b.n	80095dc <UART_SetConfig+0x3ac>
 80094fa:	e06f      	b.n	80095dc <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009504:	d13c      	bne.n	8009580 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009508:	2200      	movs	r2, #0
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009512:	f7fd f9b3 	bl	800687c <HAL_RCCEx_GetPeriphCLKFreq>
 8009516:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800951a:	2b00      	cmp	r3, #0
 800951c:	d05e      	beq.n	80095dc <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009522:	4a39      	ldr	r2, [pc, #228]	; (8009608 <UART_SetConfig+0x3d8>)
 8009524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009528:	461a      	mov	r2, r3
 800952a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800952c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009530:	005a      	lsls	r2, r3, #1
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	085b      	lsrs	r3, r3, #1
 8009538:	441a      	add	r2, r3
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009546:	2b0f      	cmp	r3, #15
 8009548:	d916      	bls.n	8009578 <UART_SetConfig+0x348>
 800954a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009550:	d212      	bcs.n	8009578 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009554:	b29b      	uxth	r3, r3
 8009556:	f023 030f 	bic.w	r3, r3, #15
 800955a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800955c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800955e:	085b      	lsrs	r3, r3, #1
 8009560:	b29b      	uxth	r3, r3
 8009562:	f003 0307 	and.w	r3, r3, #7
 8009566:	b29a      	uxth	r2, r3
 8009568:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800956a:	4313      	orrs	r3, r2
 800956c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009574:	60da      	str	r2, [r3, #12]
 8009576:	e031      	b.n	80095dc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800957e:	e02d      	b.n	80095dc <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009582:	2200      	movs	r2, #0
 8009584:	469a      	mov	sl, r3
 8009586:	4693      	mov	fp, r2
 8009588:	4650      	mov	r0, sl
 800958a:	4659      	mov	r1, fp
 800958c:	f7fd f976 	bl	800687c <HAL_RCCEx_GetPeriphCLKFreq>
 8009590:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8009592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009594:	2b00      	cmp	r3, #0
 8009596:	d021      	beq.n	80095dc <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	4a1a      	ldr	r2, [pc, #104]	; (8009608 <UART_SetConfig+0x3d8>)
 800959e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095a2:	461a      	mov	r2, r3
 80095a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80095aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	085b      	lsrs	r3, r3, #1
 80095b0:	441a      	add	r2, r3
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095be:	2b0f      	cmp	r3, #15
 80095c0:	d909      	bls.n	80095d6 <UART_SetConfig+0x3a6>
 80095c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095c8:	d205      	bcs.n	80095d6 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	60da      	str	r2, [r3, #12]
 80095d4:	e002      	b.n	80095dc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095de:	2201      	movs	r2, #1
 80095e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	2201      	movs	r2, #1
 80095e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	2200      	movs	r2, #0
 80095f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80095f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f4:	2200      	movs	r2, #0
 80095f6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80095f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3750      	adds	r7, #80	; 0x50
 8009600:	46bd      	mov	sp, r7
 8009602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009606:	bf00      	nop
 8009608:	0800a114 	.word	0x0800a114

0800960c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009618:	f003 0308 	and.w	r3, r3, #8
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00a      	beq.n	8009636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	430a      	orrs	r2, r1
 8009656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00a      	beq.n	800967a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967e:	f003 0304 	and.w	r3, r3, #4
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a0:	f003 0310 	and.w	r3, r3, #16
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00a      	beq.n	80096be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c2:	f003 0320 	and.w	r3, r3, #32
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00a      	beq.n	80096e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	430a      	orrs	r2, r1
 80096de:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01a      	beq.n	8009722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	430a      	orrs	r2, r1
 8009700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800970a:	d10a      	bne.n	8009722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00a      	beq.n	8009744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	430a      	orrs	r2, r1
 8009742:	605a      	str	r2, [r3, #4]
  }
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b098      	sub	sp, #96	; 0x60
 8009754:	af02      	add	r7, sp, #8
 8009756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009760:	f7f7 fdce 	bl	8001300 <HAL_GetTick>
 8009764:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0308 	and.w	r3, r3, #8
 8009770:	2b08      	cmp	r3, #8
 8009772:	d12f      	bne.n	80097d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977c:	2200      	movs	r2, #0
 800977e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f88e 	bl	80098a4 <UART_WaitOnFlagUntilTimeout>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d022      	beq.n	80097d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800979c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097a2:	653b      	str	r3, [r7, #80]	; 0x50
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ac:	647b      	str	r3, [r7, #68]	; 0x44
 80097ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097b4:	e841 2300 	strex	r3, r2, [r1]
 80097b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e6      	bne.n	800978e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2220      	movs	r2, #32
 80097c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e063      	b.n	800989c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d149      	bne.n	8009876 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ea:	2200      	movs	r2, #0
 80097ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f857 	bl	80098a4 <UART_WaitOnFlagUntilTimeout>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d03c      	beq.n	8009876 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009804:	e853 3f00 	ldrex	r3, [r3]
 8009808:	623b      	str	r3, [r7, #32]
   return(result);
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800981a:	633b      	str	r3, [r7, #48]	; 0x30
 800981c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e6      	bne.n	80097fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	e853 3f00 	ldrex	r3, [r3]
 800983c:	60fb      	str	r3, [r7, #12]
   return(result);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f023 0301 	bic.w	r3, r3, #1
 8009844:	64bb      	str	r3, [r7, #72]	; 0x48
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3308      	adds	r3, #8
 800984c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800984e:	61fa      	str	r2, [r7, #28]
 8009850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009852:	69b9      	ldr	r1, [r7, #24]
 8009854:	69fa      	ldr	r2, [r7, #28]
 8009856:	e841 2300 	strex	r3, r2, [r1]
 800985a:	617b      	str	r3, [r7, #20]
   return(result);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1e5      	bne.n	800982e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2220      	movs	r2, #32
 8009866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e012      	b.n	800989c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2220      	movs	r2, #32
 800987a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2220      	movs	r2, #32
 8009882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3758      	adds	r7, #88	; 0x58
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	603b      	str	r3, [r7, #0]
 80098b0:	4613      	mov	r3, r2
 80098b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098b4:	e049      	b.n	800994a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098bc:	d045      	beq.n	800994a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098be:	f7f7 fd1f 	bl	8001300 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	69ba      	ldr	r2, [r7, #24]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d302      	bcc.n	80098d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e048      	b.n	800996a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0304 	and.w	r3, r3, #4
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d031      	beq.n	800994a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	f003 0308 	and.w	r3, r3, #8
 80098f0:	2b08      	cmp	r3, #8
 80098f2:	d110      	bne.n	8009916 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2208      	movs	r2, #8
 80098fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f838 	bl	8009972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2208      	movs	r2, #8
 8009906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e029      	b.n	800996a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009924:	d111      	bne.n	800994a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800992e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 f81e 	bl	8009972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2220      	movs	r2, #32
 800993a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e00f      	b.n	800996a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	69da      	ldr	r2, [r3, #28]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	4013      	ands	r3, r2
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	429a      	cmp	r2, r3
 8009958:	bf0c      	ite	eq
 800995a:	2301      	moveq	r3, #1
 800995c:	2300      	movne	r3, #0
 800995e:	b2db      	uxtb	r3, r3
 8009960:	461a      	mov	r2, r3
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	429a      	cmp	r2, r3
 8009966:	d0a6      	beq.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009972:	b480      	push	{r7}
 8009974:	b095      	sub	sp, #84	; 0x54
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800998e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	461a      	mov	r2, r3
 8009996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009998:	643b      	str	r3, [r7, #64]	; 0x40
 800999a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800999e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e6      	bne.n	800997a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3308      	adds	r3, #8
 80099b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	e853 3f00 	ldrex	r3, [r3]
 80099ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099c2:	f023 0301 	bic.w	r3, r3, #1
 80099c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3308      	adds	r3, #8
 80099ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099d8:	e841 2300 	strex	r3, r2, [r1]
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e3      	bne.n	80099ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d118      	bne.n	8009a1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f023 0310 	bic.w	r3, r3, #16
 8009a00:	647b      	str	r3, [r7, #68]	; 0x44
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a0a:	61bb      	str	r3, [r7, #24]
 8009a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6979      	ldr	r1, [r7, #20]
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	613b      	str	r3, [r7, #16]
   return(result);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e6      	bne.n	80099ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009a32:	bf00      	nop
 8009a34:	3754      	adds	r7, #84	; 0x54
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d101      	bne.n	8009a54 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a50:	2302      	movs	r3, #2
 8009a52:	e027      	b.n	8009aa4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2224      	movs	r2, #36	; 0x24
 8009a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0201 	bic.w	r2, r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d101      	bne.n	8009ac8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e02d      	b.n	8009b24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2224      	movs	r2, #36	; 0x24
 8009ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0201 	bic.w	r2, r2, #1
 8009aee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f84f 	bl	8009ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2220      	movs	r2, #32
 8009b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d101      	bne.n	8009b44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b40:	2302      	movs	r3, #2
 8009b42:	e02d      	b.n	8009ba0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2224      	movs	r2, #36	; 0x24
 8009b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0201 	bic.w	r2, r2, #1
 8009b6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f811 	bl	8009ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d108      	bne.n	8009bca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bc8:	e031      	b.n	8009c2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bca:	2308      	movs	r3, #8
 8009bcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bce:	2308      	movs	r3, #8
 8009bd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	0e5b      	lsrs	r3, r3, #25
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	f003 0307 	and.w	r3, r3, #7
 8009be0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	0f5b      	lsrs	r3, r3, #29
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 0307 	and.w	r3, r3, #7
 8009bf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	7b3a      	ldrb	r2, [r7, #12]
 8009bf6:	4911      	ldr	r1, [pc, #68]	; (8009c3c <UARTEx_SetNbDataToProcess+0x94>)
 8009bf8:	5c8a      	ldrb	r2, [r1, r2]
 8009bfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bfe:	7b3a      	ldrb	r2, [r7, #12]
 8009c00:	490f      	ldr	r1, [pc, #60]	; (8009c40 <UARTEx_SetNbDataToProcess+0x98>)
 8009c02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
 8009c12:	7b7a      	ldrb	r2, [r7, #13]
 8009c14:	4909      	ldr	r1, [pc, #36]	; (8009c3c <UARTEx_SetNbDataToProcess+0x94>)
 8009c16:	5c8a      	ldrb	r2, [r1, r2]
 8009c18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c1c:	7b7a      	ldrb	r2, [r7, #13]
 8009c1e:	4908      	ldr	r1, [pc, #32]	; (8009c40 <UARTEx_SetNbDataToProcess+0x98>)
 8009c20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c22:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c2e:	bf00      	nop
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	0800a12c 	.word	0x0800a12c
 8009c40:	0800a134 	.word	0x0800a134

08009c44 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b08b      	sub	sp, #44	; 0x2c
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	fa93 f3a3 	rbit	r3, r3
 8009c5e:	613b      	str	r3, [r7, #16]
  return result;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009c6a:	2320      	movs	r3, #32
 8009c6c:	e003      	b.n	8009c76 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	fab3 f383 	clz	r3, r3
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	005b      	lsls	r3, r3, #1
 8009c78:	2103      	movs	r1, #3
 8009c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c7e:	43db      	mvns	r3, r3
 8009c80:	401a      	ands	r2, r3
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	fa93 f3a3 	rbit	r3, r3
 8009c8c:	61fb      	str	r3, [r7, #28]
  return result;
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009c98:	2320      	movs	r3, #32
 8009c9a:	e003      	b.n	8009ca4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	fab3 f383 	clz	r3, r3
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cac:	431a      	orrs	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	601a      	str	r2, [r3, #0]
}
 8009cb2:	bf00      	nop
 8009cb4:	372c      	adds	r7, #44	; 0x2c
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	60b9      	str	r1, [r7, #8]
 8009cc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	401a      	ands	r2, r3
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	fb01 f303 	mul.w	r3, r1, r3
 8009cdc:	431a      	orrs	r2, r3
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	605a      	str	r2, [r3, #4]
}
 8009ce2:	bf00      	nop
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b08b      	sub	sp, #44	; 0x2c
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	689a      	ldr	r2, [r3, #8]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	fa93 f3a3 	rbit	r3, r3
 8009d08:	613b      	str	r3, [r7, #16]
  return result;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009d14:	2320      	movs	r3, #32
 8009d16:	e003      	b.n	8009d20 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	fab3 f383 	clz	r3, r3
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	2103      	movs	r1, #3
 8009d24:	fa01 f303 	lsl.w	r3, r1, r3
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	401a      	ands	r2, r3
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	fa93 f3a3 	rbit	r3, r3
 8009d36:	61fb      	str	r3, [r7, #28]
  return result;
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009d42:	2320      	movs	r3, #32
 8009d44:	e003      	b.n	8009d4e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	fab3 f383 	clz	r3, r3
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	fa01 f303 	lsl.w	r3, r1, r3
 8009d56:	431a      	orrs	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009d5c:	bf00      	nop
 8009d5e:	372c      	adds	r7, #44	; 0x2c
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b08b      	sub	sp, #44	; 0x2c
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	fa93 f3a3 	rbit	r3, r3
 8009d82:	613b      	str	r3, [r7, #16]
  return result;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009d8e:	2320      	movs	r3, #32
 8009d90:	e003      	b.n	8009d9a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	fab3 f383 	clz	r3, r3
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	2103      	movs	r1, #3
 8009d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009da2:	43db      	mvns	r3, r3
 8009da4:	401a      	ands	r2, r3
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	fa93 f3a3 	rbit	r3, r3
 8009db0:	61fb      	str	r3, [r7, #28]
  return result;
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009dbc:	2320      	movs	r3, #32
 8009dbe:	e003      	b.n	8009dc8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	fab3 f383 	clz	r3, r3
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	60da      	str	r2, [r3, #12]
}
 8009dd6:	bf00      	nop
 8009dd8:	372c      	adds	r7, #44	; 0x2c
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b08b      	sub	sp, #44	; 0x2c
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	60f8      	str	r0, [r7, #12]
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6a1a      	ldr	r2, [r3, #32]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	fa93 f3a3 	rbit	r3, r3
 8009dfc:	613b      	str	r3, [r7, #16]
  return result;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009e08:	2320      	movs	r3, #32
 8009e0a:	e003      	b.n	8009e14 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	fab3 f383 	clz	r3, r3
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	210f      	movs	r1, #15
 8009e18:	fa01 f303 	lsl.w	r3, r1, r3
 8009e1c:	43db      	mvns	r3, r3
 8009e1e:	401a      	ands	r2, r3
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	fa93 f3a3 	rbit	r3, r3
 8009e2a:	61fb      	str	r3, [r7, #28]
  return result;
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009e36:	2320      	movs	r3, #32
 8009e38:	e003      	b.n	8009e42 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	fab3 f383 	clz	r3, r3
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	6879      	ldr	r1, [r7, #4]
 8009e46:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009e50:	bf00      	nop
 8009e52:	372c      	adds	r7, #44	; 0x2c
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b08b      	sub	sp, #44	; 0x2c
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	0a1b      	lsrs	r3, r3, #8
 8009e70:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	fa93 f3a3 	rbit	r3, r3
 8009e78:	613b      	str	r3, [r7, #16]
  return result;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009e84:	2320      	movs	r3, #32
 8009e86:	e003      	b.n	8009e90 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	fab3 f383 	clz	r3, r3
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	210f      	movs	r1, #15
 8009e94:	fa01 f303 	lsl.w	r3, r1, r3
 8009e98:	43db      	mvns	r3, r3
 8009e9a:	401a      	ands	r2, r3
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	0a1b      	lsrs	r3, r3, #8
 8009ea0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	fa93 f3a3 	rbit	r3, r3
 8009ea8:	61fb      	str	r3, [r7, #28]
  return result;
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009eb4:	2320      	movs	r3, #32
 8009eb6:	e003      	b.n	8009ec0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	fab3 f383 	clz	r3, r3
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009ece:	bf00      	nop
 8009ed0:	372c      	adds	r7, #44	; 0x2c
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b08a      	sub	sp, #40	; 0x28
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	fa93 f3a3 	rbit	r3, r3
 8009ef0:	617b      	str	r3, [r7, #20]
  return result;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <LL_GPIO_Init+0x26>
    return 32U;
 8009efc:	2320      	movs	r3, #32
 8009efe:	e003      	b.n	8009f08 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	fab3 f383 	clz	r3, r3
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009f0a:	e058      	b.n	8009fbe <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	2101      	movs	r1, #1
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	fa01 f303 	lsl.w	r3, r1, r3
 8009f18:	4013      	ands	r3, r2
 8009f1a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d04a      	beq.n	8009fb8 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d003      	beq.n	8009f32 <LL_GPIO_Init+0x58>
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d10e      	bne.n	8009f50 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6a39      	ldr	r1, [r7, #32]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff fed7 	bl	8009cee <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	6819      	ldr	r1, [r3, #0]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff feb7 	bl	8009cbe <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	461a      	mov	r2, r3
 8009f56:	6a39      	ldr	r1, [r7, #32]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff ff05 	bl	8009d68 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d121      	bne.n	8009faa <LL_GPIO_Init+0xd0>
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	fa93 f3a3 	rbit	r3, r3
 8009f70:	60bb      	str	r3, [r7, #8]
  return result;
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <LL_GPIO_Init+0xa6>
    return 32U;
 8009f7c:	2320      	movs	r3, #32
 8009f7e:	e003      	b.n	8009f88 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	fab3 f383 	clz	r3, r3
 8009f86:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009f88:	2b07      	cmp	r3, #7
 8009f8a:	d807      	bhi.n	8009f9c <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	461a      	mov	r2, r3
 8009f92:	6a39      	ldr	r1, [r7, #32]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ff24 	bl	8009de2 <LL_GPIO_SetAFPin_0_7>
 8009f9a:	e006      	b.n	8009faa <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6a39      	ldr	r1, [r7, #32]
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff ff59 	bl	8009e5c <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	6a39      	ldr	r1, [r7, #32]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff fe46 	bl	8009c44 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	3301      	adds	r3, #1
 8009fbc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d19f      	bne.n	8009f0c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3728      	adds	r7, #40	; 0x28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b085      	sub	sp, #20
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009fde:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009fe2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	43db      	mvns	r3, r3
 8009fec:	401a      	ands	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	460b      	mov	r3, r1
 800a00a:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d106      	bne.n	800a020 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	641a      	str	r2, [r3, #64]	; 0x40
 800a01e:	e00b      	b.n	800a038 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800a020:	78fb      	ldrb	r3, [r7, #3]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d106      	bne.n	800a034 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	641a      	str	r2, [r3, #64]	; 0x40
 800a032:	e001      	b.n	800a038 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e000      	b.n	800a03a <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800a046:	b084      	sub	sp, #16
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	f107 001c 	add.w	r0, r7, #28
 800a054:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	f023 0201 	bic.w	r2, r3, #1
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800a06a:	2100      	movs	r1, #0
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff ffc7 	bl	800a000 <USB_SetCurrentMode>
 800a072:	4603      	mov	r3, r0
 800a074:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a088:	b004      	add	sp, #16
 800a08a:	4770      	bx	lr

0800a08c <memset>:
 800a08c:	4402      	add	r2, r0
 800a08e:	4603      	mov	r3, r0
 800a090:	4293      	cmp	r3, r2
 800a092:	d100      	bne.n	800a096 <memset+0xa>
 800a094:	4770      	bx	lr
 800a096:	f803 1b01 	strb.w	r1, [r3], #1
 800a09a:	e7f9      	b.n	800a090 <memset+0x4>

0800a09c <__libc_init_array>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	4d0d      	ldr	r5, [pc, #52]	; (800a0d4 <__libc_init_array+0x38>)
 800a0a0:	2600      	movs	r6, #0
 800a0a2:	4c0d      	ldr	r4, [pc, #52]	; (800a0d8 <__libc_init_array+0x3c>)
 800a0a4:	1b64      	subs	r4, r4, r5
 800a0a6:	10a4      	asrs	r4, r4, #2
 800a0a8:	42a6      	cmp	r6, r4
 800a0aa:	d109      	bne.n	800a0c0 <__libc_init_array+0x24>
 800a0ac:	4d0b      	ldr	r5, [pc, #44]	; (800a0dc <__libc_init_array+0x40>)
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	4c0b      	ldr	r4, [pc, #44]	; (800a0e0 <__libc_init_array+0x44>)
 800a0b2:	f000 f817 	bl	800a0e4 <_init>
 800a0b6:	1b64      	subs	r4, r4, r5
 800a0b8:	10a4      	asrs	r4, r4, #2
 800a0ba:	42a6      	cmp	r6, r4
 800a0bc:	d105      	bne.n	800a0ca <__libc_init_array+0x2e>
 800a0be:	bd70      	pop	{r4, r5, r6, pc}
 800a0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0c4:	3601      	adds	r6, #1
 800a0c6:	4798      	blx	r3
 800a0c8:	e7ee      	b.n	800a0a8 <__libc_init_array+0xc>
 800a0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ce:	3601      	adds	r6, #1
 800a0d0:	4798      	blx	r3
 800a0d2:	e7f2      	b.n	800a0ba <__libc_init_array+0x1e>
 800a0d4:	0800a144 	.word	0x0800a144
 800a0d8:	0800a144 	.word	0x0800a144
 800a0dc:	0800a144 	.word	0x0800a144
 800a0e0:	0800a148 	.word	0x0800a148

0800a0e4 <_init>:
 800a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e6:	bf00      	nop
 800a0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ea:	bc08      	pop	{r3}
 800a0ec:	469e      	mov	lr, r3
 800a0ee:	4770      	bx	lr

0800a0f0 <_fini>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	bf00      	nop
 800a0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f6:	bc08      	pop	{r3}
 800a0f8:	469e      	mov	lr, r3
 800a0fa:	4770      	bx	lr
