
keypad_lib_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6e8  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a934  0800a934  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a974  0800a974  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a974  0800a974  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a97c  0800a97c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a980  0800a980  0001a980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800a984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  2000003c  0800a9c0  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  0800a9c0  000206a8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020072  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fec0  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000338c  00000000  00000000  0003ff75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  00043308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000130c  00000000  00000000  00044b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038283  00000000  00000000  00045e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ace  00000000  00000000  0007e10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016f80b  00000000  00000000  0009ebdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b44  00000000  00000000  0020e3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00214f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000003c 	.word	0x2000003c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800a91c 	.word	0x0800a91c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000040 	.word	0x20000040
 8000288:	0800a91c 	.word	0x0800a91c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Keypad_Start>:
#include <stdbool.h>

uint8_t Last_Key_Down;

void Keypad_Start(Keypad *kb, GPIO_TypeDef* *_RowPorts, GPIO_TypeDef* *_ColPorts, uint16_t *_RowPins, uint16_t *_ColPins, uint8_t **keys)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	603b      	str	r3, [r7, #0]
	for(int i=0; i<4; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
 80005be:	e029      	b.n	8000614 <Keypad_Start+0x68>
	{
		kb->RowPorts[i] = _RowPorts[i];
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	4413      	add	r3, r2
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	69fa      	ldr	r2, [r7, #28]
 80005ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		kb->ColPorts[i] = _ColPorts[i];
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	6819      	ldr	r1, [r3, #0]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	69fa      	ldr	r2, [r7, #28]
 80005e0:	3204      	adds	r2, #4
 80005e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		kb->RowPins[i] = _RowPins[i];
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	8819      	ldrh	r1, [r3, #0]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	69fa      	ldr	r2, [r7, #28]
 80005f4:	3210      	adds	r2, #16
 80005f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		kb->ColPins[i] = _ColPins[i];
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000600:	4413      	add	r3, r2
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	69fa      	ldr	r2, [r7, #28]
 8000608:	3214      	adds	r2, #20
 800060a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i=0; i<4; i++)
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	3301      	adds	r3, #1
 8000612:	61fb      	str	r3, [r7, #28]
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	2b03      	cmp	r3, #3
 8000618:	ddd2      	ble.n	80005c0 <Keypad_Start+0x14>
	}
	kb->rising_pin = 255;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	22ff      	movs	r2, #255	; 0xff
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	kb->let_falling_pin = 255;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	22ff      	movs	r2, #255	; 0xff
 8000626:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	Last_Key_Down = 0;
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <Keypad_Start+0x114>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]

	//return;

	HAL_GPIO_WritePin(kb->RowPorts[0], kb->RowPins[0], SET);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	8c1b      	ldrh	r3, [r3, #32]
 8000638:	2201      	movs	r2, #1
 800063a:	4619      	mov	r1, r3
 800063c:	f002 fe6e 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[1], kb->RowPins[1], SET);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6858      	ldr	r0, [r3, #4]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	f002 fe66 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[2], kb->RowPins[2], SET);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6898      	ldr	r0, [r3, #8]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	f002 fe5e 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[3], kb->RowPins[3], SET);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	68d8      	ldr	r0, [r3, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000668:	2201      	movs	r2, #1
 800066a:	4619      	mov	r1, r3
 800066c:	f002 fe56 	bl	800331c <HAL_GPIO_WritePin>

	for(int i=0; i<4; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
 8000674:	e01c      	b.n	80006b0 <Keypad_Start+0x104>
	{
		for(int j=0; j<4; j++)
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	e013      	b.n	80006a4 <Keypad_Start+0xf8>
		{
			kb->keys[i][j] = keys[i][j];
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000682:	4413      	add	r3, r2
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	4413      	add	r3, r2
 800068a:	7819      	ldrb	r1, [r3, #0]
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	441a      	add	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4413      	add	r3, r2
 8000698:	3332      	adds	r3, #50	; 0x32
 800069a:	460a      	mov	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<4; j++)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	dde8      	ble.n	800067c <Keypad_Start+0xd0>
	for(int i=0; i<4; i++)
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	3301      	adds	r3, #1
 80006ae:	61bb      	str	r3, [r7, #24]
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	dddf      	ble.n	8000676 <Keypad_Start+0xca>
		}
	}
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000058 	.word	0x20000058

080006c4 <Keypad_Rising_EXTI>:

void Keypad_Rising_EXTI(Keypad *kb, uint16_t GPIO_Pin)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
	if (GPIO_Pin == kb->ColPins[0])
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006d4:	887a      	ldrh	r2, [r7, #2]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d104      	bne.n	80006e4 <Keypad_Rising_EXTI+0x20>
		kb->rising_pin = 0;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80006e2:	e01c      	b.n	800071e <Keypad_Rising_EXTI+0x5a>
	else if (GPIO_Pin == kb->ColPins[1])
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80006e8:	887a      	ldrh	r2, [r7, #2]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d104      	bne.n	80006f8 <Keypad_Rising_EXTI+0x34>
		kb->rising_pin = 1;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80006f6:	e012      	b.n	800071e <Keypad_Rising_EXTI+0x5a>
	else if(GPIO_Pin == kb->ColPins[2])
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80006fc:	887a      	ldrh	r2, [r7, #2]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d104      	bne.n	800070c <Keypad_Rising_EXTI+0x48>
		kb->rising_pin = 2;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2202      	movs	r2, #2
 8000706:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800070a:	e008      	b.n	800071e <Keypad_Rising_EXTI+0x5a>
	else if(GPIO_Pin == kb->ColPins[3])
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000710:	887a      	ldrh	r2, [r7, #2]
 8000712:	429a      	cmp	r2, r3
 8000714:	d160      	bne.n	80007d8 <Keypad_Rising_EXTI+0x114>
		kb->rising_pin = 3;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2203      	movs	r2, #3
 800071a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	else
		return;

	kb->key_down = true;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2201      	movs	r2, #1
 8000722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	kb->let_falling_pin = 0;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	HAL_GPIO_WritePin(kb->RowPorts[0], kb->RowPins[0], RESET);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	8c1b      	ldrh	r3, [r3, #32]
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	f002 fdef 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[0], kb->RowPins[0], SET);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	8c1b      	ldrh	r3, [r3, #32]
 8000746:	2201      	movs	r2, #1
 8000748:	4619      	mov	r1, r3
 800074a:	f002 fde7 	bl	800331c <HAL_GPIO_WritePin>
	kb->let_falling_pin = 1;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2201      	movs	r2, #1
 8000752:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	HAL_GPIO_WritePin(kb->RowPorts[1], kb->RowPins[1], RESET);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6858      	ldr	r0, [r3, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	f002 fddb 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[1], kb->RowPins[1], SET);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6858      	ldr	r0, [r3, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800076e:	2201      	movs	r2, #1
 8000770:	4619      	mov	r1, r3
 8000772:	f002 fdd3 	bl	800331c <HAL_GPIO_WritePin>
	kb->let_falling_pin = 2;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2202      	movs	r2, #2
 800077a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	HAL_GPIO_WritePin(kb->RowPorts[2], kb->RowPins[2], RESET);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6898      	ldr	r0, [r3, #8]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	4619      	mov	r1, r3
 800078a:	f002 fdc7 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[2], kb->RowPins[2], SET);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6898      	ldr	r0, [r3, #8]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000796:	2201      	movs	r2, #1
 8000798:	4619      	mov	r1, r3
 800079a:	f002 fdbf 	bl	800331c <HAL_GPIO_WritePin>
	kb->let_falling_pin = 3;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2203      	movs	r2, #3
 80007a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	HAL_GPIO_WritePin(kb->RowPorts[3], kb->RowPins[3], RESET);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68d8      	ldr	r0, [r3, #12]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	f002 fdb3 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[3], kb->RowPins[3], SET);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	68d8      	ldr	r0, [r3, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	f002 fdab 	bl	800331c <HAL_GPIO_WritePin>
	kb->let_falling_pin = 4;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2204      	movs	r2, #4
 80007ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	kb->rising_pin = 4;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2204      	movs	r2, #4
 80007d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80007d6:	e000      	b.n	80007da <Keypad_Rising_EXTI+0x116>
		return;
 80007d8:	bf00      	nop
}
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80007ee:	4909      	ldr	r1, [pc, #36]	; (8000814 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007fa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000804:	68fb      	ldr	r3, [r7, #12]
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	44020c00 	.word	0x44020c00

08000818 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <LL_APB1_GRP2_EnableClock+0x34>)
 8000822:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000826:	4909      	ldr	r1, [pc, #36]	; (800084c <LL_APB1_GRP2_EnableClock+0x34>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4313      	orrs	r3, r2
 800082c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <LL_APB1_GRP2_EnableClock+0x34>)
 8000832:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4013      	ands	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083c:	68fb      	ldr	r3, [r7, #12]
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	44020c00 	.word	0x44020c00

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fee7 	bl	8001628 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t col0_keys[4] = {'0', '1', '2', '3'};
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <main+0x6c>)
 800085c:	61fb      	str	r3, [r7, #28]
  uint8_t col1_keys[4] = {'4', '5', '6', '7'};
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <main+0x70>)
 8000860:	61bb      	str	r3, [r7, #24]
  uint8_t col2_keys[4] = {'8', '9', 'A', 'B'};
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <main+0x74>)
 8000864:	617b      	str	r3, [r7, #20]
  uint8_t col3_keys[4] = {'C', 'D', 'E', 'F'};
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <main+0x78>)
 8000868:	613b      	str	r3, [r7, #16]
  uint8_t *keys[4] = {col0_keys, col1_keys, col2_keys, col3_keys};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	f107 0318 	add.w	r3, r7, #24
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	60fb      	str	r3, [r7, #12]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f82d 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 fa31 	bl	8000cec <MX_GPIO_Init>
  MX_ADC1_Init();
 800088a:	f000 f899 	bl	80009c0 <MX_ADC1_Init>
  MX_ETH_Init();
 800088e:	f000 f8fb 	bl	8000a88 <MX_ETH_Init>
  MX_ICACHE_Init();
 8000892:	f000 f945 	bl	8000b20 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 8000896:	f000 f94f 	bl	8000b38 <MX_LPUART1_UART_Init>
  MX_UCPD1_Init();
 800089a:	f000 f9d1 	bl	8000c40 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800089e:	f000 f9f3 	bl	8000c88 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 80008a2:	f000 f993 	bl	8000bcc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Keypad_Start(&myKB, KB_ROW_PORTs, KB_COL_PORTs, KB_ROW_PINs, KB_COL_PINs, keys);
 80008a6:	463b      	mov	r3, r7
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <main+0x7c>)
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <main+0x80>)
 80008b0:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <main+0x84>)
 80008b2:	4909      	ldr	r1, [pc, #36]	; (80008d8 <main+0x88>)
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <main+0x8c>)
 80008b6:	f7ff fe79 	bl	80005ac <Keypad_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <main+0x6a>
 80008bc:	33323130 	.word	0x33323130
 80008c0:	37363534 	.word	0x37363534
 80008c4:	42413938 	.word	0x42413938
 80008c8:	46454443 	.word	0x46454443
 80008cc:	20000020 	.word	0x20000020
 80008d0:	20000028 	.word	0x20000028
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000010 	.word	0x20000010
 80008dc:	20000658 	.word	0x20000658

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09c      	sub	sp, #112	; 0x70
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2250      	movs	r2, #80	; 0x50
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f009 ffe8 	bl	800a8c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <SystemClock_Config+0xdc>)
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	4a2c      	ldr	r2, [pc, #176]	; (80009bc <SystemClock_Config+0xdc>)
 800090c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000910:	6113      	str	r3, [r2, #16]
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <SystemClock_Config+0xdc>)
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800091e:	bf00      	nop
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <SystemClock_Config+0xdc>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	2b08      	cmp	r3, #8
 800092a:	d1f9      	bne.n	8000920 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800092c:	2323      	movs	r3, #35	; 0x23
 800092e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000930:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800094c:	2303      	movs	r3, #3
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000950:	2301      	movs	r3, #1
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000954:	2310      	movs	r3, #16
 8000956:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000958:	2302      	movs	r3, #2
 800095a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000964:	230c      	movs	r3, #12
 8000966:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000968:	2300      	movs	r3, #0
 800096a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fe1d 	bl	80035b4 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000980:	f000 fac4 	bl	8000f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	231f      	movs	r3, #31
 8000986:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2303      	movs	r3, #3
 800098a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2103      	movs	r1, #3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 fa3e 	bl	8003e24 <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009ae:	f000 faad 	bl	8000f0c <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3770      	adds	r7, #112	; 0x70
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	44020800 	.word	0x44020800

080009c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2220      	movs	r2, #32
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f009 ff79 	bl	800a8c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009d4:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <MX_ADC1_Init+0xc0>)
 80009d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a38:	4810      	ldr	r0, [pc, #64]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a3a:	f001 f883 	bl	8001b44 <HAL_ADC_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000a44:	f000 fa62 	bl	8000f0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_ADC1_Init+0xc4>)
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a54:	237f      	movs	r3, #127	; 0x7f
 8000a56:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a66:	f001 f9c1 	bl	8001dec <HAL_ADC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000a70:	f000 fa4c 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000154 	.word	0x20000154
 8000a80:	42028000 	.word	0x42028000
 8000a84:	4b840000 	.word	0x4b840000

08000a88 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_ETH_Init+0x80>)
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <MX_ETH_Init+0x84>)
 8000a90:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_ETH_Init+0x88>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_ETH_Init+0x88>)
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_ETH_Init+0x88>)
 8000aa0:	22e1      	movs	r2, #225	; 0xe1
 8000aa2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_ETH_Init+0x88>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_ETH_Init+0x88>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_ETH_Init+0x88>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_ETH_Init+0x80>)
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_ETH_Init+0x88>)
 8000aba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_ETH_Init+0x80>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_ETH_Init+0x80>)
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <MX_ETH_Init+0x8c>)
 8000ac6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_ETH_Init+0x80>)
 8000aca:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <MX_ETH_Init+0x90>)
 8000acc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_ETH_Init+0x80>)
 8000ad0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ad4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_ETH_Init+0x80>)
 8000ad8:	f001 fe9a 	bl	8002810 <HAL_ETH_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ae2:	f000 fa13 	bl	8000f0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ae6:	2238      	movs	r2, #56	; 0x38
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_ETH_Init+0x94>)
 8000aec:	f009 feea 	bl	800a8c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_ETH_Init+0x94>)
 8000af2:	2221      	movs	r2, #33	; 0x21
 8000af4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_ETH_Init+0x94>)
 8000af8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000afc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_ETH_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200001bc 	.word	0x200001bc
 8000b0c:	40028000 	.word	0x40028000
 8000b10:	2000069c 	.word	0x2000069c
 8000b14:	200000f4 	.word	0x200000f4
 8000b18:	20000094 	.word	0x20000094
 8000b1c:	2000005c 	.word	0x2000005c

08000b20 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b24:	f002 fc38 	bl	8003398 <HAL_ICACHE_Enable>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000b2e:	f000 f9ed 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b3e:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <MX_LPUART1_UART_Init+0x8c>)
 8000b40:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b44:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <MX_LPUART1_UART_Init+0x90>)
 8000b46:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b5c:	220c      	movs	r2, #12
 8000b5e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b7a:	f008 ff25 	bl	80099c8 <HAL_UART_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000b84:	f000 f9c2 	bl	8000f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b8c:	f009 fbac 	bl	800a2e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000b96:	f000 f9b9 	bl	8000f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b9e:	f009 fbe1 	bl	800a364 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000ba8:	f000 f9b0 	bl	8000f0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000bae:	f009 fb62 	bl	800a276 <HAL_UARTEx_DisableFifoMode>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000bb8:	f000 f9a8 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000026c 	.word	0x2000026c
 8000bc4:	44002400 	.word	0x44002400
 8000bc8:	00033324 	.word	0x00033324

08000bcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <MX_TIM3_Init+0x70>)
 8000be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c02:	2108      	movs	r1, #8
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000c06:	f008 fca1 	bl	800954c <HAL_TIM_OnePulse_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 8000c10:	f000 f97c 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000c22:	f008 fe01 	bl	8009828 <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000c2c:	f000 f96e 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000300 	.word	0x20000300
 8000c3c:	40000400 	.word	0x40000400

08000c40 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000c56:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c5a:	f7ff fddd 	bl	8000818 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff fdbe 	bl	80007e0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000c64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_UCPD1_Init+0x44>)
 8000c78:	f009 fd4b 	bl	800a712 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	42020400 	.word	0x42020400

08000c88 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000c8e:	4a16      	ldr	r2, [pc, #88]	; (8000ce8 <MX_USB_PCD_Init+0x60>)
 8000c90:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000c94:	2208      	movs	r2, #8
 8000c96:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cd0:	f002 fb72 	bl	80033b8 <HAL_PCD_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8000cda:	f000 f917 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000034c 	.word	0x2000034c
 8000ce8:	40016000 	.word	0x40016000

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4b62      	ldr	r3, [pc, #392]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d08:	4a60      	ldr	r2, [pc, #384]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d12:	4b5e      	ldr	r3, [pc, #376]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d20:	4b5a      	ldr	r3, [pc, #360]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d26:	4a59      	ldr	r2, [pc, #356]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d30:	4b56      	ldr	r3, [pc, #344]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	4b53      	ldr	r3, [pc, #332]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d44:	4a51      	ldr	r2, [pc, #324]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d4e:	4b4f      	ldr	r3, [pc, #316]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5c:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d62:	4a4a      	ldr	r2, [pc, #296]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d6c:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d80:	4a42      	ldr	r2, [pc, #264]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d8a:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d9e:	4a3b      	ldr	r2, [pc, #236]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dbc:	4a33      	ldr	r2, [pc, #204]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2178      	movs	r1, #120	; 0x78
 8000dd8:	482d      	ldr	r0, [pc, #180]	; (8000e90 <MX_GPIO_Init+0x1a4>)
 8000dda:	f002 fa9f 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000dde:	2378      	movs	r3, #120	; 0x78
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4826      	ldr	r0, [pc, #152]	; (8000e90 <MX_GPIO_Init+0x1a4>)
 8000df6:	f002 f93f 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_GPIO_Init+0x1a8>)
 8000e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4822      	ldr	r0, [pc, #136]	; (8000e98 <MX_GPIO_Init+0x1ac>)
 8000e0e:	f002 f933 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_GPIO_Init+0x1a8>)
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	481a      	ldr	r0, [pc, #104]	; (8000e90 <MX_GPIO_Init+0x1a4>)
 8000e28:	f002 f926 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_GPIO_Init+0x1b0>)
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4818      	ldr	r0, [pc, #96]	; (8000ea0 <MX_GPIO_Init+0x1b4>)
 8000e40:	f002 f91a 	bl	8003078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	200b      	movs	r0, #11
 8000e4a:	f001 fcac 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e4e:	200b      	movs	r0, #11
 8000e50:	f001 fcc3 	bl	80027da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	200c      	movs	r0, #12
 8000e5a:	f001 fca4 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e5e:	200c      	movs	r0, #12
 8000e60:	f001 fcbb 	bl	80027da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	200d      	movs	r0, #13
 8000e6a:	f001 fc9c 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e6e:	200d      	movs	r0, #13
 8000e70:	f001 fcb3 	bl	80027da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2014      	movs	r0, #20
 8000e7a:	f001 fc94 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8000e7e:	2014      	movs	r0, #20
 8000e80:	f001 fcab 	bl	80027da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e84:	bf00      	nop
 8000e86:	3730      	adds	r7, #48	; 0x30
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	44020c00 	.word	0x44020c00
 8000e90:	42021000 	.word	0x42021000
 8000e94:	10310000 	.word	0x10310000
 8000e98:	42021400 	.word	0x42021400
 8000e9c:	10110000 	.word	0x10110000
 8000ea0:	42021800 	.word	0x42021800

08000ea4 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == 4)
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d008      	beq.n	8000ec6 <HAL_GPIO_EXTI_Rising_Callback+0x22>
		return;
	rise_pin = GPIO_Pin;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	8013      	strh	r3, [r2, #0]
	Keypad_Rising_EXTI(&myKB, GPIO_Pin);
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000ec0:	f7ff fc00 	bl	80006c4 <Keypad_Rising_EXTI>
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_EXTI_Rising_Callback+0x24>
		return;
 8000ec6:	bf00      	nop

}
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000654 	.word	0x20000654
 8000ed4:	20000658 	.word	0x20000658

08000ed8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == 4)
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d008      	beq.n	8000efa <HAL_GPIO_EXTI_Falling_Callback+0x22>
		return;
	fall_pin = GPIO_Pin;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	8013      	strh	r3, [r2, #0]
	Keypad_Rising_EXTI(&myKB, GPIO_Pin);
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8000ef4:	f7ff fbe6 	bl	80006c4 <Keypad_Rising_EXTI>
 8000ef8:	e000      	b.n	8000efc <HAL_GPIO_EXTI_Falling_Callback+0x24>
		return;
 8000efa:	bf00      	nop
}
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000656 	.word	0x20000656
 8000f08:	20000658 	.word	0x20000658

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>

08000f16 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0cc      	sub	sp, #304	; 0x130
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f32:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f48:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000f52:	461a      	mov	r2, r3
 8000f54:	2100      	movs	r1, #0
 8000f56:	f009 fcb5 	bl	800a8c4 <memset>
  if(hadc->Instance==ADC1)
 8000f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a30      	ldr	r2, [pc, #192]	; (8001028 <HAL_ADC_MspInit+0x104>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d157      	bne.n	800101c <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f70:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000f74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f84:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4618      	mov	r0, r3
 8000f94:	f003 fa88 	bl	80044a8 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8000f9e:	f7ff ffb5 	bl	8000f0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_ADC_MspInit+0x108>)
 8000fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa8:	4a20      	ldr	r2, [pc, #128]	; (800102c <HAL_ADC_MspInit+0x108>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <HAL_ADC_MspInit+0x108>)
 8000fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fb8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fc0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fca:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fce:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_ADC_MspInit+0x108>)
 8000fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fd6:	4a15      	ldr	r2, [pc, #84]	; (800102c <HAL_ADC_MspInit+0x108>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_ADC_MspInit+0x108>)
 8000fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ff8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ffc:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000ffe:	2310      	movs	r3, #16
 8001000:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001004:	2303      	movs	r3, #3
 8001006:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001010:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <HAL_ADC_MspInit+0x10c>)
 8001018:	f002 f82e 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800101c:	bf00      	nop
 800101e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	42028000 	.word	0x42028000
 800102c:	44020c00 	.word	0x44020c00
 8001030:	42020000 	.word	0x42020000

08001034 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a59      	ldr	r2, [pc, #356]	; (80011b8 <HAL_ETH_MspInit+0x184>)
 8001052:	4293      	cmp	r3, r2
 8001054:	f040 80ab 	bne.w	80011ae <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001058:	4b58      	ldr	r3, [pc, #352]	; (80011bc <HAL_ETH_MspInit+0x188>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a57      	ldr	r2, [pc, #348]	; (80011bc <HAL_ETH_MspInit+0x188>)
 8001060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001068:	4b54      	ldr	r3, [pc, #336]	; (80011bc <HAL_ETH_MspInit+0x188>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8001076:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_ETH_MspInit+0x188>)
 8001078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107c:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <HAL_ETH_MspInit+0x188>)
 800107e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001082:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001086:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <HAL_ETH_MspInit+0x188>)
 8001088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8001094:	4b49      	ldr	r3, [pc, #292]	; (80011bc <HAL_ETH_MspInit+0x188>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	4a48      	ldr	r2, [pc, #288]	; (80011bc <HAL_ETH_MspInit+0x188>)
 800109c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80010a4:	4b45      	ldr	r3, [pc, #276]	; (80011bc <HAL_ETH_MspInit+0x188>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <HAL_ETH_MspInit+0x188>)
 80010b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010b8:	4a40      	ldr	r2, [pc, #256]	; (80011bc <HAL_ETH_MspInit+0x188>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010c2:	4b3e      	ldr	r3, [pc, #248]	; (80011bc <HAL_ETH_MspInit+0x188>)
 80010c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <HAL_ETH_MspInit+0x188>)
 80010d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010d6:	4a39      	ldr	r2, [pc, #228]	; (80011bc <HAL_ETH_MspInit+0x188>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010e0:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_ETH_MspInit+0x188>)
 80010e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <HAL_ETH_MspInit+0x188>)
 80010f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010f4:	4a31      	ldr	r2, [pc, #196]	; (80011bc <HAL_ETH_MspInit+0x188>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <HAL_ETH_MspInit+0x188>)
 8001100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_ETH_MspInit+0x188>)
 800110e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001112:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <HAL_ETH_MspInit+0x188>)
 8001114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001118:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <HAL_ETH_MspInit+0x188>)
 800111e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800112a:	2332      	movs	r3, #50	; 0x32
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001136:	2302      	movs	r3, #2
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800113a:	230b      	movs	r3, #11
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	481e      	ldr	r0, [pc, #120]	; (80011c0 <HAL_ETH_MspInit+0x18c>)
 8001146:	f001 ff97 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800114a:	2386      	movs	r3, #134	; 0x86
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001156:	2302      	movs	r3, #2
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800115a:	230b      	movs	r3, #11
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	4619      	mov	r1, r3
 8001164:	4817      	ldr	r0, [pc, #92]	; (80011c4 <HAL_ETH_MspInit+0x190>)
 8001166:	f001 ff87 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800116a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001178:	2302      	movs	r3, #2
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800117c:	230b      	movs	r3, #11
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4810      	ldr	r0, [pc, #64]	; (80011c8 <HAL_ETH_MspInit+0x194>)
 8001188:	f001 ff76 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 800118c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119a:	2302      	movs	r3, #2
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800119e:	230b      	movs	r3, #11
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	4808      	ldr	r0, [pc, #32]	; (80011cc <HAL_ETH_MspInit+0x198>)
 80011aa:	f001 ff65 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3738      	adds	r7, #56	; 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40028000 	.word	0x40028000
 80011bc:	44020c00 	.word	0x44020c00
 80011c0:	42020800 	.word	0x42020800
 80011c4:	42020000 	.word	0x42020000
 80011c8:	42020400 	.word	0x42020400
 80011cc:	42021800 	.word	0x42021800

080011d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0cc      	sub	sp, #304	; 0x130
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011de:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011f8:	4618      	mov	r0, r3
 80011fa:	f44f 7384 	mov.w	r3, #264	; 0x108
 80011fe:	461a      	mov	r2, r3
 8001200:	2100      	movs	r1, #0
 8001202:	f009 fb5f 	bl	800a8c4 <memset>
  if(huart->Instance==LPUART1)
 8001206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800120a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a33      	ldr	r2, [pc, #204]	; (80012e0 <HAL_UART_MspInit+0x110>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d15d      	bne.n	80012d4 <HAL_UART_MspInit+0x104>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800121c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 800122c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001230:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001234:	2200      	movs	r2, #0
 8001236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4618      	mov	r0, r3
 8001240:	f003 f932 	bl	80044a8 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800124a:	f7ff fe5f 	bl	8000f0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_UART_MspInit+0x114>)
 8001250:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001254:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <HAL_UART_MspInit+0x114>)
 8001256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_UART_MspInit+0x114>)
 8001260:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001264:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800126c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001276:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800127a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_UART_MspInit+0x114>)
 800127e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <HAL_UART_MspInit+0x114>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_UART_MspInit+0x114>)
 800128e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001292:	f003 0202 	and.w	r2, r3, #2
 8001296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800129a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80012a8:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 80012aa:	23c0      	movs	r3, #192	; 0xc0
 80012ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80012c2:	2308      	movs	r3, #8
 80012c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <HAL_UART_MspInit+0x118>)
 80012d0:	f001 fed2 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	44002400 	.word	0x44002400
 80012e4:	44020c00 	.word	0x44020c00
 80012e8:	42020400 	.word	0x42020400

080012ec <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM3)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <HAL_TIM_OnePulse_MspInit+0x3c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d10e      	bne.n	800131c <HAL_TIM_OnePulse_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_TIM_OnePulse_MspInit+0x40>)
 8001300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001304:	4a09      	ldr	r2, [pc, #36]	; (800132c <HAL_TIM_OnePulse_MspInit+0x40>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <HAL_TIM_OnePulse_MspInit+0x40>)
 8001310:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40000400 	.word	0x40000400
 800132c:	44020c00 	.word	0x44020c00

08001330 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0cc      	sub	sp, #304	; 0x130
 8001334:	af00      	add	r7, sp, #0
 8001336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800133a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800133e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001354:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001358:	4618      	mov	r0, r3
 800135a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800135e:	461a      	mov	r2, r3
 8001360:	2100      	movs	r1, #0
 8001362:	f009 faaf 	bl	800a8c4 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800136a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a33      	ldr	r2, [pc, #204]	; (8001440 <HAL_PCD_MspInit+0x110>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d15e      	bne.n	8001436 <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800137c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 0310 	mov.w	r3, #16
 8001388:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800138c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001390:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001394:	2230      	movs	r2, #48	; 0x30
 8001396:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 f882 	bl	80044a8 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 80013aa:	f7ff fdaf 	bl	8000f0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <HAL_PCD_MspInit+0x114>)
 80013b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b4:	4a23      	ldr	r2, [pc, #140]	; (8001444 <HAL_PCD_MspInit+0x114>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <HAL_PCD_MspInit+0x114>)
 80013c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c4:	f003 0201 	and.w	r2, r3, #1
 80013c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013d6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013da:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80013dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80013f6:	230a      	movs	r3, #10
 80013f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001400:	4619      	mov	r1, r3
 8001402:	4811      	ldr	r0, [pc, #68]	; (8001448 <HAL_PCD_MspInit+0x118>)
 8001404:	f001 fe38 	bl	8003078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_PCD_MspInit+0x114>)
 800140a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800140e:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_PCD_MspInit+0x114>)
 8001410:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001414:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_PCD_MspInit+0x114>)
 800141a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800141e:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8001422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001426:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001430:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001434:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40016000 	.word	0x40016000
 8001444:	44020c00 	.word	0x44020c00
 8001448:	42020000 	.word	0x42020000

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001498:	f000 f922 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 ff51 	bl	800334c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}

080014ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80014b2:	2002      	movs	r0, #2
 80014b4:	f001 ff4a 	bl	800334c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80014c0:	2004      	movs	r0, #4
 80014c2:	f001 ff43 	bl	800334c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}

080014ca <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80014ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014d2:	f001 ff3b 	bl	800334c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014e2:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <SystemInit+0xdc>)
 80014e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e8:	4a33      	ldr	r2, [pc, #204]	; (80015b8 <SystemInit+0xdc>)
 80014ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80014f2:	4b32      	ldr	r3, [pc, #200]	; (80015bc <SystemInit+0xe0>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <SystemInit+0xe0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <SystemInit+0xe0>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <SystemInit+0xe0>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	492c      	ldr	r1, [pc, #176]	; (80015bc <SystemInit+0xe0>)
 800150a:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <SystemInit+0xe4>)
 800150c:	4013      	ands	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001510:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <SystemInit+0xe0>)
 8001512:	2200      	movs	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001516:	4b29      	ldr	r3, [pc, #164]	; (80015bc <SystemInit+0xe0>)
 8001518:	2200      	movs	r2, #0
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <SystemInit+0xe0>)
 800151e:	2200      	movs	r2, #0
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <SystemInit+0xe0>)
 8001524:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <SystemInit+0xe8>)
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <SystemInit+0xe0>)
 800152a:	2200      	movs	r2, #0
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <SystemInit+0xe0>)
 8001530:	4a24      	ldr	r2, [pc, #144]	; (80015c4 <SystemInit+0xe8>)
 8001532:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <SystemInit+0xe0>)
 8001536:	2200      	movs	r2, #0
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <SystemInit+0xe0>)
 800153c:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <SystemInit+0xe8>)
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <SystemInit+0xe0>)
 8001542:	2200      	movs	r2, #0
 8001544:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <SystemInit+0xe0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <SystemInit+0xe0>)
 800154c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <SystemInit+0xe0>)
 8001554:	2200      	movs	r2, #0
 8001556:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <SystemInit+0xdc>)
 800155a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800155e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <SystemInit+0xec>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001568:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001570:	d003      	beq.n	800157a <SystemInit+0x9e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001578:	d117      	bne.n	80015aa <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <SystemInit+0xec>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <SystemInit+0xec>)
 8001588:	4a10      	ldr	r2, [pc, #64]	; (80015cc <SystemInit+0xf0>)
 800158a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <SystemInit+0xec>)
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <SystemInit+0xf4>)
 8001590:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <SystemInit+0xec>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <SystemInit+0xec>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <SystemInit+0xec>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <SystemInit+0xec>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	61d3      	str	r3, [r2, #28]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00
 80015bc:	44020c00 	.word	0x44020c00
 80015c0:	eae2eae3 	.word	0xeae2eae3
 80015c4:	01010280 	.word	0x01010280
 80015c8:	40022000 	.word	0x40022000
 80015cc:	08192a3b 	.word	0x08192a3b
 80015d0:	4c5d6e7f 	.word	0x4c5d6e7f

080015d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015d8:	f7ff ff80 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <LoopForever+0x6>)
  ldr r1, =_edata
 80015de:	490d      	ldr	r1, [pc, #52]	; (8001614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <LoopForever+0xe>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f4:	4c0a      	ldr	r4, [pc, #40]	; (8001620 <LoopForever+0x16>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001602:	f009 f967 	bl	800a8d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001606:	f7ff f923 	bl	8000850 <main>

0800160a <LoopForever>:

LoopForever:
    b LoopForever
 800160a:	e7fe      	b.n	800160a <LoopForever>
  ldr   r0, =_estack
 800160c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001614:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001618:	0800a984 	.word	0x0800a984
  ldr r2, =_sbss
 800161c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001620:	200006a8 	.word	0x200006a8

08001624 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_IRQHandler>
	...

08001628 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f001 f8af 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001632:	f002 fdaf 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8001636:	4602      	mov	r2, r0
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_Init+0x40>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	490a      	ldr	r1, [pc, #40]	; (800166c <HAL_Init+0x44>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
 8001648:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_Init+0x48>)
 800164a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164c:	200f      	movs	r0, #15
 800164e:	f000 f811 	bl	8001674 <HAL_InitTick>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e002      	b.n	8001662 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800165c:	f7ff fc5b 	bl	8000f16 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	44020c00 	.word	0x44020c00
 800166c:	0800a934 	.word	0x0800a934
 8001670:	20000030 	.word	0x20000030

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_InitTick+0x60>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e021      	b.n	80016cc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_InitTick+0x64>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_InitTick+0x60>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f001 f8a9 	bl	80027f6 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f001 f873 	bl	80027a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_InitTick+0x68>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000038 	.word	0x20000038
 80016d8:	20000030 	.word	0x20000030
 80016dc:	20000034 	.word	0x20000034

080016e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000038 	.word	0x20000038
 8001704:	200006a4 	.word	0x200006a4

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200006a4 	.word	0x200006a4

08001720 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_SBS_ETHInterfaceSelect+0x28>)
 800172a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800172e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001732:	4905      	ldr	r1, [pc, #20]	; (8001748 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4313      	orrs	r3, r2
 8001738:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	44000400 	.word	0x44000400

0800174c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	609a      	str	r2, [r3, #8]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	609a      	str	r2, [r3, #8]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <LL_ADC_EnableChannel0_GPIO+0x24>)
 80017e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <LL_ADC_EnableChannel0_GPIO+0x24>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	42028000 	.word	0x42028000

08001800 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3360      	adds	r3, #96	; 0x60
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <LL_ADC_SetOffset+0x44>)
 8001822:	4013      	ands	r3, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	4313      	orrs	r3, r2
 8001830:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	03fff000 	.word	0x03fff000

08001848 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3360      	adds	r3, #96	; 0x60
 8001856:	461a      	mov	r2, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3360      	adds	r3, #96	; 0x60
 8001884:	461a      	mov	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800189e:	bf00      	nop
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3360      	adds	r3, #96	; 0x60
 80018ba:	461a      	mov	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3360      	adds	r3, #96	; 0x60
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	431a      	orrs	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800190a:	bf00      	nop
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	615a      	str	r2, [r3, #20]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3330      	adds	r3, #48	; 0x30
 800194c:	461a      	mov	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	4413      	add	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	211f      	movs	r1, #31
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	0e9b      	lsrs	r3, r3, #26
 8001974:	f003 011f 	and.w	r1, r3, #31
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	431a      	orrs	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001988:	bf00      	nop
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3314      	adds	r3, #20
 80019a4:	461a      	mov	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	0e5b      	lsrs	r3, r3, #25
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	0d1b      	lsrs	r3, r3, #20
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2107      	movs	r1, #7
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	401a      	ands	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	0d1b      	lsrs	r3, r3, #20
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	431a      	orrs	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0318 	and.w	r3, r3, #24
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a10:	40d9      	lsrs	r1, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	400b      	ands	r3, r1
 8001a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	000fffff 	.word	0x000fffff

08001a34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6093      	str	r3, [r2, #8]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a6c:	d101      	bne.n	8001a72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <LL_ADC_IsEnabled+0x18>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <LL_ADC_IsEnabled+0x1a>
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d101      	bne.n	8001b0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d101      	bne.n	8001b34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e136      	b.n	8001dcc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff f9d9 	bl	8000f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff67 	bl	8001a58 <LL_ADC_IsDeepPowerDownEnabled>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff4d 	bl	8001a34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff82 	bl	8001aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d115      	bne.n	8001bd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff66 	bl	8001a80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb4:	4b87      	ldr	r3, [pc, #540]	; (8001dd4 <HAL_ADC_Init+0x290>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	099b      	lsrs	r3, r3, #6
 8001bba:	4a87      	ldr	r2, [pc, #540]	; (8001dd8 <HAL_ADC_Init+0x294>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff64 	bl	8001aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10d      	bne.n	8001c02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff75 	bl	8001af6 <LL_ADC_REG_IsConversionOngoing>
 8001c0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 80cf 	bne.w	8001dba <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 80cb 	bne.w	8001dba <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c2c:	f043 0202 	orr.w	r2, r3, #2
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff49 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d110      	bne.n	8001c66 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c44:	4865      	ldr	r0, [pc, #404]	; (8001ddc <HAL_ADC_Init+0x298>)
 8001c46:	f7ff ff43 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	4864      	ldr	r0, [pc, #400]	; (8001de0 <HAL_ADC_Init+0x29c>)
 8001c4e:	f7ff ff3f 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4323      	orrs	r3, r4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4860      	ldr	r0, [pc, #384]	; (8001de4 <HAL_ADC_Init+0x2a0>)
 8001c62:	f7ff fd73 	bl	800174c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7e5b      	ldrb	r3, [r3, #25]
 8001c6a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c70:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c76:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c7c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c84:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d106      	bne.n	8001ca2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	045b      	lsls	r3, r3, #17
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4b48      	ldr	r3, [pc, #288]	; (8001de8 <HAL_ADC_Init+0x2a4>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	69b9      	ldr	r1, [r7, #24]
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff15 	bl	8001b1c <LL_ADC_INJ_IsConversionOngoing>
 8001cf2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d13d      	bne.n	8001d76 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d13a      	bne.n	8001d76 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7e1b      	ldrb	r3, [r3, #24]
 8001d04:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d0c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d1c:	f023 0302 	bic.w	r3, r3, #2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	69b9      	ldr	r1, [r7, #24]
 8001d26:	430b      	orrs	r3, r1
 8001d28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d118      	bne.n	8001d66 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d4a:	4311      	orrs	r1, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d50:	4311      	orrs	r1, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d56:	430a      	orrs	r2, r1
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	611a      	str	r2, [r3, #16]
 8001d64:	e007      	b.n	8001d76 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d10c      	bne.n	8001d98 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	f023 010f 	bic.w	r1, r3, #15
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	1e5a      	subs	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
 8001d96:	e007      	b.n	8001da8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 020f 	bic.w	r2, r2, #15
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	f023 0303 	bic.w	r3, r3, #3
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	659a      	str	r2, [r3, #88]	; 0x58
 8001db8:	e007      	b.n	8001dca <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dca:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3724      	adds	r7, #36	; 0x24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	20000030 	.word	0x20000030
 8001dd8:	053e2d63 	.word	0x053e2d63
 8001ddc:	42028000 	.word	0x42028000
 8001de0:	42028100 	.word	0x42028100
 8001de4:	42028300 	.word	0x42028300
 8001de8:	fff04007 	.word	0xfff04007

08001dec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0b6      	sub	sp, #216	; 0xd8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x22>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e3d8      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x7d4>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fe6b 	bl	8001af6 <LL_ADC_REG_IsConversionOngoing>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 83bd 	bne.w	80025a2 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d104      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fccf 	bl	80017d8 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	f7ff fd78 	bl	800193c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fe50 	bl	8001af6 <LL_ADC_REG_IsConversionOngoing>
 8001e56:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fe5c 	bl	8001b1c <LL_ADC_INJ_IsConversionOngoing>
 8001e64:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 81d9 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 81d4 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e84:	d10f      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7ff fd7f 	bl	8001994 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fd39 	bl	8001916 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ea4:	e00e      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6819      	ldr	r1, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f7ff fd6e 	bl	8001994 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fd29 	bl	8001916 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	08db      	lsrs	r3, r3, #3
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d022      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6919      	ldr	r1, [r3, #16]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ef6:	f7ff fc83 	bl	8001800 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f7ff fccf 	bl	80018aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d102      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x136>
 8001f1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f20:	e000      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x138>
 8001f22:	2300      	movs	r3, #0
 8001f24:	461a      	mov	r2, r3
 8001f26:	f7ff fcdb 	bl	80018e0 <LL_ADC_SetOffsetSaturation>
 8001f2a:	e17b      	b.n	8002224 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fc88 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x16c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fc7d 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	f003 021f 	and.w	r2, r3, #31
 8001f56:	e01e      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x1aa>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fc72 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8001f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8001f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8001f86:	2320      	movs	r3, #32
 8001f88:	e004      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8001f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x1c2>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	e018      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x1f4>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e004      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8001fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fc41 	bl	8001874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fc25 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <HAL_ADC_ConfigChannel+0x232>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fc1a 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	e01e      	b.n	800205c <HAL_ADC_ConfigChannel+0x270>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2101      	movs	r1, #1
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fc0f 	bl	8001848 <LL_ADC_GetOffsetChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800203c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 800204c:	2320      	movs	r3, #32
 800204e:	e004      	b.n	800205a <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8002050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x288>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	e018      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x2ba>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002088:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800208c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e004      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 800209c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d106      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	2101      	movs	r1, #1
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fbde 	bl	8001874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2102      	movs	r1, #2
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fbc2 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10a      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x2f8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2102      	movs	r1, #2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fbb7 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	f003 021f 	and.w	r2, r3, #31
 80020e2:	e01e      	b.n	8002122 <HAL_ADC_ConfigChannel+0x336>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2102      	movs	r1, #2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fbac 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800210a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e004      	b.n	8002120 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8002116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800212a:	2b00      	cmp	r3, #0
 800212c:	d105      	bne.n	800213a <HAL_ADC_ConfigChannel+0x34e>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	e016      	b.n	8002168 <HAL_ADC_ConfigChannel+0x37c>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800214c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800214e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 800215a:	2320      	movs	r3, #32
 800215c:	e004      	b.n	8002168 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 800215e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002168:	429a      	cmp	r2, r3
 800216a:	d106      	bne.n	800217a <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2200      	movs	r2, #0
 8002172:	2102      	movs	r1, #2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fb7d 	bl	8001874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2103      	movs	r1, #3
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fb61 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x3ba>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2103      	movs	r1, #3
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fb56 	bl	8001848 <LL_ADC_GetOffsetChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	0e9b      	lsrs	r3, r3, #26
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	e017      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x3ea>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2103      	movs	r1, #3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fb4b 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e003      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 80021cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x402>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0e9b      	lsrs	r3, r3, #26
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	e011      	b.n	8002212 <HAL_ADC_ConfigChannel+0x426>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8002206:	2320      	movs	r3, #32
 8002208:	e003      	b.n	8002212 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 800220a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002212:	429a      	cmp	r2, r3
 8002214:	d106      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	2103      	movs	r1, #3
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fb28 	bl	8001874 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fc51 	bl	8001ad0 <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 813f 	bne.w	80024b4 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	461a      	mov	r2, r3
 8002244:	f7ff fbd2 	bl	80019ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a8e      	ldr	r2, [pc, #568]	; (8002488 <HAL_ADC_ConfigChannel+0x69c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	f040 8130 	bne.w	80024b4 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <HAL_ADC_ConfigChannel+0x490>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	3301      	adds	r3, #1
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2b09      	cmp	r3, #9
 8002272:	bf94      	ite	ls
 8002274:	2301      	movls	r3, #1
 8002276:	2300      	movhi	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e019      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x4c4>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800228a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800228e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	bf94      	ite	ls
 80022aa:	2301      	movls	r3, #1
 80022ac:	2300      	movhi	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d079      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x4e4>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	3301      	adds	r3, #1
 80022c8:	069b      	lsls	r3, r3, #26
 80022ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ce:	e015      	b.n	80022fc <HAL_ADC_ConfigChannel+0x510>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e003      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 80022ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	069b      	lsls	r3, r3, #26
 80022f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_ConfigChannel+0x530>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	3301      	adds	r3, #1
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	e017      	b.n	800234c <HAL_ADC_ConfigChannel+0x560>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800232a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002334:	2320      	movs	r3, #32
 8002336:	e003      	b.n	8002340 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	ea42 0103 	orr.w	r1, r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x586>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	3301      	adds	r3, #1
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	051b      	lsls	r3, r3, #20
 8002370:	e018      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x5b8>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e003      	b.n	8002396 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 800238e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a4:	430b      	orrs	r3, r1
 80023a6:	e080      	b.n	80024aa <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x5d8>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	3301      	adds	r3, #1
 80023bc:	069b      	lsls	r3, r3, #26
 80023be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c2:	e015      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x604>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	069b      	lsls	r3, r3, #26
 80023ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x624>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0e9b      	lsrs	r3, r3, #26
 8002402:	3301      	adds	r3, #1
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	e017      	b.n	8002440 <HAL_ADC_ConfigChannel+0x654>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	61fb      	str	r3, [r7, #28]
  return result;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002428:	2320      	movs	r3, #32
 800242a:	e003      	b.n	8002434 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	3301      	adds	r3, #1
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	ea42 0103 	orr.w	r1, r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10d      	bne.n	800246c <HAL_ADC_ConfigChannel+0x680>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	3b1e      	subs	r3, #30
 8002464:	051b      	lsls	r3, r3, #20
 8002466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800246a:	e01d      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x6bc>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	613b      	str	r3, [r7, #16]
  return result;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e005      	b.n	8002494 <HAL_ADC_ConfigChannel+0x6a8>
 8002488:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f003 021f 	and.w	r2, r3, #31
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	3b1e      	subs	r3, #30
 80024a2:	051b      	lsls	r3, r3, #20
 80024a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7ff fa70 	bl	8001994 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <HAL_ADC_ConfigChannel+0x7dc>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d079      	beq.n	80025b4 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c0:	4842      	ldr	r0, [pc, #264]	; (80025cc <HAL_ADC_ConfigChannel+0x7e0>)
 80024c2:	f7ff f969 	bl	8001798 <LL_ADC_GetCommonPathInternalCh>
 80024c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a40      	ldr	r2, [pc, #256]	; (80025d0 <HAL_ADC_ConfigChannel+0x7e4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d124      	bne.n	800251e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d11e      	bne.n	800251e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3b      	ldr	r2, [pc, #236]	; (80025d4 <HAL_ADC_ConfigChannel+0x7e8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d164      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024f2:	4619      	mov	r1, r3
 80024f4:	4835      	ldr	r0, [pc, #212]	; (80025cc <HAL_ADC_ConfigChannel+0x7e0>)
 80024f6:	f7ff f93c 	bl	8001772 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <HAL_ADC_ConfigChannel+0x7ec>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	099b      	lsrs	r3, r3, #6
 8002500:	4a36      	ldr	r2, [pc, #216]	; (80025dc <HAL_ADC_ConfigChannel+0x7f0>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	099b      	lsrs	r3, r3, #6
 8002508:	3301      	adds	r3, #1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800250e:	e002      	b.n	8002516 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3b01      	subs	r3, #1
 8002514:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f9      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800251c:	e04a      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a2f      	ldr	r2, [pc, #188]	; (80025e0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d113      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800252c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10d      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2a      	ldr	r2, [pc, #168]	; (80025e4 <HAL_ADC_ConfigChannel+0x7f8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d13a      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002546:	4619      	mov	r1, r3
 8002548:	4820      	ldr	r0, [pc, #128]	; (80025cc <HAL_ADC_ConfigChannel+0x7e0>)
 800254a:	f7ff f912 	bl	8001772 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800254e:	e031      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <HAL_ADC_ConfigChannel+0x7fc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d113      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800255a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10d      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <HAL_ADC_ConfigChannel+0x7e8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d121      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002578:	4619      	mov	r1, r3
 800257a:	4814      	ldr	r0, [pc, #80]	; (80025cc <HAL_ADC_ConfigChannel+0x7e0>)
 800257c:	f7ff f8f9 	bl	8001772 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002580:	e018      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_ADC_ConfigChannel+0x800>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d113      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00e      	beq.n	80025b4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff f90a 	bl	80017b4 <LL_ADC_EnableChannelVDDcore>
 80025a0:	e008      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f043 0220 	orr.w	r2, r3, #32
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	37d8      	adds	r7, #216	; 0xd8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	80080000 	.word	0x80080000
 80025cc:	42028300 	.word	0x42028300
 80025d0:	c3210000 	.word	0xc3210000
 80025d4:	42028000 	.word	0x42028000
 80025d8:	20000030 	.word	0x20000030
 80025dc:	053e2d63 	.word	0x053e2d63
 80025e0:	43290000 	.word	0x43290000
 80025e4:	42028100 	.word	0x42028100
 80025e8:	c7520000 	.word	0xc7520000
 80025ec:	475a0000 	.word	0x475a0000

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60d3      	str	r3, [r2, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <__NVIC_EnableIRQ+0x38>)
 800266e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	; (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff29 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff40 	bl	8002638 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff90 	bl	80026e4 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5f 	bl	8002690 <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff33 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa4 	bl	800274c <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e0d2      	b.n	80029c8 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002828:	2b00      	cmp	r3, #0
 800282a:	d106      	bne.n	800283a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2223      	movs	r2, #35	; 0x23
 8002830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fe fbfd 	bl	8001034 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 800283a:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <HAL_ETH_Init+0x1c0>)
 800283c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002840:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_ETH_Init+0x1c0>)
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800284a:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <HAL_ETH_Init+0x1c0>)
 800284c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7a1b      	ldrb	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d103      	bne.n	8002868 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe ff5d 	bl	8001720 <HAL_SBS_ETHInterfaceSelect>
 8002866:	e003      	b.n	8002870 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8002868:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800286c:	f7fe ff58 	bl	8001720 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8002870:	4b58      	ldr	r3, [pc, #352]	; (80029d4 <HAL_ETH_Init+0x1c4>)
 8002872:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800288c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800288e:	f7fe ff3b 	bl	8001708 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002894:	e011      	b.n	80028ba <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002896:	f7fe ff37 	bl	8001708 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028a4:	d909      	bls.n	80028ba <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2204      	movs	r2, #4
 80028aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	22e0      	movs	r2, #224	; 0xe0
 80028b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e086      	b.n	80029c8 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e4      	bne.n	8002896 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f885 	bl	80029dc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80028d2:	f001 fd8b 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4a3f      	ldr	r2, [pc, #252]	; (80029d8 <HAL_ETH_Init+0x1c8>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	0c9a      	lsrs	r2, r3, #18
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3a01      	subs	r2, #1
 80028e6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fa80 	bl	8002df0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80028fc:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002908:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800290c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	22e0      	movs	r2, #224	; 0xe0
 8002928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e04b      	b.n	80029c8 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002938:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800293c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002940:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6952      	ldr	r2, [r2, #20]
 8002948:	0051      	lsls	r1, r2, #1
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	430b      	orrs	r3, r1
 8002950:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002954:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fae6 	bl	8002f2a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fb2c 	bl	8002fbc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	3305      	adds	r3, #5
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	021a      	lsls	r2, r3, #8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	3303      	adds	r3, #3
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	061a      	lsls	r2, r3, #24
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	3302      	adds	r3, #2
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	3301      	adds	r3, #1
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80029a2:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80029b0:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80029b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2210      	movs	r2, #16
 80029c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	44020c00 	.word	0x44020c00
 80029d4:	44000400 	.word	0x44000400
 80029d8:	431bde83 	.word	0x431bde83

080029dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80029f6:	f001 fcf9 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 80029fa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <HAL_ETH_SetMDIOClockRange+0xb8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d908      	bls.n	8002a16 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4a24      	ldr	r2, [pc, #144]	; (8002a98 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d804      	bhi.n	8002a16 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e034      	b.n	8002a80 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d908      	bls.n	8002a30 <HAL_ETH_SetMDIOClockRange+0x54>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d204      	bcs.n	8002a30 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e027      	b.n	8002a80 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d303      	bcc.n	8002a40 <HAL_ETH_SetMDIOClockRange+0x64>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4a19      	ldr	r2, [pc, #100]	; (8002aa0 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d91e      	bls.n	8002a7e <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d908      	bls.n	8002a5a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d804      	bhi.n	8002a5a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e012      	b.n	8002a80 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d908      	bls.n	8002a74 <HAL_ETH_SetMDIOClockRange+0x98>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d804      	bhi.n	8002a74 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e005      	b.n	8002a80 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e000      	b.n	8002a80 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002a7e:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	01312cff 	.word	0x01312cff
 8002a98:	02160ebf 	.word	0x02160ebf
 8002a9c:	03938700 	.word	0x03938700
 8002aa0:	05f5e0ff 	.word	0x05f5e0ff
 8002aa4:	08f0d17f 	.word	0x08f0d17f
 8002aa8:	0ee6b280 	.word	0x0ee6b280

08002aac <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002abe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	791b      	ldrb	r3, [r3, #4]
 8002ac4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002ac6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	7b1b      	ldrb	r3, [r3, #12]
 8002acc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ace:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	7b5b      	ldrb	r3, [r3, #13]
 8002ad4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ad6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	7b9b      	ldrb	r3, [r3, #14]
 8002adc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ade:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	7bdb      	ldrb	r3, [r3, #15]
 8002ae4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ae6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	7c12      	ldrb	r2, [r2, #16]
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	d102      	bne.n	8002af6 <ETH_SetMACConfig+0x4a>
 8002af0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002af4:	e000      	b.n	8002af8 <ETH_SetMACConfig+0x4c>
 8002af6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002af8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	7c52      	ldrb	r2, [r2, #17]
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d102      	bne.n	8002b08 <ETH_SetMACConfig+0x5c>
 8002b02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b06:	e000      	b.n	8002b0a <ETH_SetMACConfig+0x5e>
 8002b08:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002b0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	7c9b      	ldrb	r3, [r3, #18]
 8002b10:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b12:	431a      	orrs	r2, r3
               macconf->Speed |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b18:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002b1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	7f1b      	ldrb	r3, [r3, #28]
 8002b24:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002b26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	7f5b      	ldrb	r3, [r3, #29]
 8002b2c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	7f92      	ldrb	r2, [r2, #30]
 8002b34:	2a00      	cmp	r2, #0
 8002b36:	d102      	bne.n	8002b3e <ETH_SetMACConfig+0x92>
 8002b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3c:	e000      	b.n	8002b40 <ETH_SetMACConfig+0x94>
 8002b3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	7fdb      	ldrb	r3, [r3, #31]
 8002b46:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b48:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b50:	2a00      	cmp	r2, #0
 8002b52:	d102      	bne.n	8002b5a <ETH_SetMACConfig+0xae>
 8002b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b58:	e000      	b.n	8002b5c <ETH_SetMACConfig+0xb0>
 8002b5a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b5c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b6a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002b6c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b57      	ldr	r3, [pc, #348]	; (8002cdc <ETH_SetMACConfig+0x230>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	68f9      	ldr	r1, [r7, #12]
 8002b86:	430b      	orrs	r3, r1
 8002b88:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b96:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ba0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ba2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002baa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002bac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002bb4:	2a00      	cmp	r2, #0
 8002bb6:	d102      	bne.n	8002bbe <ETH_SetMACConfig+0x112>
 8002bb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bbc:	e000      	b.n	8002bc0 <ETH_SetMACConfig+0x114>
 8002bbe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002bc0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <ETH_SetMACConfig+0x234>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	68f9      	ldr	r1, [r7, #12]
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	430b      	orrs	r3, r1
 8002c04:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c0c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c12:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c1a:	2a00      	cmp	r2, #0
 8002c1c:	d101      	bne.n	8002c22 <ETH_SetMACConfig+0x176>
 8002c1e:	2280      	movs	r2, #128	; 0x80
 8002c20:	e000      	b.n	8002c24 <ETH_SetMACConfig+0x178>
 8002c22:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002c24:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c36:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	68f9      	ldr	r1, [r7, #12]
 8002c42:	430b      	orrs	r3, r1
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002c4c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002c54:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	f023 0103 	bic.w	r1, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002c7a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002c96:	2a00      	cmp	r2, #0
 8002c98:	d101      	bne.n	8002c9e <ETH_SetMACConfig+0x1f2>
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	e000      	b.n	8002ca0 <ETH_SetMACConfig+0x1f4>
 8002c9e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002ca0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002ca8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002caa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002cb2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002cc0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	00048083 	.word	0x00048083
 8002ce0:	c0f88000 	.word	0xc0f88000

08002ce4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002cfc:	f023 0302 	bic.w	r3, r3, #2
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	6811      	ldr	r1, [r2, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d0e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	791b      	ldrb	r3, [r3, #4]
 8002d14:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d1a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	7b1b      	ldrb	r3, [r3, #12]
 8002d20:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	68f9      	ldr	r1, [r7, #12]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d44:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	7b5b      	ldrb	r3, [r3, #13]
 8002d4a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002d60:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <ETH_SetDMAConfig+0x104>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d70:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	7d1b      	ldrb	r3, [r3, #20]
 8002d7c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d7e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	7f5b      	ldrb	r3, [r3, #29]
 8002d84:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d92:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <ETH_SetDMAConfig+0x108>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	68f9      	ldr	r1, [r7, #12]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002da6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	7f1b      	ldrb	r3, [r3, #28]
 8002dae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dc8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	68f9      	ldr	r1, [r7, #12]
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dd8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	fffec000 	.word	0xfffec000
 8002dec:	ffc0efef 	.word	0xffc0efef

08002df0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b0a4      	sub	sp, #144	; 0x90
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e30:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002e48:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002e4c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002e54:	2300      	movs	r3, #0
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002e72:	2300      	movs	r3, #0
 8002e74:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e88:	2320      	movs	r3, #32
 8002e8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002e9a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ea4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002eac:	2302      	movs	r3, #2
 8002eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fde6 	bl	8002aac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002efa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002efe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002f10:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f16:	f107 0308 	add.w	r3, r7, #8
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fee1 	bl	8002ce4 <ETH_SetDMAConfig>
}
 8002f22:	bf00      	nop
 8002f24:	3790      	adds	r7, #144	; 0x90
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	e01d      	b.n	8002f74 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68d9      	ldr	r1, [r3, #12]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2200      	movs	r2, #0
 8002f54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	3206      	adds	r2, #6
 8002f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d9de      	bls.n	8002f38 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f9c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e023      	b.n	8003012 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6919      	ldr	r1, [r3, #16]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	440b      	add	r3, r1
 8002fda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	3212      	adds	r2, #18
 8003008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d9d8      	bls.n	8002fca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303e:	461a      	mov	r2, r3
 8003040:	2303      	movs	r3, #3
 8003042:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003052:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003066:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003086:	e136      	b.n	80032f6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	4013      	ands	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8128 	beq.w	80032f0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x38>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b12      	cmp	r3, #18
 80030ae:	d125      	bne.n	80030fc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	08da      	lsrs	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3208      	adds	r2, #8
 80030b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	220f      	movs	r2, #15
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4013      	ands	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 020f 	and.w	r2, r3, #15
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	6979      	ldr	r1, [r7, #20]
 80030f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4013      	ands	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d00b      	beq.n	8003150 <HAL_GPIO_Init+0xd8>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d007      	beq.n	8003150 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003144:	2b11      	cmp	r3, #17
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b12      	cmp	r3, #18
 800314e:	d130      	bne.n	80031b2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4013      	ands	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003186:	2201      	movs	r2, #1
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4013      	ands	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0201 	and.w	r2, r3, #1
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d017      	beq.n	80031ea <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4013      	ands	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d07c      	beq.n	80032f0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80031f6:	4a47      	ldr	r2, [pc, #284]	; (8003314 <HAL_GPIO_Init+0x29c>)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3318      	adds	r3, #24
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4013      	ands	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0a9a      	lsrs	r2, r3, #10
 800321e:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <HAL_GPIO_Init+0x2a0>)
 8003220:	4013      	ands	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	f002 0203 	and.w	r2, r2, #3
 8003228:	00d2      	lsls	r2, r2, #3
 800322a:	4093      	lsls	r3, r2
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003232:	4938      	ldr	r1, [pc, #224]	; (8003314 <HAL_GPIO_Init+0x29c>)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3318      	adds	r3, #24
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003240:	4b34      	ldr	r3, [pc, #208]	; (8003314 <HAL_GPIO_Init+0x29c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	43db      	mvns	r3, r3
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4013      	ands	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <HAL_GPIO_Init+0x29c>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800326a:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_GPIO_Init+0x29c>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43db      	mvns	r3, r3
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4013      	ands	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800328e:	4a21      	ldr	r2, [pc, #132]	; (8003314 <HAL_GPIO_Init+0x29c>)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <HAL_GPIO_Init+0x29c>)
 8003296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	43db      	mvns	r3, r3
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4013      	ands	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80032ba:	4a16      	ldr	r2, [pc, #88]	; (8003314 <HAL_GPIO_Init+0x29c>)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <HAL_GPIO_Init+0x29c>)
 80032c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4013      	ands	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_GPIO_Init+0x29c>)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	3301      	adds	r3, #1
 80032f4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f aec1 	bne.w	8003088 <HAL_GPIO_Init+0x10>
  }
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	44022000 	.word	0x44022000
 8003318:	002f7f7f 	.word	0x002f7f7f

0800331c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
 8003328:	4613      	mov	r3, r2
 800332a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800332c:	787b      	ldrb	r3, [r7, #1]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003338:	e002      	b.n	8003340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d006      	beq.n	8003370 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003362:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fd9a 	bl	8000ea4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d006      	beq.n	800338a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800337c:	4a05      	ldr	r2, [pc, #20]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd fda7 	bl	8000ed8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	44022000 	.word	0x44022000

08003398 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_ICACHE_Enable+0x1c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <HAL_ICACHE_Enable+0x1c>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40030400 	.word	0x40030400

080033b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b08f      	sub	sp, #60	; 0x3c
 80033bc:	af0a      	add	r7, sp, #40	; 0x28
 80033be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0cd      	b.n	8003566 <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd ffa6 	bl	8001330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2203      	movs	r2, #3
 80033e8:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f007 fa0c 	bl	800a80e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
 80033fa:	e03e      	b.n	800347a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	440b      	add	r3, r1
 800340a:	333d      	adds	r3, #61	; 0x3d
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	333c      	adds	r3, #60	; 0x3c
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	333f      	adds	r3, #63	; 0x3f
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	440b      	add	r3, r1
 8003446:	334c      	adds	r3, #76	; 0x4c
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	440b      	add	r3, r1
 800345a:	3350      	adds	r3, #80	; 0x50
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	440b      	add	r3, r1
 800346e:	3354      	adds	r3, #84	; 0x54
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	3301      	adds	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d3bb      	bcc.n	80033fc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	e044      	b.n	8003514 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	f203 137d 	addw	r3, r3, #381	; 0x17d
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	f203 137f 	addw	r3, r3, #383	; 0x17f
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	440b      	add	r3, r1
 80034da:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	3301      	adds	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d3b5      	bcc.n	800348a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	687e      	ldr	r6, [r7, #4]
 8003526:	466d      	mov	r5, sp
 8003528:	f106 0410 	add.w	r4, r6, #16
 800352c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003534:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003538:	e885 0003 	stmia.w	r5, {r0, r1}
 800353c:	1d33      	adds	r3, r6, #4
 800353e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003540:	6838      	ldr	r0, [r7, #0]
 8003542:	f007 f99c 	bl	800a87e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f805 	bl	800356e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800356e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	f043 0202 	orr.w	r2, r3, #2
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f000 bc28 	b.w	8003e18 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035c8:	4b94      	ldr	r3, [pc, #592]	; (800381c <HAL_RCC_OscConfig+0x268>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f003 0318 	and.w	r3, r3, #24
 80035d0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80035d2:	4b92      	ldr	r3, [pc, #584]	; (800381c <HAL_RCC_OscConfig+0x268>)
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d05b      	beq.n	80036a0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d005      	beq.n	80035fa <HAL_RCC_OscConfig+0x46>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b18      	cmp	r3, #24
 80035f2:	d114      	bne.n	800361e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d111      	bne.n	800361e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f000 bc08 	b.w	8003e18 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003608:	4b84      	ldr	r3, [pc, #528]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	4981      	ldr	r1, [pc, #516]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003618:	4313      	orrs	r3, r2
 800361a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800361c:	e040      	b.n	80036a0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d023      	beq.n	800366e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003626:	4b7d      	ldr	r3, [pc, #500]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7c      	ldr	r2, [pc, #496]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fe f869 	bl	8001708 <HAL_GetTick>
 8003636:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800363a:	f7fe f865 	bl	8001708 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e3e5      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800364c:	4b73      	ldr	r3, [pc, #460]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003658:	4b70      	ldr	r3, [pc, #448]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	041b      	lsls	r3, r3, #16
 8003666:	496d      	ldr	r1, [pc, #436]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003668:	4313      	orrs	r3, r2
 800366a:	618b      	str	r3, [r1, #24]
 800366c:	e018      	b.n	80036a0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800366e:	4b6b      	ldr	r3, [pc, #428]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6a      	ldr	r2, [pc, #424]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7fe f845 	bl	8001708 <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003682:	f7fe f841 	bl	8001708 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e3c1      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003694:	4b61      	ldr	r3, [pc, #388]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f0      	bne.n	8003682 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80a0 	beq.w	80037ee <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_OscConfig+0x10c>
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b18      	cmp	r3, #24
 80036b8:	d109      	bne.n	80036ce <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f040 8092 	bne.w	80037ee <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e3a4      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x132>
 80036d8:	4b50      	ldr	r3, [pc, #320]	; (800381c <HAL_RCC_OscConfig+0x268>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4f      	ldr	r2, [pc, #316]	; (800381c <HAL_RCC_OscConfig+0x268>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	e058      	b.n	8003798 <HAL_RCC_OscConfig+0x1e4>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d112      	bne.n	8003714 <HAL_RCC_OscConfig+0x160>
 80036ee:	4b4b      	ldr	r3, [pc, #300]	; (800381c <HAL_RCC_OscConfig+0x268>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a4a      	ldr	r2, [pc, #296]	; (800381c <HAL_RCC_OscConfig+0x268>)
 80036f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b48      	ldr	r3, [pc, #288]	; (800381c <HAL_RCC_OscConfig+0x268>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a47      	ldr	r2, [pc, #284]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003700:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b45      	ldr	r3, [pc, #276]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a44      	ldr	r2, [pc, #272]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800370c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e041      	b.n	8003798 <HAL_RCC_OscConfig+0x1e4>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371c:	d112      	bne.n	8003744 <HAL_RCC_OscConfig+0x190>
 800371e:	4b3f      	ldr	r3, [pc, #252]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a3e      	ldr	r2, [pc, #248]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b3c      	ldr	r3, [pc, #240]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a3b      	ldr	r2, [pc, #236]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003730:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4b39      	ldr	r3, [pc, #228]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a38      	ldr	r2, [pc, #224]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800373c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e029      	b.n	8003798 <HAL_RCC_OscConfig+0x1e4>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800374c:	d112      	bne.n	8003774 <HAL_RCC_OscConfig+0x1c0>
 800374e:	4b33      	ldr	r3, [pc, #204]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a32      	ldr	r2, [pc, #200]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b30      	ldr	r3, [pc, #192]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2f      	ldr	r2, [pc, #188]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b2d      	ldr	r3, [pc, #180]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2c      	ldr	r2, [pc, #176]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e011      	b.n	8003798 <HAL_RCC_OscConfig+0x1e4>
 8003774:	4b29      	ldr	r3, [pc, #164]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a28      	ldr	r2, [pc, #160]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800377a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b26      	ldr	r3, [pc, #152]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b23      	ldr	r3, [pc, #140]	; (800381c <HAL_RCC_OscConfig+0x268>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a22      	ldr	r2, [pc, #136]	; (800381c <HAL_RCC_OscConfig+0x268>)
 8003792:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fd ffb2 	bl	8001708 <HAL_GetTick>
 80037a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80037a8:	f7fd ffae 	bl	8001708 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e32e      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ba:	4b18      	ldr	r3, [pc, #96]	; (800381c <HAL_RCC_OscConfig+0x268>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x1f4>
 80037c6:	e012      	b.n	80037ee <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fd ff9e 	bl	8001708 <HAL_GetTick>
 80037cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80037d0:	f7fd ff9a 	bl	8001708 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e31a      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037e2:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HAL_RCC_OscConfig+0x268>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 809a 	beq.w	8003930 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_RCC_OscConfig+0x25a>
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	2b18      	cmp	r3, #24
 8003806:	d149      	bne.n	800389c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d146      	bne.n	800389c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e2fe      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
 800381a:	bf00      	nop
 800381c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11c      	bne.n	8003860 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003826:	4b9a      	ldr	r3, [pc, #616]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0218 	and.w	r2, r3, #24
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	429a      	cmp	r2, r3
 8003834:	d014      	beq.n	8003860 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003836:	4b96      	ldr	r3, [pc, #600]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 0218 	bic.w	r2, r3, #24
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	4993      	ldr	r1, [pc, #588]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003848:	f000 fdd0 	bl	80043ec <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800384c:	4b91      	ldr	r3, [pc, #580]	; (8003a94 <HAL_RCC_OscConfig+0x4e0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7fd ff0f 	bl	8001674 <HAL_InitTick>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e2db      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fd ff52 	bl	8001708 <HAL_GetTick>
 8003864:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003868:	f7fd ff4e 	bl	8001708 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e2ce      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800387a:	4b85      	ldr	r3, [pc, #532]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003886:	4b82      	ldr	r3, [pc, #520]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	497e      	ldr	r1, [pc, #504]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800389a:	e049      	b.n	8003930 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d02c      	beq.n	80038fe <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80038a4:	4b7a      	ldr	r3, [pc, #488]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 0218 	bic.w	r2, r3, #24
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	4977      	ldr	r1, [pc, #476]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80038b6:	4b76      	ldr	r3, [pc, #472]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a75      	ldr	r2, [pc, #468]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd ff21 	bl	8001708 <HAL_GetTick>
 80038c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80038ca:	f7fd ff1d 	bl	8001708 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e29d      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038dc:	4b6c      	ldr	r3, [pc, #432]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80038e8:	4b69      	ldr	r3, [pc, #420]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	4966      	ldr	r1, [pc, #408]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	610b      	str	r3, [r1, #16]
 80038fc:	e018      	b.n	8003930 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fe:	4b64      	ldr	r3, [pc, #400]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a63      	ldr	r2, [pc, #396]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fd fefd 	bl	8001708 <HAL_GetTick>
 800390e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003912:	f7fd fef9 	bl	8001708 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e279      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003924:	4b5a      	ldr	r3, [pc, #360]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f0      	bne.n	8003912 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01c      	beq.n	800397e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003944:	4b52      	ldr	r3, [pc, #328]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800394a:	4a51      	ldr	r2, [pc, #324]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 800394c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003950:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fd fed8 	bl	8001708 <HAL_GetTick>
 8003958:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800395c:	f7fd fed4 	bl	8001708 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e254      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800396e:	4b48      	ldr	r3, [pc, #288]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ef      	beq.n	800395c <HAL_RCC_OscConfig+0x3a8>
 800397c:	e01b      	b.n	80039b6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397e:	4b44      	ldr	r3, [pc, #272]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003984:	4a42      	ldr	r2, [pc, #264]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003986:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800398a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fd febb 	bl	8001708 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003996:	f7fd feb7 	bl	8001708 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e237      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80039a8:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 80039aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ef      	bne.n	8003996 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80d2 	beq.w	8003b68 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80039c4:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <HAL_RCC_OscConfig+0x4e4>)
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d118      	bne.n	8003a02 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80039d0:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <HAL_RCC_OscConfig+0x4e4>)
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	4a30      	ldr	r2, [pc, #192]	; (8003a98 <HAL_RCC_OscConfig+0x4e4>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039dc:	f7fd fe94 	bl	8001708 <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e4:	f7fd fe90 	bl	8001708 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e210      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80039f6:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <HAL_RCC_OscConfig+0x4e4>)
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d108      	bne.n	8003a1c <HAL_RCC_OscConfig+0x468>
 8003a0a:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a10:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a1a:	e074      	b.n	8003b06 <HAL_RCC_OscConfig+0x552>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d118      	bne.n	8003a56 <HAL_RCC_OscConfig+0x4a2>
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a2a:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a3a:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a4a:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a54:	e057      	b.n	8003b06 <HAL_RCC_OscConfig+0x552>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d11e      	bne.n	8003a9c <HAL_RCC_OscConfig+0x4e8>
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a66:	f043 0304 	orr.w	r3, r3, #4
 8003a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a74:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a7e:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a84:	4a02      	ldr	r2, [pc, #8]	; (8003a90 <HAL_RCC_OscConfig+0x4dc>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a8e:	e03a      	b.n	8003b06 <HAL_RCC_OscConfig+0x552>
 8003a90:	44020c00 	.word	0x44020c00
 8003a94:	20000034 	.word	0x20000034
 8003a98:	44020800 	.word	0x44020800
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b85      	cmp	r3, #133	; 0x85
 8003aa2:	d118      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x522>
 8003aa4:	4ba2      	ldr	r3, [pc, #648]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aaa:	4aa1      	ldr	r2, [pc, #644]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003aac:	f043 0304 	orr.w	r3, r3, #4
 8003ab0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ab4:	4b9e      	ldr	r3, [pc, #632]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aba:	4a9d      	ldr	r2, [pc, #628]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ac4:	4b9a      	ldr	r3, [pc, #616]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aca:	4a99      	ldr	r2, [pc, #612]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ad4:	e017      	b.n	8003b06 <HAL_RCC_OscConfig+0x552>
 8003ad6:	4b96      	ldr	r3, [pc, #600]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003adc:	4a94      	ldr	r2, [pc, #592]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ae6:	4b92      	ldr	r3, [pc, #584]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aec:	4a90      	ldr	r2, [pc, #576]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003aee:	f023 0304 	bic.w	r3, r3, #4
 8003af2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003af6:	4b8e      	ldr	r3, [pc, #568]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003afc:	4a8c      	ldr	r2, [pc, #560]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0e:	f7fd fdfb 	bl	8001708 <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b16:	f7fd fdf7 	bl	8001708 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e175      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2c:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0ed      	beq.n	8003b16 <HAL_RCC_OscConfig+0x562>
 8003b3a:	e015      	b.n	8003b68 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fd fde4 	bl	8001708 <HAL_GetTick>
 8003b40:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fd fde0 	bl	8001708 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e15e      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b5a:	4b75      	ldr	r3, [pc, #468]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ed      	bne.n	8003b44 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d036      	beq.n	8003be2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d019      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b7c:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a6b      	ldr	r2, [pc, #428]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fd fdbe 	bl	8001708 <HAL_GetTick>
 8003b8c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003b90:	f7fd fdba 	bl	8001708 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e13a      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003ba2:	4b63      	ldr	r3, [pc, #396]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x5dc>
 8003bae:	e018      	b.n	8003be2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bb0:	4b5f      	ldr	r3, [pc, #380]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5e      	ldr	r2, [pc, #376]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fd fda4 	bl	8001708 <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003bc4:	f7fd fda0 	bl	8001708 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e120      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003bd6:	4b56      	ldr	r3, [pc, #344]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8115 	beq.w	8003e16 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b18      	cmp	r3, #24
 8003bf0:	f000 80af 	beq.w	8003d52 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	f040 8086 	bne.w	8003d0a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003bfe:	4b4c      	ldr	r3, [pc, #304]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a4b      	ldr	r2, [pc, #300]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fd fd7d 	bl	8001708 <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003c12:	f7fd fd79 	bl	8001708 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0f9      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c24:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003c30:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c38:	f023 0303 	bic.w	r3, r3, #3
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c44:	0212      	lsls	r2, r2, #8
 8003c46:	430a      	orrs	r2, r1
 8003c48:	4939      	ldr	r1, [pc, #228]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	628b      	str	r3, [r1, #40]	; 0x28
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	3b01      	subs	r3, #1
 8003c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	025b      	lsls	r3, r3, #9
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	3b01      	subs	r3, #1
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c7e:	492c      	ldr	r1, [pc, #176]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003c84:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003c8a:	f023 0310 	bic.w	r3, r3, #16
 8003c8e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c94:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003c9a:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003ca0:	f043 0310 	orr.w	r3, r3, #16
 8003ca4:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003ca6:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	f023 020c 	bic.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	491f      	ldr	r1, [pc, #124]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	f023 0220 	bic.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc4:	491a      	ldr	r1, [pc, #104]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cca:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003cd6:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fd fd11 	bl	8001708 <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003cea:	f7fd fd0d 	bl	8001708 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e08d      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x736>
 8003d08:	e085      	b.n	8003e16 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <HAL_RCC_OscConfig+0x77c>)
 8003d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fd fcf7 	bl	8001708 <HAL_GetTick>
 8003d1a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd fcf3 	bl	8001708 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d903      	bls.n	8003d34 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e073      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
 8003d30:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d34:	4b3a      	ldr	r3, [pc, #232]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ee      	bne.n	8003d1e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003d40:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	4a36      	ldr	r2, [pc, #216]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003d46:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	6293      	str	r3, [r2, #40]	; 0x28
 8003d50:	e061      	b.n	8003e16 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003d52:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d58:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d031      	beq.n	8003dca <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 0203 	and.w	r2, r3, #3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d12a      	bne.n	8003dca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d122      	bne.n	8003dca <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d11a      	bne.n	8003dca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	0a5b      	lsrs	r3, r3, #9
 8003d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d111      	bne.n	8003dca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d108      	bne.n	8003dca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	0e1b      	lsrs	r3, r3, #24
 8003dbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e024      	b.n	8003e18 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003dce:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	08db      	lsrs	r3, r3, #3
 8003dd4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d01a      	beq.n	8003e16 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003de6:	f023 0310 	bic.w	r3, r3, #16
 8003dea:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd fc8c 	bl	8001708 <HAL_GetTick>
 8003df0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003df2:	bf00      	nop
 8003df4:	f7fd fc88 	bl	8001708 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d0f9      	beq.n	8003df4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e04:	4a06      	ldr	r2, [pc, #24]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <HAL_RCC_OscConfig+0x86c>)
 8003e10:	f043 0310 	orr.w	r3, r3, #16
 8003e14:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3720      	adds	r7, #32
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	44020c00 	.word	0x44020c00

08003e24 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e19e      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e38:	4b83      	ldr	r3, [pc, #524]	; (8004048 <HAL_RCC_ClockConfig+0x224>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d910      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b80      	ldr	r3, [pc, #512]	; (8004048 <HAL_RCC_ClockConfig+0x224>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 020f 	bic.w	r2, r3, #15
 8003e4e:	497e      	ldr	r1, [pc, #504]	; (8004048 <HAL_RCC_ClockConfig+0x224>)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b7c      	ldr	r3, [pc, #496]	; (8004048 <HAL_RCC_ClockConfig+0x224>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e186      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d012      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	4b74      	ldr	r3, [pc, #464]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d909      	bls.n	8003e9a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003e86:	4b71      	ldr	r3, [pc, #452]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	496d      	ldr	r1, [pc, #436]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d012      	beq.n	8003ecc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	4b68      	ldr	r3, [pc, #416]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d909      	bls.n	8003ecc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003eb8:	4b64      	ldr	r3, [pc, #400]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	4961      	ldr	r1, [pc, #388]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d010      	beq.n	8003efa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	4b5b      	ldr	r3, [pc, #364]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d908      	bls.n	8003efa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003ee8:	4b58      	ldr	r3, [pc, #352]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4955      	ldr	r1, [pc, #340]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d010      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d908      	bls.n	8003f28 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003f16:	4b4d      	ldr	r3, [pc, #308]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 020f 	bic.w	r2, r3, #15
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	494a      	ldr	r1, [pc, #296]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8093 	beq.w	800405c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f3e:	4b43      	ldr	r3, [pc, #268]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d121      	bne.n	8003f8e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e113      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f56:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d115      	bne.n	8003f8e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e107      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d107      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003f6e:	4b37      	ldr	r3, [pc, #220]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d109      	bne.n	8003f8e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0fb      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7e:	4b33      	ldr	r3, [pc, #204]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0f3      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f023 0203 	bic.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	492c      	ldr	r1, [pc, #176]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa0:	f7fd fbb2 	bl	8001708 <HAL_GetTick>
 8003fa4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d112      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb0:	f7fd fbaa 	bl	8001708 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0d7      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fc6:	4b21      	ldr	r3, [pc, #132]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 0318 	and.w	r3, r3, #24
 8003fce:	2b18      	cmp	r3, #24
 8003fd0:	d1ee      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x18c>
 8003fd2:	e043      	b.n	800405c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d112      	bne.n	8004002 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003fde:	f7fd fb93 	bl	8001708 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e0c0      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff4:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f003 0318 	and.w	r3, r3, #24
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	d1ee      	bne.n	8003fde <HAL_RCC_ClockConfig+0x1ba>
 8004000:	e02c      	b.n	800405c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d122      	bne.n	8004050 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800400a:	e00a      	b.n	8004022 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800400c:	f7fd fb7c 	bl	8001708 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f241 3288 	movw	r2, #5000	; 0x1388
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e0a9      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_RCC_ClockConfig+0x228>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0318 	and.w	r3, r3, #24
 800402a:	2b08      	cmp	r3, #8
 800402c:	d1ee      	bne.n	800400c <HAL_RCC_ClockConfig+0x1e8>
 800402e:	e015      	b.n	800405c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004030:	f7fd fb6a 	bl	8001708 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d906      	bls.n	8004050 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e097      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
 8004046:	bf00      	nop
 8004048:	40022000 	.word	0x40022000
 800404c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004050:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f003 0318 	and.w	r3, r3, #24
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e9      	bne.n	8004030 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d010      	beq.n	800408a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	4b44      	ldr	r3, [pc, #272]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	429a      	cmp	r2, r3
 8004076:	d208      	bcs.n	800408a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004078:	4b41      	ldr	r3, [pc, #260]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f023 020f 	bic.w	r2, r3, #15
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	493e      	ldr	r1, [pc, #248]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 8004086:	4313      	orrs	r3, r2
 8004088:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800408a:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <HAL_RCC_ClockConfig+0x360>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d210      	bcs.n	80040ba <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004098:	4b3a      	ldr	r3, [pc, #232]	; (8004184 <HAL_RCC_ClockConfig+0x360>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 020f 	bic.w	r2, r3, #15
 80040a0:	4938      	ldr	r1, [pc, #224]	; (8004184 <HAL_RCC_ClockConfig+0x360>)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a8:	4b36      	ldr	r3, [pc, #216]	; (8004184 <HAL_RCC_ClockConfig+0x360>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e05d      	b.n	8004176 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d010      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d208      	bcs.n	80040e8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80040d6:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	4927      	ldr	r1, [pc, #156]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d012      	beq.n	800411a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	4b21      	ldr	r3, [pc, #132]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004102:	429a      	cmp	r2, r3
 8004104:	d209      	bcs.n	800411a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	491a      	ldr	r1, [pc, #104]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	d012      	beq.n	800414c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004134:	429a      	cmp	r2, r3
 8004136:	d209      	bcs.n	800414c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	490e      	ldr	r1, [pc, #56]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 8004148:	4313      	orrs	r3, r2
 800414a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800414c:	f000 f822 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_ClockConfig+0x35c>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	490b      	ldr	r1, [pc, #44]	; (8004188 <HAL_RCC_ClockConfig+0x364>)
 800415c:	5ccb      	ldrb	r3, [r1, r3]
 800415e:	fa22 f303 	lsr.w	r3, r2, r3
 8004162:	4a0a      	ldr	r2, [pc, #40]	; (800418c <HAL_RCC_ClockConfig+0x368>)
 8004164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_RCC_ClockConfig+0x36c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd fa82 	bl	8001674 <HAL_InitTick>
 8004170:	4603      	mov	r3, r0
 8004172:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004174:	7afb      	ldrb	r3, [r7, #11]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	44020c00 	.word	0x44020c00
 8004184:	40022000 	.word	0x40022000
 8004188:	0800a934 	.word	0x0800a934
 800418c:	20000030 	.word	0x20000030
 8004190:	20000034 	.word	0x20000034

08004194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800419a:	4b8c      	ldr	r3, [pc, #560]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0318 	and.w	r3, r3, #24
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d102      	bne.n	80041ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80041a6:	4b8a      	ldr	r3, [pc, #552]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x23c>)
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e107      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ac:	4b87      	ldr	r3, [pc, #540]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f003 0318 	and.w	r3, r3, #24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d112      	bne.n	80041de <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80041b8:	4b84      	ldr	r3, [pc, #528]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d009      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041c4:	4b81      	ldr	r3, [pc, #516]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	08db      	lsrs	r3, r3, #3
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	4a81      	ldr	r2, [pc, #516]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x240>)
 80041d0:	fa22 f303 	lsr.w	r3, r2, r3
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	e0f1      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80041d8:	4b7e      	ldr	r3, [pc, #504]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x240>)
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e0ee      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041de:	4b7b      	ldr	r3, [pc, #492]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 0318 	and.w	r3, r3, #24
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d102      	bne.n	80041f0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041ea:	4b7b      	ldr	r3, [pc, #492]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x244>)
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e0e5      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f0:	4b76      	ldr	r3, [pc, #472]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f003 0318 	and.w	r3, r3, #24
 80041f8:	2b18      	cmp	r3, #24
 80041fa:	f040 80dd 	bne.w	80043b8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80041fe:	4b73      	ldr	r3, [pc, #460]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004208:	4b70      	ldr	r3, [pc, #448]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004212:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004214:	4b6d      	ldr	r3, [pc, #436]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004220:	4b6a      	ldr	r3, [pc, #424]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004224:	08db      	lsrs	r3, r3, #3
 8004226:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	fb02 f303 	mul.w	r3, r2, r3
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004238:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80b7 	beq.w	80043b2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d003      	beq.n	8004252 <HAL_RCC_GetSysClockFreq+0xbe>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d056      	beq.n	80042fe <HAL_RCC_GetSysClockFreq+0x16a>
 8004250:	e077      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004252:	4b5e      	ldr	r3, [pc, #376]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d02d      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800425e:	4b5b      	ldr	r3, [pc, #364]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	08db      	lsrs	r3, r3, #3
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	4a5a      	ldr	r2, [pc, #360]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x240>)
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	ee07 3a90 	vmov	s15, r3
 8004280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004288:	4b50      	ldr	r3, [pc, #320]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004290:	ee07 3a90 	vmov	s15, r3
 8004294:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004298:	ed97 6a02 	vldr	s12, [r7, #8]
 800429c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80043dc <HAL_RCC_GetSysClockFreq+0x248>
 80042a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80042b8:	e065      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80043e0 <HAL_RCC_GetSysClockFreq+0x24c>
 80042c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042cc:	4b3f      	ldr	r3, [pc, #252]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 80042ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d4:	ee07 3a90 	vmov	s15, r3
 80042d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80042dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80043dc <HAL_RCC_GetSysClockFreq+0x248>
 80042e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80042fc:	e043      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	ee07 3a90 	vmov	s15, r3
 8004304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004308:	eddf 6a36 	vldr	s13, [pc, #216]	; 80043e4 <HAL_RCC_GetSysClockFreq+0x250>
 800430c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004310:	4b2e      	ldr	r3, [pc, #184]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004320:	ed97 6a02 	vldr	s12, [r7, #8]
 8004324:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80043dc <HAL_RCC_GetSysClockFreq+0x248>
 8004328:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800432c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004334:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004340:	e021      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	ee07 3a90 	vmov	s15, r3
 8004348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043e8 <HAL_RCC_GetSysClockFreq+0x254>
 8004350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004354:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004364:	ed97 6a02 	vldr	s12, [r7, #8]
 8004368:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80043dc <HAL_RCC_GetSysClockFreq+0x248>
 800436c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004370:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004378:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800437c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004380:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004384:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_RCC_GetSysClockFreq+0x238>)
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	0a5b      	lsrs	r3, r3, #9
 800438c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004390:	3301      	adds	r3, #1
 8004392:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800439e:	edd7 6a06 	vldr	s13, [r7, #24]
 80043a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043aa:	ee17 3a90 	vmov	r3, s15
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	e004      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	e001      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x240>)
 80043ba:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80043bc:	69fb      	ldr	r3, [r7, #28]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3724      	adds	r7, #36	; 0x24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	44020c00 	.word	0x44020c00
 80043d0:	003d0900 	.word	0x003d0900
 80043d4:	03d09000 	.word	0x03d09000
 80043d8:	007a1200 	.word	0x007a1200
 80043dc:	46000000 	.word	0x46000000
 80043e0:	4c742400 	.word	0x4c742400
 80043e4:	4af42400 	.word	0x4af42400
 80043e8:	4a742400 	.word	0x4a742400

080043ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80043f0:	f7ff fed0 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <HAL_RCC_GetHCLKFreq+0x2c>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80043fa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80043fe:	4907      	ldr	r1, [pc, #28]	; (800441c <HAL_RCC_GetHCLKFreq+0x30>)
 8004400:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004402:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	4a05      	ldr	r2, [pc, #20]	; (8004420 <HAL_RCC_GetHCLKFreq+0x34>)
 800440c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <HAL_RCC_GetHCLKFreq+0x34>)
 8004410:	681b      	ldr	r3, [r3, #0]
}
 8004412:	4618      	mov	r0, r3
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	44020c00 	.word	0x44020c00
 800441c:	0800a934 	.word	0x0800a934
 8004420:	20000030 	.word	0x20000030

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004428:	f7ff ffe0 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	091b      	lsrs	r3, r3, #4
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4904      	ldr	r1, [pc, #16]	; (800444c <HAL_RCC_GetPCLK1Freq+0x28>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	44020c00 	.word	0x44020c00
 800444c:	0800a944 	.word	0x0800a944

08004450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004454:	f7ff ffca 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetPCLK2Freq+0x24>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	4904      	ldr	r1, [pc, #16]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	44020c00 	.word	0x44020c00
 8004478:	0800a944 	.word	0x0800a944

0800447c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004480:	f7ff ffb4 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	0b1b      	lsrs	r3, r3, #12
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4904      	ldr	r1, [pc, #16]	; (80044a4 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	44020c00 	.word	0x44020c00
 80044a4:	0800a944 	.word	0x0800a944

080044a8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80044a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ac:	b0d8      	sub	sp, #352	; 0x160
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044ba:	2300      	movs	r3, #0
 80044bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80044cc:	2500      	movs	r5, #0
 80044ce:	ea54 0305 	orrs.w	r3, r4, r5
 80044d2:	d00b      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80044d4:	4bcd      	ldr	r3, [pc, #820]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80044d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044da:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80044de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	4ac9      	ldr	r2, [pc, #804]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80044e6:	430b      	orrs	r3, r1
 80044e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f002 0801 	and.w	r8, r2, #1
 80044f8:	f04f 0900 	mov.w	r9, #0
 80044fc:	ea58 0309 	orrs.w	r3, r8, r9
 8004500:	d042      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004502:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	2b05      	cmp	r3, #5
 800450a:	d823      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800450c:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	0800455d 	.word	0x0800455d
 8004518:	0800452d 	.word	0x0800452d
 800451c:	08004541 	.word	0x08004541
 8004520:	0800455d 	.word	0x0800455d
 8004524:	0800455d 	.word	0x0800455d
 8004528:	0800455d 	.word	0x0800455d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800452c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004530:	3308      	adds	r3, #8
 8004532:	4618      	mov	r0, r3
 8004534:	f004 feda 	bl	80092ec <RCCEx_PLL2_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800453e:	e00e      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004540:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004544:	3330      	adds	r3, #48	; 0x30
 8004546:	4618      	mov	r0, r3
 8004548:	f004 ff68 	bl	800941c <RCCEx_PLL3_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004552:	e004      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800455a:	e000      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800455c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10c      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004566:	4ba9      	ldr	r3, [pc, #676]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800456c:	f023 0107 	bic.w	r1, r3, #7
 8004570:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	4aa5      	ldr	r2, [pc, #660]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004578:	430b      	orrs	r3, r1
 800457a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800457e:	e003      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004584:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004588:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f002 0a02 	and.w	sl, r2, #2
 8004594:	f04f 0b00 	mov.w	fp, #0
 8004598:	ea5a 030b 	orrs.w	r3, sl, fp
 800459c:	f000 8088 	beq.w	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80045a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	2b28      	cmp	r3, #40	; 0x28
 80045a8:	d868      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	08004685 	.word	0x08004685
 80045b4:	0800467d 	.word	0x0800467d
 80045b8:	0800467d 	.word	0x0800467d
 80045bc:	0800467d 	.word	0x0800467d
 80045c0:	0800467d 	.word	0x0800467d
 80045c4:	0800467d 	.word	0x0800467d
 80045c8:	0800467d 	.word	0x0800467d
 80045cc:	0800467d 	.word	0x0800467d
 80045d0:	08004655 	.word	0x08004655
 80045d4:	0800467d 	.word	0x0800467d
 80045d8:	0800467d 	.word	0x0800467d
 80045dc:	0800467d 	.word	0x0800467d
 80045e0:	0800467d 	.word	0x0800467d
 80045e4:	0800467d 	.word	0x0800467d
 80045e8:	0800467d 	.word	0x0800467d
 80045ec:	0800467d 	.word	0x0800467d
 80045f0:	08004669 	.word	0x08004669
 80045f4:	0800467d 	.word	0x0800467d
 80045f8:	0800467d 	.word	0x0800467d
 80045fc:	0800467d 	.word	0x0800467d
 8004600:	0800467d 	.word	0x0800467d
 8004604:	0800467d 	.word	0x0800467d
 8004608:	0800467d 	.word	0x0800467d
 800460c:	0800467d 	.word	0x0800467d
 8004610:	08004685 	.word	0x08004685
 8004614:	0800467d 	.word	0x0800467d
 8004618:	0800467d 	.word	0x0800467d
 800461c:	0800467d 	.word	0x0800467d
 8004620:	0800467d 	.word	0x0800467d
 8004624:	0800467d 	.word	0x0800467d
 8004628:	0800467d 	.word	0x0800467d
 800462c:	0800467d 	.word	0x0800467d
 8004630:	08004685 	.word	0x08004685
 8004634:	0800467d 	.word	0x0800467d
 8004638:	0800467d 	.word	0x0800467d
 800463c:	0800467d 	.word	0x0800467d
 8004640:	0800467d 	.word	0x0800467d
 8004644:	0800467d 	.word	0x0800467d
 8004648:	0800467d 	.word	0x0800467d
 800464c:	0800467d 	.word	0x0800467d
 8004650:	08004685 	.word	0x08004685
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004654:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004658:	3308      	adds	r3, #8
 800465a:	4618      	mov	r0, r3
 800465c:	f004 fe46 	bl	80092ec <RCCEx_PLL2_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004666:	e00e      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004668:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800466c:	3330      	adds	r3, #48	; 0x30
 800466e:	4618      	mov	r0, r3
 8004670:	f004 fed4 	bl	800941c <RCCEx_PLL3_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800467a:	e004      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004686:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10c      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800468e:	4b5f      	ldr	r3, [pc, #380]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004694:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004698:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	4a5b      	ldr	r2, [pc, #364]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80046a0:	430b      	orrs	r3, r1
 80046a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80046a6:	e003      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f002 0304 	and.w	r3, r2, #4
 80046bc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80046c6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80046ca:	460b      	mov	r3, r1
 80046cc:	4313      	orrs	r3, r2
 80046ce:	d04e      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80046d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80046da:	d02c      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80046dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80046e0:	d825      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e6:	d028      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80046e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ec:	d81f      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80046ee:	2bc0      	cmp	r3, #192	; 0xc0
 80046f0:	d025      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80046f2:	2bc0      	cmp	r3, #192	; 0xc0
 80046f4:	d81b      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d00f      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x272>
 80046fa:	2b80      	cmp	r3, #128	; 0x80
 80046fc:	d817      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01f      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d113      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004706:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800470a:	3308      	adds	r3, #8
 800470c:	4618      	mov	r0, r3
 800470e:	f004 fded 	bl	80092ec <RCCEx_PLL2_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004718:	e014      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800471a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800471e:	3330      	adds	r3, #48	; 0x30
 8004720:	4618      	mov	r0, r3
 8004722:	f004 fe7b 	bl	800941c <RCCEx_PLL3_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800472c:	e00a      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004734:	e006      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004736:	bf00      	nop
 8004738:	e004      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800473a:	bf00      	nop
 800473c:	e002      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004744:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10c      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800474c:	4b2f      	ldr	r3, [pc, #188]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800474e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004752:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004756:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800475a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475c:	4a2b      	ldr	r2, [pc, #172]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800475e:	430b      	orrs	r3, r1
 8004760:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004764:	e003      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800476a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800476e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	f002 0308 	and.w	r3, r2, #8
 800477a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800477e:	2300      	movs	r3, #0
 8004780:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8004784:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8004788:	460b      	mov	r3, r1
 800478a:	4313      	orrs	r3, r2
 800478c:	d056      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800478e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004794:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004798:	d031      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x356>
 800479a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800479e:	d82a      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a4:	d02d      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80047a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047aa:	d824      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047b0:	d029      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80047b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047b6:	d81e      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047bc:	d011      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80047be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c2:	d818      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d023      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80047c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047cc:	d113      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047d2:	3308      	adds	r3, #8
 80047d4:	4618      	mov	r0, r3
 80047d6:	f004 fd89 	bl	80092ec <RCCEx_PLL2_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80047e0:	e017      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047e6:	3330      	adds	r3, #48	; 0x30
 80047e8:	4618      	mov	r0, r3
 80047ea:	f004 fe17 	bl	800941c <RCCEx_PLL3_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80047f4:	e00d      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047fc:	e009      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80047fe:	bf00      	nop
 8004800:	e007      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004802:	bf00      	nop
 8004804:	e005      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004806:	bf00      	nop
 8004808:	e003      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800480a:	bf00      	nop
 800480c:	44020c00 	.word	0x44020c00
        break;
 8004810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004812:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10c      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800481a:	4bbb      	ldr	r3, [pc, #748]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800481c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004820:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004824:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800482a:	4ab7      	ldr	r2, [pc, #732]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800482c:	430b      	orrs	r3, r1
 800482e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004832:	e003      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004834:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004838:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800483c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f002 0310 	and.w	r3, r2, #16
 8004848:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800484c:	2300      	movs	r3, #0
 800484e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004852:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8004856:	460b      	mov	r3, r1
 8004858:	4313      	orrs	r3, r2
 800485a:	d053      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800485c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004862:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004866:	d031      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004868:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800486c:	d82a      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800486e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004872:	d02d      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004878:	d824      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800487a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800487e:	d029      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004880:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004884:	d81e      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488a:	d011      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004890:	d818      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d020      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489a:	d113      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800489c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048a0:	3308      	adds	r3, #8
 80048a2:	4618      	mov	r0, r3
 80048a4:	f004 fd22 	bl	80092ec <RCCEx_PLL2_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80048ae:	e014      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048b4:	3330      	adds	r3, #48	; 0x30
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 fdb0 	bl	800941c <RCCEx_PLL3_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80048c2:	e00a      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048ca:	e006      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80048cc:	bf00      	nop
 80048ce:	e004      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80048d0:	bf00      	nop
 80048d2:	e002      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80048d4:	bf00      	nop
 80048d6:	e000      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80048d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10c      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80048e2:	4b89      	ldr	r3, [pc, #548]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80048e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048e8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80048ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f2:	4a85      	ldr	r2, [pc, #532]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80048f4:	430b      	orrs	r3, r1
 80048f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80048fa:	e003      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004900:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004904:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	f002 0320 	and.w	r3, r2, #32
 8004910:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004914:	2300      	movs	r3, #0
 8004916:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800491a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	d053      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800492e:	d031      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004930:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004934:	d82a      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800493a:	d02d      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800493c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004940:	d824      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004942:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004946:	d029      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004948:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800494c:	d81e      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800494e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004952:	d011      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d818      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800495e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004962:	d113      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004964:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004968:	3308      	adds	r3, #8
 800496a:	4618      	mov	r0, r3
 800496c:	f004 fcbe 	bl	80092ec <RCCEx_PLL2_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004976:	e014      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004978:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800497c:	3330      	adds	r3, #48	; 0x30
 800497e:	4618      	mov	r0, r3
 8004980:	f004 fd4c 	bl	800941c <RCCEx_PLL3_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800498a:	e00a      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004992:	e006      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004994:	bf00      	nop
 8004996:	e004      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004998:	bf00      	nop
 800499a:	e002      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800499c:	bf00      	nop
 800499e:	e000      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80049a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80049aa:	4b57      	ldr	r3, [pc, #348]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80049ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80049b0:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 80049b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a53      	ldr	r2, [pc, #332]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80049c2:	e003      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049c8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80049d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80049e2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80049e6:	460b      	mov	r3, r1
 80049e8:	4313      	orrs	r3, r2
 80049ea:	d053      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80049ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049f6:	d031      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80049f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049fc:	d82a      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80049fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a02:	d02d      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a08:	d824      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a0e:	d029      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004a10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a14:	d81e      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a1a:	d011      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004a1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a20:	d818      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d020      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a2a:	d113      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a30:	3308      	adds	r3, #8
 8004a32:	4618      	mov	r0, r3
 8004a34:	f004 fc5a 	bl	80092ec <RCCEx_PLL2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004a3e:	e014      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a44:	3330      	adds	r3, #48	; 0x30
 8004a46:	4618      	mov	r0, r3
 8004a48:	f004 fce8 	bl	800941c <RCCEx_PLL3_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004a52:	e00a      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a5a:	e006      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a5c:	bf00      	nop
 8004a5e:	e004      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a60:	bf00      	nop
 8004a62:	e002      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8004a72:	4b25      	ldr	r3, [pc, #148]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004a74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a78:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8004a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a82:	4a21      	ldr	r2, [pc, #132]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004a8a:	e003      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a90:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004aa0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004aaa:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	d055      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004abe:	d033      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004ac0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004ac4:	d82c      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aca:	d02f      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ad0:	d826      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004ad2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ad6:	d02b      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004ad8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004adc:	d820      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae2:	d013      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae8:	d81a      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d022      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af2:	d115      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004af4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004af8:	3308      	adds	r3, #8
 8004afa:	4618      	mov	r0, r3
 8004afc:	f004 fbf6 	bl	80092ec <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004b06:	e016      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004b08:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b10:	3330      	adds	r3, #48	; 0x30
 8004b12:	4618      	mov	r0, r3
 8004b14:	f004 fc82 	bl	800941c <RCCEx_PLL3_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b26:	e006      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004b28:	bf00      	nop
 8004b2a:	e004      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8004b3e:	4bbb      	ldr	r3, [pc, #748]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b44:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004b48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b4e:	4ab7      	ldr	r2, [pc, #732]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004b50:	430b      	orrs	r3, r1
 8004b52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004b56:	e003      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b5c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004b6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004b70:	2300      	movs	r3, #0
 8004b72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004b76:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	d053      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004b80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b86:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004b8a:	d031      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004b8c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004b90:	d82a      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b96:	d02d      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004b98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b9c:	d824      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004b9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ba2:	d029      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004ba4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ba8:	d81e      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bae:	d011      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004bb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bb4:	d818      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d020      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004bba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bbe:	d113      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f004 fb90 	bl	80092ec <RCCEx_PLL2_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004bd2:	e014      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bd8:	3330      	adds	r3, #48	; 0x30
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f004 fc1e 	bl	800941c <RCCEx_PLL3_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004be6:	e00a      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bee:	e006      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004bf0:	bf00      	nop
 8004bf2:	e004      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004bf4:	bf00      	nop
 8004bf6:	e002      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004bf8:	bf00      	nop
 8004bfa:	e000      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bfe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004c06:	4b89      	ldr	r3, [pc, #548]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c0c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c16:	4a85      	ldr	r2, [pc, #532]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004c1e:	e003      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c24:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004c34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c3e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d055      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c50:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004c54:	d031      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004c56:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004c5a:	d82a      	bhi.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c60:	d02d      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c66:	d824      	bhi.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004c68:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004c6c:	d029      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004c6e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004c72:	d81e      	bhi.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c78:	d011      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c7e:	d818      	bhi.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d020      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c88:	d113      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c8e:	3308      	adds	r3, #8
 8004c90:	4618      	mov	r0, r3
 8004c92:	f004 fb2b 	bl	80092ec <RCCEx_PLL2_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004c9c:	e014      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ca2:	3330      	adds	r3, #48	; 0x30
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f004 fbb9 	bl	800941c <RCCEx_PLL3_Config>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004cb0:	e00a      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004cb8:	e006      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004cba:	bf00      	nop
 8004cbc:	e004      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004cbe:	bf00      	nop
 8004cc0:	e002      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004cc2:	bf00      	nop
 8004cc4:	e000      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004cd0:	4b56      	ldr	r3, [pc, #344]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cd6:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8004cda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ce2:	4a52      	ldr	r2, [pc, #328]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004cea:	e003      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cf0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004d00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d04:	2300      	movs	r3, #0
 8004d06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d0a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d044      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d1c:	2b05      	cmp	r3, #5
 8004d1e:	d823      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004d20:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004d71 	.word	0x08004d71
 8004d2c:	08004d41 	.word	0x08004d41
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d71 	.word	0x08004d71
 8004d38:	08004d71 	.word	0x08004d71
 8004d3c:	08004d71 	.word	0x08004d71
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d44:	3308      	adds	r3, #8
 8004d46:	4618      	mov	r0, r3
 8004d48:	f004 fad0 	bl	80092ec <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004d52:	e00e      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d58:	3330      	adds	r3, #48	; 0x30
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f004 fb5e 	bl	800941c <RCCEx_PLL3_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004d66:	e004      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d6e:	e000      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10d      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8004d7a:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004d7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004d80:	f023 0107 	bic.w	r1, r3, #7
 8004d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8c:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004d94:	e003      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d9a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004daa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004db4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d04f      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004dbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	2b50      	cmp	r3, #80	; 0x50
 8004dc8:	d029      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004dca:	2b50      	cmp	r3, #80	; 0x50
 8004dcc:	d823      	bhi.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004dce:	2b40      	cmp	r3, #64	; 0x40
 8004dd0:	d027      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	d81f      	bhi.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004dd6:	2b30      	cmp	r3, #48	; 0x30
 8004dd8:	d025      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004dda:	2b30      	cmp	r3, #48	; 0x30
 8004ddc:	d81b      	bhi.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d00f      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d817      	bhi.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d022      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d113      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004df2:	3308      	adds	r3, #8
 8004df4:	4618      	mov	r0, r3
 8004df6:	f004 fa79 	bl	80092ec <RCCEx_PLL2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004e00:	e017      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e06:	3330      	adds	r3, #48	; 0x30
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f004 fb07 	bl	800941c <RCCEx_PLL3_Config>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004e14:	e00d      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e1c:	e009      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004e1e:	bf00      	nop
 8004e20:	e007      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004e22:	bf00      	nop
 8004e24:	e005      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004e26:	bf00      	nop
 8004e28:	e003      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8004e2a:	bf00      	nop
 8004e2c:	44020c00 	.word	0x44020c00
        break;
 8004e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8004e3a:	4baf      	ldr	r3, [pc, #700]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004e40:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	4aaa      	ldr	r2, [pc, #680]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004e54:	e003      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e5a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004e6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	d055      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004e7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e86:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004e8a:	d031      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004e8c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004e90:	d82a      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e96:	d02d      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e9c:	d824      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004e9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ea2:	d029      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004ea4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ea8:	d81e      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eae:	d011      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eb4:	d818      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d020      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004eba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ebe:	d113      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f004 fa10 	bl	80092ec <RCCEx_PLL2_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004ed2:	e014      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ed8:	3330      	adds	r3, #48	; 0x30
 8004eda:	4618      	mov	r0, r3
 8004edc:	f004 fa9e 	bl	800941c <RCCEx_PLL3_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004ee6:	e00a      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004eee:	e006      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004ef0:	bf00      	nop
 8004ef2:	e004      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004ef4:	bf00      	nop
 8004ef6:	e002      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004ef8:	bf00      	nop
 8004efa:	e000      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004efe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10d      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004f06:	4b7c      	ldr	r3, [pc, #496]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f0c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f18:	4a77      	ldr	r2, [pc, #476]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f20:	e003      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f26:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004f36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004f44:	460b      	mov	r3, r1
 8004f46:	4313      	orrs	r3, r2
 8004f48:	d03d      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f56:	d01b      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004f58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f5c:	d814      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f62:	d017      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f68:	d80e      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d014      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f72:	d109      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f78:	3330      	adds	r3, #48	; 0x30
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f004 fa4e 	bl	800941c <RCCEx_PLL3_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004f86:	e008      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f8e:	e004      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004f90:	bf00      	nop
 8004f92:	e002      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004f94:	bf00      	nop
 8004f96:	e000      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10d      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004fa2:	4b55      	ldr	r3, [pc, #340]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fa8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb4:	4a50      	ldr	r2, [pc, #320]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004fbc:	e003      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fc2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fdc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	d03d      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004fe6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ff2:	d01b      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004ff4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ff8:	d814      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004ffa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ffe:	d017      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005000:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005004:	d80e      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d014      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800500a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800500e:	d109      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005010:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005014:	3330      	adds	r3, #48	; 0x30
 8005016:	4618      	mov	r0, r3
 8005018:	f004 fa00 	bl	800941c <RCCEx_PLL3_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005022:	e008      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800502a:	e004      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800502c:	bf00      	nop
 800502e:	e002      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005030:	bf00      	nop
 8005032:	e000      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005036:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10d      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800503e:	4b2e      	ldr	r3, [pc, #184]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005040:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005044:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005048:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800504c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005050:	4a29      	ldr	r2, [pc, #164]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005052:	430b      	orrs	r3, r1
 8005054:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005058:	e003      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800505e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005062:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800506e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005072:	2300      	movs	r3, #0
 8005074:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005078:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800507c:	460b      	mov	r3, r1
 800507e:	4313      	orrs	r3, r2
 8005080:	d040      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005082:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800508a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800508e:	d01b      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005090:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005094:	d814      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800509a:	d017      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800509c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050a0:	d80e      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d014      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80050a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050aa:	d109      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050b0:	3330      	adds	r3, #48	; 0x30
 80050b2:	4618      	mov	r0, r3
 80050b4:	f004 f9b2 	bl	800941c <RCCEx_PLL3_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80050be:	e008      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80050c6:	e004      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80050d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d110      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80050da:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80050dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050e0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80050e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ec:	4a02      	ldr	r2, [pc, #8]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80050ee:	430b      	orrs	r3, r1
 80050f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80050f4:	e006      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80050f6:	bf00      	nop
 80050f8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005100:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	2100      	movs	r1, #0
 800510e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800511a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800511e:	460b      	mov	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	d03d      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005124:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005128:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800512c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005130:	d01b      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005132:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005136:	d814      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800513c:	d017      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800513e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005142:	d80e      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d014      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800514c:	d109      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800514e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005152:	3330      	adds	r3, #48	; 0x30
 8005154:	4618      	mov	r0, r3
 8005156:	f004 f961 	bl	800941c <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005160:	e008      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005168:	e004      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800516a:	bf00      	nop
 800516c:	e002      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800516e:	bf00      	nop
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005174:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10d      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800517c:	4bbe      	ldr	r3, [pc, #760]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800517e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005182:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005186:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800518a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800518e:	4aba      	ldr	r2, [pc, #744]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005190:	430b      	orrs	r3, r1
 8005192:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005196:	e003      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800519c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80051a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80051ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051b0:	2300      	movs	r3, #0
 80051b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d035      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80051c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051cc:	d015      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80051ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051d2:	d80e      	bhi.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d012      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80051d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051dc:	d109      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051e2:	3330      	adds	r3, #48	; 0x30
 80051e4:	4618      	mov	r0, r3
 80051e6:	f004 f919 	bl	800941c <RCCEx_PLL3_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80051f0:	e006      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80051f8:	e002      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80051fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005200:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10d      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005208:	4b9b      	ldr	r3, [pc, #620]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800520a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800520e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8005212:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005216:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800521a:	4a97      	ldr	r2, [pc, #604]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800521c:	430b      	orrs	r3, r1
 800521e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005222:	e003      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005224:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005228:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800522c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	2100      	movs	r1, #0
 8005236:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800523a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005242:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005246:	460b      	mov	r3, r1
 8005248:	4313      	orrs	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800524c:	4b8a      	ldr	r3, [pc, #552]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	4a89      	ldr	r2, [pc, #548]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005256:	61d3      	str	r3, [r2, #28]
 8005258:	4b87      	ldr	r3, [pc, #540]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800525a:	69d9      	ldr	r1, [r3, #28]
 800525c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005260:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005264:	4a84      	ldr	r2, [pc, #528]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005266:	430b      	orrs	r3, r1
 8005268:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800526a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005276:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800527a:	2300      	movs	r3, #0
 800527c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005280:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005284:	460b      	mov	r3, r1
 8005286:	4313      	orrs	r3, r2
 8005288:	d055      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800528a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800528e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005292:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005296:	d031      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005298:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800529c:	d82a      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a2:	d02d      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80052a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a8:	d824      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80052aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ae:	d029      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80052b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b4:	d81e      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80052b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ba:	d011      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80052bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c0:	d818      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d020      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80052c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ca:	d113      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052d0:	3308      	adds	r3, #8
 80052d2:	4618      	mov	r0, r3
 80052d4:	f004 f80a 	bl	80092ec <RCCEx_PLL2_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80052de:	e014      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052e4:	3330      	adds	r3, #48	; 0x30
 80052e6:	4618      	mov	r0, r3
 80052e8:	f004 f898 	bl	800941c <RCCEx_PLL3_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80052f2:	e00a      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80052fa:	e006      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80052fc:	bf00      	nop
 80052fe:	e004      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005300:	bf00      	nop
 8005302:	e002      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005304:	bf00      	nop
 8005306:	e000      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800530a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10d      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005312:	4b59      	ldr	r3, [pc, #356]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005314:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005318:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800531c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005320:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005324:	4a54      	ldr	r2, [pc, #336]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005326:	430b      	orrs	r3, r1
 8005328:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800532c:	e003      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005332:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005336:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005346:	2300      	movs	r3, #0
 8005348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800534c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005350:	460b      	mov	r3, r1
 8005352:	4313      	orrs	r3, r2
 8005354:	d055      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005356:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800535a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800535e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005362:	d031      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005364:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005368:	d82a      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800536a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800536e:	d02d      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005374:	d824      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005376:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800537a:	d029      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800537c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005380:	d81e      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005386:	d011      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538c:	d818      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d020      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005396:	d113      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800539c:	3308      	adds	r3, #8
 800539e:	4618      	mov	r0, r3
 80053a0:	f003 ffa4 	bl	80092ec <RCCEx_PLL2_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80053aa:	e014      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053b0:	3330      	adds	r3, #48	; 0x30
 80053b2:	4618      	mov	r0, r3
 80053b4:	f004 f832 	bl	800941c <RCCEx_PLL3_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80053be:	e00a      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053c6:	e006      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80053c8:	bf00      	nop
 80053ca:	e004      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80053cc:	bf00      	nop
 80053ce:	e002      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80053d0:	bf00      	nop
 80053d2:	e000      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80053d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80053de:	4b26      	ldr	r3, [pc, #152]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80053e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80053e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80053e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053f0:	4a21      	ldr	r2, [pc, #132]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80053f2:	430b      	orrs	r3, r1
 80053f4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005402:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	2100      	movs	r1, #0
 800540c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800541c:	460b      	mov	r3, r1
 800541e:	4313      	orrs	r3, r2
 8005420:	d057      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005422:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800542a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800542e:	d033      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005434:	d82c      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005436:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800543a:	d02f      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800543c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005440:	d826      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005442:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005446:	d02b      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005448:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800544c:	d820      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800544e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005452:	d013      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005458:	d81a      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d022      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800545e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005462:	d115      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005468:	3308      	adds	r3, #8
 800546a:	4618      	mov	r0, r3
 800546c:	f003 ff3e 	bl	80092ec <RCCEx_PLL2_Config>
 8005470:	4603      	mov	r3, r0
 8005472:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005476:	e016      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005478:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800547c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005480:	3330      	adds	r3, #48	; 0x30
 8005482:	4618      	mov	r0, r3
 8005484:	f003 ffca 	bl	800941c <RCCEx_PLL3_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800548e:	e00a      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005496:	e006      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005498:	bf00      	nop
 800549a:	e004      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800549c:	bf00      	nop
 800549e:	e002      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80054a0:	bf00      	nop
 80054a2:	e000      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80054a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10d      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80054ae:	4bbb      	ldr	r3, [pc, #748]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80054b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80054b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80054b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054c0:	4ab6      	ldr	r2, [pc, #728]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80054c2:	430b      	orrs	r3, r1
 80054c4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80054c8:	e003      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80054d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	2100      	movs	r1, #0
 80054dc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80054e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4313      	orrs	r3, r2
 80054f0:	d055      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80054f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054fa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80054fe:	d031      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005500:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005504:	d82a      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800550a:	d02d      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800550c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005510:	d824      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005512:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005516:	d029      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005518:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800551c:	d81e      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800551e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005522:	d011      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005528:	d818      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d020      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800552e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005532:	d113      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005538:	3308      	adds	r3, #8
 800553a:	4618      	mov	r0, r3
 800553c:	f003 fed6 	bl	80092ec <RCCEx_PLL2_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005546:	e014      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800554c:	3330      	adds	r3, #48	; 0x30
 800554e:	4618      	mov	r0, r3
 8005550:	f003 ff64 	bl	800941c <RCCEx_PLL3_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800555a:	e00a      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005562:	e006      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005564:	bf00      	nop
 8005566:	e004      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005568:	bf00      	nop
 800556a:	e002      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800556c:	bf00      	nop
 800556e:	e000      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005572:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10d      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800557a:	4b88      	ldr	r3, [pc, #544]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800557c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005580:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8005584:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005588:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800558c:	4a83      	ldr	r2, [pc, #524]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800558e:	430b      	orrs	r3, r1
 8005590:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005594:	e003      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005596:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800559a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800559e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	2100      	movs	r1, #0
 80055a8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80055ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80055b8:	460b      	mov	r3, r1
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d055      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80055be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80055ca:	d031      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80055cc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80055d0:	d82a      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80055d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055d6:	d02d      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80055d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055dc:	d824      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80055de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055e2:	d029      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80055e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055e8:	d81e      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80055ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ee:	d011      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80055f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055f4:	d818      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80055fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055fe:	d113      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005600:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005604:	3308      	adds	r3, #8
 8005606:	4618      	mov	r0, r3
 8005608:	f003 fe70 	bl	80092ec <RCCEx_PLL2_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005612:	e014      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005614:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005618:	3330      	adds	r3, #48	; 0x30
 800561a:	4618      	mov	r0, r3
 800561c:	f003 fefe 	bl	800941c <RCCEx_PLL3_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005626:	e00a      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800562e:	e006      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005630:	bf00      	nop
 8005632:	e004      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005634:	bf00      	nop
 8005636:	e002      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005638:	bf00      	nop
 800563a:	e000      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800563c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10d      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005646:	4b55      	ldr	r3, [pc, #340]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005648:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800564c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005650:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005654:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005658:	4a50      	ldr	r2, [pc, #320]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800565a:	430b      	orrs	r3, r1
 800565c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005660:	e003      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005662:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005666:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800566a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	2100      	movs	r1, #0
 8005674:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8005678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005680:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005684:	460b      	mov	r3, r1
 8005686:	4313      	orrs	r3, r2
 8005688:	d055      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800568a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800568e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005696:	d031      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800569c:	d82a      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a2:	d02d      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a8:	d824      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80056aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056ae:	d029      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80056b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056b4:	d81e      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80056b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ba:	d011      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80056bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c0:	d818      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d020      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80056c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ca:	d113      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056d0:	3308      	adds	r3, #8
 80056d2:	4618      	mov	r0, r3
 80056d4:	f003 fe0a 	bl	80092ec <RCCEx_PLL2_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80056de:	e014      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056e4:	3330      	adds	r3, #48	; 0x30
 80056e6:	4618      	mov	r0, r3
 80056e8:	f003 fe98 	bl	800941c <RCCEx_PLL3_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80056f2:	e00a      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056fa:	e006      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80056fc:	bf00      	nop
 80056fe:	e004      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005700:	bf00      	nop
 8005702:	e002      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005704:	bf00      	nop
 8005706:	e000      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10d      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005714:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005718:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800571c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005720:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005726:	430b      	orrs	r3, r1
 8005728:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800572c:	e003      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005732:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005736:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005746:	2300      	movs	r3, #0
 8005748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800574c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005750:	460b      	mov	r3, r1
 8005752:	4313      	orrs	r3, r2
 8005754:	d055      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005756:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800575a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800575e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005762:	d035      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005768:	d82e      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800576a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800576e:	d031      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005770:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005774:	d828      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800577a:	d01b      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800577c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005780:	d822      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578a:	d009      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800578c:	e01c      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800578e:	4b03      	ldr	r3, [pc, #12]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	4a02      	ldr	r2, [pc, #8]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005798:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800579a:	e01c      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800579c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057a4:	3308      	adds	r3, #8
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 fda0 	bl	80092ec <RCCEx_PLL2_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057b2:	e010      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057b8:	3330      	adds	r3, #48	; 0x30
 80057ba:	4618      	mov	r0, r3
 80057bc:	f003 fe2e 	bl	800941c <RCCEx_PLL3_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057c6:	e006      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80057ce:	e002      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80057d0:	bf00      	nop
 80057d2:	e000      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80057d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10d      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80057de:	4bc3      	ldr	r3, [pc, #780]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80057e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80057e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057f0:	4abe      	ldr	r2, [pc, #760]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80057f2:	430b      	orrs	r3, r1
 80057f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057f8:	e003      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005802:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800580e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005812:	2300      	movs	r3, #0
 8005814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005818:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800581c:	460b      	mov	r3, r1
 800581e:	4313      	orrs	r3, r2
 8005820:	d051      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005822:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005826:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800582a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800582e:	d033      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005834:	d82c      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005836:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800583a:	d02d      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800583c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005840:	d826      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005846:	d019      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584c:	d820      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005852:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005856:	d007      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005858:	e01a      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585a:	4ba4      	ldr	r3, [pc, #656]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	4aa3      	ldr	r2, [pc, #652]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005864:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005866:	e018      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005868:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800586c:	3308      	adds	r3, #8
 800586e:	4618      	mov	r0, r3
 8005870:	f003 fd3c 	bl	80092ec <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800587a:	e00e      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800587c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005880:	3330      	adds	r3, #48	; 0x30
 8005882:	4618      	mov	r0, r3
 8005884:	f003 fdca 	bl	800941c <RCCEx_PLL3_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800588e:	e004      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005896:	e000      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800589a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10d      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80058a2:	4b92      	ldr	r3, [pc, #584]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80058a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058a8:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80058ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80058b4:	4a8d      	ldr	r2, [pc, #564]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80058b6:	430b      	orrs	r3, r1
 80058b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058bc:	e003      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80058c2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80058c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80058d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80058d4:	2300      	movs	r3, #0
 80058d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80058dc:	460b      	mov	r3, r1
 80058de:	4313      	orrs	r3, r2
 80058e0:	d032      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80058e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d80f      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d211      	bcs.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d911      	bls.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d109      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058fe:	3308      	adds	r3, #8
 8005900:	4618      	mov	r0, r3
 8005902:	f003 fcf3 	bl	80092ec <RCCEx_PLL2_Config>
 8005906:	4603      	mov	r3, r0
 8005908:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800590c:	e006      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005914:	e002      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005916:	bf00      	nop
 8005918:	e000      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800591a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800591c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10d      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005924:	4b71      	ldr	r3, [pc, #452]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800592a:	f023 0107 	bic.w	r1, r3, #7
 800592e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005932:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005936:	4a6d      	ldr	r2, [pc, #436]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005938:	430b      	orrs	r3, r1
 800593a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800593e:	e003      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005940:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005944:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005948:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	2100      	movs	r1, #0
 8005952:	6739      	str	r1, [r7, #112]	; 0x70
 8005954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005958:	677b      	str	r3, [r7, #116]	; 0x74
 800595a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800595e:	460b      	mov	r3, r1
 8005960:	4313      	orrs	r3, r2
 8005962:	d024      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005964:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005970:	2b08      	cmp	r3, #8
 8005972:	d005      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800597a:	e002      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800597c:	bf00      	nop
 800597e:	e000      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005982:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10d      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800598a:	4b58      	ldr	r3, [pc, #352]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800598c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005990:	f023 0108 	bic.w	r1, r3, #8
 8005994:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800599c:	4a53      	ldr	r2, [pc, #332]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800599e:	430b      	orrs	r3, r1
 80059a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059a4:	e003      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059aa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80059ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80059bc:	2300      	movs	r3, #0
 80059be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80059c4:	460b      	mov	r3, r1
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f000 80b9 	beq.w	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80059cc:	4b48      	ldr	r3, [pc, #288]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	4a47      	ldr	r2, [pc, #284]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059d8:	f7fb fe96 	bl	8001708 <HAL_GetTick>
 80059dc:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80059e0:	e00b      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059e2:	f7fb fe91 	bl	8001708 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d903      	bls.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80059f8:	e005      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80059fa:	4b3d      	ldr	r3, [pc, #244]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ed      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8005a06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f040 8093 	bne.w	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a10:	4b36      	ldr	r3, [pc, #216]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005a1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d023      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a2a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8005a2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d01b      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a36:	4b2d      	ldr	r3, [pc, #180]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a40:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a44:	4b29      	ldr	r3, [pc, #164]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a4a:	4a28      	ldr	r2, [pc, #160]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a54:	4b25      	ldr	r3, [pc, #148]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a5a:	4a24      	ldr	r2, [pc, #144]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a64:	4a21      	ldr	r2, [pc, #132]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d019      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7a:	f7fb fe45 	bl	8001708 <HAL_GetTick>
 8005a7e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a82:	e00d      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a84:	f7fb fe40 	bl	8001708 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d903      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8005a9e:	e006      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aa0:	4b12      	ldr	r3, [pc, #72]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0ea      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8005aae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d13a      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005aba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac6:	d115      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005ac8:	4b08      	ldr	r3, [pc, #32]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ad4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ade:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005ae2:	4a02      	ldr	r2, [pc, #8]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	61d3      	str	r3, [r2, #28]
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8005aea:	bf00      	nop
 8005aec:	44020c00 	.word	0x44020c00
 8005af0:	44020800 	.word	0x44020800
 8005af4:	4b9f      	ldr	r3, [pc, #636]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	4a9e      	ldr	r2, [pc, #632]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005afa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005afe:	61d3      	str	r3, [r2, #28]
 8005b00:	4b9c      	ldr	r3, [pc, #624]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b06:	4a9b      	ldr	r2, [pc, #620]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005b10:	4b98      	ldr	r3, [pc, #608]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b12:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8005b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b1a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b22:	4a94      	ldr	r2, [pc, #592]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b24:	430b      	orrs	r3, r1
 8005b26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005b2a:	e008      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b2c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b30:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8005b34:	e003      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b3a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005b54:	460b      	mov	r3, r1
 8005b56:	4313      	orrs	r3, r2
 8005b58:	d035      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005b5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005b62:	2b30      	cmp	r3, #48	; 0x30
 8005b64:	d014      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005b66:	2b30      	cmp	r3, #48	; 0x30
 8005b68:	d80e      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d012      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d80a      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d010      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8005b76:	2b10      	cmp	r3, #16
 8005b78:	d106      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7a:	4b7e      	ldr	r3, [pc, #504]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	4a7d      	ldr	r2, [pc, #500]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b84:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b86:	e008      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b8e:	e004      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005b90:	bf00      	nop
 8005b92:	e002      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10d      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005ba2:	4b74      	ldr	r3, [pc, #464]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ba8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bb0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005bb4:	4a6f      	ldr	r2, [pc, #444]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005bbc:	e003      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bc2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d033      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005be2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005be6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d007      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8005bf2:	e010      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf4:	4b5f      	ldr	r3, [pc, #380]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	4a5e      	ldr	r2, [pc, #376]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bfe:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005c00:	e00d      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c06:	3308      	adds	r3, #8
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f003 fb6f 	bl	80092ec <RCCEx_PLL2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005c14:	e003      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10d      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005c26:	4b53      	ldr	r3, [pc, #332]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c2c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005c30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c34:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005c38:	4a4e      	ldr	r2, [pc, #312]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005c40:	e003      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c46:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005c56:	653b      	str	r3, [r7, #80]	; 0x50
 8005c58:	2300      	movs	r3, #0
 8005c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c5c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005c60:	460b      	mov	r3, r1
 8005c62:	4313      	orrs	r3, r2
 8005c64:	d033      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005c66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c6a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d007      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005c76:	e010      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c78:	4b3e      	ldr	r3, [pc, #248]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	4a3d      	ldr	r2, [pc, #244]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c82:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005c84:	e00d      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f003 fb2d 	bl	80092ec <RCCEx_PLL2_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005c98:	e003      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10d      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005caa:	4b32      	ldr	r3, [pc, #200]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005cac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cb0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005cb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cb8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005cbc:	4a2d      	ldr	r2, [pc, #180]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005cbe:	430b      	orrs	r3, r1
 8005cc0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005cc4:	e003      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005cce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cdc:	2300      	movs	r3, #0
 8005cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	d04a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d827      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d11 	.word	0x08005d11
 8005d00:	08005d1f 	.word	0x08005d1f
 8005d04:	08005d33 	.word	0x08005d33
 8005d08:	08005d4f 	.word	0x08005d4f
 8005d0c:	08005d4f 	.word	0x08005d4f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d10:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	4a17      	ldr	r2, [pc, #92]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005d1c:	e018      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d22:	3308      	adds	r3, #8
 8005d24:	4618      	mov	r0, r3
 8005d26:	f003 fae1 	bl	80092ec <RCCEx_PLL2_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005d30:	e00e      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d36:	3330      	adds	r3, #48	; 0x30
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f003 fb6f 	bl	800941c <RCCEx_PLL3_Config>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005d44:	e004      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d4c:	e000      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d50:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10f      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d5e:	f023 0107 	bic.w	r1, r3, #7
 8005d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d6a:	4a02      	ldr	r2, [pc, #8]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d72:	e005      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8005d74:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d78:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d7c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005d80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d8e:	2300      	movs	r3, #0
 8005d90:	647b      	str	r3, [r7, #68]	; 0x44
 8005d92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005d96:	460b      	mov	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f000 8081 	beq.w	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005da2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d85f      	bhi.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005e35 	.word	0x08005e35
 8005db4:	08005e6b 	.word	0x08005e6b
 8005db8:	08005e6b 	.word	0x08005e6b
 8005dbc:	08005e6b 	.word	0x08005e6b
 8005dc0:	08005e6b 	.word	0x08005e6b
 8005dc4:	08005e6b 	.word	0x08005e6b
 8005dc8:	08005e6b 	.word	0x08005e6b
 8005dcc:	08005e6b 	.word	0x08005e6b
 8005dd0:	08005e43 	.word	0x08005e43
 8005dd4:	08005e6b 	.word	0x08005e6b
 8005dd8:	08005e6b 	.word	0x08005e6b
 8005ddc:	08005e6b 	.word	0x08005e6b
 8005de0:	08005e6b 	.word	0x08005e6b
 8005de4:	08005e6b 	.word	0x08005e6b
 8005de8:	08005e6b 	.word	0x08005e6b
 8005dec:	08005e6b 	.word	0x08005e6b
 8005df0:	08005e57 	.word	0x08005e57
 8005df4:	08005e6b 	.word	0x08005e6b
 8005df8:	08005e6b 	.word	0x08005e6b
 8005dfc:	08005e6b 	.word	0x08005e6b
 8005e00:	08005e6b 	.word	0x08005e6b
 8005e04:	08005e6b 	.word	0x08005e6b
 8005e08:	08005e6b 	.word	0x08005e6b
 8005e0c:	08005e6b 	.word	0x08005e6b
 8005e10:	08005e73 	.word	0x08005e73
 8005e14:	08005e6b 	.word	0x08005e6b
 8005e18:	08005e6b 	.word	0x08005e6b
 8005e1c:	08005e6b 	.word	0x08005e6b
 8005e20:	08005e6b 	.word	0x08005e6b
 8005e24:	08005e6b 	.word	0x08005e6b
 8005e28:	08005e6b 	.word	0x08005e6b
 8005e2c:	08005e6b 	.word	0x08005e6b
 8005e30:	08005e73 	.word	0x08005e73
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e34:	4bab      	ldr	r3, [pc, #684]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	4aaa      	ldr	r2, [pc, #680]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e3e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005e40:	e018      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e46:	3308      	adds	r3, #8
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f003 fa4f 	bl	80092ec <RCCEx_PLL2_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005e54:	e00e      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e5a:	3330      	adds	r3, #48	; 0x30
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f003 fadd 	bl	800941c <RCCEx_PLL3_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005e68:	e004      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e70:	e000      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8005e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e74:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005e7c:	4b99      	ldr	r3, [pc, #612]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e82:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005e86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e8e:	4a95      	ldr	r2, [pc, #596]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e90:	430b      	orrs	r3, r1
 8005e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e96:	e003      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e98:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e9c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eae:	2300      	movs	r3, #0
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d04e      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec8:	d02e      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ece:	d827      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005ed0:	2bc0      	cmp	r3, #192	; 0xc0
 8005ed2:	d02b      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8005ed4:	2bc0      	cmp	r3, #192	; 0xc0
 8005ed6:	d823      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005ed8:	2b80      	cmp	r3, #128	; 0x80
 8005eda:	d017      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d81f      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d007      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005ee8:	e01a      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eea:	4b7e      	ldr	r3, [pc, #504]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	4a7d      	ldr	r2, [pc, #500]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef4:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005ef6:	e01a      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005efc:	3308      	adds	r3, #8
 8005efe:	4618      	mov	r0, r3
 8005f00:	f003 f9f4 	bl	80092ec <RCCEx_PLL2_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005f0a:	e010      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f10:	3330      	adds	r3, #48	; 0x30
 8005f12:	4618      	mov	r0, r3
 8005f14:	f003 fa82 	bl	800941c <RCCEx_PLL3_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005f1e:	e006      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005f26:	e002      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005f28:	bf00      	nop
 8005f2a:	e000      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f2e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10d      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005f36:	4b6b      	ldr	r3, [pc, #428]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f3c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f48:	4a66      	ldr	r2, [pc, #408]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f50:	e003      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f52:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f56:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005f5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005f66:	633b      	str	r3, [r7, #48]	; 0x30
 8005f68:	2300      	movs	r3, #0
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005f70:	460b      	mov	r3, r1
 8005f72:	4313      	orrs	r3, r2
 8005f74:	d055      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005f7e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f82:	d031      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005f84:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f88:	d82a      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8e:	d02d      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f94:	d824      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005f96:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f9a:	d029      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005f9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fa0:	d81e      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa6:	d011      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fac:	d818      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d020      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb6:	d113      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f003 f994 	bl	80092ec <RCCEx_PLL2_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005fca:	e014      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fd0:	3330      	adds	r3, #48	; 0x30
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f003 fa22 	bl	800941c <RCCEx_PLL3_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005fde:	e00a      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005fe6:	e006      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005fe8:	bf00      	nop
 8005fea:	e004      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005fec:	bf00      	nop
 8005fee:	e002      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005ff0:	bf00      	nop
 8005ff2:	e000      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10d      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005ffe:	4b39      	ldr	r3, [pc, #228]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006004:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006008:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800600c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006010:	4a34      	ldr	r2, [pc, #208]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006012:	430b      	orrs	r3, r1
 8006014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006018:	e003      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800601e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006022:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006030:	2300      	movs	r3, #0
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006034:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006038:	460b      	mov	r3, r1
 800603a:	4313      	orrs	r3, r2
 800603c:	d058      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800603e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006046:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800604a:	d031      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800604c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006050:	d82a      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006056:	d02d      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800605c:	d824      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800605e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006062:	d029      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006064:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006068:	d81e      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800606a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800606e:	d011      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006074:	d818      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d020      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800607a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607e:	d113      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006080:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006084:	3308      	adds	r3, #8
 8006086:	4618      	mov	r0, r3
 8006088:	f003 f930 	bl	80092ec <RCCEx_PLL2_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006092:	e014      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006094:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006098:	3330      	adds	r3, #48	; 0x30
 800609a:	4618      	mov	r0, r3
 800609c:	f003 f9be 	bl	800941c <RCCEx_PLL3_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80060a6:	e00a      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80060ae:	e006      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80060b0:	bf00      	nop
 80060b2:	e004      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80060b4:	bf00      	nop
 80060b6:	e002      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80060b8:	bf00      	nop
 80060ba:	e000      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80060bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d110      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80060c6:	4b07      	ldr	r3, [pc, #28]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80060c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80060d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060d8:	4902      	ldr	r1, [pc, #8]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80060e0:	e006      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80060e2:	bf00      	nop
 80060e4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80060ec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	2100      	movs	r1, #0
 80060fa:	6239      	str	r1, [r7, #32]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006106:	460b      	mov	r3, r1
 8006108:	4313      	orrs	r3, r2
 800610a:	d055      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800610c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006114:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006118:	d031      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800611a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800611e:	d82a      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006124:	d02d      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800612a:	d824      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800612c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006130:	d029      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006132:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006136:	d81e      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613c:	d011      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800613e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006142:	d818      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d020      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614c:	d113      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800614e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006152:	3308      	adds	r3, #8
 8006154:	4618      	mov	r0, r3
 8006156:	f003 f8c9 	bl	80092ec <RCCEx_PLL2_Config>
 800615a:	4603      	mov	r3, r0
 800615c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006160:	e014      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006162:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006166:	3330      	adds	r3, #48	; 0x30
 8006168:	4618      	mov	r0, r3
 800616a:	f003 f957 	bl	800941c <RCCEx_PLL3_Config>
 800616e:	4603      	mov	r3, r0
 8006170:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006174:	e00a      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800617c:	e006      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800617e:	bf00      	nop
 8006180:	e004      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006182:	bf00      	nop
 8006184:	e002      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800618a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10d      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006194:	4b88      	ldr	r3, [pc, #544]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800619a:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 800619e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061a6:	4984      	ldr	r1, [pc, #528]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80061ae:	e003      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80061b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80061b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	2100      	movs	r1, #0
 80061c2:	61b9      	str	r1, [r7, #24]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061ce:	460b      	mov	r3, r1
 80061d0:	4313      	orrs	r3, r2
 80061d2:	d03d      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80061d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d81c      	bhi.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	08006223 	.word	0x08006223
 80061ec:	080061f9 	.word	0x080061f9
 80061f0:	08006207 	.word	0x08006207
 80061f4:	08006223 	.word	0x08006223
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061f8:	4b6f      	ldr	r3, [pc, #444]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	4a6e      	ldr	r2, [pc, #440]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006202:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006204:	e00e      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006206:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800620a:	3308      	adds	r3, #8
 800620c:	4618      	mov	r0, r3
 800620e:	f003 f86d 	bl	80092ec <RCCEx_PLL2_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006218:	e004      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006224:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10d      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800622c:	4b62      	ldr	r3, [pc, #392]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800622e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006232:	f023 0203 	bic.w	r2, r3, #3
 8006236:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800623a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800623e:	495e      	ldr	r1, [pc, #376]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006246:	e003      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006248:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800624c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006250:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	2100      	movs	r1, #0
 800625a:	6139      	str	r1, [r7, #16]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006266:	460b      	mov	r3, r1
 8006268:	4313      	orrs	r3, r2
 800626a:	d03a      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800626c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006270:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006278:	d00e      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800627a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800627e:	d815      	bhi.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d017      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006288:	d110      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800628a:	4b4b      	ldr	r3, [pc, #300]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	4a4a      	ldr	r2, [pc, #296]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006294:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006296:	e00e      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800629c:	3308      	adds	r3, #8
 800629e:	4618      	mov	r0, r3
 80062a0:	f003 f824 	bl	80092ec <RCCEx_PLL2_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80062aa:	e004      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80062b2:	e000      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80062b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10d      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80062be:	4b3e      	ldr	r3, [pc, #248]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80062c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80062d0:	4939      	ldr	r1, [pc, #228]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80062d8:	e003      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	2100      	movs	r1, #0
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	f003 0310 	and.w	r3, r3, #16
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80062f8:	460b      	mov	r3, r1
 80062fa:	4313      	orrs	r3, r2
 80062fc:	d038      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80062fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006302:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006306:	2b30      	cmp	r3, #48	; 0x30
 8006308:	d01b      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800630a:	2b30      	cmp	r3, #48	; 0x30
 800630c:	d815      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800630e:	2b10      	cmp	r3, #16
 8006310:	d002      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006312:	2b20      	cmp	r3, #32
 8006314:	d007      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006316:	e010      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006318:	4b27      	ldr	r3, [pc, #156]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	4a26      	ldr	r2, [pc, #152]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800631e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006322:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006324:	e00e      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006326:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800632a:	3330      	adds	r3, #48	; 0x30
 800632c:	4618      	mov	r0, r3
 800632e:	f003 f875 	bl	800941c <RCCEx_PLL3_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006338:	e004      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006340:	e000      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006344:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10d      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800634c:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800634e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006352:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006356:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800635a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800635e:	4916      	ldr	r1, [pc, #88]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006360:	4313      	orrs	r3, r2
 8006362:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006366:	e003      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800636c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006370:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	2100      	movs	r1, #0
 800637a:	6039      	str	r1, [r7, #0]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006386:	460b      	mov	r3, r1
 8006388:	4313      	orrs	r3, r2
 800638a:	d00c      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800638e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006392:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006396:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800639a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800639e:	4906      	ldr	r1, [pc, #24]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80063a6:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80063b0:	46bd      	mov	sp, r7
 80063b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b6:	bf00      	nop
 80063b8:	44020c00 	.word	0x44020c00

080063bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80063bc:	b480      	push	{r7}
 80063be:	b08b      	sub	sp, #44	; 0x2c
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80063c4:	4bad      	ldr	r3, [pc, #692]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063cc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80063ce:	4bab      	ldr	r3, [pc, #684]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80063d8:	4ba8      	ldr	r3, [pc, #672]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	0a1b      	lsrs	r3, r3, #8
 80063de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063e2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80063e4:	4ba5      	ldr	r3, [pc, #660]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80063ee:	4ba3      	ldr	r3, [pc, #652]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	08db      	lsrs	r3, r3, #3
 80063f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	fb02 f303 	mul.w	r3, r2, r3
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006406:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8126 	beq.w	800665e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d053      	beq.n	80064c0 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b03      	cmp	r3, #3
 800641c:	d86f      	bhi.n	80064fe <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d003      	beq.n	800642c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d02b      	beq.n	8006482 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800642a:	e068      	b.n	80064fe <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800642c:	4b93      	ldr	r3, [pc, #588]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	08db      	lsrs	r3, r3, #3
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	4a92      	ldr	r2, [pc, #584]	; (8006680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006438:	fa22 f303 	lsr.w	r3, r2, r3
 800643c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006460:	ed97 6a04 	vldr	s12, [r7, #16]
 8006464:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006684 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800646c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006480:	e068      	b.n	8006554 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	ee07 3a90 	vmov	s15, r3
 8006488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006688 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	ee07 3a90 	vmov	s15, r3
 800649a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649e:	ed97 6a04 	vldr	s12, [r7, #16]
 80064a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006684 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80064a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80064be:	e049      	b.n	8006554 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ca:	eddf 6a70 	vldr	s13, [pc, #448]	; 800668c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80064ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	ee07 3a90 	vmov	s15, r3
 80064d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80064e0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006684 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80064e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80064fc:	e02a      	b.n	8006554 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064fe:	4b5f      	ldr	r3, [pc, #380]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	08db      	lsrs	r3, r3, #3
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	4a5d      	ldr	r2, [pc, #372]	; (8006680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800650a:	fa22 f303 	lsr.w	r3, r2, r3
 800650e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	ee07 3a90 	vmov	s15, r3
 8006520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006532:	ed97 6a04 	vldr	s12, [r7, #16]
 8006536:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006684 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800653a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006552:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006554:	4b49      	ldr	r3, [pc, #292]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006560:	d121      	bne.n	80065a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006562:	4b46      	ldr	r3, [pc, #280]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d017      	beq.n	800659e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800656e:	4b43      	ldr	r3, [pc, #268]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006572:	0a5b      	lsrs	r3, r3, #9
 8006574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006578:	ee07 3a90 	vmov	s15, r3
 800657c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006584:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006588:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800658c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006594:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e006      	b.n	80065ac <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e002      	b.n	80065ac <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065ac:	4b33      	ldr	r3, [pc, #204]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065b8:	d121      	bne.n	80065fe <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d017      	beq.n	80065f6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80065c6:	4b2d      	ldr	r3, [pc, #180]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80065c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ca:	0c1b      	lsrs	r3, r3, #16
 80065cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80065d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80065e0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80065e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ec:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	605a      	str	r2, [r3, #4]
 80065f4:	e006      	b.n	8006604 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	605a      	str	r2, [r3, #4]
 80065fc:	e002      	b.n	8006604 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006604:	4b1d      	ldr	r3, [pc, #116]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006610:	d121      	bne.n	8006656 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d017      	beq.n	800664e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800661e:	4b17      	ldr	r3, [pc, #92]	; (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	0e1b      	lsrs	r3, r3, #24
 8006624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006634:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006638:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800663c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006644:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800664c:	e010      	b.n	8006670 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	609a      	str	r2, [r3, #8]
}
 8006654:	e00c      	b.n	8006670 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	609a      	str	r2, [r3, #8]
}
 800665c:	e008      	b.n	8006670 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	609a      	str	r2, [r3, #8]
}
 8006670:	bf00      	nop
 8006672:	372c      	adds	r7, #44	; 0x2c
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	44020c00 	.word	0x44020c00
 8006680:	03d09000 	.word	0x03d09000
 8006684:	46000000 	.word	0x46000000
 8006688:	4a742400 	.word	0x4a742400
 800668c:	4af42400 	.word	0x4af42400

08006690 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006690:	b480      	push	{r7}
 8006692:	b08b      	sub	sp, #44	; 0x2c
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006698:	4bad      	ldr	r3, [pc, #692]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800669a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80066a2:	4bab      	ldr	r3, [pc, #684]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80066ac:	4ba8      	ldr	r3, [pc, #672]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	0a1b      	lsrs	r3, r3, #8
 80066b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066b6:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80066b8:	4ba5      	ldr	r3, [pc, #660]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	f003 0310 	and.w	r3, r3, #16
 80066c0:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80066c2:	4ba3      	ldr	r3, [pc, #652]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	08db      	lsrs	r3, r3, #3
 80066c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	fb02 f303 	mul.w	r3, r2, r3
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066da:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8126 	beq.w	8006932 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d053      	beq.n	8006794 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d86f      	bhi.n	80067d2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d003      	beq.n	8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d02b      	beq.n	8006756 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80066fe:	e068      	b.n	80067d2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006700:	4b93      	ldr	r3, [pc, #588]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	08db      	lsrs	r3, r3, #3
 8006706:	f003 0303 	and.w	r3, r3, #3
 800670a:	4a92      	ldr	r2, [pc, #584]	; (8006954 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800670c:	fa22 f303 	lsr.w	r3, r2, r3
 8006710:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	ee07 3a90 	vmov	s15, r3
 8006718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	ee07 3a90 	vmov	s15, r3
 8006730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006734:	ed97 6a04 	vldr	s12, [r7, #16]
 8006738:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800673c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800674c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006750:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006754:	e068      	b.n	8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006760:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800695c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006772:	ed97 6a04 	vldr	s12, [r7, #16]
 8006776:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800677a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006792:	e049      	b.n	8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80067a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	ee07 3a90 	vmov	s15, r3
 80067ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b0:	ed97 6a04 	vldr	s12, [r7, #16]
 80067b4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80067b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80067d0:	e02a      	b.n	8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067d2:	4b5f      	ldr	r3, [pc, #380]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	08db      	lsrs	r3, r3, #3
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	4a5d      	ldr	r2, [pc, #372]	; (8006954 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80067de:	fa22 f303 	lsr.w	r3, r2, r3
 80067e2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006806:	ed97 6a04 	vldr	s12, [r7, #16]
 800680a:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800680e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800681a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006822:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006826:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006828:	4b49      	ldr	r3, [pc, #292]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006834:	d121      	bne.n	800687a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006836:	4b46      	ldr	r3, [pc, #280]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d017      	beq.n	8006872 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006842:	4b43      	ldr	r3, [pc, #268]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006846:	0a5b      	lsrs	r3, r3, #9
 8006848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800684c:	ee07 3a90 	vmov	s15, r3
 8006850:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006858:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800685c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006868:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	e006      	b.n	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	e002      	b.n	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006880:	4b33      	ldr	r3, [pc, #204]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800688c:	d121      	bne.n	80068d2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800688e:	4b30      	ldr	r3, [pc, #192]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d017      	beq.n	80068ca <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800689a:	4b2d      	ldr	r3, [pc, #180]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800689c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a4:	ee07 3a90 	vmov	s15, r3
 80068a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80068ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068b0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80068b4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80068b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068c0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	605a      	str	r2, [r3, #4]
 80068c8:	e006      	b.n	80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	605a      	str	r2, [r3, #4]
 80068d0:	e002      	b.n	80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068d8:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e4:	d121      	bne.n	800692a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80068e6:	4b1a      	ldr	r3, [pc, #104]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d017      	beq.n	8006922 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80068f2:	4b17      	ldr	r3, [pc, #92]	; (8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	0e1b      	lsrs	r3, r3, #24
 80068f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fc:	ee07 3a90 	vmov	s15, r3
 8006900:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006908:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800690c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006918:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006920:	e010      	b.n	8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	609a      	str	r2, [r3, #8]
}
 8006928:	e00c      	b.n	8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	609a      	str	r2, [r3, #8]
}
 8006930:	e008      	b.n	8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	609a      	str	r2, [r3, #8]
}
 8006944:	bf00      	nop
 8006946:	372c      	adds	r7, #44	; 0x2c
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	44020c00 	.word	0x44020c00
 8006954:	03d09000 	.word	0x03d09000
 8006958:	46000000 	.word	0x46000000
 800695c:	4a742400 	.word	0x4a742400
 8006960:	4af42400 	.word	0x4af42400

08006964 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006964:	b480      	push	{r7}
 8006966:	b08b      	sub	sp, #44	; 0x2c
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800696c:	4bad      	ldr	r3, [pc, #692]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800696e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006974:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006976:	4bab      	ldr	r3, [pc, #684]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006980:	4ba8      	ldr	r3, [pc, #672]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	0a1b      	lsrs	r3, r3, #8
 8006986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800698a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800698c:	4ba5      	ldr	r3, [pc, #660]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800698e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006996:	4ba3      	ldr	r3, [pc, #652]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800699a:	08db      	lsrs	r3, r3, #3
 800699c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	fb02 f303 	mul.w	r3, r2, r3
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8126 	beq.w	8006c06 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d053      	beq.n	8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d86f      	bhi.n	8006aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d003      	beq.n	80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d02b      	beq.n	8006a2a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80069d2:	e068      	b.n	8006aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069d4:	4b93      	ldr	r3, [pc, #588]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	08db      	lsrs	r3, r3, #3
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	4a92      	ldr	r2, [pc, #584]	; (8006c28 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
 80069e4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	ee07 3a90 	vmov	s15, r3
 80069ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	ee07 3a90 	vmov	s15, r3
 8006a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a08:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a0c:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006a28:	e068      	b.n	8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a34:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a46:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006a66:	e049      	b.n	8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a84:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a88:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006aa4:	e02a      	b.n	8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006aa6:	4b5f      	ldr	r3, [pc, #380]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	08db      	lsrs	r3, r3, #3
 8006aac:	f003 0303 	and.w	r3, r3, #3
 8006ab0:	4a5d      	ldr	r2, [pc, #372]	; (8006c28 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	ee07 3a90 	vmov	s15, r3
 8006ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ada:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ade:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006afa:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006afc:	4b49      	ldr	r3, [pc, #292]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b08:	d121      	bne.n	8006b4e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006b0a:	4b46      	ldr	r3, [pc, #280]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d017      	beq.n	8006b46 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b16:	4b43      	ldr	r3, [pc, #268]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1a:	0a5b      	lsrs	r3, r3, #9
 8006b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b20:	ee07 3a90 	vmov	s15, r3
 8006b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006b28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b2c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006b30:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b3c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	e006      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	e002      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b54:	4b33      	ldr	r3, [pc, #204]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b60:	d121      	bne.n	8006ba6 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006b62:	4b30      	ldr	r3, [pc, #192]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d017      	beq.n	8006b9e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b6e:	4b2d      	ldr	r3, [pc, #180]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	0c1b      	lsrs	r3, r3, #16
 8006b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b84:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006b88:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b94:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	605a      	str	r2, [r3, #4]
 8006b9c:	e006      	b.n	8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	e002      	b.n	8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bac:	4b1d      	ldr	r3, [pc, #116]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb8:	d121      	bne.n	8006bfe <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006bba:	4b1a      	ldr	r3, [pc, #104]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d017      	beq.n	8006bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006bc6:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	0e1b      	lsrs	r3, r3, #24
 8006bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd0:	ee07 3a90 	vmov	s15, r3
 8006bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006be0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bec:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006bf4:	e010      	b.n	8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	609a      	str	r2, [r3, #8]
}
 8006bfc:	e00c      	b.n	8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	609a      	str	r2, [r3, #8]
}
 8006c04:	e008      	b.n	8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	609a      	str	r2, [r3, #8]
}
 8006c18:	bf00      	nop
 8006c1a:	372c      	adds	r7, #44	; 0x2c
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	44020c00 	.word	0x44020c00
 8006c28:	03d09000 	.word	0x03d09000
 8006c2c:	46000000 	.word	0x46000000
 8006c30:	4a742400 	.word	0x4a742400
 8006c34:	4af42400 	.word	0x4af42400

08006c38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b08f      	sub	sp, #60	; 0x3c
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c46:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8006c4a:	4321      	orrs	r1, r4
 8006c4c:	d150      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006c4e:	4b26      	ldr	r3, [pc, #152]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c58:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006c5a:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d108      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c6e:	d104      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
 8006c76:	f002 bb2a 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c88:	d108      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c90:	d104      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006c92:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34
 8006c98:	f002 bb19 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006c9c:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca8:	d119      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb0:	d115      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cbe:	d30a      	bcc.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006cc0:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	0a1b      	lsrs	r3, r3, #8
 8006cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cca:	4a08      	ldr	r2, [pc, #32]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006cd2:	f002 bafc 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006cda:	f002 baf8 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce2:	f002 baf4 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ce6:	bf00      	nop
 8006ce8:	44020c00 	.word	0x44020c00
 8006cec:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cf4:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8006cf8:	ea50 0104 	orrs.w	r1, r0, r4
 8006cfc:	f001 8275 	beq.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d04:	2801      	cmp	r0, #1
 8006d06:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8006d0a:	f082 82dd 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d12:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8006d16:	ea50 0104 	orrs.w	r1, r0, r4
 8006d1a:	f001 816c 	beq.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006d1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d22:	2801      	cmp	r0, #1
 8006d24:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8006d28:	f082 82ce 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d30:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8006d34:	ea50 0104 	orrs.w	r1, r0, r4
 8006d38:	f001 8602 	beq.w	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8006d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d40:	2801      	cmp	r0, #1
 8006d42:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8006d46:	f082 82bf 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d4e:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8006d52:	ea50 0104 	orrs.w	r1, r0, r4
 8006d56:	f001 854c 	beq.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8006d5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d5e:	2801      	cmp	r0, #1
 8006d60:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8006d64:	f082 82b0 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d6c:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8006d70:	ea50 0104 	orrs.w	r1, r0, r4
 8006d74:	f001 849e 	beq.w	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d7c:	2801      	cmp	r0, #1
 8006d7e:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8006d82:	f082 82a1 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d8a:	f1a1 0420 	sub.w	r4, r1, #32
 8006d8e:	ea50 0104 	orrs.w	r1, r0, r4
 8006d92:	f001 83e8 	beq.w	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d9a:	2801      	cmp	r0, #1
 8006d9c:	f171 0120 	sbcs.w	r1, r1, #32
 8006da0:	f082 8292 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006da8:	f1a1 0410 	sub.w	r4, r1, #16
 8006dac:	ea50 0104 	orrs.w	r1, r0, r4
 8006db0:	f002 8256 	beq.w	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006db4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006db8:	2801      	cmp	r0, #1
 8006dba:	f171 0110 	sbcs.w	r1, r1, #16
 8006dbe:	f082 8283 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dc6:	f1a1 0408 	sub.w	r4, r1, #8
 8006dca:	ea50 0104 	orrs.w	r1, r0, r4
 8006dce:	f002 81cc 	beq.w	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8006dd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dd6:	2801      	cmp	r0, #1
 8006dd8:	f171 0108 	sbcs.w	r1, r1, #8
 8006ddc:	f082 8274 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006de4:	1f0c      	subs	r4, r1, #4
 8006de6:	ea50 0104 	orrs.w	r1, r0, r4
 8006dea:	f001 8648 	beq.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8006dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006df2:	2801      	cmp	r0, #1
 8006df4:	f171 0104 	sbcs.w	r1, r1, #4
 8006df8:	f082 8266 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e00:	1e8c      	subs	r4, r1, #2
 8006e02:	ea50 0104 	orrs.w	r1, r0, r4
 8006e06:	f002 8143 	beq.w	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006e0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e0e:	2801      	cmp	r0, #1
 8006e10:	f171 0102 	sbcs.w	r1, r1, #2
 8006e14:	f082 8258 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e1c:	1e4c      	subs	r4, r1, #1
 8006e1e:	ea50 0104 	orrs.w	r1, r0, r4
 8006e22:	f002 80ce 	beq.w	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8006e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e2a:	2801      	cmp	r0, #1
 8006e2c:	f171 0101 	sbcs.w	r1, r1, #1
 8006e30:	f082 824a 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e38:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8006e3c:	4321      	orrs	r1, r4
 8006e3e:	f002 8059 	beq.w	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8006e42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e46:	4cd9      	ldr	r4, [pc, #868]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	f171 0100 	sbcs.w	r1, r1, #0
 8006e4e:	f082 823b 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e56:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8006e5a:	4321      	orrs	r1, r4
 8006e5c:	f001 87d9 	beq.w	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e64:	4cd2      	ldr	r4, [pc, #840]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006e66:	42a0      	cmp	r0, r4
 8006e68:	f171 0100 	sbcs.w	r1, r1, #0
 8006e6c:	f082 822c 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e74:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8006e78:	4321      	orrs	r1, r4
 8006e7a:	f001 8751 	beq.w	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8006e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e82:	4ccc      	ldr	r4, [pc, #816]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006e84:	42a0      	cmp	r0, r4
 8006e86:	f171 0100 	sbcs.w	r1, r1, #0
 8006e8a:	f082 821d 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e92:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8006e96:	4321      	orrs	r1, r4
 8006e98:	f001 869a 	beq.w	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8006e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ea0:	4cc5      	ldr	r4, [pc, #788]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006ea2:	42a0      	cmp	r0, r4
 8006ea4:	f171 0100 	sbcs.w	r1, r1, #0
 8006ea8:	f082 820e 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006eac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eb0:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8006eb4:	4321      	orrs	r1, r4
 8006eb6:	f001 8612 	beq.w	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8006eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ebe:	4cbf      	ldr	r4, [pc, #764]	; (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006ec0:	42a0      	cmp	r0, r4
 8006ec2:	f171 0100 	sbcs.w	r1, r1, #0
 8006ec6:	f082 81ff 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ece:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8006ed2:	4321      	orrs	r1, r4
 8006ed4:	f002 817e 	beq.w	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006edc:	4cb8      	ldr	r4, [pc, #736]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ede:	42a0      	cmp	r0, r4
 8006ee0:	f171 0100 	sbcs.w	r1, r1, #0
 8006ee4:	f082 81f0 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eec:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8006ef0:	4321      	orrs	r1, r4
 8006ef2:	f000 829e 	beq.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8006ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006efa:	4cb2      	ldr	r4, [pc, #712]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006efc:	42a0      	cmp	r0, r4
 8006efe:	f171 0100 	sbcs.w	r1, r1, #0
 8006f02:	f082 81e1 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f0a:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8006f0e:	4321      	orrs	r1, r4
 8006f10:	f000 826d 	beq.w	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f18:	4cab      	ldr	r4, [pc, #684]	; (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f1a:	42a0      	cmp	r0, r4
 8006f1c:	f171 0100 	sbcs.w	r1, r1, #0
 8006f20:	f082 81d2 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f28:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8006f2c:	4321      	orrs	r1, r4
 8006f2e:	f001 800d 	beq.w	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8006f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f36:	4ca5      	ldr	r4, [pc, #660]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006f38:	42a0      	cmp	r0, r4
 8006f3a:	f171 0100 	sbcs.w	r1, r1, #0
 8006f3e:	f082 81c3 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f46:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8006f4a:	4321      	orrs	r1, r4
 8006f4c:	f000 81d0 	beq.w	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f54:	4c9e      	ldr	r4, [pc, #632]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f56:	42a0      	cmp	r0, r4
 8006f58:	f171 0100 	sbcs.w	r1, r1, #0
 8006f5c:	f082 81b4 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f64:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8006f68:	4321      	orrs	r1, r4
 8006f6a:	f000 8142 	beq.w	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f72:	4c98      	ldr	r4, [pc, #608]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006f74:	42a0      	cmp	r0, r4
 8006f76:	f171 0100 	sbcs.w	r1, r1, #0
 8006f7a:	f082 81a5 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f82:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8006f86:	4321      	orrs	r1, r4
 8006f88:	f001 824e 	beq.w	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f90:	4c91      	ldr	r4, [pc, #580]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006f92:	42a0      	cmp	r0, r4
 8006f94:	f171 0100 	sbcs.w	r1, r1, #0
 8006f98:	f082 8196 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fa0:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8006fa4:	4321      	orrs	r1, r4
 8006fa6:	f001 8197 	beq.w	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fae:	4c8b      	ldr	r4, [pc, #556]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006fb0:	42a0      	cmp	r0, r4
 8006fb2:	f171 0100 	sbcs.w	r1, r1, #0
 8006fb6:	f082 8187 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fbe:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8006fc2:	4321      	orrs	r1, r4
 8006fc4:	f001 8154 	beq.w	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fcc:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8006fd0:	f171 0100 	sbcs.w	r1, r1, #0
 8006fd4:	f082 8178 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fdc:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006fe0:	4321      	orrs	r1, r4
 8006fe2:	f001 80b7 	beq.w	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fea:	f248 0401 	movw	r4, #32769	; 0x8001
 8006fee:	42a0      	cmp	r0, r4
 8006ff0:	f171 0100 	sbcs.w	r1, r1, #0
 8006ff4:	f082 8168 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ff8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ffc:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8007000:	4321      	orrs	r1, r4
 8007002:	f001 8064 	beq.w	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800700a:	f244 0401 	movw	r4, #16385	; 0x4001
 800700e:	42a0      	cmp	r0, r4
 8007010:	f171 0100 	sbcs.w	r1, r1, #0
 8007014:	f082 8158 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800701c:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8007020:	4321      	orrs	r1, r4
 8007022:	f001 8011 	beq.w	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007026:	e9d7 0100 	ldrd	r0, r1, [r7]
 800702a:	f242 0401 	movw	r4, #8193	; 0x2001
 800702e:	42a0      	cmp	r0, r4
 8007030:	f171 0100 	sbcs.w	r1, r1, #0
 8007034:	f082 8148 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800703c:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8007040:	4321      	orrs	r1, r4
 8007042:	f000 871e 	beq.w	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800704a:	f241 0401 	movw	r4, #4097	; 0x1001
 800704e:	42a0      	cmp	r0, r4
 8007050:	f171 0100 	sbcs.w	r1, r1, #0
 8007054:	f082 8138 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800705c:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8007060:	4321      	orrs	r1, r4
 8007062:	f000 86a8 	beq.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007066:	e9d7 0100 	ldrd	r0, r1, [r7]
 800706a:	f640 0401 	movw	r4, #2049	; 0x801
 800706e:	42a0      	cmp	r0, r4
 8007070:	f171 0100 	sbcs.w	r1, r1, #0
 8007074:	f082 8128 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800707c:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8007080:	4321      	orrs	r1, r4
 8007082:	f000 8632 	beq.w	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800708a:	f240 4401 	movw	r4, #1025	; 0x401
 800708e:	42a0      	cmp	r0, r4
 8007090:	f171 0100 	sbcs.w	r1, r1, #0
 8007094:	f082 8118 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800709c:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 80070a0:	4321      	orrs	r1, r4
 80070a2:	f000 85b0 	beq.w	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80070a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070aa:	f240 2401 	movw	r4, #513	; 0x201
 80070ae:	42a0      	cmp	r0, r4
 80070b0:	f171 0100 	sbcs.w	r1, r1, #0
 80070b4:	f082 8108 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070bc:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 80070c0:	4321      	orrs	r1, r4
 80070c2:	f000 8535 	beq.w	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80070c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070ca:	f240 1401 	movw	r4, #257	; 0x101
 80070ce:	42a0      	cmp	r0, r4
 80070d0:	f171 0100 	sbcs.w	r1, r1, #0
 80070d4:	f082 80f8 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070dc:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 80070e0:	4321      	orrs	r1, r4
 80070e2:	f000 84ba 	beq.w	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80070e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070ea:	2881      	cmp	r0, #129	; 0x81
 80070ec:	f171 0100 	sbcs.w	r1, r1, #0
 80070f0:	f082 80ea 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070f8:	2821      	cmp	r0, #33	; 0x21
 80070fa:	f171 0100 	sbcs.w	r1, r1, #0
 80070fe:	d26f      	bcs.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007104:	4301      	orrs	r1, r0
 8007106:	f002 80df 	beq.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800710a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800710e:	1e42      	subs	r2, r0, #1
 8007110:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007114:	2a20      	cmp	r2, #32
 8007116:	f173 0100 	sbcs.w	r1, r3, #0
 800711a:	f082 80d5 	bcs.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800711e:	2a1f      	cmp	r2, #31
 8007120:	f202 80d2 	bhi.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007124:	a101      	add	r1, pc, #4	; (adr r1, 800712c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007126:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800712a:	bf00      	nop
 800712c:	0800748d 	.word	0x0800748d
 8007130:	08007559 	.word	0x08007559
 8007134:	080092c9 	.word	0x080092c9
 8007138:	08007619 	.word	0x08007619
 800713c:	080092c9 	.word	0x080092c9
 8007140:	080092c9 	.word	0x080092c9
 8007144:	080092c9 	.word	0x080092c9
 8007148:	080076e9 	.word	0x080076e9
 800714c:	080092c9 	.word	0x080092c9
 8007150:	080092c9 	.word	0x080092c9
 8007154:	080092c9 	.word	0x080092c9
 8007158:	080092c9 	.word	0x080092c9
 800715c:	080092c9 	.word	0x080092c9
 8007160:	080092c9 	.word	0x080092c9
 8007164:	080092c9 	.word	0x080092c9
 8007168:	080077cb 	.word	0x080077cb
 800716c:	080092c9 	.word	0x080092c9
 8007170:	080092c9 	.word	0x080092c9
 8007174:	080092c9 	.word	0x080092c9
 8007178:	080092c9 	.word	0x080092c9
 800717c:	080092c9 	.word	0x080092c9
 8007180:	080092c9 	.word	0x080092c9
 8007184:	080092c9 	.word	0x080092c9
 8007188:	080092c9 	.word	0x080092c9
 800718c:	080092c9 	.word	0x080092c9
 8007190:	080092c9 	.word	0x080092c9
 8007194:	080092c9 	.word	0x080092c9
 8007198:	080092c9 	.word	0x080092c9
 800719c:	080092c9 	.word	0x080092c9
 80071a0:	080092c9 	.word	0x080092c9
 80071a4:	080092c9 	.word	0x080092c9
 80071a8:	080078a1 	.word	0x080078a1
 80071ac:	80000001 	.word	0x80000001
 80071b0:	40000001 	.word	0x40000001
 80071b4:	20000001 	.word	0x20000001
 80071b8:	10000001 	.word	0x10000001
 80071bc:	08000001 	.word	0x08000001
 80071c0:	04000001 	.word	0x04000001
 80071c4:	00800001 	.word	0x00800001
 80071c8:	00400001 	.word	0x00400001
 80071cc:	00200001 	.word	0x00200001
 80071d0:	00100001 	.word	0x00100001
 80071d4:	00080001 	.word	0x00080001
 80071d8:	00040001 	.word	0x00040001
 80071dc:	00020001 	.word	0x00020001
 80071e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e4:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80071e8:	430b      	orrs	r3, r1
 80071ea:	f000 83c4 	beq.w	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80071ee:	f002 b86b 	b.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80071f2:	4ba1      	ldr	r3, [pc, #644]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80071f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071f8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007204:	d036      	beq.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800720c:	d86b      	bhi.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007214:	d02b      	beq.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800721c:	d863      	bhi.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007224:	d01b      	beq.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800722c:	d85b      	bhi.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	2b00      	cmp	r3, #0
 8007232:	d004      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723a:	d008      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800723c:	e053      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800723e:	f107 0320 	add.w	r3, r7, #32
 8007242:	4618      	mov	r0, r3
 8007244:	f7ff f8ba 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800724c:	e04e      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800724e:	f107 0314 	add.w	r3, r7, #20
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff fa1c 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800725c:	e046      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800725e:	f107 0308 	add.w	r3, r7, #8
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fb7e 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800726c:	e03e      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800726e:	4b83      	ldr	r3, [pc, #524]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007272:	e03b      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007274:	4b80      	ldr	r3, [pc, #512]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800727a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007280:	4b7d      	ldr	r3, [pc, #500]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b02      	cmp	r3, #2
 800728a:	d10c      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007292:	4b79      	ldr	r3, [pc, #484]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	08db      	lsrs	r3, r3, #3
 8007298:	f003 0303 	and.w	r3, r3, #3
 800729c:	4a78      	ldr	r2, [pc, #480]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800729e:	fa22 f303 	lsr.w	r3, r2, r3
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
 80072a4:	e01e      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072a6:	4b74      	ldr	r3, [pc, #464]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b2:	d106      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ba:	d102      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072bc:	4b71      	ldr	r3, [pc, #452]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80072be:	637b      	str	r3, [r7, #52]	; 0x34
 80072c0:	e010      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072c2:	4b6d      	ldr	r3, [pc, #436]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ce:	d106      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d6:	d102      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072d8:	4b6b      	ldr	r3, [pc, #428]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80072da:	637b      	str	r3, [r7, #52]	; 0x34
 80072dc:	e002      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80072e2:	e003      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80072e4:	e002      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072ea:	bf00      	nop
          }
        }
        break;
 80072ec:	f001 bfef 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80072f0:	4b61      	ldr	r3, [pc, #388]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80072f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072f6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80072fa:	633b      	str	r3, [r7, #48]	; 0x30
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007302:	d036      	beq.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800730a:	d86b      	bhi.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007312:	d02b      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800731a:	d863      	bhi.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007322:	d01b      	beq.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800732a:	d85b      	bhi.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007338:	d008      	beq.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800733a:	e053      	b.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800733c:	f107 0320 	add.w	r3, r7, #32
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff f83b 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800734a:	e04e      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800734c:	f107 0314 	add.w	r3, r7, #20
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff f99d 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800735a:	e046      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800735c:	f107 0308 	add.w	r3, r7, #8
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff faff 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800736a:	e03e      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800736c:	4b43      	ldr	r3, [pc, #268]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007370:	e03b      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007372:	4b41      	ldr	r3, [pc, #260]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007378:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800737c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800737e:	4b3e      	ldr	r3, [pc, #248]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b02      	cmp	r3, #2
 8007388:	d10c      	bne.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d109      	bne.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007390:	4b39      	ldr	r3, [pc, #228]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	08db      	lsrs	r3, r3, #3
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	4a39      	ldr	r2, [pc, #228]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800739c:	fa22 f303 	lsr.w	r3, r2, r3
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
 80073a2:	e01e      	b.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073a4:	4b34      	ldr	r3, [pc, #208]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b0:	d106      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b8:	d102      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073ba:	4b32      	ldr	r3, [pc, #200]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
 80073be:	e010      	b.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073c0:	4b2d      	ldr	r3, [pc, #180]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073cc:	d106      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d4:	d102      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80073d6:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
 80073da:	e002      	b.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80073e0:	e003      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80073e2:	e002      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073e8:	bf00      	nop
          }
        }
        break;
 80073ea:	f001 bf70 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80073ee:	4b22      	ldr	r3, [pc, #136]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80073f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80073f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d108      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007400:	f107 0320 	add.w	r3, r7, #32
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe ffd9 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800740e:	f001 bf5e 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	2b40      	cmp	r3, #64	; 0x40
 8007416:	d108      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007418:	f107 0314 	add.w	r3, r7, #20
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff f937 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007426:	f001 bf52 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800742e:	f001 bf4e 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007432:	4b11      	ldr	r3, [pc, #68]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007434:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	2b00      	cmp	r3, #0
 8007442:	d108      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007444:	f107 0320 	add.w	r3, r7, #32
 8007448:	4618      	mov	r0, r3
 800744a:	f7fe ffb7 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007452:	f001 bf3c 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	2b80      	cmp	r3, #128	; 0x80
 800745a:	d108      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800745c:	f107 0314 	add.w	r3, r7, #20
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff f915 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800746a:	f001 bf30 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007472:	f001 bf2c 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007476:	bf00      	nop
 8007478:	44020c00 	.word	0x44020c00
 800747c:	00bb8000 	.word	0x00bb8000
 8007480:	03d09000 	.word	0x03d09000
 8007484:	003d0900 	.word	0x003d0900
 8007488:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800748c:	4b9d      	ldr	r3, [pc, #628]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800748e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	2b00      	cmp	r3, #0
 800749c:	d104      	bne.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800749e:	f7fc ffd7 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 80074a2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80074a4:	f001 bf13 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80074a8:	4b96      	ldr	r3, [pc, #600]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074b4:	d10a      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d107      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff f8e5 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ca:	e043      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80074cc:	4b8d      	ldr	r3, [pc, #564]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d8:	d10a      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d107      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074e0:	f107 0308 	add.w	r3, r7, #8
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7ff fa3d 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	637b      	str	r3, [r7, #52]	; 0x34
 80074ee:	e031      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80074f0:	4b84      	ldr	r3, [pc, #528]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d10c      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d109      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007502:	4b80      	ldr	r3, [pc, #512]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	08db      	lsrs	r3, r3, #3
 8007508:	f003 0303 	and.w	r3, r3, #3
 800750c:	4a7e      	ldr	r2, [pc, #504]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800750e:	fa22 f303 	lsr.w	r3, r2, r3
 8007512:	637b      	str	r3, [r7, #52]	; 0x34
 8007514:	e01e      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007516:	4b7b      	ldr	r3, [pc, #492]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800751e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007522:	d105      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	2b04      	cmp	r3, #4
 8007528:	d102      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800752a:	4b78      	ldr	r3, [pc, #480]	; (800770c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
 800752e:	e011      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007530:	4b74      	ldr	r3, [pc, #464]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b02      	cmp	r3, #2
 800753c:	d106      	bne.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	2b05      	cmp	r3, #5
 8007542:	d103      	bne.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007548:	637b      	str	r3, [r7, #52]	; 0x34
 800754a:	e003      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007550:	f001 bebd 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007554:	f001 bebb 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007558:	4b6a      	ldr	r3, [pc, #424]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800755a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800755e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007562:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800756a:	f7fc ff5b 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 800756e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007570:	f001 bead 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007574:	4b63      	ldr	r3, [pc, #396]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800757c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007580:	d10a      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	2b08      	cmp	r3, #8
 8007586:	d107      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff f87f 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
 8007596:	e03d      	b.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2b10      	cmp	r3, #16
 800759c:	d108      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800759e:	f107 0308 	add.w	r3, r7, #8
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff f9de 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075ac:	f001 be8f 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80075b0:	4b54      	ldr	r3, [pc, #336]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d10c      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	2b18      	cmp	r3, #24
 80075c0:	d109      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075c2:	4b50      	ldr	r3, [pc, #320]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	08db      	lsrs	r3, r3, #3
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	4a4e      	ldr	r2, [pc, #312]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80075ce:	fa22 f303 	lsr.w	r3, r2, r3
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
 80075d4:	e01e      	b.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80075d6:	4b4b      	ldr	r3, [pc, #300]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e2:	d105      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d102      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80075ea:	4b48      	ldr	r3, [pc, #288]	; (800770c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
 80075ee:	e011      	b.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80075f0:	4b44      	ldr	r3, [pc, #272]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80075f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d106      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	2b28      	cmp	r3, #40	; 0x28
 8007602:	d103      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007608:	637b      	str	r3, [r7, #52]	; 0x34
 800760a:	e003      	b.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007610:	f001 be5d 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007614:	f001 be5b 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007618:	4b3a      	ldr	r3, [pc, #232]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800761a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800761e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007622:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	2b00      	cmp	r3, #0
 8007628:	d104      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800762a:	f7fc fefb 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 800762e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007630:	f001 be4d 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007634:	4b33      	ldr	r3, [pc, #204]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800763c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007640:	d10a      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d107      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007648:	f107 0314 	add.w	r3, r7, #20
 800764c:	4618      	mov	r0, r3
 800764e:	f7ff f81f 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
 8007656:	e045      	b.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007658:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007664:	d10a      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	2b80      	cmp	r3, #128	; 0x80
 800766a:	d107      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800766c:	f107 0308 	add.w	r3, r7, #8
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff f977 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
 800767a:	e033      	b.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800767c:	4b21      	ldr	r3, [pc, #132]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b02      	cmp	r3, #2
 8007686:	d10c      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	2bc0      	cmp	r3, #192	; 0xc0
 800768c:	d109      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800768e:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	08db      	lsrs	r3, r3, #3
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	4a1b      	ldr	r2, [pc, #108]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800769a:	fa22 f303 	lsr.w	r3, r2, r3
 800769e:	637b      	str	r3, [r7, #52]	; 0x34
 80076a0:	e020      	b.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80076a2:	4b18      	ldr	r3, [pc, #96]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ae:	d106      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b6:	d102      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80076b8:	4b14      	ldr	r3, [pc, #80]	; (800770c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80076ba:	637b      	str	r3, [r7, #52]	; 0x34
 80076bc:	e012      	b.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80076c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d107      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80076d2:	d103      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80076d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
 80076da:	e003      	b.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076e0:	f001 bdf5 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076e4:	f001 bdf3 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80076e8:	4b06      	ldr	r3, [pc, #24]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80076ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80076ee:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80076f2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076fa:	f7fc fe93 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 80076fe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007700:	f001 bde5 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007704:	44020c00 	.word	0x44020c00
 8007708:	03d09000 	.word	0x03d09000
 800770c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007710:	4ba0      	ldr	r3, [pc, #640]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800771c:	d10b      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007724:	d107      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007726:	f107 0314 	add.w	r3, r7, #20
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe ffb0 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
 8007734:	e047      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007736:	4b97      	ldr	r3, [pc, #604]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800773e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007742:	d10b      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774a:	d107      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800774c:	f107 0308 	add.w	r3, r7, #8
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff f907 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
 800775a:	e034      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800775c:	4b8d      	ldr	r3, [pc, #564]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b02      	cmp	r3, #2
 8007766:	d10d      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800776e:	d109      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007770:	4b88      	ldr	r3, [pc, #544]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	08db      	lsrs	r3, r3, #3
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	4a87      	ldr	r2, [pc, #540]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
 8007782:	e020      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007784:	4b83      	ldr	r3, [pc, #524]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800778c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007790:	d106      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007798:	d102      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800779a:	4b80      	ldr	r3, [pc, #512]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
 800779e:	e012      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80077a0:	4b7c      	ldr	r3, [pc, #496]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80077a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d107      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80077b4:	d103      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80077b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
 80077bc:	e003      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077c2:	f001 bd84 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077c6:	f001 bd82 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80077ca:	4b72      	ldr	r3, [pc, #456]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80077cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80077d4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80077dc:	f7fc fe22 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 80077e0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80077e2:	f001 bd74 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80077e6:	4b6b      	ldr	r3, [pc, #428]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077f2:	d10b      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077fa:	d107      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077fc:	f107 0314 	add.w	r3, r7, #20
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe ff45 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
 800780a:	e047      	b.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800780c:	4b61      	ldr	r3, [pc, #388]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007818:	d10b      	bne.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007820:	d107      	bne.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007822:	f107 0308 	add.w	r3, r7, #8
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff f89c 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	637b      	str	r3, [r7, #52]	; 0x34
 8007830:	e034      	b.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007832:	4b58      	ldr	r3, [pc, #352]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b02      	cmp	r3, #2
 800783c:	d10d      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007844:	d109      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007846:	4b53      	ldr	r3, [pc, #332]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	08db      	lsrs	r3, r3, #3
 800784c:	f003 0303 	and.w	r3, r3, #3
 8007850:	4a51      	ldr	r2, [pc, #324]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007852:	fa22 f303 	lsr.w	r3, r2, r3
 8007856:	637b      	str	r3, [r7, #52]	; 0x34
 8007858:	e020      	b.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800785a:	4b4e      	ldr	r3, [pc, #312]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007866:	d106      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800786e:	d102      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007870:	4b4a      	ldr	r3, [pc, #296]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
 8007874:	e012      	b.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007876:	4b47      	ldr	r3, [pc, #284]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b02      	cmp	r3, #2
 8007882:	d107      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800788a:	d103      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800788c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007890:	637b      	str	r3, [r7, #52]	; 0x34
 8007892:	e003      	b.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007898:	f001 bd19 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800789c:	f001 bd17 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80078a0:	4b3c      	ldr	r3, [pc, #240]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80078a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80078a6:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80078aa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80078ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d104      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078b2:	f7fc fdb7 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 80078b6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80078b8:	f001 bd09 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80078bc:	4b35      	ldr	r3, [pc, #212]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078c8:	d10b      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d0:	d107      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d2:	f107 0314 	add.w	r3, r7, #20
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe feda 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	637b      	str	r3, [r7, #52]	; 0x34
 80078e0:	e047      	b.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80078e2:	4b2c      	ldr	r3, [pc, #176]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ee:	d10b      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f6:	d107      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7ff f831 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
 8007906:	e034      	b.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007908:	4b22      	ldr	r3, [pc, #136]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b02      	cmp	r3, #2
 8007912:	d10d      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800791a:	d109      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800791c:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	08db      	lsrs	r3, r3, #3
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	4a1c      	ldr	r2, [pc, #112]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
 800792e:	e020      	b.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007930:	4b18      	ldr	r3, [pc, #96]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800793c:	d106      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007944:	d102      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007946:	4b15      	ldr	r3, [pc, #84]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
 800794a:	e012      	b.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800794c:	4b11      	ldr	r3, [pc, #68]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800794e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b02      	cmp	r3, #2
 8007958:	d107      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007960:	d103      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
 8007968:	e003      	b.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800796e:	f001 bcae 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007972:	f001 bcac 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8007976:	4b07      	ldr	r3, [pc, #28]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800797c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8007980:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007988:	f7fc fd4c 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 800798c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800798e:	f001 bc9e 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007992:	bf00      	nop
 8007994:	44020c00 	.word	0x44020c00
 8007998:	03d09000 	.word	0x03d09000
 800799c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80079a0:	4ba0      	ldr	r3, [pc, #640]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079ac:	d10b      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079b4:	d107      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b6:	f107 0314 	add.w	r3, r7, #20
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fe68 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	637b      	str	r3, [r7, #52]	; 0x34
 80079c4:	e047      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80079c6:	4b97      	ldr	r3, [pc, #604]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d2:	d10b      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80079da:	d107      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079dc:	f107 0308 	add.w	r3, r7, #8
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe ffbf 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
 80079ea:	e034      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80079ec:	4b8d      	ldr	r3, [pc, #564]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d10d      	bne.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80079fe:	d109      	bne.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a00:	4b88      	ldr	r3, [pc, #544]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	08db      	lsrs	r3, r3, #3
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	4a87      	ldr	r2, [pc, #540]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
 8007a12:	e020      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007a14:	4b83      	ldr	r3, [pc, #524]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a20:	d106      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a28:	d102      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8007a2a:	4b80      	ldr	r3, [pc, #512]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2e:	e012      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007a30:	4b7c      	ldr	r3, [pc, #496]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d107      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007a44:	d103      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8007a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4c:	e003      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a52:	f001 bc3c 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a56:	f001 bc3a 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8007a5a:	4b72      	ldr	r3, [pc, #456]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a60:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007a64:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a6c:	f7fc fcda 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8007a70:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a72:	f001 bc2c 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8007a76:	4b6b      	ldr	r3, [pc, #428]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a82:	d10b      	bne.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a8a:	d107      	bne.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a8c:	f107 0314 	add.w	r3, r7, #20
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe fdfd 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	637b      	str	r3, [r7, #52]	; 0x34
 8007a9a:	e047      	b.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007a9c:	4b61      	ldr	r3, [pc, #388]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa8:	d10b      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ab0:	d107      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ab2:	f107 0308 	add.w	r3, r7, #8
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe ff54 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac0:	e034      	b.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007ac2:	4b58      	ldr	r3, [pc, #352]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d10d      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ad4:	d109      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ad6:	4b53      	ldr	r3, [pc, #332]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	08db      	lsrs	r3, r3, #3
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	4a51      	ldr	r2, [pc, #324]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae8:	e020      	b.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007aea:	4b4e      	ldr	r3, [pc, #312]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af6:	d106      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007afe:	d102      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8007b00:	4b4a      	ldr	r3, [pc, #296]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
 8007b04:	e012      	b.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8007b06:	4b47      	ldr	r3, [pc, #284]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d107      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007b1a:	d103      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
 8007b22:	e003      	b.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b28:	f001 bbd1 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b2c:	f001 bbcf 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007b30:	4b3c      	ldr	r3, [pc, #240]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007b36:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b3a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b42:	f7fc fc6f 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8007b46:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b48:	f001 bbc1 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007b4c:	4b35      	ldr	r3, [pc, #212]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b58:	d10b      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b60:	d107      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b62:	f107 0314 	add.w	r3, r7, #20
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fd92 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b70:	e047      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8007b72:	4b2c      	ldr	r3, [pc, #176]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b7e:	d10b      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b86:	d107      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b88:	f107 0308 	add.w	r3, r7, #8
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fee9 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
 8007b96:	e034      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007b98:	4b22      	ldr	r3, [pc, #136]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d10d      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007baa:	d109      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bac:	4b1d      	ldr	r3, [pc, #116]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	08db      	lsrs	r3, r3, #3
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	4a1c      	ldr	r2, [pc, #112]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bbe:	e020      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007bc0:	4b18      	ldr	r3, [pc, #96]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bcc:	d106      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bd4:	d102      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8007bd6:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bda:	e012      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007bdc:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d107      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007bf0:	d103      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8007bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf8:	e003      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bfe:	f001 bb66 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c02:	f001 bb64 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007c06:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007c0c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8007c10:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10b      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c18:	f7fc fc04 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8007c1c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c1e:	f001 bb56 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c22:	bf00      	nop
 8007c24:	44020c00 	.word	0x44020c00
 8007c28:	03d09000 	.word	0x03d09000
 8007c2c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007c30:	4ba1      	ldr	r3, [pc, #644]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c3c:	d10b      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c44:	d107      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c46:	f107 0314 	add.w	r3, r7, #20
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe fd20 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
 8007c54:	e047      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007c56:	4b98      	ldr	r3, [pc, #608]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c62:	d10b      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c6a:	d107      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c6c:	f107 0308 	add.w	r3, r7, #8
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fe fe77 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7a:	e034      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007c7c:	4b8e      	ldr	r3, [pc, #568]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d10d      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007c8e:	d109      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c90:	4b89      	ldr	r3, [pc, #548]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	08db      	lsrs	r3, r3, #3
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	4a88      	ldr	r2, [pc, #544]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca2:	e020      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007ca4:	4b84      	ldr	r3, [pc, #528]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb0:	d106      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb8:	d102      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8007cba:	4b81      	ldr	r3, [pc, #516]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007cbe:	e012      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007cc0:	4b7d      	ldr	r3, [pc, #500]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d107      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8007cd4:	d103      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8007cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cda:	637b      	str	r3, [r7, #52]	; 0x34
 8007cdc:	e003      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ce2:	f001 baf4 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ce6:	f001 baf2 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007cea:	4b73      	ldr	r3, [pc, #460]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007cec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d104      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cfc:	f7fc fb92 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8007d00:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d02:	f001 bae4 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8007d06:	4b6c      	ldr	r3, [pc, #432]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d12:	d10a      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d107      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d1a:	f107 0314 	add.w	r3, r7, #20
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fcb6 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	637b      	str	r3, [r7, #52]	; 0x34
 8007d28:	e043      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8007d2a:	4b63      	ldr	r3, [pc, #396]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d36:	d10a      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d107      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fe0e 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d4c:	e031      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007d4e:	4b5a      	ldr	r3, [pc, #360]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d10c      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d109      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d60:	4b55      	ldr	r3, [pc, #340]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	08db      	lsrs	r3, r3, #3
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	4a54      	ldr	r2, [pc, #336]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d70:	637b      	str	r3, [r7, #52]	; 0x34
 8007d72:	e01e      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8007d74:	4b50      	ldr	r3, [pc, #320]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d80:	d105      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	d102      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007d88:	4b4d      	ldr	r3, [pc, #308]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8c:	e011      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8007d8e:	4b4a      	ldr	r3, [pc, #296]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d106      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	2b05      	cmp	r3, #5
 8007da0:	d103      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8007da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da6:	637b      	str	r3, [r7, #52]	; 0x34
 8007da8:	e003      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dae:	f001 ba8e 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007db2:	f001 ba8c 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007db6:	4b40      	ldr	r3, [pc, #256]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007db8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dc0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007dc8:	f7fc fb2c 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8007dcc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8007dce:	f001 ba7e 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8007dd2:	4b39      	ldr	r3, [pc, #228]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dde:	d10a      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	2b10      	cmp	r3, #16
 8007de4:	d107      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de6:	f107 0314 	add.w	r3, r7, #20
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fc50 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	637b      	str	r3, [r7, #52]	; 0x34
 8007df4:	e043      	b.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007df6:	4b30      	ldr	r3, [pc, #192]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e02:	d10a      	bne.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	2b20      	cmp	r3, #32
 8007e08:	d107      	bne.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e0a:	f107 0308 	add.w	r3, r7, #8
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fda8 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	637b      	str	r3, [r7, #52]	; 0x34
 8007e18:	e031      	b.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007e1a:	4b27      	ldr	r3, [pc, #156]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d10c      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	2b30      	cmp	r3, #48	; 0x30
 8007e2a:	d109      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e2c:	4b22      	ldr	r3, [pc, #136]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	08db      	lsrs	r3, r3, #3
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	4a21      	ldr	r2, [pc, #132]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007e38:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e3e:	e01e      	b.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007e40:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e4c:	d105      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	d102      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8007e54:	4b1a      	ldr	r3, [pc, #104]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007e56:	637b      	str	r3, [r7, #52]	; 0x34
 8007e58:	e011      	b.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007e5a:	4b17      	ldr	r3, [pc, #92]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d106      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	2b50      	cmp	r3, #80	; 0x50
 8007e6c:	d103      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e72:	637b      	str	r3, [r7, #52]	; 0x34
 8007e74:	e003      	b.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e7a:	f001 ba28 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e7e:	f001 ba26 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007e82:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e88:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007e94:	f7fc faf2 	bl	800447c <HAL_RCC_GetPCLK3Freq>
 8007e98:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e9a:	f001 ba18 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ea4:	d10e      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0314 	add.w	r3, r7, #20
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fbf0 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007eb4:	f001 ba0b 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007eb8:	44020c00 	.word	0x44020c00
 8007ebc:	03d09000 	.word	0x03d09000
 8007ec0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eca:	d108      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ecc:	f107 0308 	add.w	r3, r7, #8
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fd47 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007eda:	f001 b9f8 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007ede:	4ba4      	ldr	r3, [pc, #656]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d10d      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ef0:	d109      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ef2:	4b9f      	ldr	r3, [pc, #636]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	08db      	lsrs	r3, r3, #3
 8007ef8:	f003 0303 	and.w	r3, r3, #3
 8007efc:	4a9d      	ldr	r2, [pc, #628]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007efe:	fa22 f303 	lsr.w	r3, r2, r3
 8007f02:	637b      	str	r3, [r7, #52]	; 0x34
 8007f04:	e020      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007f06:	4b9a      	ldr	r3, [pc, #616]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f12:	d106      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f1a:	d102      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007f1c:	4b96      	ldr	r3, [pc, #600]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f20:	e012      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007f22:	4b93      	ldr	r3, [pc, #588]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d107      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007f36:	d103      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3e:	e003      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f44:	f001 b9c3 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f48:	f001 b9c1 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007f4c:	4b88      	ldr	r3, [pc, #544]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007f5e:	f7fc fa45 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8007f62:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007f64:	f001 b9b3 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d104      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f6e:	f7fc f911 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8007f72:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f74:	f001 b9ab 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d108      	bne.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f7e:	f107 0314 	add.w	r3, r7, #20
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fb84 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f8c:	f001 b99f 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007f90:	4b77      	ldr	r3, [pc, #476]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f9c:	d105      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d102      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007fa4:	4b75      	ldr	r3, [pc, #468]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa8:	e023      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007faa:	4b71      	ldr	r3, [pc, #452]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d10c      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d109      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fbc:	4b6c      	ldr	r3, [pc, #432]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	08db      	lsrs	r3, r3, #3
 8007fc2:	f003 0303 	and.w	r3, r3, #3
 8007fc6:	4a6b      	ldr	r2, [pc, #428]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fce:	e010      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007fd0:	4b67      	ldr	r3, [pc, #412]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fdc:	d105      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	2b05      	cmp	r3, #5
 8007fe2:	d102      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007fe4:	4b64      	ldr	r3, [pc, #400]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe8:	e003      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fee:	f001 b96e 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ff2:	f001 b96c 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007ff6:	4b5e      	ldr	r3, [pc, #376]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008002:	4b5b      	ldr	r3, [pc, #364]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b02      	cmp	r3, #2
 800800e:	d106      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	2b00      	cmp	r3, #0
 8008014:	d103      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800801a:	637b      	str	r3, [r7, #52]	; 0x34
 800801c:	e012      	b.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800801e:	4b54      	ldr	r3, [pc, #336]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800802c:	d106      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008030:	2b08      	cmp	r3, #8
 8008032:	d103      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008034:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008038:	637b      	str	r3, [r7, #52]	; 0x34
 800803a:	e003      	b.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008040:	f001 b945 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008044:	f001 b943 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008048:	4b49      	ldr	r3, [pc, #292]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800804a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800804e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008052:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	2b00      	cmp	r3, #0
 8008058:	d104      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800805a:	f7fc f9e3 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 800805e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008060:	f001 b935 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806a:	d108      	bne.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800806c:	f107 0308 	add.w	r3, r7, #8
 8008070:	4618      	mov	r0, r3
 8008072:	f7fe fc77 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800807a:	f001 b928 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800807e:	4b3c      	ldr	r3, [pc, #240]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b02      	cmp	r3, #2
 8008088:	d10d      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008090:	d109      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008092:	4b37      	ldr	r3, [pc, #220]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	08db      	lsrs	r3, r3, #3
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	4a35      	ldr	r2, [pc, #212]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800809e:	fa22 f303 	lsr.w	r3, r2, r3
 80080a2:	637b      	str	r3, [r7, #52]	; 0x34
 80080a4:	e011      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80080a6:	4b32      	ldr	r3, [pc, #200]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b2:	d106      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080ba:	d102      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80080bc:	4b2e      	ldr	r3, [pc, #184]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80080be:	637b      	str	r3, [r7, #52]	; 0x34
 80080c0:	e003      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080c6:	f001 b902 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080ca:	f001 b900 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80080ce:	4b28      	ldr	r3, [pc, #160]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80080d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80080d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80080d8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d104      	bne.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80080e0:	f7fc f9a0 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 80080e4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80080e6:	f001 b8f2 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080f0:	d108      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080f2:	f107 0308 	add.w	r3, r7, #8
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fc34 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008100:	f001 b8e5 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008104:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b02      	cmp	r3, #2
 800810e:	d10d      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008116:	d109      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008118:	4b15      	ldr	r3, [pc, #84]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	08db      	lsrs	r3, r3, #3
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	4a14      	ldr	r2, [pc, #80]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008124:	fa22 f303 	lsr.w	r3, r2, r3
 8008128:	637b      	str	r3, [r7, #52]	; 0x34
 800812a:	e011      	b.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800812c:	4b10      	ldr	r3, [pc, #64]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008138:	d106      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008140:	d102      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008142:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008144:	637b      	str	r3, [r7, #52]	; 0x34
 8008146:	e003      	b.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800814c:	f001 b8bf 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008150:	f001 b8bd 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008154:	4b06      	ldr	r3, [pc, #24]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008156:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800815a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800815e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10c      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008166:	f7fc f989 	bl	800447c <HAL_RCC_GetPCLK3Freq>
 800816a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800816c:	f001 b8af 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008170:	44020c00 	.word	0x44020c00
 8008174:	03d09000 	.word	0x03d09000
 8008178:	003d0900 	.word	0x003d0900
 800817c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008186:	d108      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008188:	f107 0308 	add.w	r3, r7, #8
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe fbe9 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008196:	f001 b89a 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800819a:	4b9f      	ldr	r3, [pc, #636]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d10d      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081ac:	d109      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081ae:	4b9a      	ldr	r3, [pc, #616]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	08db      	lsrs	r3, r3, #3
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	4a98      	ldr	r2, [pc, #608]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80081ba:	fa22 f303 	lsr.w	r3, r2, r3
 80081be:	637b      	str	r3, [r7, #52]	; 0x34
 80081c0:	e011      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80081c2:	4b95      	ldr	r3, [pc, #596]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ce:	d106      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081d6:	d102      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80081d8:	4b91      	ldr	r3, [pc, #580]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80081da:	637b      	str	r3, [r7, #52]	; 0x34
 80081dc:	e003      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081e2:	f001 b874 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081e6:	f001 b872 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80081ea:	4b8b      	ldr	r3, [pc, #556]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80081f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80081f4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80081fc:	f7fc f93e 	bl	800447c <HAL_RCC_GetPCLK3Freq>
 8008200:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008202:	f001 b864 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800820c:	d108      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800820e:	f107 0308 	add.w	r3, r7, #8
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fba6 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800821c:	f001 b857 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008220:	4b7d      	ldr	r3, [pc, #500]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0302 	and.w	r3, r3, #2
 8008228:	2b02      	cmp	r3, #2
 800822a:	d10d      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008232:	d109      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008234:	4b78      	ldr	r3, [pc, #480]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	08db      	lsrs	r3, r3, #3
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	4a77      	ldr	r2, [pc, #476]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
 8008244:	637b      	str	r3, [r7, #52]	; 0x34
 8008246:	e011      	b.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008248:	4b73      	ldr	r3, [pc, #460]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008254:	d106      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800825c:	d102      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800825e:	4b70      	ldr	r3, [pc, #448]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008260:	637b      	str	r3, [r7, #52]	; 0x34
 8008262:	e003      	b.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008268:	f001 b831 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800826c:	f001 b82f 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008270:	4b69      	ldr	r3, [pc, #420]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008272:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008276:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800827a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	2b00      	cmp	r3, #0
 8008280:	d104      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008282:	f7fc f8cf 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8008286:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008288:	f001 b821 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008292:	d108      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008294:	f107 0308 	add.w	r3, r7, #8
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe fb63 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082a2:	f001 b814 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80082a6:	4b5c      	ldr	r3, [pc, #368]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d10e      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082b8:	d10a      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082ba:	4b57      	ldr	r3, [pc, #348]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	08db      	lsrs	r3, r3, #3
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	4a55      	ldr	r2, [pc, #340]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80082c6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082cc:	f000 bfff 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082d4:	f000 bffb 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80082d8:	4b4f      	ldr	r3, [pc, #316]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80082da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80082de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082e2:	633b      	str	r3, [r7, #48]	; 0x30
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80082ea:	d056      	beq.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80082f2:	f200 808b 	bhi.w	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082fc:	d03e      	beq.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008304:	f200 8082 	bhi.w	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800830e:	d027      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008316:	d879      	bhi.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800831e:	d017      	beq.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008326:	d871      	bhi.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008334:	d004      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008336:	e069      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008338:	f7fc f8a0 	bl	800447c <HAL_RCC_GetPCLK3Freq>
 800833c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800833e:	e068      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008340:	f107 0314 	add.w	r3, r7, #20
 8008344:	4618      	mov	r0, r3
 8008346:	f7fe f9a3 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800834e:	e060      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008350:	f107 0308 	add.w	r3, r7, #8
 8008354:	4618      	mov	r0, r3
 8008356:	f7fe fb05 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800835e:	e058      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008360:	4b2d      	ldr	r3, [pc, #180]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b02      	cmp	r3, #2
 800836c:	d103      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800836e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008374:	e04d      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800837a:	e04a      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800837c:	4b26      	ldr	r3, [pc, #152]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800837e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800838a:	d103      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800838c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008390:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008392:	e03e      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008398:	e03b      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800839a:	4b1f      	ldr	r3, [pc, #124]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800839c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80083a4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083a6:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d10c      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80083b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d109      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083b8:	4b17      	ldr	r3, [pc, #92]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	08db      	lsrs	r3, r3, #3
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	4a16      	ldr	r2, [pc, #88]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ca:	e01e      	b.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083cc:	4b12      	ldr	r3, [pc, #72]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d8:	d106      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80083da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e0:	d102      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80083e2:	4b0f      	ldr	r3, [pc, #60]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
 80083e6:	e010      	b.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083e8:	4b0b      	ldr	r3, [pc, #44]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083f4:	d106      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083fc:	d102      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
 8008402:	e002      	b.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008408:	e003      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800840a:	e002      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008410:	bf00      	nop
          }
        }
        break;
 8008412:	f000 bf5c 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008416:	bf00      	nop
 8008418:	44020c00 	.word	0x44020c00
 800841c:	03d09000 	.word	0x03d09000
 8008420:	003d0900 	.word	0x003d0900
 8008424:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008428:	4b9e      	ldr	r3, [pc, #632]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800842a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800842e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008432:	633b      	str	r3, [r7, #48]	; 0x30
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800843a:	d056      	beq.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008442:	f200 808b 	bhi.w	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800844c:	d03e      	beq.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008454:	f200 8082 	bhi.w	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800845e:	d027      	beq.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008466:	d879      	bhi.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846e:	d017      	beq.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008476:	d871      	bhi.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	2b00      	cmp	r3, #0
 800847c:	d004      	beq.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008484:	d004      	beq.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008486:	e069      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008488:	f7fb ffcc 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 800848c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800848e:	e068      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008490:	f107 0314 	add.w	r3, r7, #20
 8008494:	4618      	mov	r0, r3
 8008496:	f7fe f8fb 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800849e:	e060      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084a0:	f107 0308 	add.w	r3, r7, #8
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fe fa5d 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084ae:	e058      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084b0:	4b7c      	ldr	r3, [pc, #496]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d103      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80084be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084c2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084c4:	e04d      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084ca:	e04a      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80084cc:	4b75      	ldr	r3, [pc, #468]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084da:	d103      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80084dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084e2:	e03e      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084e8:	e03b      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084ea:	4b6e      	ldr	r3, [pc, #440]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084f0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80084f4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084f6:	4b6b      	ldr	r3, [pc, #428]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d10c      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d109      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008508:	4b66      	ldr	r3, [pc, #408]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	08db      	lsrs	r3, r3, #3
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	4a65      	ldr	r2, [pc, #404]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008514:	fa22 f303 	lsr.w	r3, r2, r3
 8008518:	637b      	str	r3, [r7, #52]	; 0x34
 800851a:	e01e      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800851c:	4b61      	ldr	r3, [pc, #388]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d106      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008530:	d102      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008532:	4b5e      	ldr	r3, [pc, #376]	; (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008534:	637b      	str	r3, [r7, #52]	; 0x34
 8008536:	e010      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008538:	4b5a      	ldr	r3, [pc, #360]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008544:	d106      	bne.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800854c:	d102      	bne.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800854e:	4b58      	ldr	r3, [pc, #352]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008550:	637b      	str	r3, [r7, #52]	; 0x34
 8008552:	e002      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008558:	e003      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800855a:	e002      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008560:	bf00      	nop
          }
        }
        break;
 8008562:	f000 beb4 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008566:	4b4f      	ldr	r3, [pc, #316]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008568:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800856c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008570:	633b      	str	r3, [r7, #48]	; 0x30
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008578:	d056      	beq.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008580:	f200 808b 	bhi.w	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800858a:	d03e      	beq.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008592:	f200 8082 	bhi.w	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800859c:	d027      	beq.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80085a4:	d879      	bhi.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085ac:	d017      	beq.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085b4:	d871      	bhi.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d004      	beq.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c2:	d004      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80085c4:	e069      	b.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80085c6:	f7fb ff59 	bl	800447c <HAL_RCC_GetPCLK3Freq>
 80085ca:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80085cc:	e068      	b.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ce:	f107 0314 	add.w	r3, r7, #20
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe f85c 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085dc:	e060      	b.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe f9be 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085ec:	e058      	b.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085ee:	4b2d      	ldr	r3, [pc, #180]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80085f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d103      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80085fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008600:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008602:	e04d      	b.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008608:	e04a      	b.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800860a:	4b26      	ldr	r3, [pc, #152]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800860c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008618:	d103      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800861a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008620:	e03e      	b.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008626:	e03b      	b.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008628:	4b1e      	ldr	r3, [pc, #120]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800862a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800862e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008632:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008634:	4b1b      	ldr	r3, [pc, #108]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b02      	cmp	r3, #2
 800863e:	d10c      	bne.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d109      	bne.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008646:	4b17      	ldr	r3, [pc, #92]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	08db      	lsrs	r3, r3, #3
 800864c:	f003 0303 	and.w	r3, r3, #3
 8008650:	4a15      	ldr	r2, [pc, #84]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008652:	fa22 f303 	lsr.w	r3, r2, r3
 8008656:	637b      	str	r3, [r7, #52]	; 0x34
 8008658:	e01e      	b.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800865a:	4b12      	ldr	r3, [pc, #72]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008666:	d106      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866e:	d102      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008670:	4b0e      	ldr	r3, [pc, #56]	; (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008672:	637b      	str	r3, [r7, #52]	; 0x34
 8008674:	e010      	b.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008676:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008682:	d106      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800868a:	d102      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800868c:	4b08      	ldr	r3, [pc, #32]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800868e:	637b      	str	r3, [r7, #52]	; 0x34
 8008690:	e002      	b.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008696:	e003      	b.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008698:	e002      	b.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800869e:	bf00      	nop
          }
        }
        break;
 80086a0:	f000 be15 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086a4:	44020c00 	.word	0x44020c00
 80086a8:	03d09000 	.word	0x03d09000
 80086ac:	003d0900 	.word	0x003d0900
 80086b0:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80086b4:	4b9e      	ldr	r3, [pc, #632]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80086b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80086ba:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80086be:	633b      	str	r3, [r7, #48]	; 0x30
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80086c6:	d056      	beq.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80086ce:	f200 808b 	bhi.w	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086d8:	d03e      	beq.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086e0:	f200 8082 	bhi.w	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086ea:	d027      	beq.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086f2:	d879      	bhi.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086fa:	d017      	beq.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008702:	d871      	bhi.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	2b00      	cmp	r3, #0
 8008708:	d004      	beq.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008710:	d004      	beq.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008712:	e069      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008714:	f7fb feb2 	bl	800447c <HAL_RCC_GetPCLK3Freq>
 8008718:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800871a:	e068      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800871c:	f107 0314 	add.w	r3, r7, #20
 8008720:	4618      	mov	r0, r3
 8008722:	f7fd ffb5 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800872a:	e060      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800872c:	f107 0308 	add.w	r3, r7, #8
 8008730:	4618      	mov	r0, r3
 8008732:	f7fe f917 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800873a:	e058      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800873c:	4b7c      	ldr	r3, [pc, #496]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800873e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b02      	cmp	r3, #2
 8008748:	d103      	bne.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800874a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800874e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008750:	e04d      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008756:	e04a      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008758:	4b75      	ldr	r3, [pc, #468]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800875a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800875e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008766:	d103      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008768:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800876e:	e03e      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008774:	e03b      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008776:	4b6e      	ldr	r3, [pc, #440]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800877c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008780:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008782:	4b6b      	ldr	r3, [pc, #428]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b02      	cmp	r3, #2
 800878c:	d10c      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	2b00      	cmp	r3, #0
 8008792:	d109      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008794:	4b66      	ldr	r3, [pc, #408]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	08db      	lsrs	r3, r3, #3
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	4a65      	ldr	r2, [pc, #404]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80087a0:	fa22 f303 	lsr.w	r3, r2, r3
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
 80087a6:	e01e      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087a8:	4b61      	ldr	r3, [pc, #388]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b4:	d106      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80087b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087bc:	d102      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087be:	4b5e      	ldr	r3, [pc, #376]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
 80087c2:	e010      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087c4:	4b5a      	ldr	r3, [pc, #360]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087d0:	d106      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80087d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087d8:	d102      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80087da:	4b58      	ldr	r3, [pc, #352]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
 80087de:	e002      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80087e4:	e003      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80087e6:	e002      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087ec:	bf00      	nop
          }
        }
        break;
 80087ee:	f000 bd6e 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80087f2:	4b4f      	ldr	r3, [pc, #316]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80087f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80087f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80087fc:	633b      	str	r3, [r7, #48]	; 0x30
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008804:	d056      	beq.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800880c:	f200 808b 	bhi.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008816:	d03e      	beq.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800881e:	f200 8082 	bhi.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008828:	d027      	beq.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008830:	d879      	bhi.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008838:	d017      	beq.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008840:	d871      	bhi.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800884e:	d004      	beq.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008850:	e069      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008852:	f7fb fe13 	bl	800447c <HAL_RCC_GetPCLK3Freq>
 8008856:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008858:	e068      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800885a:	f107 0314 	add.w	r3, r7, #20
 800885e:	4618      	mov	r0, r3
 8008860:	f7fd ff16 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008868:	e060      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800886a:	f107 0308 	add.w	r3, r7, #8
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe f878 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008878:	e058      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800887a:	4b2d      	ldr	r3, [pc, #180]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800887c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b02      	cmp	r3, #2
 8008886:	d103      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800888e:	e04d      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008894:	e04a      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008896:	4b26      	ldr	r3, [pc, #152]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800889c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088a4:	d103      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80088a6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80088aa:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80088ac:	e03e      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088b2:	e03b      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088b4:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088ba:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80088be:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088c0:	4b1b      	ldr	r3, [pc, #108]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d10c      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088d2:	4b17      	ldr	r3, [pc, #92]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	08db      	lsrs	r3, r3, #3
 80088d8:	f003 0303 	and.w	r3, r3, #3
 80088dc:	4a15      	ldr	r2, [pc, #84]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80088de:	fa22 f303 	lsr.w	r3, r2, r3
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
 80088e4:	e01e      	b.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088e6:	4b12      	ldr	r3, [pc, #72]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f2:	d106      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fa:	d102      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80088fc:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80088fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008900:	e010      	b.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008902:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800890a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800890e:	d106      	bne.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008916:	d102      	bne.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008918:	4b08      	ldr	r3, [pc, #32]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800891a:	637b      	str	r3, [r7, #52]	; 0x34
 800891c:	e002      	b.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008922:	e003      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008924:	e002      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800892a:	bf00      	nop
          }
        }
        break;
 800892c:	f000 bccf 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008930:	44020c00 	.word	0x44020c00
 8008934:	03d09000 	.word	0x03d09000
 8008938:	003d0900 	.word	0x003d0900
 800893c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008940:	4b9e      	ldr	r3, [pc, #632]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008942:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008946:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800894a:	633b      	str	r3, [r7, #48]	; 0x30
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008952:	d056      	beq.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800895a:	f200 808b 	bhi.w	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008964:	d03e      	beq.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800896c:	f200 8082 	bhi.w	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008976:	d027      	beq.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800897e:	d879      	bhi.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008986:	d017      	beq.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800898e:	d871      	bhi.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800899c:	d004      	beq.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800899e:	e069      	b.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80089a0:	f7fb fd6c 	bl	800447c <HAL_RCC_GetPCLK3Freq>
 80089a4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80089a6:	e068      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089a8:	f107 0314 	add.w	r3, r7, #20
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fd fe6f 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089b6:	e060      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b8:	f107 0308 	add.w	r3, r7, #8
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fd ffd1 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089c6:	e058      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80089c8:	4b7c      	ldr	r3, [pc, #496]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80089ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d103      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80089d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089da:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80089dc:	e04d      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089e2:	e04a      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80089e4:	4b75      	ldr	r3, [pc, #468]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80089e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089f2:	d103      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80089f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80089f8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80089fa:	e03e      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008a00:	e03b      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a02:	4b6e      	ldr	r3, [pc, #440]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a08:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008a0c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a0e:	4b6b      	ldr	r3, [pc, #428]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d10c      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d109      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a20:	4b66      	ldr	r3, [pc, #408]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	08db      	lsrs	r3, r3, #3
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	4a65      	ldr	r2, [pc, #404]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
 8008a32:	e01e      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a34:	4b61      	ldr	r3, [pc, #388]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a40:	d106      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a48:	d102      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a4a:	4b5e      	ldr	r3, [pc, #376]	; (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a4e:	e010      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a50:	4b5a      	ldr	r3, [pc, #360]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a5c:	d106      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a64:	d102      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008a66:	4b58      	ldr	r3, [pc, #352]	; (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008a68:	637b      	str	r3, [r7, #52]	; 0x34
 8008a6a:	e002      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008a70:	e003      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8008a72:	e002      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008a78:	bf00      	nop
          }
        }
        break;
 8008a7a:	f000 bc28 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008a7e:	4b4f      	ldr	r3, [pc, #316]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a88:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008a8a:	4b4c      	ldr	r3, [pc, #304]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a96:	d106      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d103      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8008a9e:	4b4a      	ldr	r3, [pc, #296]	; (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008aa0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008aa2:	f000 bc14 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aac:	d108      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aae:	f107 0320 	add.w	r3, r7, #32
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fd fc82 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008abc:	f000 bc07 	b.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac6:	d107      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ac8:	f107 0314 	add.w	r3, r7, #20
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fd fddf 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ad6:	e3fa      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008adc:	e3f7      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008ade:	4b37      	ldr	r3, [pc, #220]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ae4:	f003 0307 	and.w	r3, r3, #7
 8008ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d861      	bhi.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8008af0:	a201      	add	r2, pc, #4	; (adr r2, 8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8008af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af6:	bf00      	nop
 8008af8:	08008b0d 	.word	0x08008b0d
 8008afc:	08008b1d 	.word	0x08008b1d
 8008b00:	08008b2d 	.word	0x08008b2d
 8008b04:	08008b3d 	.word	0x08008b3d
 8008b08:	08008b43 	.word	0x08008b43
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b0c:	f107 0320 	add.w	r3, r7, #32
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fd fc53 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b1a:	e04e      	b.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b1c:	f107 0314 	add.w	r3, r7, #20
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fd fdb5 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b2a:	e046      	b.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b2c:	f107 0308 	add.w	r3, r7, #8
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fd ff17 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b3a:	e03e      	b.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008b3c:	4b23      	ldr	r3, [pc, #140]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8008b3e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b40:	e03b      	b.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b42:	4b1e      	ldr	r3, [pc, #120]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008b48:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b4e:	4b1b      	ldr	r3, [pc, #108]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d10c      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d109      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b60:	4b16      	ldr	r3, [pc, #88]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	08db      	lsrs	r3, r3, #3
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	4a15      	ldr	r2, [pc, #84]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b70:	637b      	str	r3, [r7, #52]	; 0x34
 8008b72:	e01e      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b74:	4b11      	ldr	r3, [pc, #68]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b80:	d106      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b88:	d102      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008b8a:	4b0e      	ldr	r3, [pc, #56]	; (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b8e:	e010      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b90:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b9c:	d106      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ba4:	d102      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008ba6:	4b08      	ldr	r3, [pc, #32]	; (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8008baa:	e002      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008bb0:	e003      	b.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8008bb2:	e002      	b.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bb8:	bf00      	nop
          }
        }
        break;
 8008bba:	e388      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bbc:	44020c00 	.word	0x44020c00
 8008bc0:	03d09000 	.word	0x03d09000
 8008bc4:	003d0900 	.word	0x003d0900
 8008bc8:	007a1200 	.word	0x007a1200
 8008bcc:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008bd0:	4ba9      	ldr	r3, [pc, #676]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bda:	633b      	str	r3, [r7, #48]	; 0x30
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	f200 809a 	bhi.w	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8008be4:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8008be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bea:	bf00      	nop
 8008bec:	08008c71 	.word	0x08008c71
 8008bf0:	08008d19 	.word	0x08008d19
 8008bf4:	08008d19 	.word	0x08008d19
 8008bf8:	08008d19 	.word	0x08008d19
 8008bfc:	08008d19 	.word	0x08008d19
 8008c00:	08008d19 	.word	0x08008d19
 8008c04:	08008d19 	.word	0x08008d19
 8008c08:	08008d19 	.word	0x08008d19
 8008c0c:	08008c81 	.word	0x08008c81
 8008c10:	08008d19 	.word	0x08008d19
 8008c14:	08008d19 	.word	0x08008d19
 8008c18:	08008d19 	.word	0x08008d19
 8008c1c:	08008d19 	.word	0x08008d19
 8008c20:	08008d19 	.word	0x08008d19
 8008c24:	08008d19 	.word	0x08008d19
 8008c28:	08008d19 	.word	0x08008d19
 8008c2c:	08008c91 	.word	0x08008c91
 8008c30:	08008d19 	.word	0x08008d19
 8008c34:	08008d19 	.word	0x08008d19
 8008c38:	08008d19 	.word	0x08008d19
 8008c3c:	08008d19 	.word	0x08008d19
 8008c40:	08008d19 	.word	0x08008d19
 8008c44:	08008d19 	.word	0x08008d19
 8008c48:	08008d19 	.word	0x08008d19
 8008c4c:	08008ca1 	.word	0x08008ca1
 8008c50:	08008d19 	.word	0x08008d19
 8008c54:	08008d19 	.word	0x08008d19
 8008c58:	08008d19 	.word	0x08008d19
 8008c5c:	08008d19 	.word	0x08008d19
 8008c60:	08008d19 	.word	0x08008d19
 8008c64:	08008d19 	.word	0x08008d19
 8008c68:	08008d19 	.word	0x08008d19
 8008c6c:	08008ca7 	.word	0x08008ca7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c70:	f107 0320 	add.w	r3, r7, #32
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fd fba1 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c7e:	e04e      	b.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c80:	f107 0314 	add.w	r3, r7, #20
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fd fd03 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c8e:	e046      	b.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c90:	f107 0308 	add.w	r3, r7, #8
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fd fe65 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c9e:	e03e      	b.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008ca0:	4b76      	ldr	r3, [pc, #472]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008ca2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ca4:	e03b      	b.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ca6:	4b74      	ldr	r3, [pc, #464]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008cac:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cb2:	4b71      	ldr	r3, [pc, #452]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d10c      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d109      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cc4:	4b6c      	ldr	r3, [pc, #432]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	08db      	lsrs	r3, r3, #3
 8008cca:	f003 0303 	and.w	r3, r3, #3
 8008cce:	4a6c      	ldr	r2, [pc, #432]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd6:	e01e      	b.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cd8:	4b67      	ldr	r3, [pc, #412]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ce4:	d106      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8008ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cec:	d102      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008cee:	4b65      	ldr	r3, [pc, #404]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8008cf2:	e010      	b.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cf4:	4b60      	ldr	r3, [pc, #384]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d00:	d106      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d08:	d102      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d0a:	4b5f      	ldr	r3, [pc, #380]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d0e:	e002      	b.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008d14:	e003      	b.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8008d16:	e002      	b.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d1c:	bf00      	nop
          }
        }
        break;
 8008d1e:	e2d6      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008d20:	4b55      	ldr	r3, [pc, #340]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d26:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d32:	d031      	beq.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d3a:	d866      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8008d40:	d027      	beq.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	2bc0      	cmp	r3, #192	; 0xc0
 8008d46:	d860      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	2b80      	cmp	r3, #128	; 0x80
 8008d4c:	d019      	beq.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	2b80      	cmp	r3, #128	; 0x80
 8008d52:	d85a      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	2b40      	cmp	r3, #64	; 0x40
 8008d5e:	d008      	beq.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008d60:	e053      	b.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d62:	f107 0320 	add.w	r3, r7, #32
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fd fb28 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d70:	e04e      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d72:	f107 0314 	add.w	r3, r7, #20
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fd fc8a 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d80:	e046      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d82:	f107 0308 	add.w	r3, r7, #8
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fd fdec 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d90:	e03e      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008d92:	4b3a      	ldr	r3, [pc, #232]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008d94:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d96:	e03b      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d98:	4b37      	ldr	r3, [pc, #220]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008d9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d9e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008da2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008da4:	4b34      	ldr	r3, [pc, #208]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0302 	and.w	r3, r3, #2
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d10c      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d109      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008db6:	4b30      	ldr	r3, [pc, #192]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	08db      	lsrs	r3, r3, #3
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	4a2f      	ldr	r2, [pc, #188]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc8:	e01e      	b.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dca:	4b2b      	ldr	r3, [pc, #172]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dd6:	d106      	bne.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dde:	d102      	bne.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008de0:	4b28      	ldr	r3, [pc, #160]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008de2:	637b      	str	r3, [r7, #52]	; 0x34
 8008de4:	e010      	b.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008de6:	4b24      	ldr	r3, [pc, #144]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008df2:	d106      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dfa:	d102      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008dfc:	4b22      	ldr	r3, [pc, #136]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8008e00:	e002      	b.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008e06:	e003      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008e08:	e002      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008e0e:	bf00      	nop
          }
        }
        break;
 8008e10:	e25d      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8008e12:	4b19      	ldr	r3, [pc, #100]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e18:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008e1c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d103      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008e24:	f7fb fb14 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8008e28:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008e2a:	e250      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008e2c:	4b12      	ldr	r3, [pc, #72]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e38:	d10b      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e40:	d107      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e42:	f107 0314 	add.w	r3, r7, #20
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fd fc22 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e50:	e04f      	b.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008e52:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5e:	d115      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e66:	d111      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e68:	f107 0308 	add.w	r3, r7, #8
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fd fd79 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	637b      	str	r3, [r7, #52]	; 0x34
 8008e76:	e03c      	b.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008e78:	44020c00 	.word	0x44020c00
 8008e7c:	00bb8000 	.word	0x00bb8000
 8008e80:	03d09000 	.word	0x03d09000
 8008e84:	003d0900 	.word	0x003d0900
 8008e88:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008e8c:	4b94      	ldr	r3, [pc, #592]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d10d      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008e9e:	d109      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ea0:	4b8f      	ldr	r3, [pc, #572]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	08db      	lsrs	r3, r3, #3
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	4a8e      	ldr	r2, [pc, #568]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb2:	e01e      	b.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008eb4:	4b8a      	ldr	r3, [pc, #552]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec0:	d106      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ec8:	d102      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8008eca:	4b87      	ldr	r3, [pc, #540]	; (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ece:	e010      	b.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008ed0:	4b83      	ldr	r3, [pc, #524]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008edc:	d106      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008ee4:	d102      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8008ee6:	4b81      	ldr	r3, [pc, #516]	; (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eea:	e002      	b.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ef0:	e1ed      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ef2:	e1ec      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008ef4:	4b7a      	ldr	r3, [pc, #488]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008efa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008efe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d103      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008f06:	f7fb fab9 	bl	800447c <HAL_RCC_GetPCLK3Freq>
 8008f0a:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008f0c:	e1df      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008f0e:	4b74      	ldr	r3, [pc, #464]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f1a:	d10b      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f22:	d107      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f24:	f107 0314 	add.w	r3, r7, #20
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fd fbb1 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	637b      	str	r3, [r7, #52]	; 0x34
 8008f32:	e045      	b.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008f34:	4b6a      	ldr	r3, [pc, #424]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f40:	d10b      	bne.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f48:	d107      	bne.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f4a:	f107 0308 	add.w	r3, r7, #8
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fd fd08 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
 8008f58:	e032      	b.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008f5a:	4b61      	ldr	r3, [pc, #388]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d10d      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f6c:	d109      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f6e:	4b5c      	ldr	r3, [pc, #368]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	08db      	lsrs	r3, r3, #3
 8008f74:	f003 0303 	and.w	r3, r3, #3
 8008f78:	4a5a      	ldr	r2, [pc, #360]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f80:	e01e      	b.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008f82:	4b57      	ldr	r3, [pc, #348]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f8e:	d106      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f96:	d102      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008f98:	4b53      	ldr	r3, [pc, #332]	; (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f9c:	e010      	b.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008f9e:	4b50      	ldr	r3, [pc, #320]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008faa:	d106      	bne.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008fb2:	d102      	bne.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008fb4:	4b4d      	ldr	r3, [pc, #308]	; (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb8:	e002      	b.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fbe:	e186      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fc0:	e185      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008fc2:	4b47      	ldr	r3, [pc, #284]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fc8:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008fcc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008fd4:	f7fb fa3c 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8008fd8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008fda:	e178      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008fdc:	4b40      	ldr	r3, [pc, #256]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fe8:	d10b      	bne.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ff0:	d107      	bne.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff2:	f107 0314 	add.w	r3, r7, #20
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fd fb4a 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8009000:	e045      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009002:	4b37      	ldr	r3, [pc, #220]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800900a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800900e:	d10b      	bne.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009016:	d107      	bne.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009018:	f107 0308 	add.w	r3, r7, #8
 800901c:	4618      	mov	r0, r3
 800901e:	f7fd fca1 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	637b      	str	r3, [r7, #52]	; 0x34
 8009026:	e032      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009028:	4b2d      	ldr	r3, [pc, #180]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b02      	cmp	r3, #2
 8009032:	d10d      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800903a:	d109      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800903c:	4b28      	ldr	r3, [pc, #160]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	08db      	lsrs	r3, r3, #3
 8009042:	f003 0303 	and.w	r3, r3, #3
 8009046:	4a27      	ldr	r2, [pc, #156]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009048:	fa22 f303 	lsr.w	r3, r2, r3
 800904c:	637b      	str	r3, [r7, #52]	; 0x34
 800904e:	e01e      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009050:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800905c:	d106      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009064:	d102      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009066:	4b20      	ldr	r3, [pc, #128]	; (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009068:	637b      	str	r3, [r7, #52]	; 0x34
 800906a:	e010      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800906c:	4b1c      	ldr	r3, [pc, #112]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009078:	d106      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009080:	d102      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009082:	4b1a      	ldr	r3, [pc, #104]	; (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009084:	637b      	str	r3, [r7, #52]	; 0x34
 8009086:	e002      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800908c:	e11f      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800908e:	e11e      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009090:	4b13      	ldr	r3, [pc, #76]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009092:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	633b      	str	r3, [r7, #48]	; 0x30
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d85f      	bhi.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80090a2:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	080090b9 	.word	0x080090b9
 80090ac:	080090c1 	.word	0x080090c1
 80090b0:	080090d1 	.word	0x080090d1
 80090b4:	080090f1 	.word	0x080090f1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80090b8:	f7fb f998 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 80090bc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80090be:	e053      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090c0:	f107 0320 	add.w	r3, r7, #32
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fd f979 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090ce:	e04b      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d0:	f107 0314 	add.w	r3, r7, #20
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fd fadb 	bl	8006690 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090de:	e043      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80090e0:	44020c00 	.word	0x44020c00
 80090e4:	03d09000 	.word	0x03d09000
 80090e8:	003d0900 	.word	0x003d0900
 80090ec:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090f0:	4b79      	ldr	r3, [pc, #484]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80090f6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80090fa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090fc:	4b76      	ldr	r3, [pc, #472]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0302 	and.w	r3, r3, #2
 8009104:	2b02      	cmp	r3, #2
 8009106:	d10c      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	2b00      	cmp	r3, #0
 800910c:	d109      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800910e:	4b72      	ldr	r3, [pc, #456]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	08db      	lsrs	r3, r3, #3
 8009114:	f003 0303 	and.w	r3, r3, #3
 8009118:	4a70      	ldr	r2, [pc, #448]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800911a:	fa22 f303 	lsr.w	r3, r2, r3
 800911e:	637b      	str	r3, [r7, #52]	; 0x34
 8009120:	e01e      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009122:	4b6d      	ldr	r3, [pc, #436]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800912a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800912e:	d106      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009136:	d102      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009138:	4b69      	ldr	r3, [pc, #420]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800913a:	637b      	str	r3, [r7, #52]	; 0x34
 800913c:	e010      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800913e:	4b66      	ldr	r3, [pc, #408]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800914a:	d106      	bne.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009152:	d102      	bne.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009154:	4b63      	ldr	r3, [pc, #396]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
 8009158:	e002      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800915a:	2300      	movs	r3, #0
 800915c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800915e:	e003      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009160:	e002      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009166:	bf00      	nop
          }
        }
        break;
 8009168:	e0b1      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800916a:	4b5b      	ldr	r3, [pc, #364]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800916c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009170:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009174:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009176:	4b58      	ldr	r3, [pc, #352]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	2b02      	cmp	r3, #2
 8009182:	d106      	bne.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	2b00      	cmp	r3, #0
 8009188:	d103      	bne.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800918a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800918e:	637b      	str	r3, [r7, #52]	; 0x34
 8009190:	e01f      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009192:	4b51      	ldr	r3, [pc, #324]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800919c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a0:	d106      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	2b40      	cmp	r3, #64	; 0x40
 80091a6:	d103      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80091a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80091ac:	637b      	str	r3, [r7, #52]	; 0x34
 80091ae:	e010      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80091b0:	4b49      	ldr	r3, [pc, #292]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091bc:	d106      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	2b80      	cmp	r3, #128	; 0x80
 80091c2:	d103      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 80091c4:	f248 0312 	movw	r3, #32786	; 0x8012
 80091c8:	637b      	str	r3, [r7, #52]	; 0x34
 80091ca:	e002      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80091d0:	e07d      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091d2:	e07c      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80091d4:	4b40      	ldr	r3, [pc, #256]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80091d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80091da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80091de:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80091e0:	4b3d      	ldr	r3, [pc, #244]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ec:	d105      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80091ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80091f4:	4b3c      	ldr	r3, [pc, #240]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80091f6:	637b      	str	r3, [r7, #52]	; 0x34
 80091f8:	e031      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80091fa:	4b37      	ldr	r3, [pc, #220]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009206:	d10a      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	2b10      	cmp	r3, #16
 800920c:	d107      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800920e:	f107 0320 	add.w	r3, r7, #32
 8009212:	4618      	mov	r0, r3
 8009214:	f7fd f8d2 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	637b      	str	r3, [r7, #52]	; 0x34
 800921c:	e01f      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800921e:	4b2e      	ldr	r3, [pc, #184]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b02      	cmp	r3, #2
 800922a:	d106      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	2b20      	cmp	r3, #32
 8009230:	d103      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009236:	637b      	str	r3, [r7, #52]	; 0x34
 8009238:	e011      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800923a:	4b27      	ldr	r3, [pc, #156]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800923c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009248:	d106      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	2b30      	cmp	r3, #48	; 0x30
 800924e:	d103      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009250:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
 8009256:	e002      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800925c:	e037      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800925e:	e036      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009260:	4b1d      	ldr	r3, [pc, #116]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009262:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009266:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800926a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	2b10      	cmp	r3, #16
 8009270:	d107      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009272:	f107 0320 	add.w	r3, r7, #32
 8009276:	4618      	mov	r0, r3
 8009278:	f7fd f8a0 	bl	80063bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009280:	e025      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009282:	4b15      	ldr	r3, [pc, #84]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800928a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800928e:	d10a      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	2b20      	cmp	r3, #32
 8009294:	d107      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009296:	f107 0308 	add.w	r3, r7, #8
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd fb62 	bl	8006964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	637b      	str	r3, [r7, #52]	; 0x34
 80092a4:	e00f      	b.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b2:	d105      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	2b30      	cmp	r3, #48	; 0x30
 80092b8:	d102      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80092ba:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80092bc:	637b      	str	r3, [r7, #52]	; 0x34
 80092be:	e002      	b.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 80092c4:	e003      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092c6:	e002      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092cc:	bf00      	nop
    }
  }

  return (frequency);
 80092ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	373c      	adds	r7, #60	; 0x3c
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd90      	pop	{r4, r7, pc}
 80092d8:	44020c00 	.word	0x44020c00
 80092dc:	03d09000 	.word	0x03d09000
 80092e0:	003d0900 	.word	0x003d0900
 80092e4:	007a1200 	.word	0x007a1200
 80092e8:	02dc6c00 	.word	0x02dc6c00

080092ec <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80092f4:	4b48      	ldr	r3, [pc, #288]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a47      	ldr	r2, [pc, #284]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80092fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009300:	f7f8 fa02 	bl	8001708 <HAL_GetTick>
 8009304:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009306:	e008      	b.n	800931a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009308:	f7f8 f9fe 	bl	8001708 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d901      	bls.n	800931a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e07a      	b.n	8009410 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800931a:	4b3f      	ldr	r3, [pc, #252]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1f0      	bne.n	8009308 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009326:	4b3c      	ldr	r3, [pc, #240]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	6811      	ldr	r1, [r2, #0]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6852      	ldr	r2, [r2, #4]
 800933a:	0212      	lsls	r2, r2, #8
 800933c:	430a      	orrs	r2, r1
 800933e:	4936      	ldr	r1, [pc, #216]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 8009340:	4313      	orrs	r3, r2
 8009342:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	3b01      	subs	r3, #1
 800934a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	3b01      	subs	r3, #1
 8009354:	025b      	lsls	r3, r3, #9
 8009356:	b29b      	uxth	r3, r3
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	3b01      	subs	r3, #1
 8009360:	041b      	lsls	r3, r3, #16
 8009362:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009366:	431a      	orrs	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	3b01      	subs	r3, #1
 800936e:	061b      	lsls	r3, r3, #24
 8009370:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009374:	4928      	ldr	r1, [pc, #160]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 8009376:	4313      	orrs	r3, r2
 8009378:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800937a:	4b27      	ldr	r3, [pc, #156]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 800937c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937e:	f023 020c 	bic.w	r2, r3, #12
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	4924      	ldr	r1, [pc, #144]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 8009388:	4313      	orrs	r3, r2
 800938a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800938c:	4b22      	ldr	r3, [pc, #136]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	f023 0220 	bic.w	r2, r3, #32
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	69db      	ldr	r3, [r3, #28]
 8009398:	491f      	ldr	r1, [pc, #124]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 800939a:	4313      	orrs	r3, r2
 800939c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800939e:	4b1e      	ldr	r3, [pc, #120]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80093a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	491c      	ldr	r1, [pc, #112]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80093ac:	4b1a      	ldr	r3, [pc, #104]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	4a19      	ldr	r2, [pc, #100]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80093b2:	f023 0310 	bic.w	r3, r3, #16
 80093b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80093b8:	4b17      	ldr	r3, [pc, #92]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80093ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6a12      	ldr	r2, [r2, #32]
 80093c8:	00d2      	lsls	r2, r2, #3
 80093ca:	4913      	ldr	r1, [pc, #76]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80093d0:	4b11      	ldr	r3, [pc, #68]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	4a10      	ldr	r2, [pc, #64]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80093d6:	f043 0310 	orr.w	r3, r3, #16
 80093da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80093dc:	4b0e      	ldr	r3, [pc, #56]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a0d      	ldr	r2, [pc, #52]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 80093e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80093e8:	f7f8 f98e 	bl	8001708 <HAL_GetTick>
 80093ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093ee:	e008      	b.n	8009402 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093f0:	f7f8 f98a 	bl	8001708 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e006      	b.n	8009410 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009402:	4b05      	ldr	r3, [pc, #20]	; (8009418 <RCCEx_PLL2_Config+0x12c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f0      	beq.n	80093f0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800940e:	2300      	movs	r3, #0

}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	44020c00 	.word	0x44020c00

0800941c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009424:	4b48      	ldr	r3, [pc, #288]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a47      	ldr	r2, [pc, #284]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 800942a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800942e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009430:	f7f8 f96a 	bl	8001708 <HAL_GetTick>
 8009434:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009436:	e008      	b.n	800944a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009438:	f7f8 f966 	bl	8001708 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b02      	cmp	r3, #2
 8009444:	d901      	bls.n	800944a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e07a      	b.n	8009540 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800944a:	4b3f      	ldr	r3, [pc, #252]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1f0      	bne.n	8009438 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009456:	4b3c      	ldr	r3, [pc, #240]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 8009458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800945e:	f023 0303 	bic.w	r3, r3, #3
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	6811      	ldr	r1, [r2, #0]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	6852      	ldr	r2, [r2, #4]
 800946a:	0212      	lsls	r2, r2, #8
 800946c:	430a      	orrs	r2, r1
 800946e:	4936      	ldr	r1, [pc, #216]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 8009470:	4313      	orrs	r3, r2
 8009472:	630b      	str	r3, [r1, #48]	; 0x30
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	3b01      	subs	r3, #1
 800947a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	3b01      	subs	r3, #1
 8009484:	025b      	lsls	r3, r3, #9
 8009486:	b29b      	uxth	r3, r3
 8009488:	431a      	orrs	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	3b01      	subs	r3, #1
 8009490:	041b      	lsls	r3, r3, #16
 8009492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	3b01      	subs	r3, #1
 800949e:	061b      	lsls	r3, r3, #24
 80094a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094a4:	4928      	ldr	r1, [pc, #160]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80094aa:	4b27      	ldr	r3, [pc, #156]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ae:	f023 020c 	bic.w	r2, r3, #12
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	4924      	ldr	r1, [pc, #144]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80094bc:	4b22      	ldr	r3, [pc, #136]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c0:	f023 0220 	bic.w	r2, r3, #32
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	491f      	ldr	r1, [pc, #124]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80094ce:	4b1e      	ldr	r3, [pc, #120]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	491c      	ldr	r1, [pc, #112]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80094dc:	4b1a      	ldr	r3, [pc, #104]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e0:	4a19      	ldr	r2, [pc, #100]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094e2:	f023 0310 	bic.w	r3, r3, #16
 80094e6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80094e8:	4b17      	ldr	r3, [pc, #92]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6a12      	ldr	r2, [r2, #32]
 80094f8:	00d2      	lsls	r2, r2, #3
 80094fa:	4913      	ldr	r1, [pc, #76]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 8009502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009504:	4a10      	ldr	r2, [pc, #64]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 8009506:	f043 0310 	orr.w	r3, r3, #16
 800950a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800950c:	4b0e      	ldr	r3, [pc, #56]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0d      	ldr	r2, [pc, #52]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 8009512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009516:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009518:	f7f8 f8f6 	bl	8001708 <HAL_GetTick>
 800951c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800951e:	e008      	b.n	8009532 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009520:	f7f8 f8f2 	bl	8001708 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d901      	bls.n	8009532 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e006      	b.n	8009540 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009532:	4b05      	ldr	r3, [pc, #20]	; (8009548 <RCCEx_PLL3_Config+0x12c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0f0      	beq.n	8009520 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	44020c00 	.word	0x44020c00

0800954c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e041      	b.n	80095e4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d106      	bne.n	800957a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7f7 feb9 	bl	80012ec <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2202      	movs	r2, #2
 800957e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3304      	adds	r3, #4
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f000 f82d 	bl	80095ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0208 	bic.w	r2, r2, #8
 80095a0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6819      	ldr	r1, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a74      	ldr	r2, [pc, #464]	; (80097d0 <TIM_Base_SetConfig+0x1e4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d02b      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a73      	ldr	r2, [pc, #460]	; (80097d4 <TIM_Base_SetConfig+0x1e8>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d027      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009612:	d023      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800961a:	d01f      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a6e      	ldr	r2, [pc, #440]	; (80097d8 <TIM_Base_SetConfig+0x1ec>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d01b      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a6d      	ldr	r2, [pc, #436]	; (80097dc <TIM_Base_SetConfig+0x1f0>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d017      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a6c      	ldr	r2, [pc, #432]	; (80097e0 <TIM_Base_SetConfig+0x1f4>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d013      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a6b      	ldr	r2, [pc, #428]	; (80097e4 <TIM_Base_SetConfig+0x1f8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d00f      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a6a      	ldr	r2, [pc, #424]	; (80097e8 <TIM_Base_SetConfig+0x1fc>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d00b      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a69      	ldr	r2, [pc, #420]	; (80097ec <TIM_Base_SetConfig+0x200>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d007      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a68      	ldr	r2, [pc, #416]	; (80097f0 <TIM_Base_SetConfig+0x204>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d003      	beq.n	800965c <TIM_Base_SetConfig+0x70>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a67      	ldr	r2, [pc, #412]	; (80097f4 <TIM_Base_SetConfig+0x208>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d108      	bne.n	800966e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a57      	ldr	r2, [pc, #348]	; (80097d0 <TIM_Base_SetConfig+0x1e4>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d05b      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a56      	ldr	r2, [pc, #344]	; (80097d4 <TIM_Base_SetConfig+0x1e8>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d057      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009684:	d053      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800968c:	d04f      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a51      	ldr	r2, [pc, #324]	; (80097d8 <TIM_Base_SetConfig+0x1ec>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d04b      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a50      	ldr	r2, [pc, #320]	; (80097dc <TIM_Base_SetConfig+0x1f0>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d047      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a4f      	ldr	r2, [pc, #316]	; (80097e0 <TIM_Base_SetConfig+0x1f4>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d043      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a4e      	ldr	r2, [pc, #312]	; (80097e4 <TIM_Base_SetConfig+0x1f8>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d03f      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a4d      	ldr	r2, [pc, #308]	; (80097e8 <TIM_Base_SetConfig+0x1fc>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d03b      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a4c      	ldr	r2, [pc, #304]	; (80097ec <TIM_Base_SetConfig+0x200>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d037      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a4b      	ldr	r2, [pc, #300]	; (80097f0 <TIM_Base_SetConfig+0x204>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d033      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a4a      	ldr	r2, [pc, #296]	; (80097f4 <TIM_Base_SetConfig+0x208>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d02f      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a49      	ldr	r2, [pc, #292]	; (80097f8 <TIM_Base_SetConfig+0x20c>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d02b      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a48      	ldr	r2, [pc, #288]	; (80097fc <TIM_Base_SetConfig+0x210>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d027      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a47      	ldr	r2, [pc, #284]	; (8009800 <TIM_Base_SetConfig+0x214>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d023      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a46      	ldr	r2, [pc, #280]	; (8009804 <TIM_Base_SetConfig+0x218>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d01f      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a45      	ldr	r2, [pc, #276]	; (8009808 <TIM_Base_SetConfig+0x21c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01b      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a44      	ldr	r2, [pc, #272]	; (800980c <TIM_Base_SetConfig+0x220>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d017      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a43      	ldr	r2, [pc, #268]	; (8009810 <TIM_Base_SetConfig+0x224>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d013      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a42      	ldr	r2, [pc, #264]	; (8009814 <TIM_Base_SetConfig+0x228>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d00f      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a41      	ldr	r2, [pc, #260]	; (8009818 <TIM_Base_SetConfig+0x22c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d00b      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a40      	ldr	r2, [pc, #256]	; (800981c <TIM_Base_SetConfig+0x230>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d007      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a3f      	ldr	r2, [pc, #252]	; (8009820 <TIM_Base_SetConfig+0x234>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d003      	beq.n	800972e <TIM_Base_SetConfig+0x142>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a3e      	ldr	r2, [pc, #248]	; (8009824 <TIM_Base_SetConfig+0x238>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d108      	bne.n	8009740 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	4313      	orrs	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a1a      	ldr	r2, [pc, #104]	; (80097d0 <TIM_Base_SetConfig+0x1e4>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d023      	beq.n	80097b4 <TIM_Base_SetConfig+0x1c8>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a19      	ldr	r2, [pc, #100]	; (80097d4 <TIM_Base_SetConfig+0x1e8>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d01f      	beq.n	80097b4 <TIM_Base_SetConfig+0x1c8>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a1e      	ldr	r2, [pc, #120]	; (80097f0 <TIM_Base_SetConfig+0x204>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d01b      	beq.n	80097b4 <TIM_Base_SetConfig+0x1c8>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a1d      	ldr	r2, [pc, #116]	; (80097f4 <TIM_Base_SetConfig+0x208>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d017      	beq.n	80097b4 <TIM_Base_SetConfig+0x1c8>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a22      	ldr	r2, [pc, #136]	; (8009810 <TIM_Base_SetConfig+0x224>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d013      	beq.n	80097b4 <TIM_Base_SetConfig+0x1c8>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a21      	ldr	r2, [pc, #132]	; (8009814 <TIM_Base_SetConfig+0x228>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d00f      	beq.n	80097b4 <TIM_Base_SetConfig+0x1c8>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a20      	ldr	r2, [pc, #128]	; (8009818 <TIM_Base_SetConfig+0x22c>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d00b      	beq.n	80097b4 <TIM_Base_SetConfig+0x1c8>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a1f      	ldr	r2, [pc, #124]	; (800981c <TIM_Base_SetConfig+0x230>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d007      	beq.n	80097b4 <TIM_Base_SetConfig+0x1c8>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a1e      	ldr	r2, [pc, #120]	; (8009820 <TIM_Base_SetConfig+0x234>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d003      	beq.n	80097b4 <TIM_Base_SetConfig+0x1c8>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a1d      	ldr	r2, [pc, #116]	; (8009824 <TIM_Base_SetConfig+0x238>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d103      	bne.n	80097bc <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	691a      	ldr	r2, [r3, #16]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	615a      	str	r2, [r3, #20]
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	40012c00 	.word	0x40012c00
 80097d4:	50012c00 	.word	0x50012c00
 80097d8:	40000400 	.word	0x40000400
 80097dc:	50000400 	.word	0x50000400
 80097e0:	40000800 	.word	0x40000800
 80097e4:	50000800 	.word	0x50000800
 80097e8:	40000c00 	.word	0x40000c00
 80097ec:	50000c00 	.word	0x50000c00
 80097f0:	40013400 	.word	0x40013400
 80097f4:	50013400 	.word	0x50013400
 80097f8:	40001800 	.word	0x40001800
 80097fc:	50001800 	.word	0x50001800
 8009800:	40001c00 	.word	0x40001c00
 8009804:	50001c00 	.word	0x50001c00
 8009808:	40002000 	.word	0x40002000
 800980c:	50002000 	.word	0x50002000
 8009810:	40014000 	.word	0x40014000
 8009814:	50014000 	.word	0x50014000
 8009818:	40014400 	.word	0x40014400
 800981c:	50014400 	.word	0x50014400
 8009820:	40014800 	.word	0x40014800
 8009824:	50014800 	.word	0x50014800

08009828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009838:	2b01      	cmp	r3, #1
 800983a:	d101      	bne.n	8009840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800983c:	2302      	movs	r3, #2
 800983e:	e0a1      	b.n	8009984 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2202      	movs	r2, #2
 800984c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a4a      	ldr	r2, [pc, #296]	; (8009990 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00e      	beq.n	8009888 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a49      	ldr	r2, [pc, #292]	; (8009994 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d009      	beq.n	8009888 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a47      	ldr	r2, [pc, #284]	; (8009998 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d004      	beq.n	8009888 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a46      	ldr	r2, [pc, #280]	; (800999c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d108      	bne.n	800989a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800988e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	4313      	orrs	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80098a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a34      	ldr	r2, [pc, #208]	; (8009990 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d04a      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a33      	ldr	r2, [pc, #204]	; (8009994 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d045      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d4:	d040      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098de:	d03b      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a2e      	ldr	r2, [pc, #184]	; (80099a0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d036      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a2d      	ldr	r2, [pc, #180]	; (80099a4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d031      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a2b      	ldr	r2, [pc, #172]	; (80099a8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d02c      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a2a      	ldr	r2, [pc, #168]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d027      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a28      	ldr	r2, [pc, #160]	; (80099b0 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d022      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a27      	ldr	r2, [pc, #156]	; (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d01d      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a1d      	ldr	r2, [pc, #116]	; (8009998 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d018      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a1c      	ldr	r2, [pc, #112]	; (800999c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d013      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a20      	ldr	r2, [pc, #128]	; (80099b8 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00e      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a1f      	ldr	r2, [pc, #124]	; (80099bc <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d009      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a1d      	ldr	r2, [pc, #116]	; (80099c0 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d004      	beq.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a1c      	ldr	r2, [pc, #112]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d10c      	bne.n	8009972 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800995e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	4313      	orrs	r3, r2
 8009968:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	40012c00 	.word	0x40012c00
 8009994:	50012c00 	.word	0x50012c00
 8009998:	40013400 	.word	0x40013400
 800999c:	50013400 	.word	0x50013400
 80099a0:	40000400 	.word	0x40000400
 80099a4:	50000400 	.word	0x50000400
 80099a8:	40000800 	.word	0x40000800
 80099ac:	50000800 	.word	0x50000800
 80099b0:	40000c00 	.word	0x40000c00
 80099b4:	50000c00 	.word	0x50000c00
 80099b8:	40001800 	.word	0x40001800
 80099bc:	50001800 	.word	0x50001800
 80099c0:	40014000 	.word	0x40014000
 80099c4:	50014000 	.word	0x50014000

080099c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e042      	b.n	8009a60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d106      	bne.n	80099f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7f7 fbef 	bl	80011d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2224      	movs	r2, #36	; 0x24
 80099f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f022 0201 	bic.w	r2, r2, #1
 8009a08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fa16 	bl	8009e44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f825 	bl	8009a68 <UART_SetConfig>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d101      	bne.n	8009a28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e01b      	b.n	8009a60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689a      	ldr	r2, [r3, #8]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f042 0201 	orr.w	r2, r2, #1
 8009a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fa95 	bl	8009f88 <UART_CheckIdleState>
 8009a5e:	4603      	mov	r3, r0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a6c:	b094      	sub	sp, #80	; 0x50
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	4b78      	ldr	r3, [pc, #480]	; (8009c60 <UART_SetConfig+0x1f8>)
 8009a7e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a82:	689a      	ldr	r2, [r3, #8]
 8009a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	431a      	orrs	r2, r3
 8009a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a92:	69db      	ldr	r3, [r3, #28]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4971      	ldr	r1, [pc, #452]	; (8009c64 <UART_SetConfig+0x1fc>)
 8009aa0:	4019      	ands	r1, r3
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa8:	430b      	orrs	r3, r1
 8009aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab8:	68d9      	ldr	r1, [r3, #12]
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	ea40 0301 	orr.w	r3, r0, r1
 8009ac2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	4b64      	ldr	r3, [pc, #400]	; (8009c60 <UART_SetConfig+0x1f8>)
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d009      	beq.n	8009ae8 <UART_SetConfig+0x80>
 8009ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	4b63      	ldr	r3, [pc, #396]	; (8009c68 <UART_SetConfig+0x200>)
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d004      	beq.n	8009ae8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae0:	6a1a      	ldr	r2, [r3, #32]
 8009ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8009af2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009afc:	430b      	orrs	r3, r1
 8009afe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	f023 000f 	bic.w	r0, r3, #15
 8009b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	ea40 0301 	orr.w	r3, r0, r1
 8009b16:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	4b53      	ldr	r3, [pc, #332]	; (8009c6c <UART_SetConfig+0x204>)
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d102      	bne.n	8009b28 <UART_SetConfig+0xc0>
 8009b22:	2301      	movs	r3, #1
 8009b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b26:	e066      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	4b50      	ldr	r3, [pc, #320]	; (8009c70 <UART_SetConfig+0x208>)
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d102      	bne.n	8009b38 <UART_SetConfig+0xd0>
 8009b32:	2302      	movs	r3, #2
 8009b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b36:	e05e      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	4b4d      	ldr	r3, [pc, #308]	; (8009c74 <UART_SetConfig+0x20c>)
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d102      	bne.n	8009b48 <UART_SetConfig+0xe0>
 8009b42:	2304      	movs	r3, #4
 8009b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b46:	e056      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	4b4a      	ldr	r3, [pc, #296]	; (8009c78 <UART_SetConfig+0x210>)
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d102      	bne.n	8009b58 <UART_SetConfig+0xf0>
 8009b52:	2308      	movs	r3, #8
 8009b54:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b56:	e04e      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	4b47      	ldr	r3, [pc, #284]	; (8009c7c <UART_SetConfig+0x214>)
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d102      	bne.n	8009b68 <UART_SetConfig+0x100>
 8009b62:	2310      	movs	r3, #16
 8009b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b66:	e046      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	4b44      	ldr	r3, [pc, #272]	; (8009c80 <UART_SetConfig+0x218>)
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d102      	bne.n	8009b78 <UART_SetConfig+0x110>
 8009b72:	2320      	movs	r3, #32
 8009b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b76:	e03e      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	4b41      	ldr	r3, [pc, #260]	; (8009c84 <UART_SetConfig+0x21c>)
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d102      	bne.n	8009b88 <UART_SetConfig+0x120>
 8009b82:	2340      	movs	r3, #64	; 0x40
 8009b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b86:	e036      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	4b3e      	ldr	r3, [pc, #248]	; (8009c88 <UART_SetConfig+0x220>)
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d102      	bne.n	8009b98 <UART_SetConfig+0x130>
 8009b92:	2380      	movs	r3, #128	; 0x80
 8009b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b96:	e02e      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	4b3b      	ldr	r3, [pc, #236]	; (8009c8c <UART_SetConfig+0x224>)
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d103      	bne.n	8009baa <UART_SetConfig+0x142>
 8009ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ba8:	e025      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	4b38      	ldr	r3, [pc, #224]	; (8009c90 <UART_SetConfig+0x228>)
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d103      	bne.n	8009bbc <UART_SetConfig+0x154>
 8009bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bba:	e01c      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	4b34      	ldr	r3, [pc, #208]	; (8009c94 <UART_SetConfig+0x22c>)
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d103      	bne.n	8009bce <UART_SetConfig+0x166>
 8009bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bcc:	e013      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	4b31      	ldr	r3, [pc, #196]	; (8009c98 <UART_SetConfig+0x230>)
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d103      	bne.n	8009be0 <UART_SetConfig+0x178>
 8009bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bde:	e00a      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	4b1e      	ldr	r3, [pc, #120]	; (8009c60 <UART_SetConfig+0x1f8>)
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d103      	bne.n	8009bf2 <UART_SetConfig+0x18a>
 8009bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bf0:	e001      	b.n	8009bf6 <UART_SetConfig+0x18e>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	4b19      	ldr	r3, [pc, #100]	; (8009c60 <UART_SetConfig+0x1f8>)
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d005      	beq.n	8009c0c <UART_SetConfig+0x1a4>
 8009c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	4b18      	ldr	r3, [pc, #96]	; (8009c68 <UART_SetConfig+0x200>)
 8009c06:	429a      	cmp	r2, r3
 8009c08:	f040 8094 	bne.w	8009d34 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c0e:	2200      	movs	r2, #0
 8009c10:	623b      	str	r3, [r7, #32]
 8009c12:	627a      	str	r2, [r7, #36]	; 0x24
 8009c14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009c18:	f7fd f80e 	bl	8006c38 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c1c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 80f7 	beq.w	8009e14 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	4a1c      	ldr	r2, [pc, #112]	; (8009c9c <UART_SetConfig+0x234>)
 8009c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c30:	461a      	mov	r2, r3
 8009c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c38:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	4413      	add	r3, r2
 8009c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d305      	bcc.n	8009c56 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d924      	bls.n	8009ca0 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009c5c:	e069      	b.n	8009d32 <UART_SetConfig+0x2ca>
 8009c5e:	bf00      	nop
 8009c60:	44002400 	.word	0x44002400
 8009c64:	cfff69f3 	.word	0xcfff69f3
 8009c68:	54002400 	.word	0x54002400
 8009c6c:	40013800 	.word	0x40013800
 8009c70:	40004400 	.word	0x40004400
 8009c74:	40004800 	.word	0x40004800
 8009c78:	40004c00 	.word	0x40004c00
 8009c7c:	40005000 	.word	0x40005000
 8009c80:	40006400 	.word	0x40006400
 8009c84:	40007800 	.word	0x40007800
 8009c88:	40007c00 	.word	0x40007c00
 8009c8c:	40008000 	.word	0x40008000
 8009c90:	40006800 	.word	0x40006800
 8009c94:	40006c00 	.word	0x40006c00
 8009c98:	40008400 	.word	0x40008400
 8009c9c:	0800a94c 	.word	0x0800a94c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	61bb      	str	r3, [r7, #24]
 8009ca6:	61fa      	str	r2, [r7, #28]
 8009ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	4a64      	ldr	r2, [pc, #400]	; (8009e40 <UART_SetConfig+0x3d8>)
 8009cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	613b      	str	r3, [r7, #16]
 8009cb8:	617a      	str	r2, [r7, #20]
 8009cba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009cbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009cc2:	f7f6 fae3 	bl	800028c <__aeabi_uldivmod>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4610      	mov	r0, r2
 8009ccc:	4619      	mov	r1, r3
 8009cce:	f04f 0200 	mov.w	r2, #0
 8009cd2:	f04f 0300 	mov.w	r3, #0
 8009cd6:	020b      	lsls	r3, r1, #8
 8009cd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cdc:	0202      	lsls	r2, r0, #8
 8009cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ce0:	6849      	ldr	r1, [r1, #4]
 8009ce2:	0849      	lsrs	r1, r1, #1
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	4605      	mov	r5, r0
 8009cea:	eb12 0804 	adds.w	r8, r2, r4
 8009cee:	eb43 0905 	adc.w	r9, r3, r5
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	60bb      	str	r3, [r7, #8]
 8009cfa:	60fa      	str	r2, [r7, #12]
 8009cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d00:	4640      	mov	r0, r8
 8009d02:	4649      	mov	r1, r9
 8009d04:	f7f6 fac2 	bl	800028c <__aeabi_uldivmod>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d16:	d308      	bcc.n	8009d2a <UART_SetConfig+0x2c2>
 8009d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d1e:	d204      	bcs.n	8009d2a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8009d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d26:	60da      	str	r2, [r3, #12]
 8009d28:	e003      	b.n	8009d32 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009d30:	e070      	b.n	8009e14 <UART_SetConfig+0x3ac>
 8009d32:	e06f      	b.n	8009e14 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d3c:	d13c      	bne.n	8009db8 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d40:	2200      	movs	r2, #0
 8009d42:	603b      	str	r3, [r7, #0]
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d4a:	f7fc ff75 	bl	8006c38 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d4e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d05e      	beq.n	8009e14 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	4a39      	ldr	r2, [pc, #228]	; (8009e40 <UART_SetConfig+0x3d8>)
 8009d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d60:	461a      	mov	r2, r3
 8009d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d68:	005a      	lsls	r2, r3, #1
 8009d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	085b      	lsrs	r3, r3, #1
 8009d70:	441a      	add	r2, r3
 8009d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7e:	2b0f      	cmp	r3, #15
 8009d80:	d916      	bls.n	8009db0 <UART_SetConfig+0x348>
 8009d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d88:	d212      	bcs.n	8009db0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	f023 030f 	bic.w	r3, r3, #15
 8009d92:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d96:	085b      	lsrs	r3, r3, #1
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	f003 0307 	and.w	r3, r3, #7
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009da2:	4313      	orrs	r3, r2
 8009da4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009dac:	60da      	str	r2, [r3, #12]
 8009dae:	e031      	b.n	8009e14 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009db6:	e02d      	b.n	8009e14 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dba:	2200      	movs	r2, #0
 8009dbc:	469a      	mov	sl, r3
 8009dbe:	4693      	mov	fp, r2
 8009dc0:	4650      	mov	r0, sl
 8009dc2:	4659      	mov	r1, fp
 8009dc4:	f7fc ff38 	bl	8006c38 <HAL_RCCEx_GetPeriphCLKFreq>
 8009dc8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8009dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d021      	beq.n	8009e14 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	4a1a      	ldr	r2, [pc, #104]	; (8009e40 <UART_SetConfig+0x3d8>)
 8009dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dde:	fbb3 f2f2 	udiv	r2, r3, r2
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	441a      	add	r2, r3
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df6:	2b0f      	cmp	r3, #15
 8009df8:	d909      	bls.n	8009e0e <UART_SetConfig+0x3a6>
 8009dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e00:	d205      	bcs.n	8009e0e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	60da      	str	r2, [r3, #12]
 8009e0c:	e002      	b.n	8009e14 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e16:	2201      	movs	r2, #1
 8009e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	2200      	movs	r2, #0
 8009e28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009e30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3750      	adds	r7, #80	; 0x50
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e3e:	bf00      	nop
 8009e40:	0800a94c 	.word	0x0800a94c

08009e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00a      	beq.n	8009e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00a      	beq.n	8009eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00a      	beq.n	8009ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed8:	f003 0310 	and.w	r3, r3, #16
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00a      	beq.n	8009ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efa:	f003 0320 	and.w	r3, r3, #32
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01a      	beq.n	8009f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f42:	d10a      	bne.n	8009f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00a      	beq.n	8009f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	605a      	str	r2, [r3, #4]
  }
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b098      	sub	sp, #96	; 0x60
 8009f8c:	af02      	add	r7, sp, #8
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f98:	f7f7 fbb6 	bl	8001708 <HAL_GetTick>
 8009f9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0308 	and.w	r3, r3, #8
 8009fa8:	2b08      	cmp	r3, #8
 8009faa:	d12f      	bne.n	800a00c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f88e 	bl	800a0dc <UART_WaitOnFlagUntilTimeout>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d022      	beq.n	800a00c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fce:	e853 3f00 	ldrex	r3, [r3]
 8009fd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fda:	653b      	str	r3, [r7, #80]	; 0x50
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fe6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e6      	bne.n	8009fc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e063      	b.n	800a0d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 0304 	and.w	r3, r3, #4
 800a016:	2b04      	cmp	r3, #4
 800a018:	d149      	bne.n	800a0ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a01a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a022:	2200      	movs	r2, #0
 800a024:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f857 	bl	800a0dc <UART_WaitOnFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d03c      	beq.n	800a0ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	623b      	str	r3, [r7, #32]
   return(result);
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a052:	633b      	str	r3, [r7, #48]	; 0x30
 800a054:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1e6      	bne.n	800a034 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3308      	adds	r3, #8
 800a06c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	60fb      	str	r3, [r7, #12]
   return(result);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f023 0301 	bic.w	r3, r3, #1
 800a07c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3308      	adds	r3, #8
 800a084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a086:	61fa      	str	r2, [r7, #28]
 800a088:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	69b9      	ldr	r1, [r7, #24]
 800a08c:	69fa      	ldr	r2, [r7, #28]
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	617b      	str	r3, [r7, #20]
   return(result);
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e5      	bne.n	800a066 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2220      	movs	r2, #32
 800a09e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e012      	b.n	800a0d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3758      	adds	r7, #88	; 0x58
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	603b      	str	r3, [r7, #0]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0ec:	e049      	b.n	800a182 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f4:	d045      	beq.n	800a182 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0f6:	f7f7 fb07 	bl	8001708 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	69ba      	ldr	r2, [r7, #24]
 800a102:	429a      	cmp	r2, r3
 800a104:	d302      	bcc.n	800a10c <UART_WaitOnFlagUntilTimeout+0x30>
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d101      	bne.n	800a110 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e048      	b.n	800a1a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d031      	beq.n	800a182 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	f003 0308 	and.w	r3, r3, #8
 800a128:	2b08      	cmp	r3, #8
 800a12a:	d110      	bne.n	800a14e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2208      	movs	r2, #8
 800a132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f000 f838 	bl	800a1aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2208      	movs	r2, #8
 800a13e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e029      	b.n	800a1a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69db      	ldr	r3, [r3, #28]
 800a154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a15c:	d111      	bne.n	800a182 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 f81e 	bl	800a1aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2220      	movs	r2, #32
 800a172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e00f      	b.n	800a1a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	69da      	ldr	r2, [r3, #28]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	4013      	ands	r3, r2
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	429a      	cmp	r2, r3
 800a190:	bf0c      	ite	eq
 800a192:	2301      	moveq	r3, #1
 800a194:	2300      	movne	r3, #0
 800a196:	b2db      	uxtb	r3, r3
 800a198:	461a      	mov	r2, r3
 800a19a:	79fb      	ldrb	r3, [r7, #7]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d0a6      	beq.n	800a0ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	b095      	sub	sp, #84	; 0x54
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d0:	643b      	str	r3, [r7, #64]	; 0x40
 800a1d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e6      	bne.n	800a1b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	e853 3f00 	ldrex	r3, [r3]
 800a1f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1fa:	f023 0301 	bic.w	r3, r3, #1
 800a1fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3308      	adds	r3, #8
 800a206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a20a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a20e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e3      	bne.n	800a1e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a220:	2b01      	cmp	r3, #1
 800a222:	d118      	bne.n	800a256 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	e853 3f00 	ldrex	r3, [r3]
 800a230:	60bb      	str	r3, [r7, #8]
   return(result);
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f023 0310 	bic.w	r3, r3, #16
 800a238:	647b      	str	r3, [r7, #68]	; 0x44
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a242:	61bb      	str	r3, [r7, #24]
 800a244:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a246:	6979      	ldr	r1, [r7, #20]
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	e841 2300 	strex	r3, r2, [r1]
 800a24e:	613b      	str	r3, [r7, #16]
   return(result);
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1e6      	bne.n	800a224 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2220      	movs	r2, #32
 800a25a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a26a:	bf00      	nop
 800a26c:	3754      	adds	r7, #84	; 0x54
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a276:	b480      	push	{r7}
 800a278:	b085      	sub	sp, #20
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a284:	2b01      	cmp	r3, #1
 800a286:	d101      	bne.n	800a28c <HAL_UARTEx_DisableFifoMode+0x16>
 800a288:	2302      	movs	r3, #2
 800a28a:	e027      	b.n	800a2dc <HAL_UARTEx_DisableFifoMode+0x66>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2224      	movs	r2, #36	; 0x24
 800a298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0201 	bic.w	r2, r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d101      	bne.n	800a300 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	e02d      	b.n	800a35c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2224      	movs	r2, #36	; 0x24
 800a30c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0201 	bic.w	r2, r2, #1
 800a326:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	430a      	orrs	r2, r1
 800a33a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f84f 	bl	800a3e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a374:	2b01      	cmp	r3, #1
 800a376:	d101      	bne.n	800a37c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a378:	2302      	movs	r3, #2
 800a37a:	e02d      	b.n	800a3d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2224      	movs	r2, #36	; 0x24
 800a388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0201 	bic.w	r2, r2, #1
 800a3a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	430a      	orrs	r2, r1
 800a3b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f811 	bl	800a3e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d108      	bne.n	800a402 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a400:	e031      	b.n	800a466 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a402:	2308      	movs	r3, #8
 800a404:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a406:	2308      	movs	r3, #8
 800a408:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	0e5b      	lsrs	r3, r3, #25
 800a412:	b2db      	uxtb	r3, r3
 800a414:	f003 0307 	and.w	r3, r3, #7
 800a418:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	0f5b      	lsrs	r3, r3, #29
 800a422:	b2db      	uxtb	r3, r3
 800a424:	f003 0307 	and.w	r3, r3, #7
 800a428:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a42a:	7bbb      	ldrb	r3, [r7, #14]
 800a42c:	7b3a      	ldrb	r2, [r7, #12]
 800a42e:	4911      	ldr	r1, [pc, #68]	; (800a474 <UARTEx_SetNbDataToProcess+0x94>)
 800a430:	5c8a      	ldrb	r2, [r1, r2]
 800a432:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a436:	7b3a      	ldrb	r2, [r7, #12]
 800a438:	490f      	ldr	r1, [pc, #60]	; (800a478 <UARTEx_SetNbDataToProcess+0x98>)
 800a43a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a43c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a440:	b29a      	uxth	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	7b7a      	ldrb	r2, [r7, #13]
 800a44c:	4909      	ldr	r1, [pc, #36]	; (800a474 <UARTEx_SetNbDataToProcess+0x94>)
 800a44e:	5c8a      	ldrb	r2, [r1, r2]
 800a450:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a454:	7b7a      	ldrb	r2, [r7, #13]
 800a456:	4908      	ldr	r1, [pc, #32]	; (800a478 <UARTEx_SetNbDataToProcess+0x98>)
 800a458:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a45a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a45e:	b29a      	uxth	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a466:	bf00      	nop
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	0800a964 	.word	0x0800a964
 800a478:	0800a96c 	.word	0x0800a96c

0800a47c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b08b      	sub	sp, #44	; 0x2c
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	fa93 f3a3 	rbit	r3, r3
 800a496:	613b      	str	r3, [r7, #16]
  return result;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d101      	bne.n	800a4a6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a4a2:	2320      	movs	r3, #32
 800a4a4:	e003      	b.n	800a4ae <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	fab3 f383 	clz	r3, r3
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	005b      	lsls	r3, r3, #1
 800a4b0:	2103      	movs	r1, #3
 800a4b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b6:	43db      	mvns	r3, r3
 800a4b8:	401a      	ands	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	fa93 f3a3 	rbit	r3, r3
 800a4c4:	61fb      	str	r3, [r7, #28]
  return result;
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a4d0:	2320      	movs	r3, #32
 800a4d2:	e003      	b.n	800a4dc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	fab3 f383 	clz	r3, r3
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4e4:	431a      	orrs	r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	601a      	str	r2, [r3, #0]
}
 800a4ea:	bf00      	nop
 800a4ec:	372c      	adds	r7, #44	; 0x2c
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b085      	sub	sp, #20
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	43db      	mvns	r3, r3
 800a50a:	401a      	ands	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	6879      	ldr	r1, [r7, #4]
 800a510:	fb01 f303 	mul.w	r3, r1, r3
 800a514:	431a      	orrs	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	605a      	str	r2, [r3, #4]
}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a526:	b480      	push	{r7}
 800a528:	b08b      	sub	sp, #44	; 0x2c
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	60f8      	str	r0, [r7, #12]
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	689a      	ldr	r2, [r3, #8]
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	fa93 f3a3 	rbit	r3, r3
 800a540:	613b      	str	r3, [r7, #16]
  return result;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a54c:	2320      	movs	r3, #32
 800a54e:	e003      	b.n	800a558 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	fab3 f383 	clz	r3, r3
 800a556:	b2db      	uxtb	r3, r3
 800a558:	005b      	lsls	r3, r3, #1
 800a55a:	2103      	movs	r1, #3
 800a55c:	fa01 f303 	lsl.w	r3, r1, r3
 800a560:	43db      	mvns	r3, r3
 800a562:	401a      	ands	r2, r3
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	fa93 f3a3 	rbit	r3, r3
 800a56e:	61fb      	str	r3, [r7, #28]
  return result;
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a57a:	2320      	movs	r3, #32
 800a57c:	e003      	b.n	800a586 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	fab3 f383 	clz	r3, r3
 800a584:	b2db      	uxtb	r3, r3
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	fa01 f303 	lsl.w	r3, r1, r3
 800a58e:	431a      	orrs	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a594:	bf00      	nop
 800a596:	372c      	adds	r7, #44	; 0x2c
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b08b      	sub	sp, #44	; 0x2c
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	68da      	ldr	r2, [r3, #12]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	fa93 f3a3 	rbit	r3, r3
 800a5ba:	613b      	str	r3, [r7, #16]
  return result;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a5c6:	2320      	movs	r3, #32
 800a5c8:	e003      	b.n	800a5d2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	fab3 f383 	clz	r3, r3
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	2103      	movs	r1, #3
 800a5d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5da:	43db      	mvns	r3, r3
 800a5dc:	401a      	ands	r2, r3
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	fa93 f3a3 	rbit	r3, r3
 800a5e8:	61fb      	str	r3, [r7, #28]
  return result;
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a5f4:	2320      	movs	r3, #32
 800a5f6:	e003      	b.n	800a600 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	fab3 f383 	clz	r3, r3
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	005b      	lsls	r3, r3, #1
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	fa01 f303 	lsl.w	r3, r1, r3
 800a608:	431a      	orrs	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	60da      	str	r2, [r3, #12]
}
 800a60e:	bf00      	nop
 800a610:	372c      	adds	r7, #44	; 0x2c
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b08b      	sub	sp, #44	; 0x2c
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a1a      	ldr	r2, [r3, #32]
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	fa93 f3a3 	rbit	r3, r3
 800a634:	613b      	str	r3, [r7, #16]
  return result;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a640:	2320      	movs	r3, #32
 800a642:	e003      	b.n	800a64c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	fab3 f383 	clz	r3, r3
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	210f      	movs	r1, #15
 800a650:	fa01 f303 	lsl.w	r3, r1, r3
 800a654:	43db      	mvns	r3, r3
 800a656:	401a      	ands	r2, r3
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	fa93 f3a3 	rbit	r3, r3
 800a662:	61fb      	str	r3, [r7, #28]
  return result;
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a66e:	2320      	movs	r3, #32
 800a670:	e003      	b.n	800a67a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	fab3 f383 	clz	r3, r3
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	6879      	ldr	r1, [r7, #4]
 800a67e:	fa01 f303 	lsl.w	r3, r1, r3
 800a682:	431a      	orrs	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a688:	bf00      	nop
 800a68a:	372c      	adds	r7, #44	; 0x2c
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a694:	b480      	push	{r7}
 800a696:	b08b      	sub	sp, #44	; 0x2c
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	0a1b      	lsrs	r3, r3, #8
 800a6a8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	fa93 f3a3 	rbit	r3, r3
 800a6b0:	613b      	str	r3, [r7, #16]
  return result;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a6bc:	2320      	movs	r3, #32
 800a6be:	e003      	b.n	800a6c8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	fab3 f383 	clz	r3, r3
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	210f      	movs	r1, #15
 800a6cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d0:	43db      	mvns	r3, r3
 800a6d2:	401a      	ands	r2, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	0a1b      	lsrs	r3, r3, #8
 800a6d8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	fa93 f3a3 	rbit	r3, r3
 800a6e0:	61fb      	str	r3, [r7, #28]
  return result;
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a6ec:	2320      	movs	r3, #32
 800a6ee:	e003      	b.n	800a6f8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	fab3 f383 	clz	r3, r3
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	6879      	ldr	r1, [r7, #4]
 800a6fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a700:	431a      	orrs	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a706:	bf00      	nop
 800a708:	372c      	adds	r7, #44	; 0x2c
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b08a      	sub	sp, #40	; 0x28
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	fa93 f3a3 	rbit	r3, r3
 800a728:	617b      	str	r3, [r7, #20]
  return result;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <LL_GPIO_Init+0x26>
    return 32U;
 800a734:	2320      	movs	r3, #32
 800a736:	e003      	b.n	800a740 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	fab3 f383 	clz	r3, r3
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a742:	e058      	b.n	800a7f6 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	2101      	movs	r1, #1
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	fa01 f303 	lsl.w	r3, r1, r3
 800a750:	4013      	ands	r3, r2
 800a752:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d04a      	beq.n	800a7f0 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d003      	beq.n	800a76a <LL_GPIO_Init+0x58>
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	2b02      	cmp	r3, #2
 800a768:	d10e      	bne.n	800a788 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	461a      	mov	r2, r3
 800a770:	6a39      	ldr	r1, [r7, #32]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fed7 	bl	800a526 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	6819      	ldr	r1, [r3, #0]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	461a      	mov	r2, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff feb7 	bl	800a4f6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	461a      	mov	r2, r3
 800a78e:	6a39      	ldr	r1, [r7, #32]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7ff ff05 	bl	800a5a0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d121      	bne.n	800a7e2 <LL_GPIO_Init+0xd0>
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	fa93 f3a3 	rbit	r3, r3
 800a7a8:	60bb      	str	r3, [r7, #8]
  return result;
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d101      	bne.n	800a7b8 <LL_GPIO_Init+0xa6>
    return 32U;
 800a7b4:	2320      	movs	r3, #32
 800a7b6:	e003      	b.n	800a7c0 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	fab3 f383 	clz	r3, r3
 800a7be:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a7c0:	2b07      	cmp	r3, #7
 800a7c2:	d807      	bhi.n	800a7d4 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6a39      	ldr	r1, [r7, #32]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff ff24 	bl	800a61a <LL_GPIO_SetAFPin_0_7>
 800a7d2:	e006      	b.n	800a7e2 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	6a39      	ldr	r1, [r7, #32]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff ff59 	bl	800a694 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6a39      	ldr	r1, [r7, #32]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff fe46 	bl	800a47c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a800:	2b00      	cmp	r3, #0
 800a802:	d19f      	bne.n	800a744 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3728      	adds	r7, #40	; 0x28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800a80e:	b480      	push	{r7}
 800a810:	b085      	sub	sp, #20
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a816:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a81a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	43db      	mvns	r3, r3
 800a824:	401a      	ands	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d106      	bne.n	800a858 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	641a      	str	r2, [r3, #64]	; 0x40
 800a856:	e00b      	b.n	800a870 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d106      	bne.n	800a86c <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a862:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	641a      	str	r2, [r3, #64]	; 0x40
 800a86a:	e001      	b.n	800a870 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e000      	b.n	800a872 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800a87e:	b084      	sub	sp, #16
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	f107 001c 	add.w	r0, r7, #28
 800a88c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89a:	f023 0201 	bic.w	r2, r3, #1
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff ffc7 	bl	800a838 <USB_SetCurrentMode>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8c0:	b004      	add	sp, #16
 800a8c2:	4770      	bx	lr

0800a8c4 <memset>:
 800a8c4:	4402      	add	r2, r0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d100      	bne.n	800a8ce <memset+0xa>
 800a8cc:	4770      	bx	lr
 800a8ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a8d2:	e7f9      	b.n	800a8c8 <memset+0x4>

0800a8d4 <__libc_init_array>:
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	4d0d      	ldr	r5, [pc, #52]	; (800a90c <__libc_init_array+0x38>)
 800a8d8:	2600      	movs	r6, #0
 800a8da:	4c0d      	ldr	r4, [pc, #52]	; (800a910 <__libc_init_array+0x3c>)
 800a8dc:	1b64      	subs	r4, r4, r5
 800a8de:	10a4      	asrs	r4, r4, #2
 800a8e0:	42a6      	cmp	r6, r4
 800a8e2:	d109      	bne.n	800a8f8 <__libc_init_array+0x24>
 800a8e4:	4d0b      	ldr	r5, [pc, #44]	; (800a914 <__libc_init_array+0x40>)
 800a8e6:	2600      	movs	r6, #0
 800a8e8:	4c0b      	ldr	r4, [pc, #44]	; (800a918 <__libc_init_array+0x44>)
 800a8ea:	f000 f817 	bl	800a91c <_init>
 800a8ee:	1b64      	subs	r4, r4, r5
 800a8f0:	10a4      	asrs	r4, r4, #2
 800a8f2:	42a6      	cmp	r6, r4
 800a8f4:	d105      	bne.n	800a902 <__libc_init_array+0x2e>
 800a8f6:	bd70      	pop	{r4, r5, r6, pc}
 800a8f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8fc:	3601      	adds	r6, #1
 800a8fe:	4798      	blx	r3
 800a900:	e7ee      	b.n	800a8e0 <__libc_init_array+0xc>
 800a902:	f855 3b04 	ldr.w	r3, [r5], #4
 800a906:	3601      	adds	r6, #1
 800a908:	4798      	blx	r3
 800a90a:	e7f2      	b.n	800a8f2 <__libc_init_array+0x1e>
 800a90c:	0800a97c 	.word	0x0800a97c
 800a910:	0800a97c 	.word	0x0800a97c
 800a914:	0800a97c 	.word	0x0800a97c
 800a918:	0800a980 	.word	0x0800a980

0800a91c <_init>:
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91e:	bf00      	nop
 800a920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a922:	bc08      	pop	{r3}
 800a924:	469e      	mov	lr, r3
 800a926:	4770      	bx	lr

0800a928 <_fini>:
 800a928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92a:	bf00      	nop
 800a92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92e:	bc08      	pop	{r3}
 800a930:	469e      	mov	lr, r3
 800a932:	4770      	bx	lr
