
keypad_lib_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d8  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a924  0800a924  0001a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a964  0800a964  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a964  0800a964  0001a964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a96c  0800a96c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a96c  0800a96c  0001a96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a970  0800a970  0001a970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800a974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  2000003c  0800a9b0  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  0800a9b0  000206a8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020072  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fec0  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000338c  00000000  00000000  0003ff75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  00043308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000130c  00000000  00000000  00044b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003828f  00000000  00000000  00045e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ac2  00000000  00000000  0007e11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016f83c  00000000  00000000  0009ebdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b44  00000000  00000000  0020e41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00214f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000003c 	.word	0x2000003c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800a90c 	.word	0x0800a90c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000040 	.word	0x20000040
 8000288:	0800a90c 	.word	0x0800a90c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Keypad_Start>:
#include <stdbool.h>

uint8_t Last_Key_Down;

void Keypad_Start(Keypad *kb, GPIO_TypeDef* *_RowPorts, GPIO_TypeDef* *_ColPorts, uint16_t *_RowPins, uint16_t *_ColPins, uint8_t **keys)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	603b      	str	r3, [r7, #0]
	for(int i=0; i<4; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
 80005be:	e029      	b.n	8000614 <Keypad_Start+0x68>
	{
		kb->RowPorts[i] = _RowPorts[i];
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	4413      	add	r3, r2
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	69fa      	ldr	r2, [r7, #28]
 80005ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		kb->ColPorts[i] = _ColPorts[i];
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	6819      	ldr	r1, [r3, #0]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	69fa      	ldr	r2, [r7, #28]
 80005e0:	3204      	adds	r2, #4
 80005e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		kb->RowPins[i] = _RowPins[i];
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	8819      	ldrh	r1, [r3, #0]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	69fa      	ldr	r2, [r7, #28]
 80005f4:	3210      	adds	r2, #16
 80005f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		kb->ColPins[i] = _ColPins[i];
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000600:	4413      	add	r3, r2
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	69fa      	ldr	r2, [r7, #28]
 8000608:	3214      	adds	r2, #20
 800060a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i=0; i<4; i++)
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	3301      	adds	r3, #1
 8000612:	61fb      	str	r3, [r7, #28]
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	2b03      	cmp	r3, #3
 8000618:	ddd2      	ble.n	80005c0 <Keypad_Start+0x14>
	}
	kb->rising_pin = 255;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	22ff      	movs	r2, #255	; 0xff
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	kb->let_falling_pin = 255;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	22ff      	movs	r2, #255	; 0xff
 8000626:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	Last_Key_Down = 0;
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <Keypad_Start+0x114>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]

	//return;

	HAL_GPIO_WritePin(kb->RowPorts[0], kb->RowPins[0], SET);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	8c1b      	ldrh	r3, [r3, #32]
 8000638:	2201      	movs	r2, #1
 800063a:	4619      	mov	r1, r3
 800063c:	f002 fe66 	bl	800330c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[1], kb->RowPins[1], SET);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6858      	ldr	r0, [r3, #4]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	f002 fe5e 	bl	800330c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[2], kb->RowPins[2], SET);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6898      	ldr	r0, [r3, #8]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	f002 fe56 	bl	800330c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[3], kb->RowPins[3], SET);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	68d8      	ldr	r0, [r3, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000668:	2201      	movs	r2, #1
 800066a:	4619      	mov	r1, r3
 800066c:	f002 fe4e 	bl	800330c <HAL_GPIO_WritePin>

	for(int i=0; i<4; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
 8000674:	e01c      	b.n	80006b0 <Keypad_Start+0x104>
	{
		for(int j=0; j<4; j++)
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	e013      	b.n	80006a4 <Keypad_Start+0xf8>
		{
			kb->keys[i][j] = keys[i][j];
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000682:	4413      	add	r3, r2
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	4413      	add	r3, r2
 800068a:	7819      	ldrb	r1, [r3, #0]
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	441a      	add	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4413      	add	r3, r2
 8000698:	3332      	adds	r3, #50	; 0x32
 800069a:	460a      	mov	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<4; j++)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	dde8      	ble.n	800067c <Keypad_Start+0xd0>
	for(int i=0; i<4; i++)
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	3301      	adds	r3, #1
 80006ae:	61bb      	str	r3, [r7, #24]
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	dddf      	ble.n	8000676 <Keypad_Start+0xca>
		}
	}
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000058 	.word	0x20000058

080006c4 <Keypad_Rising_EXTI>:

void Keypad_Rising_EXTI(Keypad *kb, uint16_t GPIO_Pin)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
	if (GPIO_Pin == kb->ColPins[0])
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006d4:	887a      	ldrh	r2, [r7, #2]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d104      	bne.n	80006e4 <Keypad_Rising_EXTI+0x20>
		kb->rising_pin = 0;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80006e2:	e01c      	b.n	800071e <Keypad_Rising_EXTI+0x5a>
	else if (GPIO_Pin == kb->ColPins[1])
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80006e8:	887a      	ldrh	r2, [r7, #2]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d104      	bne.n	80006f8 <Keypad_Rising_EXTI+0x34>
		kb->rising_pin = 1;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80006f6:	e012      	b.n	800071e <Keypad_Rising_EXTI+0x5a>
	else if(GPIO_Pin == kb->ColPins[2])
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80006fc:	887a      	ldrh	r2, [r7, #2]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d104      	bne.n	800070c <Keypad_Rising_EXTI+0x48>
		kb->rising_pin = 2;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2202      	movs	r2, #2
 8000706:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800070a:	e008      	b.n	800071e <Keypad_Rising_EXTI+0x5a>
	else if(GPIO_Pin == kb->ColPins[3])
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000710:	887a      	ldrh	r2, [r7, #2]
 8000712:	429a      	cmp	r2, r3
 8000714:	d160      	bne.n	80007d8 <Keypad_Rising_EXTI+0x114>
		kb->rising_pin = 3;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2203      	movs	r2, #3
 800071a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	else
		return;

	kb->key_down = true;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2201      	movs	r2, #1
 8000722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	kb->let_falling_pin = 0;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	HAL_GPIO_WritePin(kb->RowPorts[0], kb->RowPins[0], RESET);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	8c1b      	ldrh	r3, [r3, #32]
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	f002 fde7 	bl	800330c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[0], kb->RowPins[0], SET);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	8c1b      	ldrh	r3, [r3, #32]
 8000746:	2201      	movs	r2, #1
 8000748:	4619      	mov	r1, r3
 800074a:	f002 fddf 	bl	800330c <HAL_GPIO_WritePin>
	kb->let_falling_pin = 1;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2201      	movs	r2, #1
 8000752:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	HAL_GPIO_WritePin(kb->RowPorts[1], kb->RowPins[1], RESET);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6858      	ldr	r0, [r3, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	f002 fdd3 	bl	800330c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[1], kb->RowPins[1], SET);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6858      	ldr	r0, [r3, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800076e:	2201      	movs	r2, #1
 8000770:	4619      	mov	r1, r3
 8000772:	f002 fdcb 	bl	800330c <HAL_GPIO_WritePin>
	kb->let_falling_pin = 2;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2202      	movs	r2, #2
 800077a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	HAL_GPIO_WritePin(kb->RowPorts[2], kb->RowPins[2], RESET);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6898      	ldr	r0, [r3, #8]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	4619      	mov	r1, r3
 800078a:	f002 fdbf 	bl	800330c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[2], kb->RowPins[2], SET);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6898      	ldr	r0, [r3, #8]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000796:	2201      	movs	r2, #1
 8000798:	4619      	mov	r1, r3
 800079a:	f002 fdb7 	bl	800330c <HAL_GPIO_WritePin>
	kb->let_falling_pin = 3;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2203      	movs	r2, #3
 80007a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	HAL_GPIO_WritePin(kb->RowPorts[3], kb->RowPins[3], RESET);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68d8      	ldr	r0, [r3, #12]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	f002 fdab 	bl	800330c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kb->RowPorts[3], kb->RowPins[3], SET);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	68d8      	ldr	r0, [r3, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	f002 fda3 	bl	800330c <HAL_GPIO_WritePin>
	kb->let_falling_pin = 4;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2204      	movs	r2, #4
 80007ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	kb->rising_pin = 4;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2204      	movs	r2, #4
 80007d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80007d6:	e000      	b.n	80007da <Keypad_Rising_EXTI+0x116>
		return;
 80007d8:	bf00      	nop
}
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80007ee:	4909      	ldr	r1, [pc, #36]	; (8000814 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007fa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000804:	68fb      	ldr	r3, [r7, #12]
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	44020c00 	.word	0x44020c00

08000818 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <LL_APB1_GRP2_EnableClock+0x34>)
 8000822:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000826:	4909      	ldr	r1, [pc, #36]	; (800084c <LL_APB1_GRP2_EnableClock+0x34>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4313      	orrs	r3, r2
 800082c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <LL_APB1_GRP2_EnableClock+0x34>)
 8000832:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4013      	ands	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083c:	68fb      	ldr	r3, [r7, #12]
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	44020c00 	.word	0x44020c00

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fedf 	bl	8001618 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t col0_keys[4] = {'0', '1', '2', '3'};
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <main+0x6c>)
 800085c:	61fb      	str	r3, [r7, #28]
  uint8_t col1_keys[4] = {'4', '5', '6', '7'};
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <main+0x70>)
 8000860:	61bb      	str	r3, [r7, #24]
  uint8_t col2_keys[4] = {'8', '9', 'A', 'B'};
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <main+0x74>)
 8000864:	617b      	str	r3, [r7, #20]
  uint8_t col3_keys[4] = {'C', 'D', 'E', 'F'};
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <main+0x78>)
 8000868:	613b      	str	r3, [r7, #16]
  uint8_t *keys[4] = {col0_keys, col1_keys, col2_keys, col3_keys};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	f107 0318 	add.w	r3, r7, #24
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	60fb      	str	r3, [r7, #12]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f82d 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 fa31 	bl	8000cec <MX_GPIO_Init>
  MX_ADC1_Init();
 800088a:	f000 f899 	bl	80009c0 <MX_ADC1_Init>
  MX_ETH_Init();
 800088e:	f000 f8fb 	bl	8000a88 <MX_ETH_Init>
  MX_ICACHE_Init();
 8000892:	f000 f945 	bl	8000b20 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 8000896:	f000 f94f 	bl	8000b38 <MX_LPUART1_UART_Init>
  MX_UCPD1_Init();
 800089a:	f000 f9d1 	bl	8000c40 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800089e:	f000 f9f3 	bl	8000c88 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 80008a2:	f000 f993 	bl	8000bcc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Keypad_Start(&myKB, KB_ROW_PORTs, KB_COL_PORTs, KB_ROW_PINs, KB_COL_PINs, keys);
 80008a6:	463b      	mov	r3, r7
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <main+0x7c>)
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <main+0x80>)
 80008b0:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <main+0x84>)
 80008b2:	4909      	ldr	r1, [pc, #36]	; (80008d8 <main+0x88>)
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <main+0x8c>)
 80008b6:	f7ff fe79 	bl	80005ac <Keypad_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <main+0x6a>
 80008bc:	33323130 	.word	0x33323130
 80008c0:	37363534 	.word	0x37363534
 80008c4:	42413938 	.word	0x42413938
 80008c8:	46454443 	.word	0x46454443
 80008cc:	20000020 	.word	0x20000020
 80008d0:	20000028 	.word	0x20000028
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000010 	.word	0x20000010
 80008dc:	20000658 	.word	0x20000658

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09c      	sub	sp, #112	; 0x70
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2250      	movs	r2, #80	; 0x50
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f009 ffe0 	bl	800a8b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <SystemClock_Config+0xdc>)
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	4a2c      	ldr	r2, [pc, #176]	; (80009bc <SystemClock_Config+0xdc>)
 800090c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000910:	6113      	str	r3, [r2, #16]
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <SystemClock_Config+0xdc>)
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800091e:	bf00      	nop
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <SystemClock_Config+0xdc>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	2b08      	cmp	r3, #8
 800092a:	d1f9      	bne.n	8000920 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800092c:	2323      	movs	r3, #35	; 0x23
 800092e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000930:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800094c:	2303      	movs	r3, #3
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000950:	2301      	movs	r3, #1
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000954:	2310      	movs	r3, #16
 8000956:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000958:	2302      	movs	r3, #2
 800095a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000964:	230c      	movs	r3, #12
 8000966:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000968:	2300      	movs	r3, #0
 800096a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fe15 	bl	80035a4 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000980:	f000 fabc 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	231f      	movs	r3, #31
 8000986:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2303      	movs	r3, #3
 800098a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2103      	movs	r1, #3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 fa36 	bl	8003e14 <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009ae:	f000 faa5 	bl	8000efc <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3770      	adds	r7, #112	; 0x70
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	44020800 	.word	0x44020800

080009c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2220      	movs	r2, #32
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f009 ff71 	bl	800a8b4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009d4:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <MX_ADC1_Init+0xc0>)
 80009d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_ADC1_Init+0xbc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a38:	4810      	ldr	r0, [pc, #64]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a3a:	f001 f87b 	bl	8001b34 <HAL_ADC_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000a44:	f000 fa5a 	bl	8000efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_ADC1_Init+0xc4>)
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a54:	237f      	movs	r3, #127	; 0x7f
 8000a56:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_ADC1_Init+0xbc>)
 8000a66:	f001 f9b9 	bl	8001ddc <HAL_ADC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000a70:	f000 fa44 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000154 	.word	0x20000154
 8000a80:	42028000 	.word	0x42028000
 8000a84:	4b840000 	.word	0x4b840000

08000a88 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_ETH_Init+0x80>)
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <MX_ETH_Init+0x84>)
 8000a90:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_ETH_Init+0x88>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_ETH_Init+0x88>)
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_ETH_Init+0x88>)
 8000aa0:	22e1      	movs	r2, #225	; 0xe1
 8000aa2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_ETH_Init+0x88>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_ETH_Init+0x88>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_ETH_Init+0x88>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_ETH_Init+0x80>)
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_ETH_Init+0x88>)
 8000aba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_ETH_Init+0x80>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_ETH_Init+0x80>)
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <MX_ETH_Init+0x8c>)
 8000ac6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_ETH_Init+0x80>)
 8000aca:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <MX_ETH_Init+0x90>)
 8000acc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_ETH_Init+0x80>)
 8000ad0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ad4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_ETH_Init+0x80>)
 8000ad8:	f001 fe92 	bl	8002800 <HAL_ETH_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ae2:	f000 fa0b 	bl	8000efc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ae6:	2238      	movs	r2, #56	; 0x38
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_ETH_Init+0x94>)
 8000aec:	f009 fee2 	bl	800a8b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_ETH_Init+0x94>)
 8000af2:	2221      	movs	r2, #33	; 0x21
 8000af4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_ETH_Init+0x94>)
 8000af8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000afc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_ETH_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200001bc 	.word	0x200001bc
 8000b0c:	40028000 	.word	0x40028000
 8000b10:	2000069c 	.word	0x2000069c
 8000b14:	200000f4 	.word	0x200000f4
 8000b18:	20000094 	.word	0x20000094
 8000b1c:	2000005c 	.word	0x2000005c

08000b20 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b24:	f002 fc30 	bl	8003388 <HAL_ICACHE_Enable>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000b2e:	f000 f9e5 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b3e:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <MX_LPUART1_UART_Init+0x8c>)
 8000b40:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b44:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <MX_LPUART1_UART_Init+0x90>)
 8000b46:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b5c:	220c      	movs	r2, #12
 8000b5e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b7a:	f008 ff1d 	bl	80099b8 <HAL_UART_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000b84:	f000 f9ba 	bl	8000efc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b8c:	f009 fba4 	bl	800a2d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000b96:	f000 f9b1 	bl	8000efc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000b9e:	f009 fbd9 	bl	800a354 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000ba8:	f000 f9a8 	bl	8000efc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_LPUART1_UART_Init+0x88>)
 8000bae:	f009 fb5a 	bl	800a266 <HAL_UARTEx_DisableFifoMode>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000bb8:	f000 f9a0 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000026c 	.word	0x2000026c
 8000bc4:	44002400 	.word	0x44002400
 8000bc8:	00033324 	.word	0x00033324

08000bcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <MX_TIM3_Init+0x70>)
 8000be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c02:	2108      	movs	r1, #8
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000c06:	f008 fc99 	bl	800953c <HAL_TIM_OnePulse_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 8000c10:	f000 f974 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_TIM3_Init+0x6c>)
 8000c22:	f008 fdf9 	bl	8009818 <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000c2c:	f000 f966 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000300 	.word	0x20000300
 8000c3c:	40000400 	.word	0x40000400

08000c40 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000c56:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c5a:	f7ff fddd 	bl	8000818 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff fdbe 	bl	80007e0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000c64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_UCPD1_Init+0x44>)
 8000c78:	f009 fd43 	bl	800a702 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	42020400 	.word	0x42020400

08000c88 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000c8e:	4a16      	ldr	r2, [pc, #88]	; (8000ce8 <MX_USB_PCD_Init+0x60>)
 8000c90:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000c94:	2208      	movs	r2, #8
 8000c96:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USB_PCD_Init+0x5c>)
 8000cd0:	f002 fb6a 	bl	80033a8 <HAL_PCD_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8000cda:	f000 f90f 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000034c 	.word	0x2000034c
 8000ce8:	40016000 	.word	0x40016000

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4b62      	ldr	r3, [pc, #392]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d08:	4a60      	ldr	r2, [pc, #384]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d12:	4b5e      	ldr	r3, [pc, #376]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d20:	4b5a      	ldr	r3, [pc, #360]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d26:	4a59      	ldr	r2, [pc, #356]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d30:	4b56      	ldr	r3, [pc, #344]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	4b53      	ldr	r3, [pc, #332]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d44:	4a51      	ldr	r2, [pc, #324]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d4e:	4b4f      	ldr	r3, [pc, #316]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5c:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d62:	4a4a      	ldr	r2, [pc, #296]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d6c:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d80:	4a42      	ldr	r2, [pc, #264]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d8a:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d9e:	4a3b      	ldr	r2, [pc, #236]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dbc:	4a33      	ldr	r2, [pc, #204]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_GPIO_Init+0x1a0>)
 8000dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2178      	movs	r1, #120	; 0x78
 8000dd8:	482d      	ldr	r0, [pc, #180]	; (8000e90 <MX_GPIO_Init+0x1a4>)
 8000dda:	f002 fa97 	bl	800330c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000dde:	2378      	movs	r3, #120	; 0x78
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4826      	ldr	r0, [pc, #152]	; (8000e90 <MX_GPIO_Init+0x1a4>)
 8000df6:	f002 f937 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_GPIO_Init+0x1a8>)
 8000e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4822      	ldr	r0, [pc, #136]	; (8000e98 <MX_GPIO_Init+0x1ac>)
 8000e0e:	f002 f92b 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_GPIO_Init+0x1a8>)
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	481a      	ldr	r0, [pc, #104]	; (8000e90 <MX_GPIO_Init+0x1a4>)
 8000e28:	f002 f91e 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_GPIO_Init+0x1b0>)
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4818      	ldr	r0, [pc, #96]	; (8000ea0 <MX_GPIO_Init+0x1b4>)
 8000e40:	f002 f912 	bl	8003068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	200b      	movs	r0, #11
 8000e4a:	f001 fca4 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e4e:	200b      	movs	r0, #11
 8000e50:	f001 fcbb 	bl	80027ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	200c      	movs	r0, #12
 8000e5a:	f001 fc9c 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e5e:	200c      	movs	r0, #12
 8000e60:	f001 fcb3 	bl	80027ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	200d      	movs	r0, #13
 8000e6a:	f001 fc94 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e6e:	200d      	movs	r0, #13
 8000e70:	f001 fcab 	bl	80027ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2014      	movs	r0, #20
 8000e7a:	f001 fc8c 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8000e7e:	2014      	movs	r0, #20
 8000e80:	f001 fca3 	bl	80027ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e84:	bf00      	nop
 8000e86:	3730      	adds	r7, #48	; 0x30
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	44020c00 	.word	0x44020c00
 8000e90:	42021000 	.word	0x42021000
 8000e94:	10310000 	.word	0x10310000
 8000e98:	42021400 	.word	0x42021400
 8000e9c:	10110000 	.word	0x10110000
 8000ea0:	42021800 	.word	0x42021800

08000ea4 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
	rise_pin = GPIO_Pin;
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	8013      	strh	r3, [r2, #0]
	Keypad_Rising_EXTI(&myKB, GPIO_Pin);
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 8000eba:	f7ff fc03 	bl	80006c4 <Keypad_Rising_EXTI>

}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000654 	.word	0x20000654
 8000ecc:	20000658 	.word	0x20000658

08000ed0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
	fall_pin = GPIO_Pin;
 8000eda:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	8013      	strh	r3, [r2, #0]
	Keypad_Rising_EXTI(&myKB, GPIO_Pin);
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 8000ee6:	f7ff fbed 	bl	80006c4 <Keypad_Rising_EXTI>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000656 	.word	0x20000656
 8000ef8:	20000658 	.word	0x20000658

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>

08000f06 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0cc      	sub	sp, #304	; 0x130
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f22:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000f42:	461a      	mov	r2, r3
 8000f44:	2100      	movs	r1, #0
 8000f46:	f009 fcb5 	bl	800a8b4 <memset>
  if(hadc->Instance==ADC1)
 8000f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a30      	ldr	r2, [pc, #192]	; (8001018 <HAL_ADC_MspInit+0x104>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d157      	bne.n	800100c <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f60:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000f64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fa88 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8000f8e:	f7ff ffb5 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_ADC_MspInit+0x108>)
 8000f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f98:	4a20      	ldr	r2, [pc, #128]	; (800101c <HAL_ADC_MspInit+0x108>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <HAL_ADC_MspInit+0x108>)
 8000fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fb0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fbe:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_ADC_MspInit+0x108>)
 8000fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <HAL_ADC_MspInit+0x108>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_ADC_MspInit+0x108>)
 8000fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fe8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000fec:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000fee:	2310      	movs	r3, #16
 8000ff0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001000:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <HAL_ADC_MspInit+0x10c>)
 8001008:	f002 f82e 	bl	8003068 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	42028000 	.word	0x42028000
 800101c:	44020c00 	.word	0x44020c00
 8001020:	42020000 	.word	0x42020000

08001024 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	; 0x38
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a59      	ldr	r2, [pc, #356]	; (80011a8 <HAL_ETH_MspInit+0x184>)
 8001042:	4293      	cmp	r3, r2
 8001044:	f040 80ab 	bne.w	800119e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001048:	4b58      	ldr	r3, [pc, #352]	; (80011ac <HAL_ETH_MspInit+0x188>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a57      	ldr	r2, [pc, #348]	; (80011ac <HAL_ETH_MspInit+0x188>)
 8001050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001058:	4b54      	ldr	r3, [pc, #336]	; (80011ac <HAL_ETH_MspInit+0x188>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001062:	623b      	str	r3, [r7, #32]
 8001064:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8001066:	4b51      	ldr	r3, [pc, #324]	; (80011ac <HAL_ETH_MspInit+0x188>)
 8001068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106c:	4a4f      	ldr	r2, [pc, #316]	; (80011ac <HAL_ETH_MspInit+0x188>)
 800106e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001072:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001076:	4b4d      	ldr	r3, [pc, #308]	; (80011ac <HAL_ETH_MspInit+0x188>)
 8001078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8001084:	4b49      	ldr	r3, [pc, #292]	; (80011ac <HAL_ETH_MspInit+0x188>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a48      	ldr	r2, [pc, #288]	; (80011ac <HAL_ETH_MspInit+0x188>)
 800108c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001094:	4b45      	ldr	r3, [pc, #276]	; (80011ac <HAL_ETH_MspInit+0x188>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109e:	61bb      	str	r3, [r7, #24]
 80010a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4b42      	ldr	r3, [pc, #264]	; (80011ac <HAL_ETH_MspInit+0x188>)
 80010a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010a8:	4a40      	ldr	r2, [pc, #256]	; (80011ac <HAL_ETH_MspInit+0x188>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <HAL_ETH_MspInit+0x188>)
 80010b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <HAL_ETH_MspInit+0x188>)
 80010c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010c6:	4a39      	ldr	r2, [pc, #228]	; (80011ac <HAL_ETH_MspInit+0x188>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <HAL_ETH_MspInit+0x188>)
 80010d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <HAL_ETH_MspInit+0x188>)
 80010e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010e4:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_ETH_MspInit+0x188>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_ETH_MspInit+0x188>)
 80010f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_ETH_MspInit+0x188>)
 80010fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <HAL_ETH_MspInit+0x188>)
 8001104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001108:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <HAL_ETH_MspInit+0x188>)
 800110e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800111a:	2332      	movs	r3, #50	; 0x32
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001126:	2302      	movs	r3, #2
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800112a:	230b      	movs	r3, #11
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	481e      	ldr	r0, [pc, #120]	; (80011b0 <HAL_ETH_MspInit+0x18c>)
 8001136:	f001 ff97 	bl	8003068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800113a:	2386      	movs	r3, #134	; 0x86
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	2302      	movs	r3, #2
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114a:	230b      	movs	r3, #11
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	4817      	ldr	r0, [pc, #92]	; (80011b4 <HAL_ETH_MspInit+0x190>)
 8001156:	f001 ff87 	bl	8003068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800115a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2302      	movs	r3, #2
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116c:	230b      	movs	r3, #11
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	4810      	ldr	r0, [pc, #64]	; (80011b8 <HAL_ETH_MspInit+0x194>)
 8001178:	f001 ff76 	bl	8003068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 800117c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118a:	2302      	movs	r3, #2
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118e:	230b      	movs	r3, #11
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <HAL_ETH_MspInit+0x198>)
 800119a:	f001 ff65 	bl	8003068 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	3738      	adds	r7, #56	; 0x38
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40028000 	.word	0x40028000
 80011ac:	44020c00 	.word	0x44020c00
 80011b0:	42020800 	.word	0x42020800
 80011b4:	42020000 	.word	0x42020000
 80011b8:	42020400 	.word	0x42020400
 80011bc:	42021800 	.word	0x42021800

080011c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0cc      	sub	sp, #304	; 0x130
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011ce:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011e8:	4618      	mov	r0, r3
 80011ea:	f44f 7384 	mov.w	r3, #264	; 0x108
 80011ee:	461a      	mov	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	f009 fb5f 	bl	800a8b4 <memset>
  if(huart->Instance==LPUART1)
 80011f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a33      	ldr	r2, [pc, #204]	; (80012d0 <HAL_UART_MspInit+0x110>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d15d      	bne.n	80012c4 <HAL_UART_MspInit+0x104>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800120c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 800121c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001220:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001224:	2200      	movs	r2, #0
 8001226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4618      	mov	r0, r3
 8001230:	f003 f932 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800123a:	f7ff fe5f 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <HAL_UART_MspInit+0x114>)
 8001240:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001244:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <HAL_UART_MspInit+0x114>)
 8001246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_UART_MspInit+0x114>)
 8001250:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001254:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800125c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001266:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800126a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_UART_MspInit+0x114>)
 800126e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_UART_MspInit+0x114>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_UART_MspInit+0x114>)
 800127e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001282:	f003 0202 	and.w	r2, r3, #2
 8001286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800128a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001294:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001298:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 800129a:	23c0      	movs	r3, #192	; 0xc0
 800129c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80012b2:	2308      	movs	r3, #8
 80012b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <HAL_UART_MspInit+0x118>)
 80012c0:	f001 fed2 	bl	8003068 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	44002400 	.word	0x44002400
 80012d4:	44020c00 	.word	0x44020c00
 80012d8:	42020400 	.word	0x42020400

080012dc <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_TIM_OnePulse_MspInit+0x3c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10e      	bne.n	800130c <HAL_TIM_OnePulse_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_TIM_OnePulse_MspInit+0x40>)
 80012f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012f4:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_TIM_OnePulse_MspInit+0x40>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_TIM_OnePulse_MspInit+0x40>)
 8001300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40000400 	.word	0x40000400
 800131c:	44020c00 	.word	0x44020c00

08001320 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0cc      	sub	sp, #304	; 0x130
 8001324:	af00      	add	r7, sp, #0
 8001326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800132a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800132e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001344:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001348:	4618      	mov	r0, r3
 800134a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800134e:	461a      	mov	r2, r3
 8001350:	2100      	movs	r1, #0
 8001352:	f009 faaf 	bl	800a8b4 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800135a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a33      	ldr	r2, [pc, #204]	; (8001430 <HAL_PCD_MspInit+0x110>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d15e      	bne.n	8001426 <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800136c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f04f 0310 	mov.w	r3, #16
 8001378:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800137c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001380:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001384:	2230      	movs	r2, #48	; 0x30
 8001386:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4618      	mov	r0, r3
 8001390:	f003 f882 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 800139a:	f7ff fdaf 	bl	8000efc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_PCD_MspInit+0x114>)
 80013a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a4:	4a23      	ldr	r2, [pc, #140]	; (8001434 <HAL_PCD_MspInit+0x114>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_PCD_MspInit+0x114>)
 80013b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b4:	f003 0201 	and.w	r2, r3, #1
 80013b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013c6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013ca:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80013cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80013e6:	230a      	movs	r3, #10
 80013e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80013f0:	4619      	mov	r1, r3
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <HAL_PCD_MspInit+0x118>)
 80013f4:	f001 fe38 	bl	8003068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_PCD_MspInit+0x114>)
 80013fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013fe:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_PCD_MspInit+0x114>)
 8001400:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001404:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_PCD_MspInit+0x114>)
 800140a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800140e:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8001412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001416:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001420:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001424:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40016000 	.word	0x40016000
 8001434:	44020c00 	.word	0x44020c00
 8001438:	42020000 	.word	0x42020000

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001440:	e7fe      	b.n	8001440 <NMI_Handler+0x4>

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 f922 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001494:	2001      	movs	r0, #1
 8001496:	f001 ff51 	bl	800333c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}

0800149e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80014a2:	2002      	movs	r0, #2
 80014a4:	f001 ff4a 	bl	800333c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80014b0:	2004      	movs	r0, #4
 80014b2:	f001 ff43 	bl	800333c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}

080014ba <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80014be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014c2:	f001 ff3b 	bl	800333c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d2:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <SystemInit+0xdc>)
 80014d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d8:	4a33      	ldr	r2, [pc, #204]	; (80015a8 <SystemInit+0xdc>)
 80014da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <SystemInit+0xe0>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80014e8:	4b30      	ldr	r3, [pc, #192]	; (80015ac <SystemInit+0xe0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <SystemInit+0xe0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <SystemInit+0xe0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	492c      	ldr	r1, [pc, #176]	; (80015ac <SystemInit+0xe0>)
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <SystemInit+0xe4>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <SystemInit+0xe0>)
 8001502:	2200      	movs	r2, #0
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <SystemInit+0xe0>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <SystemInit+0xe0>)
 800150e:	2200      	movs	r2, #0
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <SystemInit+0xe0>)
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <SystemInit+0xe8>)
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <SystemInit+0xe0>)
 800151a:	2200      	movs	r2, #0
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <SystemInit+0xe0>)
 8001520:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <SystemInit+0xe8>)
 8001522:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <SystemInit+0xe0>)
 8001526:	2200      	movs	r2, #0
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <SystemInit+0xe0>)
 800152c:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <SystemInit+0xe8>)
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <SystemInit+0xe0>)
 8001532:	2200      	movs	r2, #0
 8001534:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <SystemInit+0xe0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <SystemInit+0xe0>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <SystemInit+0xe0>)
 8001544:	2200      	movs	r2, #0
 8001546:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <SystemInit+0xdc>)
 800154a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800154e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <SystemInit+0xec>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001558:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001560:	d003      	beq.n	800156a <SystemInit+0x9e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001568:	d117      	bne.n	800159a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <SystemInit+0xec>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <SystemInit+0xec>)
 8001578:	4a10      	ldr	r2, [pc, #64]	; (80015bc <SystemInit+0xf0>)
 800157a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <SystemInit+0xec>)
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <SystemInit+0xf4>)
 8001580:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <SystemInit+0xec>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <SystemInit+0xec>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <SystemInit+0xec>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <SystemInit+0xec>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	61d3      	str	r3, [r2, #28]
  }
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	44020c00 	.word	0x44020c00
 80015b0:	eae2eae3 	.word	0xeae2eae3
 80015b4:	01010280 	.word	0x01010280
 80015b8:	40022000 	.word	0x40022000
 80015bc:	08192a3b 	.word	0x08192a3b
 80015c0:	4c5d6e7f 	.word	0x4c5d6e7f

080015c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015c8:	f7ff ff80 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <LoopForever+0xe>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <LoopForever+0x16>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015f2:	f009 f967 	bl	800a8c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f6:	f7ff f92b 	bl	8000850 <main>

080015fa <LoopForever>:

LoopForever:
    b LoopForever
 80015fa:	e7fe      	b.n	80015fa <LoopForever>
  ldr   r0, =_estack
 80015fc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001608:	0800a974 	.word	0x0800a974
  ldr r2, =_sbss
 800160c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001610:	200006a8 	.word	0x200006a8

08001614 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC1_IRQHandler>
	...

08001618 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f001 f8af 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001622:	f002 fdaf 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8001626:	4602      	mov	r2, r0
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_Init+0x40>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	490a      	ldr	r1, [pc, #40]	; (800165c <HAL_Init+0x44>)
 8001632:	5ccb      	ldrb	r3, [r1, r3]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
 8001638:	4a09      	ldr	r2, [pc, #36]	; (8001660 <HAL_Init+0x48>)
 800163a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163c:	200f      	movs	r0, #15
 800163e:	f000 f811 	bl	8001664 <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e002      	b.n	8001652 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fc5b 	bl	8000f06 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	44020c00 	.word	0x44020c00
 800165c:	0800a924 	.word	0x0800a924
 8001660:	20000030 	.word	0x20000030

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_InitTick+0x60>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e021      	b.n	80016bc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_InitTick+0x64>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_InitTick+0x60>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f001 f8a9 	bl	80027e6 <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f001 f873 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x68>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000038 	.word	0x20000038
 80016c8:	20000030 	.word	0x20000030
 80016cc:	20000034 	.word	0x20000034

080016d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000038 	.word	0x20000038
 80016f4:	200006a4 	.word	0x200006a4

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200006a4 	.word	0x200006a4

08001710 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <HAL_SBS_ETHInterfaceSelect+0x28>)
 800171a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800171e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001722:	4905      	ldr	r1, [pc, #20]	; (8001738 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4313      	orrs	r3, r2
 8001728:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	44000400 	.word	0x44000400

0800173c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	609a      	str	r2, [r3, #8]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_ADC_EnableChannel0_GPIO+0x24>)
 80017d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <LL_ADC_EnableChannel0_GPIO+0x24>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	42028000 	.word	0x42028000

080017f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3360      	adds	r3, #96	; 0x60
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <LL_ADC_SetOffset+0x44>)
 8001812:	4013      	ands	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	4313      	orrs	r3, r2
 8001820:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001828:	bf00      	nop
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	03fff000 	.word	0x03fff000

08001838 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3360      	adds	r3, #96	; 0x60
 8001846:	461a      	mov	r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3360      	adds	r3, #96	; 0x60
 8001874:	461a      	mov	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	431a      	orrs	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800188e:	bf00      	nop
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800189a:	b480      	push	{r7}
 800189c:	b087      	sub	sp, #28
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3360      	adds	r3, #96	; 0x60
 80018aa:	461a      	mov	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	431a      	orrs	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80018c4:	bf00      	nop
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3360      	adds	r3, #96	; 0x60
 80018e0:	461a      	mov	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80018fa:	bf00      	nop
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	615a      	str	r2, [r3, #20]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3330      	adds	r3, #48	; 0x30
 800193c:	461a      	mov	r2, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	211f      	movs	r1, #31
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	401a      	ands	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	f003 011f 	and.w	r1, r3, #31
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	431a      	orrs	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001978:	bf00      	nop
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3314      	adds	r3, #20
 8001994:	461a      	mov	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	0e5b      	lsrs	r3, r3, #25
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	4413      	add	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	0d1b      	lsrs	r3, r3, #20
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2107      	movs	r1, #7
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	401a      	ands	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	0d1b      	lsrs	r3, r3, #20
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	431a      	orrs	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0318 	and.w	r3, r3, #24
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a00:	40d9      	lsrs	r1, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	400b      	ands	r3, r1
 8001a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	000fffff 	.word	0x000fffff

08001a24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6093      	str	r3, [r2, #8]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a5c:	d101      	bne.n	8001a62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001aac:	d101      	bne.n	8001ab2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <LL_ADC_IsEnabled+0x18>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <LL_ADC_IsEnabled+0x1a>
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d101      	bne.n	8001afe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d101      	bne.n	8001b24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e136      	b.n	8001dbc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff f9d9 	bl	8000f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff67 	bl	8001a48 <LL_ADC_IsDeepPowerDownEnabled>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff4d 	bl	8001a24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff82 	bl	8001a98 <LL_ADC_IsInternalRegulatorEnabled>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff66 	bl	8001a70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ba4:	4b87      	ldr	r3, [pc, #540]	; (8001dc4 <HAL_ADC_Init+0x290>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	4a87      	ldr	r2, [pc, #540]	; (8001dc8 <HAL_ADC_Init+0x294>)
 8001bac:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb0:	099b      	lsrs	r3, r3, #6
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bb8:	e002      	b.n	8001bc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f9      	bne.n	8001bba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff64 	bl	8001a98 <LL_ADC_IsInternalRegulatorEnabled>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10d      	bne.n	8001bf2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	f043 0210 	orr.w	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	f043 0201 	orr.w	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff75 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 8001bfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 80cf 	bne.w	8001daa <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 80cb 	bne.w	8001daa <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c1c:	f043 0202 	orr.w	r2, r3, #2
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff49 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d110      	bne.n	8001c56 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c34:	4865      	ldr	r0, [pc, #404]	; (8001dcc <HAL_ADC_Init+0x298>)
 8001c36:	f7ff ff43 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4864      	ldr	r0, [pc, #400]	; (8001dd0 <HAL_ADC_Init+0x29c>)
 8001c3e:	f7ff ff3f 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4323      	orrs	r3, r4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4860      	ldr	r0, [pc, #384]	; (8001dd4 <HAL_ADC_Init+0x2a0>)
 8001c52:	f7ff fd73 	bl	800173c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7e5b      	ldrb	r3, [r3, #25]
 8001c5a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c60:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c66:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c6c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c74:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	045b      	lsls	r3, r3, #17
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <HAL_ADC_Init+0x2a4>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	69b9      	ldr	r1, [r7, #24]
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff15 	bl	8001b0c <LL_ADC_INJ_IsConversionOngoing>
 8001ce2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d13d      	bne.n	8001d66 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d13a      	bne.n	8001d66 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7e1b      	ldrb	r3, [r3, #24]
 8001cf4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cfc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d0c:	f023 0302 	bic.w	r3, r3, #2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	69b9      	ldr	r1, [r7, #24]
 8001d16:	430b      	orrs	r3, r1
 8001d18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d118      	bne.n	8001d56 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d2e:	f023 0304 	bic.w	r3, r3, #4
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d40:	4311      	orrs	r1, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d46:	430a      	orrs	r2, r1
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	e007      	b.n	8001d66 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d10c      	bne.n	8001d88 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f023 010f 	bic.w	r1, r3, #15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	1e5a      	subs	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
 8001d86:	e007      	b.n	8001d98 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 020f 	bic.w	r2, r2, #15
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	f023 0303 	bic.w	r3, r3, #3
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	659a      	str	r2, [r3, #88]	; 0x58
 8001da8:	e007      	b.n	8001dba <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3724      	adds	r7, #36	; 0x24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	20000030 	.word	0x20000030
 8001dc8:	053e2d63 	.word	0x053e2d63
 8001dcc:	42028000 	.word	0x42028000
 8001dd0:	42028100 	.word	0x42028100
 8001dd4:	42028300 	.word	0x42028300
 8001dd8:	fff04007 	.word	0xfff04007

08001ddc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0b6      	sub	sp, #216	; 0xd8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x22>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e3d8      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x7d4>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fe6b 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 83bd 	bne.w	8002592 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d104      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fccf 	bl	80017c8 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6859      	ldr	r1, [r3, #4]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	f7ff fd78 	bl	800192c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fe50 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 8001e46:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fe5c 	bl	8001b0c <LL_ADC_INJ_IsConversionOngoing>
 8001e54:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f040 81d9 	bne.w	8002214 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 81d4 	bne.w	8002214 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e74:	d10f      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	f7ff fd7f 	bl	8001984 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fd39 	bl	8001906 <LL_ADC_SetSamplingTimeCommonConfig>
 8001e94:	e00e      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6819      	ldr	r1, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f7ff fd6e 	bl	8001984 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fd29 	bl	8001906 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	08db      	lsrs	r3, r3, #3
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d022      	beq.n	8001f1c <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6919      	ldr	r1, [r3, #16]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ee6:	f7ff fc83 	bl	80017f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6919      	ldr	r1, [r3, #16]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7ff fccf 	bl	800189a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d102      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x136>
 8001f0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f10:	e000      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x138>
 8001f12:	2300      	movs	r3, #0
 8001f14:	461a      	mov	r2, r3
 8001f16:	f7ff fcdb 	bl	80018d0 <LL_ADC_SetOffsetSaturation>
 8001f1a:	e17b      	b.n	8002214 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fc88 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x16c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fc7d 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	0e9b      	lsrs	r3, r3, #26
 8001f42:	f003 021f 	and.w	r2, r3, #31
 8001f46:	e01e      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1aa>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fc72 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8001f66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8001f6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8001f76:	2320      	movs	r3, #32
 8001f78:	e004      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8001f7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d105      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x1c2>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0e9b      	lsrs	r3, r3, #26
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	e018      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x1f4>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	e004      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8001fc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fc41 	bl	8001864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fc25 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <HAL_ADC_ConfigChannel+0x232>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fc1a 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	e01e      	b.n	800204c <HAL_ADC_ConfigChannel+0x270>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2101      	movs	r1, #1
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fc0f 	bl	8001838 <LL_ADC_GetOffsetChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800202c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 800203c:	2320      	movs	r3, #32
 800203e:	e004      	b.n	800204a <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8002040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x288>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	e018      	b.n	8002096 <HAL_ADC_ConfigChannel+0x2ba>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002078:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800207c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e004      	b.n	8002096 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 800208c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002096:	429a      	cmp	r2, r3
 8002098:	d106      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2200      	movs	r2, #0
 80020a0:	2101      	movs	r1, #1
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fbde 	bl	8001864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2102      	movs	r1, #2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fbc2 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10a      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x2f8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2102      	movs	r1, #2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fbb7 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 021f 	and.w	r2, r3, #31
 80020d2:	e01e      	b.n	8002112 <HAL_ADC_ConfigChannel+0x336>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2102      	movs	r1, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fbac 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8002102:	2320      	movs	r3, #32
 8002104:	e004      	b.n	8002110 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8002106:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_ADC_ConfigChannel+0x34e>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	0e9b      	lsrs	r3, r3, #26
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	e016      	b.n	8002158 <HAL_ADC_ConfigChannel+0x37c>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800213c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800213e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 800214a:	2320      	movs	r3, #32
 800214c:	e004      	b.n	8002158 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 800214e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002158:	429a      	cmp	r2, r3
 800215a:	d106      	bne.n	800216a <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	2102      	movs	r1, #2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fb7d 	bl	8001864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2103      	movs	r1, #3
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fb61 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002176:	4603      	mov	r3, r0
 8002178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x3ba>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2103      	movs	r1, #3
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fb56 	bl	8001838 <LL_ADC_GetOffsetChannel>
 800218c:	4603      	mov	r3, r0
 800218e:	0e9b      	lsrs	r3, r3, #26
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	e017      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x3ea>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2103      	movs	r1, #3
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fb4b 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e003      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 80021bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d105      	bne.n	80021de <HAL_ADC_ConfigChannel+0x402>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	0e9b      	lsrs	r3, r3, #26
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	e011      	b.n	8002202 <HAL_ADC_ConfigChannel+0x426>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 80021f6:	2320      	movs	r3, #32
 80021f8:	e003      	b.n	8002202 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 80021fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002202:	429a      	cmp	r2, r3
 8002204:	d106      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	2103      	movs	r1, #3
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fb28 	bl	8001864 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fc51 	bl	8001ac0 <LL_ADC_IsEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 813f 	bne.w	80024a4 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	461a      	mov	r2, r3
 8002234:	f7ff fbd2 	bl	80019dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a8e      	ldr	r2, [pc, #568]	; (8002478 <HAL_ADC_ConfigChannel+0x69c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	f040 8130 	bne.w	80024a4 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <HAL_ADC_ConfigChannel+0x490>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0e9b      	lsrs	r3, r3, #26
 800225a:	3301      	adds	r3, #1
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	2b09      	cmp	r3, #9
 8002262:	bf94      	ite	ls
 8002264:	2301      	movls	r3, #1
 8002266:	2300      	movhi	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e019      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x4c4>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800227a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800227c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800227e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002284:	2320      	movs	r3, #32
 8002286:	e003      	b.n	8002290 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	2b09      	cmp	r3, #9
 8002298:	bf94      	ite	ls
 800229a:	2301      	movls	r3, #1
 800229c:	2300      	movhi	r3, #0
 800229e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d079      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d107      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x4e4>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0e9b      	lsrs	r3, r3, #26
 80022b6:	3301      	adds	r3, #1
 80022b8:	069b      	lsls	r3, r3, #26
 80022ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022be:	e015      	b.n	80022ec <HAL_ADC_ConfigChannel+0x510>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e003      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 80022dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	069b      	lsls	r3, r3, #26
 80022e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_ADC_ConfigChannel+0x530>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	3301      	adds	r3, #1
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2101      	movs	r1, #1
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	e017      	b.n	800233c <HAL_ADC_ConfigChannel+0x560>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800231a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800231c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800231e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e003      	b.n	8002330 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2101      	movs	r1, #1
 8002338:	fa01 f303 	lsl.w	r3, r1, r3
 800233c:	ea42 0103 	orr.w	r1, r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x586>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	3301      	adds	r3, #1
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	051b      	lsls	r3, r3, #20
 8002360:	e018      	b.n	8002394 <HAL_ADC_ConfigChannel+0x5b8>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 800237a:	2320      	movs	r3, #32
 800237c:	e003      	b.n	8002386 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 800237e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002394:	430b      	orrs	r3, r1
 8002396:	e080      	b.n	800249a <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d107      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x5d8>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	3301      	adds	r3, #1
 80023ac:	069b      	lsls	r3, r3, #26
 80023ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b2:	e015      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x604>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	e003      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	069b      	lsls	r3, r3, #26
 80023dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x624>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0e9b      	lsrs	r3, r3, #26
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	e017      	b.n	8002430 <HAL_ADC_ConfigChannel+0x654>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	61fb      	str	r3, [r7, #28]
  return result;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002418:	2320      	movs	r3, #32
 800241a:	e003      	b.n	8002424 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2101      	movs	r1, #1
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	ea42 0103 	orr.w	r1, r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10d      	bne.n	800245c <HAL_ADC_ConfigChannel+0x680>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	3301      	adds	r3, #1
 8002448:	f003 021f 	and.w	r2, r3, #31
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	3b1e      	subs	r3, #30
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800245a:	e01d      	b.n	8002498 <HAL_ADC_ConfigChannel+0x6bc>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	613b      	str	r3, [r7, #16]
  return result;
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002474:	2320      	movs	r3, #32
 8002476:	e005      	b.n	8002484 <HAL_ADC_ConfigChannel+0x6a8>
 8002478:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f003 021f 	and.w	r2, r3, #31
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	3b1e      	subs	r3, #30
 8002492:	051b      	lsls	r3, r3, #20
 8002494:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002498:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800249e:	4619      	mov	r1, r3
 80024a0:	f7ff fa70 	bl	8001984 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_ADC_ConfigChannel+0x7dc>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d079      	beq.n	80025a4 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024b0:	4842      	ldr	r0, [pc, #264]	; (80025bc <HAL_ADC_ConfigChannel+0x7e0>)
 80024b2:	f7ff f969 	bl	8001788 <LL_ADC_GetCommonPathInternalCh>
 80024b6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a40      	ldr	r2, [pc, #256]	; (80025c0 <HAL_ADC_ConfigChannel+0x7e4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d124      	bne.n	800250e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11e      	bne.n	800250e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <HAL_ADC_ConfigChannel+0x7e8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d164      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024e2:	4619      	mov	r1, r3
 80024e4:	4835      	ldr	r0, [pc, #212]	; (80025bc <HAL_ADC_ConfigChannel+0x7e0>)
 80024e6:	f7ff f93c 	bl	8001762 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024ea:	4b37      	ldr	r3, [pc, #220]	; (80025c8 <HAL_ADC_ConfigChannel+0x7ec>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	4a36      	ldr	r2, [pc, #216]	; (80025cc <HAL_ADC_ConfigChannel+0x7f0>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	099b      	lsrs	r3, r3, #6
 80024f8:	3301      	adds	r3, #1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024fe:	e002      	b.n	8002506 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3b01      	subs	r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f9      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800250c:	e04a      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2f      	ldr	r2, [pc, #188]	; (80025d0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d113      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800251c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10d      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2a      	ldr	r2, [pc, #168]	; (80025d4 <HAL_ADC_ConfigChannel+0x7f8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d13a      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800252e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002536:	4619      	mov	r1, r3
 8002538:	4820      	ldr	r0, [pc, #128]	; (80025bc <HAL_ADC_ConfigChannel+0x7e0>)
 800253a:	f7ff f912 	bl	8001762 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800253e:	e031      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <HAL_ADC_ConfigChannel+0x7fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d113      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800254a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <HAL_ADC_ConfigChannel+0x7e8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d121      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002568:	4619      	mov	r1, r3
 800256a:	4814      	ldr	r0, [pc, #80]	; (80025bc <HAL_ADC_ConfigChannel+0x7e0>)
 800256c:	f7ff f8f9 	bl	8001762 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002570:	e018      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_ADC_ConfigChannel+0x800>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d113      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00e      	beq.n	80025a4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f90a 	bl	80017a4 <LL_ADC_EnableChannelVDDcore>
 8002590:	e008      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f043 0220 	orr.w	r2, r3, #32
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025ac:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	37d8      	adds	r7, #216	; 0xd8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	80080000 	.word	0x80080000
 80025bc:	42028300 	.word	0x42028300
 80025c0:	c3210000 	.word	0xc3210000
 80025c4:	42028000 	.word	0x42028000
 80025c8:	20000030 	.word	0x20000030
 80025cc:	053e2d63 	.word	0x053e2d63
 80025d0:	43290000 	.word	0x43290000
 80025d4:	42028100 	.word	0x42028100
 80025d8:	c7520000 	.word	0xc7520000
 80025dc:	475a0000 	.word	0x475a0000

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff40 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff90 	bl	80026d4 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff5f 	bl	8002680 <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff33 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffa4 	bl	800273c <SysTick_Config>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0d2      	b.n	80029b8 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2223      	movs	r2, #35	; 0x23
 8002820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7fe fbfd 	bl	8001024 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 800282a:	4b65      	ldr	r3, [pc, #404]	; (80029c0 <HAL_ETH_Init+0x1c0>)
 800282c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002830:	4a63      	ldr	r2, [pc, #396]	; (80029c0 <HAL_ETH_Init+0x1c0>)
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800283a:	4b61      	ldr	r3, [pc, #388]	; (80029c0 <HAL_ETH_Init+0x1c0>)
 800283c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7a1b      	ldrb	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8002850:	2000      	movs	r0, #0
 8002852:	f7fe ff5d 	bl	8001710 <HAL_SBS_ETHInterfaceSelect>
 8002856:	e003      	b.n	8002860 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8002858:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800285c:	f7fe ff58 	bl	8001710 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8002860:	4b58      	ldr	r3, [pc, #352]	; (80029c4 <HAL_ETH_Init+0x1c4>)
 8002862:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800287c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800287e:	f7fe ff3b 	bl	80016f8 <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002884:	e011      	b.n	80028aa <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002886:	f7fe ff37 	bl	80016f8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002894:	d909      	bls.n	80028aa <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2204      	movs	r2, #4
 800289a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	22e0      	movs	r2, #224	; 0xe0
 80028a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e086      	b.n	80029b8 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e4      	bne.n	8002886 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f885 	bl	80029cc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80028c2:	f001 fd8b 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4a3f      	ldr	r2, [pc, #252]	; (80029c8 <HAL_ETH_Init+0x1c8>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0c9a      	lsrs	r2, r3, #18
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3a01      	subs	r2, #1
 80028d6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa80 	bl	8002de0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80028ec:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028fc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d009      	beq.n	8002920 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	22e0      	movs	r2, #224	; 0xe0
 8002918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e04b      	b.n	80029b8 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002928:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800292c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002930:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6952      	ldr	r2, [r2, #20]
 8002938:	0051      	lsls	r1, r2, #1
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	430b      	orrs	r3, r1
 8002940:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002944:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fae6 	bl	8002f1a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fb2c 	bl	8002fac <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	3305      	adds	r3, #5
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	021a      	lsls	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	4619      	mov	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	3303      	adds	r3, #3
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	061a      	lsls	r2, r3, #24
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	3302      	adds	r3, #2
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	3301      	adds	r3, #1
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002992:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80029a0:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80029a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2210      	movs	r2, #16
 80029b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	44020c00 	.word	0x44020c00
 80029c4:	44000400 	.word	0x44000400
 80029c8:	431bde83 	.word	0x431bde83

080029cc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80029e6:	f001 fcf9 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 80029ea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <HAL_ETH_SetMDIOClockRange+0xb8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d908      	bls.n	8002a06 <HAL_ETH_SetMDIOClockRange+0x3a>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <HAL_ETH_SetMDIOClockRange+0xbc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d804      	bhi.n	8002a06 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e034      	b.n	8002a70 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d908      	bls.n	8002a20 <HAL_ETH_SetMDIOClockRange+0x54>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d204      	bcs.n	8002a20 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e027      	b.n	8002a70 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d303      	bcc.n	8002a30 <HAL_ETH_SetMDIOClockRange+0x64>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d91e      	bls.n	8002a6e <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d908      	bls.n	8002a4a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d804      	bhi.n	8002a4a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e012      	b.n	8002a70 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d908      	bls.n	8002a64 <HAL_ETH_SetMDIOClockRange+0x98>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d804      	bhi.n	8002a64 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e005      	b.n	8002a70 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e000      	b.n	8002a70 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002a6e:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	01312cff 	.word	0x01312cff
 8002a88:	02160ebf 	.word	0x02160ebf
 8002a8c:	03938700 	.word	0x03938700
 8002a90:	05f5e0ff 	.word	0x05f5e0ff
 8002a94:	08f0d17f 	.word	0x08f0d17f
 8002a98:	0ee6b280 	.word	0x0ee6b280

08002a9c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002aae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	791b      	ldrb	r3, [r3, #4]
 8002ab4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002ab6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	7b1b      	ldrb	r3, [r3, #12]
 8002abc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002abe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	7b5b      	ldrb	r3, [r3, #13]
 8002ac4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ac6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	7b9b      	ldrb	r3, [r3, #14]
 8002acc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ace:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	7bdb      	ldrb	r3, [r3, #15]
 8002ad4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ad6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	7c12      	ldrb	r2, [r2, #16]
 8002adc:	2a00      	cmp	r2, #0
 8002ade:	d102      	bne.n	8002ae6 <ETH_SetMACConfig+0x4a>
 8002ae0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ae4:	e000      	b.n	8002ae8 <ETH_SetMACConfig+0x4c>
 8002ae6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ae8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	7c52      	ldrb	r2, [r2, #17]
 8002aee:	2a00      	cmp	r2, #0
 8002af0:	d102      	bne.n	8002af8 <ETH_SetMACConfig+0x5c>
 8002af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002af6:	e000      	b.n	8002afa <ETH_SetMACConfig+0x5e>
 8002af8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002afa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	7c9b      	ldrb	r3, [r3, #18]
 8002b00:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b02:	431a      	orrs	r2, r3
               macconf->Speed |
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b08:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002b0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	7f1b      	ldrb	r3, [r3, #28]
 8002b14:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002b16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	7f5b      	ldrb	r3, [r3, #29]
 8002b1c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	7f92      	ldrb	r2, [r2, #30]
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	d102      	bne.n	8002b2e <ETH_SetMACConfig+0x92>
 8002b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b2c:	e000      	b.n	8002b30 <ETH_SetMACConfig+0x94>
 8002b2e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b30:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	7fdb      	ldrb	r3, [r3, #31]
 8002b36:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b40:	2a00      	cmp	r2, #0
 8002b42:	d102      	bne.n	8002b4a <ETH_SetMACConfig+0xae>
 8002b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b48:	e000      	b.n	8002b4c <ETH_SetMACConfig+0xb0>
 8002b4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b4c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b5a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002b5c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b57      	ldr	r3, [pc, #348]	; (8002ccc <ETH_SetMACConfig+0x230>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	68f9      	ldr	r1, [r7, #12]
 8002b76:	430b      	orrs	r3, r1
 8002b78:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b86:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b88:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b90:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002b92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002b9a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002b9c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002ba4:	2a00      	cmp	r2, #0
 8002ba6:	d102      	bne.n	8002bae <ETH_SetMACConfig+0x112>
 8002ba8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bac:	e000      	b.n	8002bb0 <ETH_SetMACConfig+0x114>
 8002bae:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002bb0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <ETH_SetMACConfig+0x234>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	68f9      	ldr	r1, [r7, #12]
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	68f9      	ldr	r1, [r7, #12]
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bfc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c02:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c0a:	2a00      	cmp	r2, #0
 8002c0c:	d101      	bne.n	8002c12 <ETH_SetMACConfig+0x176>
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	e000      	b.n	8002c14 <ETH_SetMACConfig+0x178>
 8002c12:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002c14:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c26:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	430b      	orrs	r3, r1
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002c3c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002c44:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f023 0103 	bic.w	r1, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002c6a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002c86:	2a00      	cmp	r2, #0
 8002c88:	d101      	bne.n	8002c8e <ETH_SetMACConfig+0x1f2>
 8002c8a:	2240      	movs	r2, #64	; 0x40
 8002c8c:	e000      	b.n	8002c90 <ETH_SetMACConfig+0x1f4>
 8002c8e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002c90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002c98:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002ca2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002cb0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	00048083 	.word	0x00048083
 8002cd0:	c0f88000 	.word	0xc0f88000

08002cd4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002cec:	f023 0302 	bic.w	r3, r3, #2
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	6811      	ldr	r1, [r2, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cfe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	791b      	ldrb	r3, [r3, #4]
 8002d04:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d0a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	7b1b      	ldrb	r3, [r3, #12]
 8002d10:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d34:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	7b5b      	ldrb	r3, [r3, #13]
 8002d3a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <ETH_SetDMAConfig+0x104>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	68f9      	ldr	r1, [r7, #12]
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d60:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	7d1b      	ldrb	r3, [r3, #20]
 8002d6c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d6e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	7f5b      	ldrb	r3, [r3, #29]
 8002d74:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d82:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <ETH_SetDMAConfig+0x108>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	68f9      	ldr	r1, [r7, #12]
 8002d90:	430b      	orrs	r3, r1
 8002d92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d96:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	7f1b      	ldrb	r3, [r3, #28]
 8002d9e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002db8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	68f9      	ldr	r1, [r7, #12]
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dc8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	fffec000 	.word	0xfffec000
 8002ddc:	ffc0efef 	.word	0xffc0efef

08002de0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b0a4      	sub	sp, #144	; 0x90
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002dee:	2300      	movs	r3, #0
 8002df0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e20:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002e38:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002e3c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002e44:	2300      	movs	r3, #0
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002e62:	2300      	movs	r3, #0
 8002e64:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002e8a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e94:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff fde6 	bl	8002a9c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002eea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ef4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ef8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002f00:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f06:	f107 0308 	add.w	r3, r7, #8
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fee1 	bl	8002cd4 <ETH_SetDMAConfig>
}
 8002f12:	bf00      	nop
 8002f14:	3790      	adds	r7, #144	; 0x90
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e01d      	b.n	8002f64 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68d9      	ldr	r1, [r3, #12]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	3206      	adds	r2, #6
 8002f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3301      	adds	r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d9de      	bls.n	8002f28 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f9c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e023      	b.n	8003002 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6919      	ldr	r1, [r3, #16]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2200      	movs	r2, #0
 8002fee:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	3212      	adds	r2, #18
 8002ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d9d8      	bls.n	8002fba <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800302e:	461a      	mov	r2, r3
 8003030:	2303      	movs	r3, #3
 8003032:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003042:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003056:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003076:	e136      	b.n	80032e6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	4013      	ands	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8128 	beq.w	80032e0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x38>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b12      	cmp	r3, #18
 800309e:	d125      	bne.n	80030ec <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4013      	ands	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	6979      	ldr	r1, [r7, #20]
 80030e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4013      	ands	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d00b      	beq.n	8003140 <HAL_GPIO_Init+0xd8>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d007      	beq.n	8003140 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003134:	2b11      	cmp	r3, #17
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b12      	cmp	r3, #18
 800313e:	d130      	bne.n	80031a2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2203      	movs	r2, #3
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4013      	ands	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003176:	2201      	movs	r2, #1
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4013      	ands	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	f003 0201 	and.w	r2, r3, #1
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d017      	beq.n	80031da <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	2203      	movs	r2, #3
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4013      	ands	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d07c      	beq.n	80032e0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80031e6:	4a47      	ldr	r2, [pc, #284]	; (8003304 <HAL_GPIO_Init+0x29c>)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3318      	adds	r3, #24
 80031ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	220f      	movs	r2, #15
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4013      	ands	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0a9a      	lsrs	r2, r3, #10
 800320e:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <HAL_GPIO_Init+0x2a0>)
 8003210:	4013      	ands	r3, r2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	f002 0203 	and.w	r2, r2, #3
 8003218:	00d2      	lsls	r2, r2, #3
 800321a:	4093      	lsls	r3, r2
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003222:	4938      	ldr	r1, [pc, #224]	; (8003304 <HAL_GPIO_Init+0x29c>)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	3318      	adds	r3, #24
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003230:	4b34      	ldr	r3, [pc, #208]	; (8003304 <HAL_GPIO_Init+0x29c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	43db      	mvns	r3, r3
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4013      	ands	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003254:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <HAL_GPIO_Init+0x29c>)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800325a:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <HAL_GPIO_Init+0x29c>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	43db      	mvns	r3, r3
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4013      	ands	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800327e:	4a21      	ldr	r2, [pc, #132]	; (8003304 <HAL_GPIO_Init+0x29c>)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003284:	4b1f      	ldr	r3, [pc, #124]	; (8003304 <HAL_GPIO_Init+0x29c>)
 8003286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	43db      	mvns	r3, r3
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4013      	ands	r3, r2
 8003294:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80032aa:	4a16      	ldr	r2, [pc, #88]	; (8003304 <HAL_GPIO_Init+0x29c>)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80032b2:	4b14      	ldr	r3, [pc, #80]	; (8003304 <HAL_GPIO_Init+0x29c>)
 80032b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43db      	mvns	r3, r3
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4013      	ands	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80032d8:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <HAL_GPIO_Init+0x29c>)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	3301      	adds	r3, #1
 80032e4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f47f aec1 	bne.w	8003078 <HAL_GPIO_Init+0x10>
  }
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	44022000 	.word	0x44022000
 8003308:	002f7f7f 	.word	0x002f7f7f

0800330c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
 8003318:	4613      	mov	r3, r2
 800331a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800331c:	787b      	ldrb	r3, [r7, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003328:	e002      	b.n	8003330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003346:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d006      	beq.n	8003360 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003352:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd fda2 	bl	8000ea4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d006      	beq.n	800337a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800336c:	4a05      	ldr	r2, [pc, #20]	; (8003384 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd fdab 	bl	8000ed0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	44022000 	.word	0x44022000

08003388 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_ICACHE_Enable+0x1c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <HAL_ICACHE_Enable+0x1c>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40030400 	.word	0x40030400

080033a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033aa:	b08f      	sub	sp, #60	; 0x3c
 80033ac:	af0a      	add	r7, sp, #40	; 0x28
 80033ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e0cd      	b.n	8003556 <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd ffa6 	bl	8001320 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2203      	movs	r2, #3
 80033d8:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f007 fa0c 	bl	800a7fe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	e03e      	b.n	800346a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	333d      	adds	r3, #61	; 0x3d
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	333c      	adds	r3, #60	; 0x3c
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	333f      	adds	r3, #63	; 0x3f
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	334c      	adds	r3, #76	; 0x4c
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	3350      	adds	r3, #80	; 0x50
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	3354      	adds	r3, #84	; 0x54
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	3301      	adds	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	429a      	cmp	r2, r3
 8003472:	d3bb      	bcc.n	80033ec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e044      	b.n	8003504 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	f203 137d 	addw	r3, r3, #381	; 0x17d
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	f203 137f 	addw	r3, r3, #383	; 0x17f
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	440b      	add	r3, r1
 80034e0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	440b      	add	r3, r1
 80034f6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	3301      	adds	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	429a      	cmp	r2, r3
 800350c:	d3b5      	bcc.n	800347a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	687e      	ldr	r6, [r7, #4]
 8003516:	466d      	mov	r5, sp
 8003518:	f106 0410 	add.w	r4, r6, #16
 800351c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800351e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003528:	e885 0003 	stmia.w	r5, {r0, r1}
 800352c:	1d33      	adds	r3, r6, #4
 800352e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003530:	6838      	ldr	r0, [r7, #0]
 8003532:	f007 f99c 	bl	800a86e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2b01      	cmp	r3, #1
 800354c:	d102      	bne.n	8003554 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f805 	bl	800355e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800355e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	f043 0202 	orr.w	r2, r3, #2
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f000 bc28 	b.w	8003e08 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b8:	4b94      	ldr	r3, [pc, #592]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f003 0318 	and.w	r3, r3, #24
 80035c0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80035c2:	4b92      	ldr	r3, [pc, #584]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d05b      	beq.n	8003690 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x46>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	2b18      	cmp	r3, #24
 80035e2:	d114      	bne.n	800360e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d111      	bne.n	800360e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f000 bc08 	b.w	8003e08 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80035f8:	4b84      	ldr	r3, [pc, #528]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	4981      	ldr	r1, [pc, #516]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003608:	4313      	orrs	r3, r2
 800360a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800360c:	e040      	b.n	8003690 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d023      	beq.n	800365e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003616:	4b7d      	ldr	r3, [pc, #500]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7c      	ldr	r2, [pc, #496]	; (800380c <HAL_RCC_OscConfig+0x268>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fe f869 	bl	80016f8 <HAL_GetTick>
 8003626:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800362a:	f7fe f865 	bl	80016f8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e3e5      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800363c:	4b73      	ldr	r3, [pc, #460]	; (800380c <HAL_RCC_OscConfig+0x268>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003648:	4b70      	ldr	r3, [pc, #448]	; (800380c <HAL_RCC_OscConfig+0x268>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	041b      	lsls	r3, r3, #16
 8003656:	496d      	ldr	r1, [pc, #436]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003658:	4313      	orrs	r3, r2
 800365a:	618b      	str	r3, [r1, #24]
 800365c:	e018      	b.n	8003690 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800365e:	4b6b      	ldr	r3, [pc, #428]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6a      	ldr	r2, [pc, #424]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fe f845 	bl	80016f8 <HAL_GetTick>
 800366e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003672:	f7fe f841 	bl	80016f8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e3c1      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003684:	4b61      	ldr	r3, [pc, #388]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a0 	beq.w	80037de <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_OscConfig+0x10c>
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b18      	cmp	r3, #24
 80036a8:	d109      	bne.n	80036be <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 8092 	bne.w	80037de <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e3a4      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c6:	d106      	bne.n	80036d6 <HAL_RCC_OscConfig+0x132>
 80036c8:	4b50      	ldr	r3, [pc, #320]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a4f      	ldr	r2, [pc, #316]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80036ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	e058      	b.n	8003788 <HAL_RCC_OscConfig+0x1e4>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d112      	bne.n	8003704 <HAL_RCC_OscConfig+0x160>
 80036de:	4b4b      	ldr	r3, [pc, #300]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80036e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b48      	ldr	r3, [pc, #288]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a47      	ldr	r2, [pc, #284]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80036f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b45      	ldr	r3, [pc, #276]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a44      	ldr	r2, [pc, #272]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80036fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e041      	b.n	8003788 <HAL_RCC_OscConfig+0x1e4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800370c:	d112      	bne.n	8003734 <HAL_RCC_OscConfig+0x190>
 800370e:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a3e      	ldr	r2, [pc, #248]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b3c      	ldr	r3, [pc, #240]	; (800380c <HAL_RCC_OscConfig+0x268>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3b      	ldr	r2, [pc, #236]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003720:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b39      	ldr	r3, [pc, #228]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a38      	ldr	r2, [pc, #224]	; (800380c <HAL_RCC_OscConfig+0x268>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e029      	b.n	8003788 <HAL_RCC_OscConfig+0x1e4>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800373c:	d112      	bne.n	8003764 <HAL_RCC_OscConfig+0x1c0>
 800373e:	4b33      	ldr	r3, [pc, #204]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a32      	ldr	r2, [pc, #200]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b30      	ldr	r3, [pc, #192]	; (800380c <HAL_RCC_OscConfig+0x268>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2f      	ldr	r2, [pc, #188]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b2d      	ldr	r3, [pc, #180]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2c      	ldr	r2, [pc, #176]	; (800380c <HAL_RCC_OscConfig+0x268>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e011      	b.n	8003788 <HAL_RCC_OscConfig+0x1e4>
 8003764:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a28      	ldr	r2, [pc, #160]	; (800380c <HAL_RCC_OscConfig+0x268>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b26      	ldr	r3, [pc, #152]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a25      	ldr	r2, [pc, #148]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b23      	ldr	r3, [pc, #140]	; (800380c <HAL_RCC_OscConfig+0x268>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a22      	ldr	r2, [pc, #136]	; (800380c <HAL_RCC_OscConfig+0x268>)
 8003782:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fd ffb2 	bl	80016f8 <HAL_GetTick>
 8003794:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003798:	f7fd ffae 	bl	80016f8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e32e      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037aa:	4b18      	ldr	r3, [pc, #96]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x1f4>
 80037b6:	e012      	b.n	80037de <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd ff9e 	bl	80016f8 <HAL_GetTick>
 80037bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80037c0:	f7fd ff9a 	bl	80016f8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e31a      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_RCC_OscConfig+0x268>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 809a 	beq.w	8003920 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_RCC_OscConfig+0x25a>
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2b18      	cmp	r3, #24
 80037f6:	d149      	bne.n	800388c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d146      	bne.n	800388c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d104      	bne.n	8003810 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e2fe      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
 800380a:	bf00      	nop
 800380c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d11c      	bne.n	8003850 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003816:	4b9a      	ldr	r3, [pc, #616]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0218 	and.w	r2, r3, #24
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	429a      	cmp	r2, r3
 8003824:	d014      	beq.n	8003850 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003826:	4b96      	ldr	r3, [pc, #600]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 0218 	bic.w	r2, r3, #24
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	4993      	ldr	r1, [pc, #588]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003838:	f000 fdd0 	bl	80043dc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800383c:	4b91      	ldr	r3, [pc, #580]	; (8003a84 <HAL_RCC_OscConfig+0x4e0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fd ff0f 	bl	8001664 <HAL_InitTick>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e2db      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fd ff52 	bl	80016f8 <HAL_GetTick>
 8003854:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003858:	f7fd ff4e 	bl	80016f8 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e2ce      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800386a:	4b85      	ldr	r3, [pc, #532]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003876:	4b82      	ldr	r3, [pc, #520]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	497e      	ldr	r1, [pc, #504]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800388a:	e049      	b.n	8003920 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02c      	beq.n	80038ee <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003894:	4b7a      	ldr	r3, [pc, #488]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f023 0218 	bic.w	r2, r3, #24
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	4977      	ldr	r1, [pc, #476]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80038a6:	4b76      	ldr	r3, [pc, #472]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a75      	ldr	r2, [pc, #468]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd ff21 	bl	80016f8 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80038ba:	f7fd ff1d 	bl	80016f8 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e29d      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038cc:	4b6c      	ldr	r3, [pc, #432]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80038d8:	4b69      	ldr	r3, [pc, #420]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	4966      	ldr	r1, [pc, #408]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	610b      	str	r3, [r1, #16]
 80038ec:	e018      	b.n	8003920 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ee:	4b64      	ldr	r3, [pc, #400]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a63      	ldr	r2, [pc, #396]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fd fefd 	bl	80016f8 <HAL_GetTick>
 80038fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003902:	f7fd fef9 	bl	80016f8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e279      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003914:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d03c      	beq.n	80039a6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01c      	beq.n	800396e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003934:	4b52      	ldr	r3, [pc, #328]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800393a:	4a51      	ldr	r2, [pc, #324]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 800393c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003940:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fd fed8 	bl	80016f8 <HAL_GetTick>
 8003948:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800394c:	f7fd fed4 	bl	80016f8 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e254      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800395e:	4b48      	ldr	r3, [pc, #288]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ef      	beq.n	800394c <HAL_RCC_OscConfig+0x3a8>
 800396c:	e01b      	b.n	80039a6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396e:	4b44      	ldr	r3, [pc, #272]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003974:	4a42      	ldr	r2, [pc, #264]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003976:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800397a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7fd febb 	bl	80016f8 <HAL_GetTick>
 8003982:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003986:	f7fd feb7 	bl	80016f8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e237      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003998:	4b39      	ldr	r3, [pc, #228]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 800399a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800399e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ef      	bne.n	8003986 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80d2 	beq.w	8003b58 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80039b4:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <HAL_RCC_OscConfig+0x4e4>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d118      	bne.n	80039f2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80039c0:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <HAL_RCC_OscConfig+0x4e4>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	4a30      	ldr	r2, [pc, #192]	; (8003a88 <HAL_RCC_OscConfig+0x4e4>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039cc:	f7fd fe94 	bl	80016f8 <HAL_GetTick>
 80039d0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d4:	f7fd fe90 	bl	80016f8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e210      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCC_OscConfig+0x4e4>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d108      	bne.n	8003a0c <HAL_RCC_OscConfig+0x468>
 80039fa:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 80039fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a00:	4a1f      	ldr	r2, [pc, #124]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a0a:	e074      	b.n	8003af6 <HAL_RCC_OscConfig+0x552>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d118      	bne.n	8003a46 <HAL_RCC_OscConfig+0x4a2>
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a1a:	4a19      	ldr	r2, [pc, #100]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a2a:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a3a:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a44:	e057      	b.n	8003af6 <HAL_RCC_OscConfig+0x552>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	d11e      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4e8>
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a54:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a56:	f043 0304 	orr.w	r3, r3, #4
 8003a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a64:	4a06      	ldr	r2, [pc, #24]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a6e:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a74:	4a02      	ldr	r2, [pc, #8]	; (8003a80 <HAL_RCC_OscConfig+0x4dc>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a7e:	e03a      	b.n	8003af6 <HAL_RCC_OscConfig+0x552>
 8003a80:	44020c00 	.word	0x44020c00
 8003a84:	20000034 	.word	0x20000034
 8003a88:	44020800 	.word	0x44020800
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b85      	cmp	r3, #133	; 0x85
 8003a92:	d118      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x522>
 8003a94:	4ba2      	ldr	r3, [pc, #648]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a9a:	4aa1      	ldr	r2, [pc, #644]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003a9c:	f043 0304 	orr.w	r3, r3, #4
 8003aa0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003aa4:	4b9e      	ldr	r3, [pc, #632]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aaa:	4a9d      	ldr	r2, [pc, #628]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ab4:	4b9a      	ldr	r3, [pc, #616]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aba:	4a99      	ldr	r2, [pc, #612]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ac4:	e017      	b.n	8003af6 <HAL_RCC_OscConfig+0x552>
 8003ac6:	4b96      	ldr	r3, [pc, #600]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003acc:	4a94      	ldr	r2, [pc, #592]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ad6:	4b92      	ldr	r3, [pc, #584]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003adc:	4a90      	ldr	r2, [pc, #576]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003ade:	f023 0304 	bic.w	r3, r3, #4
 8003ae2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ae6:	4b8e      	ldr	r3, [pc, #568]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aec:	4a8c      	ldr	r2, [pc, #560]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fd fdfb 	bl	80016f8 <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fd fdf7 	bl	80016f8 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e175      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1c:	4b80      	ldr	r3, [pc, #512]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ed      	beq.n	8003b06 <HAL_RCC_OscConfig+0x562>
 8003b2a:	e015      	b.n	8003b58 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fd fde4 	bl	80016f8 <HAL_GetTick>
 8003b30:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fd fde0 	bl	80016f8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e15e      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b4a:	4b75      	ldr	r3, [pc, #468]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ed      	bne.n	8003b34 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d036      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d019      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b6c:	4b6c      	ldr	r3, [pc, #432]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a6b      	ldr	r2, [pc, #428]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003b72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fd fdbe 	bl	80016f8 <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003b80:	f7fd fdba 	bl	80016f8 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e13a      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b92:	4b63      	ldr	r3, [pc, #396]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x5dc>
 8003b9e:	e018      	b.n	8003bd2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ba0:	4b5f      	ldr	r3, [pc, #380]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a5e      	ldr	r2, [pc, #376]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003baa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fd fda4 	bl	80016f8 <HAL_GetTick>
 8003bb0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003bb4:	f7fd fda0 	bl	80016f8 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e120      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003bc6:	4b56      	ldr	r3, [pc, #344]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8115 	beq.w	8003e06 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b18      	cmp	r3, #24
 8003be0:	f000 80af 	beq.w	8003d42 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	f040 8086 	bne.w	8003cfa <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003bee:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a4b      	ldr	r2, [pc, #300]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fd fd7d 	bl	80016f8 <HAL_GetTick>
 8003bfe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003c02:	f7fd fd79 	bl	80016f8 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0f9      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c14:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003c20:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c28:	f023 0303 	bic.w	r3, r3, #3
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c34:	0212      	lsls	r2, r2, #8
 8003c36:	430a      	orrs	r2, r1
 8003c38:	4939      	ldr	r1, [pc, #228]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	628b      	str	r3, [r1, #40]	; 0x28
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	3b01      	subs	r3, #1
 8003c44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	025b      	lsls	r3, r3, #9
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	041b      	lsls	r3, r3, #16
 8003c5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	3b01      	subs	r3, #1
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c6e:	492c      	ldr	r1, [pc, #176]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003c74:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003c7a:	f023 0310 	bic.w	r3, r3, #16
 8003c7e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003c8a:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003c90:	f043 0310 	orr.w	r3, r3, #16
 8003c94:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003c96:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	f023 020c 	bic.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	491f      	ldr	r1, [pc, #124]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	f023 0220 	bic.w	r2, r3, #32
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	491a      	ldr	r1, [pc, #104]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a15      	ldr	r2, [pc, #84]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd2:	f7fd fd11 	bl	80016f8 <HAL_GetTick>
 8003cd6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003cda:	f7fd fd0d 	bl	80016f8 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e08d      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003cec:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x736>
 8003cf8:	e085      	b.n	8003e06 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <HAL_RCC_OscConfig+0x77c>)
 8003d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fd fcf7 	bl	80016f8 <HAL_GetTick>
 8003d0a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003d0e:	f7fd fcf3 	bl	80016f8 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d903      	bls.n	8003d24 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e073      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
 8003d20:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d24:	4b3a      	ldr	r3, [pc, #232]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ee      	bne.n	8003d0e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	4a36      	ldr	r2, [pc, #216]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003d36:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	6293      	str	r3, [r2, #40]	; 0x28
 8003d40:	e061      	b.n	8003e06 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003d42:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d031      	beq.n	8003dba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f003 0203 	and.w	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d12a      	bne.n	8003dba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d122      	bne.n	8003dba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d11a      	bne.n	8003dba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	0a5b      	lsrs	r3, r3, #9
 8003d88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d111      	bne.n	8003dba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	0c1b      	lsrs	r3, r3, #16
 8003d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d108      	bne.n	8003dba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	0e1b      	lsrs	r3, r3, #24
 8003dac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e024      	b.n	8003e08 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003dbe:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	08db      	lsrs	r3, r3, #3
 8003dc4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d01a      	beq.n	8003e06 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	4a0e      	ldr	r2, [pc, #56]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003dd6:	f023 0310 	bic.w	r3, r3, #16
 8003dda:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fc8c 	bl	80016f8 <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003de2:	bf00      	nop
 8003de4:	f7fd fc88 	bl	80016f8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d0f9      	beq.n	8003de4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df4:	4a06      	ldr	r2, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_RCC_OscConfig+0x86c>)
 8003e00:	f043 0310 	orr.w	r3, r3, #16
 8003e04:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	44020c00 	.word	0x44020c00

08003e14 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e19e      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b83      	ldr	r3, [pc, #524]	; (8004038 <HAL_RCC_ClockConfig+0x224>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d910      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b80      	ldr	r3, [pc, #512]	; (8004038 <HAL_RCC_ClockConfig+0x224>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 020f 	bic.w	r2, r3, #15
 8003e3e:	497e      	ldr	r1, [pc, #504]	; (8004038 <HAL_RCC_ClockConfig+0x224>)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b7c      	ldr	r3, [pc, #496]	; (8004038 <HAL_RCC_ClockConfig+0x224>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e186      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d012      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	4b74      	ldr	r3, [pc, #464]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d909      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003e76:	4b71      	ldr	r3, [pc, #452]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	496d      	ldr	r1, [pc, #436]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d012      	beq.n	8003ebc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	4b68      	ldr	r3, [pc, #416]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d909      	bls.n	8003ebc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003ea8:	4b64      	ldr	r3, [pc, #400]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	4961      	ldr	r1, [pc, #388]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d010      	beq.n	8003eea <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	4b5b      	ldr	r3, [pc, #364]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d908      	bls.n	8003eea <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003ed8:	4b58      	ldr	r3, [pc, #352]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4955      	ldr	r1, [pc, #340]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d908      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003f06:	4b4d      	ldr	r3, [pc, #308]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f023 020f 	bic.w	r2, r3, #15
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	494a      	ldr	r1, [pc, #296]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8093 	beq.w	800404c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f2e:	4b43      	ldr	r3, [pc, #268]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d121      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e113      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d115      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e107      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003f5e:	4b37      	ldr	r3, [pc, #220]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0fb      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f6e:	4b33      	ldr	r3, [pc, #204]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0f3      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003f7e:	4b2f      	ldr	r3, [pc, #188]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	492c      	ldr	r1, [pc, #176]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f90:	f7fd fbb2 	bl	80016f8 <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d112      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fd fbaa 	bl	80016f8 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e0d7      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb6:	4b21      	ldr	r3, [pc, #132]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	f003 0318 	and.w	r3, r3, #24
 8003fbe:	2b18      	cmp	r3, #24
 8003fc0:	d1ee      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x18c>
 8003fc2:	e043      	b.n	800404c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d112      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fcc:	e00a      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003fce:	f7fd fb93 	bl	80016f8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e0c0      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe4:	4b15      	ldr	r3, [pc, #84]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f003 0318 	and.w	r3, r3, #24
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d1ee      	bne.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
 8003ff0:	e02c      	b.n	800404c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d122      	bne.n	8004040 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003ffa:	e00a      	b.n	8004012 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffc:	f7fd fb7c 	bl	80016f8 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	; 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e0a9      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <HAL_RCC_ClockConfig+0x228>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0318 	and.w	r3, r3, #24
 800401a:	2b08      	cmp	r3, #8
 800401c:	d1ee      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x1e8>
 800401e:	e015      	b.n	800404c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004020:	f7fd fb6a 	bl	80016f8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d906      	bls.n	8004040 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e097      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
 8004036:	bf00      	nop
 8004038:	40022000 	.word	0x40022000
 800403c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004040:	4b4b      	ldr	r3, [pc, #300]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	f003 0318 	and.w	r3, r3, #24
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e9      	bne.n	8004020 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d010      	beq.n	800407a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	4b44      	ldr	r3, [pc, #272]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	429a      	cmp	r2, r3
 8004066:	d208      	bcs.n	800407a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004068:	4b41      	ldr	r3, [pc, #260]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f023 020f 	bic.w	r2, r3, #15
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	493e      	ldr	r1, [pc, #248]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800407a:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <HAL_RCC_ClockConfig+0x360>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d210      	bcs.n	80040aa <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004088:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <HAL_RCC_ClockConfig+0x360>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f023 020f 	bic.w	r2, r3, #15
 8004090:	4938      	ldr	r1, [pc, #224]	; (8004174 <HAL_RCC_ClockConfig+0x360>)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	4313      	orrs	r3, r2
 8004096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004098:	4b36      	ldr	r3, [pc, #216]	; (8004174 <HAL_RCC_ClockConfig+0x360>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d001      	beq.n	80040aa <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e05d      	b.n	8004166 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d010      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	4b2d      	ldr	r3, [pc, #180]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d208      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4927      	ldr	r1, [pc, #156]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d012      	beq.n	800410a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d209      	bcs.n	800410a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80040f6:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	491a      	ldr	r1, [pc, #104]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 8004106:	4313      	orrs	r3, r2
 8004108:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004124:	429a      	cmp	r2, r3
 8004126:	d209      	bcs.n	800413c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	490e      	ldr	r1, [pc, #56]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800413c:	f000 f822 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	490b      	ldr	r1, [pc, #44]	; (8004178 <HAL_RCC_ClockConfig+0x364>)
 800414c:	5ccb      	ldrb	r3, [r1, r3]
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <HAL_RCC_ClockConfig+0x368>)
 8004154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <HAL_RCC_ClockConfig+0x36c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fd fa82 	bl	8001664 <HAL_InitTick>
 8004160:	4603      	mov	r3, r0
 8004162:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004164:	7afb      	ldrb	r3, [r7, #11]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	44020c00 	.word	0x44020c00
 8004174:	40022000 	.word	0x40022000
 8004178:	0800a924 	.word	0x0800a924
 800417c:	20000030 	.word	0x20000030
 8004180:	20000034 	.word	0x20000034

08004184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	; 0x24
 8004188:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800418a:	4b8c      	ldr	r3, [pc, #560]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f003 0318 	and.w	r3, r3, #24
 8004192:	2b08      	cmp	r3, #8
 8004194:	d102      	bne.n	800419c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004196:	4b8a      	ldr	r3, [pc, #552]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e107      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419c:	4b87      	ldr	r3, [pc, #540]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f003 0318 	and.w	r3, r3, #24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d112      	bne.n	80041ce <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80041a8:	4b84      	ldr	r3, [pc, #528]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041b4:	4b81      	ldr	r3, [pc, #516]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	08db      	lsrs	r3, r3, #3
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	4a81      	ldr	r2, [pc, #516]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	e0f1      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80041c8:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	e0ee      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ce:	4b7b      	ldr	r3, [pc, #492]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0318 	and.w	r3, r3, #24
 80041d6:	2b10      	cmp	r3, #16
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041da:	4b7b      	ldr	r3, [pc, #492]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x244>)
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	e0e5      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e0:	4b76      	ldr	r3, [pc, #472]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f003 0318 	and.w	r3, r3, #24
 80041e8:	2b18      	cmp	r3, #24
 80041ea:	f040 80dd 	bne.w	80043a8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80041ee:	4b73      	ldr	r3, [pc, #460]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80041f8:	4b70      	ldr	r3, [pc, #448]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004202:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004204:	4b6d      	ldr	r3, [pc, #436]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004210:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004214:	08db      	lsrs	r3, r3, #3
 8004216:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	fb02 f303 	mul.w	r3, r2, r3
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004228:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80b7 	beq.w	80043a2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d003      	beq.n	8004242 <HAL_RCC_GetSysClockFreq+0xbe>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d056      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x16a>
 8004240:	e077      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004242:	4b5e      	ldr	r3, [pc, #376]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d02d      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800424e:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	08db      	lsrs	r3, r3, #3
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	4a5a      	ldr	r2, [pc, #360]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x240>)
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	ee07 3a90 	vmov	s15, r3
 8004270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004278:	4b50      	ldr	r3, [pc, #320]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004288:	ed97 6a02 	vldr	s12, [r7, #8]
 800428c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80043cc <HAL_RCC_GetSysClockFreq+0x248>
 8004290:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004294:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80042a8:	e065      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80043d0 <HAL_RCC_GetSysClockFreq+0x24c>
 80042b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042bc:	4b3f      	ldr	r3, [pc, #252]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80042cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80043cc <HAL_RCC_GetSysClockFreq+0x248>
 80042d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80042dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80042ec:	e043      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f8:	eddf 6a36 	vldr	s13, [pc, #216]	; 80043d4 <HAL_RCC_GetSysClockFreq+0x250>
 80042fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004300:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004310:	ed97 6a02 	vldr	s12, [r7, #8]
 8004314:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80043cc <HAL_RCC_GetSysClockFreq+0x248>
 8004318:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800431c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004324:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004330:	e021      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043d8 <HAL_RCC_GetSysClockFreq+0x254>
 8004340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004354:	ed97 6a02 	vldr	s12, [r7, #8]
 8004358:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80043cc <HAL_RCC_GetSysClockFreq+0x248>
 800435c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004360:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004368:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800436c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004370:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004374:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004376:	4b11      	ldr	r3, [pc, #68]	; (80043bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	0a5b      	lsrs	r3, r3, #9
 800437c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004380:	3301      	adds	r3, #1
 8004382:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800438e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439a:	ee17 3a90 	vmov	r3, s15
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e004      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	e001      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80043aa:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80043ac:	69fb      	ldr	r3, [r7, #28]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3724      	adds	r7, #36	; 0x24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	44020c00 	.word	0x44020c00
 80043c0:	003d0900 	.word	0x003d0900
 80043c4:	03d09000 	.word	0x03d09000
 80043c8:	007a1200 	.word	0x007a1200
 80043cc:	46000000 	.word	0x46000000
 80043d0:	4c742400 	.word	0x4c742400
 80043d4:	4af42400 	.word	0x4af42400
 80043d8:	4a742400 	.word	0x4a742400

080043dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80043e0:	f7ff fed0 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_RCC_GetHCLKFreq+0x2c>)
 80043e8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80043ea:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80043ee:	4907      	ldr	r1, [pc, #28]	; (800440c <HAL_RCC_GetHCLKFreq+0x30>)
 80043f0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80043f2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	4a05      	ldr	r2, [pc, #20]	; (8004410 <HAL_RCC_GetHCLKFreq+0x34>)
 80043fc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <HAL_RCC_GetHCLKFreq+0x34>)
 8004400:	681b      	ldr	r3, [r3, #0]
}
 8004402:	4618      	mov	r0, r3
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	44020c00 	.word	0x44020c00
 800440c:	0800a924 	.word	0x0800a924
 8004410:	20000030 	.word	0x20000030

08004414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004418:	f7ff ffe0 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4904      	ldr	r1, [pc, #16]	; (800443c <HAL_RCC_GetPCLK1Freq+0x28>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}
 8004438:	44020c00 	.word	0x44020c00
 800443c:	0800a934 	.word	0x0800a934

08004440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004444:	f7ff ffca 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4904      	ldr	r1, [pc, #16]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	44020c00 	.word	0x44020c00
 8004468:	0800a934 	.word	0x0800a934

0800446c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004470:	f7ff ffb4 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004474:	4602      	mov	r2, r0
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	0b1b      	lsrs	r3, r3, #12
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	4904      	ldr	r1, [pc, #16]	; (8004494 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004482:	5ccb      	ldrb	r3, [r1, r3]
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	44020c00 	.word	0x44020c00
 8004494:	0800a934 	.word	0x0800a934

08004498 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800449c:	b0d8      	sub	sp, #352	; 0x160
 800449e:	af00      	add	r7, sp, #0
 80044a0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044a4:	2300      	movs	r3, #0
 80044a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80044bc:	2500      	movs	r5, #0
 80044be:	ea54 0305 	orrs.w	r3, r4, r5
 80044c2:	d00b      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80044c4:	4bcd      	ldr	r3, [pc, #820]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80044c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044ca:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80044ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	4ac9      	ldr	r2, [pc, #804]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80044d6:	430b      	orrs	r3, r1
 80044d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f002 0801 	and.w	r8, r2, #1
 80044e8:	f04f 0900 	mov.w	r9, #0
 80044ec:	ea58 0309 	orrs.w	r3, r8, r9
 80044f0:	d042      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80044f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	2b05      	cmp	r3, #5
 80044fa:	d823      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	0800454d 	.word	0x0800454d
 8004508:	0800451d 	.word	0x0800451d
 800450c:	08004531 	.word	0x08004531
 8004510:	0800454d 	.word	0x0800454d
 8004514:	0800454d 	.word	0x0800454d
 8004518:	0800454d 	.word	0x0800454d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800451c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004520:	3308      	adds	r3, #8
 8004522:	4618      	mov	r0, r3
 8004524:	f004 feda 	bl	80092dc <RCCEx_PLL2_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800452e:	e00e      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004530:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004534:	3330      	adds	r3, #48	; 0x30
 8004536:	4618      	mov	r0, r3
 8004538:	f004 ff68 	bl	800940c <RCCEx_PLL3_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004542:	e004      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800454a:	e000      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800454c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004556:	4ba9      	ldr	r3, [pc, #676]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800455c:	f023 0107 	bic.w	r1, r3, #7
 8004560:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004566:	4aa5      	ldr	r2, [pc, #660]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004568:	430b      	orrs	r3, r1
 800456a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800456e:	e003      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004574:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004578:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f002 0a02 	and.w	sl, r2, #2
 8004584:	f04f 0b00 	mov.w	fp, #0
 8004588:	ea5a 030b 	orrs.w	r3, sl, fp
 800458c:	f000 8088 	beq.w	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004590:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004596:	2b28      	cmp	r3, #40	; 0x28
 8004598:	d868      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	08004675 	.word	0x08004675
 80045a4:	0800466d 	.word	0x0800466d
 80045a8:	0800466d 	.word	0x0800466d
 80045ac:	0800466d 	.word	0x0800466d
 80045b0:	0800466d 	.word	0x0800466d
 80045b4:	0800466d 	.word	0x0800466d
 80045b8:	0800466d 	.word	0x0800466d
 80045bc:	0800466d 	.word	0x0800466d
 80045c0:	08004645 	.word	0x08004645
 80045c4:	0800466d 	.word	0x0800466d
 80045c8:	0800466d 	.word	0x0800466d
 80045cc:	0800466d 	.word	0x0800466d
 80045d0:	0800466d 	.word	0x0800466d
 80045d4:	0800466d 	.word	0x0800466d
 80045d8:	0800466d 	.word	0x0800466d
 80045dc:	0800466d 	.word	0x0800466d
 80045e0:	08004659 	.word	0x08004659
 80045e4:	0800466d 	.word	0x0800466d
 80045e8:	0800466d 	.word	0x0800466d
 80045ec:	0800466d 	.word	0x0800466d
 80045f0:	0800466d 	.word	0x0800466d
 80045f4:	0800466d 	.word	0x0800466d
 80045f8:	0800466d 	.word	0x0800466d
 80045fc:	0800466d 	.word	0x0800466d
 8004600:	08004675 	.word	0x08004675
 8004604:	0800466d 	.word	0x0800466d
 8004608:	0800466d 	.word	0x0800466d
 800460c:	0800466d 	.word	0x0800466d
 8004610:	0800466d 	.word	0x0800466d
 8004614:	0800466d 	.word	0x0800466d
 8004618:	0800466d 	.word	0x0800466d
 800461c:	0800466d 	.word	0x0800466d
 8004620:	08004675 	.word	0x08004675
 8004624:	0800466d 	.word	0x0800466d
 8004628:	0800466d 	.word	0x0800466d
 800462c:	0800466d 	.word	0x0800466d
 8004630:	0800466d 	.word	0x0800466d
 8004634:	0800466d 	.word	0x0800466d
 8004638:	0800466d 	.word	0x0800466d
 800463c:	0800466d 	.word	0x0800466d
 8004640:	08004675 	.word	0x08004675
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004644:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004648:	3308      	adds	r3, #8
 800464a:	4618      	mov	r0, r3
 800464c:	f004 fe46 	bl	80092dc <RCCEx_PLL2_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004656:	e00e      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004658:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800465c:	3330      	adds	r3, #48	; 0x30
 800465e:	4618      	mov	r0, r3
 8004660:	f004 fed4 	bl	800940c <RCCEx_PLL3_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800466a:	e004      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004672:	e000      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004676:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10c      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800467e:	4b5f      	ldr	r3, [pc, #380]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004684:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004688:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468e:	4a5b      	ldr	r2, [pc, #364]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004690:	430b      	orrs	r3, r1
 8004692:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004696:	e003      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800469c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f002 0304 	and.w	r3, r2, #4
 80046ac:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80046b6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d04e      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80046c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80046ca:	d02c      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80046cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80046d0:	d825      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80046d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d6:	d028      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80046d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046dc:	d81f      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80046de:	2bc0      	cmp	r3, #192	; 0xc0
 80046e0:	d025      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80046e2:	2bc0      	cmp	r3, #192	; 0xc0
 80046e4:	d81b      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80046e6:	2b80      	cmp	r3, #128	; 0x80
 80046e8:	d00f      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x272>
 80046ea:	2b80      	cmp	r3, #128	; 0x80
 80046ec:	d817      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01f      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d113      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046fa:	3308      	adds	r3, #8
 80046fc:	4618      	mov	r0, r3
 80046fe:	f004 fded 	bl	80092dc <RCCEx_PLL2_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004708:	e014      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800470a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800470e:	3330      	adds	r3, #48	; 0x30
 8004710:	4618      	mov	r0, r3
 8004712:	f004 fe7b 	bl	800940c <RCCEx_PLL3_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800471c:	e00a      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004726:	bf00      	nop
 8004728:	e004      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004734:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10c      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800473c:	4b2f      	ldr	r3, [pc, #188]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800473e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004742:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004746:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800474a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800474c:	4a2b      	ldr	r2, [pc, #172]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800474e:	430b      	orrs	r3, r1
 8004750:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004754:	e003      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004756:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800475a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800475e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	f002 0308 	and.w	r3, r2, #8
 800476a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800476e:	2300      	movs	r3, #0
 8004770:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8004774:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8004778:	460b      	mov	r3, r1
 800477a:	4313      	orrs	r3, r2
 800477c:	d056      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800477e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004784:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004788:	d031      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x356>
 800478a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800478e:	d82a      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004794:	d02d      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479a:	d824      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800479c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047a0:	d029      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80047a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047a6:	d81e      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ac:	d011      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b2:	d818      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d023      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80047b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047bc:	d113      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047c2:	3308      	adds	r3, #8
 80047c4:	4618      	mov	r0, r3
 80047c6:	f004 fd89 	bl	80092dc <RCCEx_PLL2_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80047d0:	e017      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047d6:	3330      	adds	r3, #48	; 0x30
 80047d8:	4618      	mov	r0, r3
 80047da:	f004 fe17 	bl	800940c <RCCEx_PLL3_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80047e4:	e00d      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047ec:	e009      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80047ee:	bf00      	nop
 80047f0:	e007      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80047f2:	bf00      	nop
 80047f4:	e005      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80047f6:	bf00      	nop
 80047f8:	e003      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80047fa:	bf00      	nop
 80047fc:	44020c00 	.word	0x44020c00
        break;
 8004800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004802:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10c      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800480a:	4bbb      	ldr	r3, [pc, #748]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800480c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004810:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004814:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800481a:	4ab7      	ldr	r2, [pc, #732]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800481c:	430b      	orrs	r3, r1
 800481e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004822:	e003      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004824:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004828:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800482c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f002 0310 	and.w	r3, r2, #16
 8004838:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800483c:	2300      	movs	r3, #0
 800483e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004842:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8004846:	460b      	mov	r3, r1
 8004848:	4313      	orrs	r3, r2
 800484a:	d053      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800484c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004852:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004856:	d031      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004858:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800485c:	d82a      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800485e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004862:	d02d      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004868:	d824      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800486a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800486e:	d029      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004870:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004874:	d81e      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487a:	d011      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800487c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004880:	d818      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d020      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488a:	d113      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800488c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004890:	3308      	adds	r3, #8
 8004892:	4618      	mov	r0, r3
 8004894:	f004 fd22 	bl	80092dc <RCCEx_PLL2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800489e:	e014      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048a4:	3330      	adds	r3, #48	; 0x30
 80048a6:	4618      	mov	r0, r3
 80048a8:	f004 fdb0 	bl	800940c <RCCEx_PLL3_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80048b2:	e00a      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048ba:	e006      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80048bc:	bf00      	nop
 80048be:	e004      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80048c0:	bf00      	nop
 80048c2:	e002      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10c      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80048d2:	4b89      	ldr	r3, [pc, #548]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80048d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80048dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e2:	4a85      	ldr	r2, [pc, #532]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80048ea:	e003      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f002 0320 	and.w	r3, r2, #32
 8004900:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800490a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800490e:	460b      	mov	r3, r1
 8004910:	4313      	orrs	r3, r2
 8004912:	d053      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004914:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800491e:	d031      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004920:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004924:	d82a      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800492a:	d02d      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800492c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004930:	d824      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004932:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004936:	d029      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004938:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800493c:	d81e      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800493e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004942:	d011      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004948:	d818      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800494e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004952:	d113      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004954:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004958:	3308      	adds	r3, #8
 800495a:	4618      	mov	r0, r3
 800495c:	f004 fcbe 	bl	80092dc <RCCEx_PLL2_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004966:	e014      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004968:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800496c:	3330      	adds	r3, #48	; 0x30
 800496e:	4618      	mov	r0, r3
 8004970:	f004 fd4c 	bl	800940c <RCCEx_PLL3_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800497a:	e00a      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004982:	e006      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004984:	bf00      	nop
 8004986:	e004      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004988:	bf00      	nop
 800498a:	e002      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004992:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10c      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800499a:	4b57      	ldr	r3, [pc, #348]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800499c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80049a0:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 80049a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	4a53      	ldr	r2, [pc, #332]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80049ac:	430b      	orrs	r3, r1
 80049ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80049b2:	e003      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049b8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80049c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80049d2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80049d6:	460b      	mov	r3, r1
 80049d8:	4313      	orrs	r3, r2
 80049da:	d053      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80049dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049e6:	d031      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80049e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049ec:	d82a      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80049ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f2:	d02d      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80049f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f8:	d824      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80049fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049fe:	d029      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004a00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a04:	d81e      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a0a:	d011      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004a0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a10:	d818      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a1a:	d113      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a20:	3308      	adds	r3, #8
 8004a22:	4618      	mov	r0, r3
 8004a24:	f004 fc5a 	bl	80092dc <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004a2e:	e014      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a34:	3330      	adds	r3, #48	; 0x30
 8004a36:	4618      	mov	r0, r3
 8004a38:	f004 fce8 	bl	800940c <RCCEx_PLL3_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004a42:	e00a      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a4a:	e006      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a4c:	bf00      	nop
 8004a4e:	e004      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a50:	bf00      	nop
 8004a52:	e002      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a54:	bf00      	nop
 8004a56:	e000      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8004a62:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a68:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8004a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004a74:	430b      	orrs	r3, r1
 8004a76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004a7a:	e003      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a80:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004a90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004a94:	2300      	movs	r3, #0
 8004a96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a9a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	d055      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aaa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004aae:	d033      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004ab0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004ab4:	d82c      	bhi.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004ab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aba:	d02f      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004abc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ac0:	d826      	bhi.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004ac2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ac6:	d02b      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004acc:	d820      	bhi.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad2:	d013      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad8:	d81a      	bhi.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d022      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ae2:	d115      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ae8:	3308      	adds	r3, #8
 8004aea:	4618      	mov	r0, r3
 8004aec:	f004 fbf6 	bl	80092dc <RCCEx_PLL2_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004af6:	e016      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004af8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b00:	3330      	adds	r3, #48	; 0x30
 8004b02:	4618      	mov	r0, r3
 8004b04:	f004 fc82 	bl	800940c <RCCEx_PLL3_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b16:	e006      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004b18:	bf00      	nop
 8004b1a:	e004      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004b1c:	bf00      	nop
 8004b1e:	e002      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004b20:	bf00      	nop
 8004b22:	e000      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8004b2e:	4bbb      	ldr	r3, [pc, #748]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b34:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3e:	4ab7      	ldr	r2, [pc, #732]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004b40:	430b      	orrs	r3, r1
 8004b42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004b46:	e003      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b4c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b58:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004b5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004b60:	2300      	movs	r3, #0
 8004b62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004b66:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	d053      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b76:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004b7a:	d031      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004b7c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004b80:	d82a      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004b82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b86:	d02d      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004b88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b8c:	d824      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004b8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b92:	d029      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004b94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b98:	d81e      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b9e:	d011      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ba4:	d818      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d020      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004baa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bae:	d113      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f004 fb90 	bl	80092dc <RCCEx_PLL2_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004bc2:	e014      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bc8:	3330      	adds	r3, #48	; 0x30
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f004 fc1e 	bl	800940c <RCCEx_PLL3_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004bd6:	e00a      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bde:	e006      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004be0:	bf00      	nop
 8004be2:	e004      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004be4:	bf00      	nop
 8004be6:	e002      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10c      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004bf6:	4b89      	ldr	r3, [pc, #548]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004bfc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c06:	4a85      	ldr	r2, [pc, #532]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004c0e:	e003      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c14:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004c24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c2e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004c32:	460b      	mov	r3, r1
 8004c34:	4313      	orrs	r3, r2
 8004c36:	d055      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c40:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004c44:	d031      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004c46:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004c4a:	d82a      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c50:	d02d      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c56:	d824      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004c58:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004c5c:	d029      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004c5e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004c62:	d81e      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c68:	d011      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c6e:	d818      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004c74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c78:	d113      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c7e:	3308      	adds	r3, #8
 8004c80:	4618      	mov	r0, r3
 8004c82:	f004 fb2b 	bl	80092dc <RCCEx_PLL2_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004c8c:	e014      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c92:	3330      	adds	r3, #48	; 0x30
 8004c94:	4618      	mov	r0, r3
 8004c96:	f004 fbb9 	bl	800940c <RCCEx_PLL3_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004ca8:	e006      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004caa:	bf00      	nop
 8004cac:	e004      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e002      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10d      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004cc0:	4b56      	ldr	r3, [pc, #344]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cc6:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8004cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cd2:	4a52      	ldr	r2, [pc, #328]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004cda:	e003      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ce0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004cf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cfa:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4313      	orrs	r3, r2
 8004d02:	d044      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0c:	2b05      	cmp	r3, #5
 8004d0e:	d823      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004d10:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004d61 	.word	0x08004d61
 8004d1c:	08004d31 	.word	0x08004d31
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004d61 	.word	0x08004d61
 8004d28:	08004d61 	.word	0x08004d61
 8004d2c:	08004d61 	.word	0x08004d61
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d34:	3308      	adds	r3, #8
 8004d36:	4618      	mov	r0, r3
 8004d38:	f004 fad0 	bl	80092dc <RCCEx_PLL2_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004d42:	e00e      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d48:	3330      	adds	r3, #48	; 0x30
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f004 fb5e 	bl	800940c <RCCEx_PLL3_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004d56:	e004      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d5e:	e000      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8004d6a:	4b2c      	ldr	r3, [pc, #176]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004d6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004d70:	f023 0107 	bic.w	r1, r3, #7
 8004d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7c:	4a27      	ldr	r2, [pc, #156]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004d84:	e003      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d8a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004d8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d96:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004d9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004da4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004da8:	460b      	mov	r3, r1
 8004daa:	4313      	orrs	r3, r2
 8004dac:	d04f      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	2b50      	cmp	r3, #80	; 0x50
 8004db8:	d029      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004dba:	2b50      	cmp	r3, #80	; 0x50
 8004dbc:	d823      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004dbe:	2b40      	cmp	r3, #64	; 0x40
 8004dc0:	d027      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d81f      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004dc6:	2b30      	cmp	r3, #48	; 0x30
 8004dc8:	d025      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004dca:	2b30      	cmp	r3, #48	; 0x30
 8004dcc:	d81b      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d00f      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d817      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d022      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d113      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004de2:	3308      	adds	r3, #8
 8004de4:	4618      	mov	r0, r3
 8004de6:	f004 fa79 	bl	80092dc <RCCEx_PLL2_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004df0:	e017      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004df2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004df6:	3330      	adds	r3, #48	; 0x30
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f004 fb07 	bl	800940c <RCCEx_PLL3_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004e04:	e00d      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e0c:	e009      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e007      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004e12:	bf00      	nop
 8004e14:	e005      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004e16:	bf00      	nop
 8004e18:	e003      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8004e1a:	bf00      	nop
 8004e1c:	44020c00 	.word	0x44020c00
        break;
 8004e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10d      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8004e2a:	4baf      	ldr	r3, [pc, #700]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004e30:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	4aaa      	ldr	r2, [pc, #680]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004e44:	e003      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e4a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004e5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	d055      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004e6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e76:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004e7a:	d031      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004e7c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004e80:	d82a      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004e82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e86:	d02d      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e8c:	d824      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004e8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e92:	d029      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004e94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e98:	d81e      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e9e:	d011      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ea4:	d818      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004eaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004eae:	d113      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f004 fa10 	bl	80092dc <RCCEx_PLL2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004ec2:	e014      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ec8:	3330      	adds	r3, #48	; 0x30
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f004 fa9e 	bl	800940c <RCCEx_PLL3_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004ed6:	e00a      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004ede:	e006      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004ee0:	bf00      	nop
 8004ee2:	e004      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004ee4:	bf00      	nop
 8004ee6:	e002      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10d      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004ef6:	4b7c      	ldr	r3, [pc, #496]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004efc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f08:	4a77      	ldr	r2, [pc, #476]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f10:	e003      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f16:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004f26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004f34:	460b      	mov	r3, r1
 8004f36:	4313      	orrs	r3, r2
 8004f38:	d03d      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004f3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f46:	d01b      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004f48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f4c:	d814      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f52:	d017      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f58:	d80e      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d014      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f62:	d109      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f68:	3330      	adds	r3, #48	; 0x30
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f004 fa4e 	bl	800940c <RCCEx_PLL3_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004f76:	e008      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f7e:	e004      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004f80:	bf00      	nop
 8004f82:	e002      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004f84:	bf00      	nop
 8004f86:	e000      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10d      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004f92:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004f94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f98:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	4a50      	ldr	r2, [pc, #320]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fb2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fcc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	d03d      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004fd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fde:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fe2:	d01b      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004fe4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fe8:	d814      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004fea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fee:	d017      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004ff0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ff4:	d80e      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d014      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ffe:	d109      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005000:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005004:	3330      	adds	r3, #48	; 0x30
 8005006:	4618      	mov	r0, r3
 8005008:	f004 fa00 	bl	800940c <RCCEx_PLL3_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005012:	e008      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800501a:	e004      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800501c:	bf00      	nop
 800501e:	e002      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005020:	bf00      	nop
 8005022:	e000      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005026:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10d      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005034:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005038:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800503c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005040:	4a29      	ldr	r2, [pc, #164]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005042:	430b      	orrs	r3, r1
 8005044:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005048:	e003      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800504e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005052:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800505e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005062:	2300      	movs	r3, #0
 8005064:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005068:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800506c:	460b      	mov	r3, r1
 800506e:	4313      	orrs	r3, r2
 8005070:	d040      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005072:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800507a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800507e:	d01b      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005080:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005084:	d814      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800508a:	d017      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800508c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005090:	d80e      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d014      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800509a:	d109      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800509c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050a0:	3330      	adds	r3, #48	; 0x30
 80050a2:	4618      	mov	r0, r3
 80050a4:	f004 f9b2 	bl	800940c <RCCEx_PLL3_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80050b6:	e004      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80050b8:	bf00      	nop
 80050ba:	e002      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80050bc:	bf00      	nop
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80050c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d110      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80050cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050d0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80050d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050dc:	4a02      	ldr	r2, [pc, #8]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80050de:	430b      	orrs	r3, r1
 80050e0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80050e4:	e006      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80050e6:	bf00      	nop
 80050e8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	2100      	movs	r1, #0
 80050fe:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800510a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800510e:	460b      	mov	r3, r1
 8005110:	4313      	orrs	r3, r2
 8005112:	d03d      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005114:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005118:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800511c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005120:	d01b      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005122:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005126:	d814      	bhi.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005128:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800512c:	d017      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800512e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005132:	d80e      	bhi.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d014      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800513c:	d109      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800513e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005142:	3330      	adds	r3, #48	; 0x30
 8005144:	4618      	mov	r0, r3
 8005146:	f004 f961 	bl	800940c <RCCEx_PLL3_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005150:	e008      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005158:	e004      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800515a:	bf00      	nop
 800515c:	e002      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800515e:	bf00      	nop
 8005160:	e000      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005164:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10d      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800516c:	4bbe      	ldr	r3, [pc, #760]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800516e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005172:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005176:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800517a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800517e:	4aba      	ldr	r2, [pc, #744]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005180:	430b      	orrs	r3, r1
 8005182:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005186:	e003      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005188:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800518c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005190:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800519c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051a0:	2300      	movs	r3, #0
 80051a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80051aa:	460b      	mov	r3, r1
 80051ac:	4313      	orrs	r3, r2
 80051ae:	d035      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80051b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051bc:	d015      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80051be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051c2:	d80e      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d012      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80051c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051cc:	d109      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051d2:	3330      	adds	r3, #48	; 0x30
 80051d4:	4618      	mov	r0, r3
 80051d6:	f004 f919 	bl	800940c <RCCEx_PLL3_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80051e0:	e006      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80051e8:	e002      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80051ea:	bf00      	nop
 80051ec:	e000      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80051ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10d      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80051f8:	4b9b      	ldr	r3, [pc, #620]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80051fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051fe:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8005202:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005206:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800520a:	4a97      	ldr	r2, [pc, #604]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800520c:	430b      	orrs	r3, r1
 800520e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005212:	e003      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005218:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800521c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	2100      	movs	r1, #0
 8005226:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800522a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005232:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d00e      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800523c:	4b8a      	ldr	r3, [pc, #552]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	4a89      	ldr	r2, [pc, #548]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005242:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005246:	61d3      	str	r3, [r2, #28]
 8005248:	4b87      	ldr	r3, [pc, #540]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800524a:	69d9      	ldr	r1, [r3, #28]
 800524c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005250:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005254:	4a84      	ldr	r2, [pc, #528]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005256:	430b      	orrs	r3, r1
 8005258:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800525a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005266:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800526a:	2300      	movs	r3, #0
 800526c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005270:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005274:	460b      	mov	r3, r1
 8005276:	4313      	orrs	r3, r2
 8005278:	d055      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800527a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800527e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005282:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005286:	d031      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005288:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800528c:	d82a      	bhi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005292:	d02d      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005298:	d824      	bhi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800529a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800529e:	d029      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80052a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a4:	d81e      	bhi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80052a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052aa:	d011      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b0:	d818      	bhi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d020      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80052b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ba:	d113      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052c0:	3308      	adds	r3, #8
 80052c2:	4618      	mov	r0, r3
 80052c4:	f004 f80a 	bl	80092dc <RCCEx_PLL2_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80052ce:	e014      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052d4:	3330      	adds	r3, #48	; 0x30
 80052d6:	4618      	mov	r0, r3
 80052d8:	f004 f898 	bl	800940c <RCCEx_PLL3_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80052e2:	e00a      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80052ea:	e006      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80052ec:	bf00      	nop
 80052ee:	e004      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80052f0:	bf00      	nop
 80052f2:	e002      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80052f4:	bf00      	nop
 80052f6:	e000      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80052f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10d      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005302:	4b59      	ldr	r3, [pc, #356]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005304:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005308:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800530c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005310:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005314:	4a54      	ldr	r2, [pc, #336]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005316:	430b      	orrs	r3, r1
 8005318:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800531c:	e003      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005322:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005326:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005332:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005336:	2300      	movs	r3, #0
 8005338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800533c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005340:	460b      	mov	r3, r1
 8005342:	4313      	orrs	r3, r2
 8005344:	d055      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005346:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800534a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800534e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005352:	d031      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005354:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005358:	d82a      	bhi.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800535a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800535e:	d02d      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005364:	d824      	bhi.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005366:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800536a:	d029      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800536c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005370:	d81e      	bhi.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005376:	d011      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537c:	d818      	bhi.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d020      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005386:	d113      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005388:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800538c:	3308      	adds	r3, #8
 800538e:	4618      	mov	r0, r3
 8005390:	f003 ffa4 	bl	80092dc <RCCEx_PLL2_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800539a:	e014      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800539c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053a0:	3330      	adds	r3, #48	; 0x30
 80053a2:	4618      	mov	r0, r3
 80053a4:	f004 f832 	bl	800940c <RCCEx_PLL3_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80053ae:	e00a      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053b6:	e006      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80053b8:	bf00      	nop
 80053ba:	e004      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80053bc:	bf00      	nop
 80053be:	e002      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80053c0:	bf00      	nop
 80053c2:	e000      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80053c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10d      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80053ce:	4b26      	ldr	r3, [pc, #152]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80053d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80053d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80053d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053e0:	4a21      	ldr	r2, [pc, #132]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80053e2:	430b      	orrs	r3, r1
 80053e4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80053e8:	e003      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80053f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	2100      	movs	r1, #0
 80053fc:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005408:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800540c:	460b      	mov	r3, r1
 800540e:	4313      	orrs	r3, r2
 8005410:	d057      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005412:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005416:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800541a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800541e:	d033      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005424:	d82c      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005426:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800542a:	d02f      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800542c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005430:	d826      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005432:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005436:	d02b      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005438:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800543c:	d820      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800543e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005442:	d013      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005448:	d81a      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d022      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800544e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005452:	d115      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005454:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005458:	3308      	adds	r3, #8
 800545a:	4618      	mov	r0, r3
 800545c:	f003 ff3e 	bl	80092dc <RCCEx_PLL2_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005466:	e016      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005468:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800546c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005470:	3330      	adds	r3, #48	; 0x30
 8005472:	4618      	mov	r0, r3
 8005474:	f003 ffca 	bl	800940c <RCCEx_PLL3_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800547e:	e00a      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005486:	e006      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005488:	bf00      	nop
 800548a:	e004      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800548c:	bf00      	nop
 800548e:	e002      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005490:	bf00      	nop
 8005492:	e000      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005496:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10d      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800549e:	4bbb      	ldr	r3, [pc, #748]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80054a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80054a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80054a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054b0:	4ab6      	ldr	r2, [pc, #728]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80054b2:	430b      	orrs	r3, r1
 80054b4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80054b8:	e003      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80054c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	2100      	movs	r1, #0
 80054cc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80054d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80054dc:	460b      	mov	r3, r1
 80054de:	4313      	orrs	r3, r2
 80054e0:	d055      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80054e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054ea:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80054ee:	d031      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80054f0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80054f4:	d82a      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80054f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054fa:	d02d      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80054fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005500:	d824      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005502:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005506:	d029      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005508:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800550c:	d81e      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800550e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005512:	d011      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005518:	d818      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d020      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800551e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005522:	d113      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005524:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005528:	3308      	adds	r3, #8
 800552a:	4618      	mov	r0, r3
 800552c:	f003 fed6 	bl	80092dc <RCCEx_PLL2_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005536:	e014      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005538:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800553c:	3330      	adds	r3, #48	; 0x30
 800553e:	4618      	mov	r0, r3
 8005540:	f003 ff64 	bl	800940c <RCCEx_PLL3_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800554a:	e00a      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005552:	e006      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005554:	bf00      	nop
 8005556:	e004      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005558:	bf00      	nop
 800555a:	e002      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800555c:	bf00      	nop
 800555e:	e000      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005562:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10d      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800556a:	4b88      	ldr	r3, [pc, #544]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800556c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005570:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8005574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800557c:	4a83      	ldr	r2, [pc, #524]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800557e:	430b      	orrs	r3, r1
 8005580:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005584:	e003      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005586:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800558a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800558e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	2100      	movs	r1, #0
 8005598:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800559c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80055a8:	460b      	mov	r3, r1
 80055aa:	4313      	orrs	r3, r2
 80055ac:	d055      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80055ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055b6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80055ba:	d031      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80055bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80055c0:	d82a      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80055c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055c6:	d02d      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80055c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055cc:	d824      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80055ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055d2:	d029      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80055d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055d8:	d81e      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80055da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055de:	d011      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80055e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e4:	d818      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d020      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80055ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055ee:	d113      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055f4:	3308      	adds	r3, #8
 80055f6:	4618      	mov	r0, r3
 80055f8:	f003 fe70 	bl	80092dc <RCCEx_PLL2_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005602:	e014      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005604:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005608:	3330      	adds	r3, #48	; 0x30
 800560a:	4618      	mov	r0, r3
 800560c:	f003 fefe 	bl	800940c <RCCEx_PLL3_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005616:	e00a      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800561e:	e006      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005620:	bf00      	nop
 8005622:	e004      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005624:	bf00      	nop
 8005626:	e002      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005628:	bf00      	nop
 800562a:	e000      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800562c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10d      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005636:	4b55      	ldr	r3, [pc, #340]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005638:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800563c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005640:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005644:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005648:	4a50      	ldr	r2, [pc, #320]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800564a:	430b      	orrs	r3, r1
 800564c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005650:	e003      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005652:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005656:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800565a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	2100      	movs	r1, #0
 8005664:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005670:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005674:	460b      	mov	r3, r1
 8005676:	4313      	orrs	r3, r2
 8005678:	d055      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800567a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800567e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005686:	d031      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800568c:	d82a      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005692:	d02d      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005698:	d824      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800569a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800569e:	d029      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80056a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056a4:	d81e      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80056a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056aa:	d011      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80056ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b0:	d818      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d020      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80056b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ba:	d113      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056c0:	3308      	adds	r3, #8
 80056c2:	4618      	mov	r0, r3
 80056c4:	f003 fe0a 	bl	80092dc <RCCEx_PLL2_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80056ce:	e014      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056d4:	3330      	adds	r3, #48	; 0x30
 80056d6:	4618      	mov	r0, r3
 80056d8:	f003 fe98 	bl	800940c <RCCEx_PLL3_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80056e2:	e00a      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056ea:	e006      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80056ec:	bf00      	nop
 80056ee:	e004      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80056f0:	bf00      	nop
 80056f2:	e002      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80056f4:	bf00      	nop
 80056f6:	e000      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80056f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10d      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005702:	4b22      	ldr	r3, [pc, #136]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005704:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005708:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800570c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005710:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005714:	4a1d      	ldr	r2, [pc, #116]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005716:	430b      	orrs	r3, r1
 8005718:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800571c:	e003      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005722:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005726:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005736:	2300      	movs	r3, #0
 8005738:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800573c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005740:	460b      	mov	r3, r1
 8005742:	4313      	orrs	r3, r2
 8005744:	d055      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005746:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800574a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800574e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005752:	d035      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005754:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005758:	d82e      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800575a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800575e:	d031      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005760:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005764:	d828      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800576a:	d01b      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800576c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005770:	d822      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577a:	d009      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800577c:	e01c      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800577e:	4b03      	ldr	r3, [pc, #12]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	4a02      	ldr	r2, [pc, #8]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005788:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800578a:	e01c      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800578c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005790:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005794:	3308      	adds	r3, #8
 8005796:	4618      	mov	r0, r3
 8005798:	f003 fda0 	bl	80092dc <RCCEx_PLL2_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057a2:	e010      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057a8:	3330      	adds	r3, #48	; 0x30
 80057aa:	4618      	mov	r0, r3
 80057ac:	f003 fe2e 	bl	800940c <RCCEx_PLL3_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057b6:	e006      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80057be:	e002      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80057c0:	bf00      	nop
 80057c2:	e000      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80057c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10d      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80057ce:	4bc3      	ldr	r3, [pc, #780]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80057d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80057d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057e0:	4abe      	ldr	r2, [pc, #760]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80057e2:	430b      	orrs	r3, r1
 80057e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057e8:	e003      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80057f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80057fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005802:	2300      	movs	r3, #0
 8005804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005808:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800580c:	460b      	mov	r3, r1
 800580e:	4313      	orrs	r3, r2
 8005810:	d051      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005812:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005816:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800581a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800581e:	d033      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005824:	d82c      	bhi.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005826:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800582a:	d02d      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800582c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005830:	d826      	bhi.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005836:	d019      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583c:	d820      	bhi.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005842:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005846:	d007      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005848:	e01a      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800584a:	4ba4      	ldr	r3, [pc, #656]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	4aa3      	ldr	r2, [pc, #652]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005854:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005856:	e018      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005858:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800585c:	3308      	adds	r3, #8
 800585e:	4618      	mov	r0, r3
 8005860:	f003 fd3c 	bl	80092dc <RCCEx_PLL2_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800586a:	e00e      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800586c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005870:	3330      	adds	r3, #48	; 0x30
 8005872:	4618      	mov	r0, r3
 8005874:	f003 fdca 	bl	800940c <RCCEx_PLL3_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800587e:	e004      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005886:	e000      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10d      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005892:	4b92      	ldr	r3, [pc, #584]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005898:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 800589c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80058a4:	4a8d      	ldr	r2, [pc, #564]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058ac:	e003      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80058b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80058b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80058c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80058c4:	2300      	movs	r3, #0
 80058c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80058cc:	460b      	mov	r3, r1
 80058ce:	4313      	orrs	r3, r2
 80058d0:	d032      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80058d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80058da:	2b05      	cmp	r3, #5
 80058dc:	d80f      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d211      	bcs.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d911      	bls.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d109      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058ee:	3308      	adds	r3, #8
 80058f0:	4618      	mov	r0, r3
 80058f2:	f003 fcf3 	bl	80092dc <RCCEx_PLL2_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80058fc:	e006      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005904:	e002      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005906:	bf00      	nop
 8005908:	e000      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800590a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800590c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10d      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005914:	4b71      	ldr	r3, [pc, #452]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800591a:	f023 0107 	bic.w	r1, r3, #7
 800591e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005922:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005926:	4a6d      	ldr	r2, [pc, #436]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005928:	430b      	orrs	r3, r1
 800592a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800592e:	e003      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005930:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005934:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005938:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	2100      	movs	r1, #0
 8005942:	6739      	str	r1, [r7, #112]	; 0x70
 8005944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005948:	677b      	str	r3, [r7, #116]	; 0x74
 800594a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800594e:	460b      	mov	r3, r1
 8005950:	4313      	orrs	r3, r2
 8005952:	d024      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005954:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005960:	2b08      	cmp	r3, #8
 8005962:	d005      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800596a:	e002      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800596c:	bf00      	nop
 800596e:	e000      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005972:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800597a:	4b58      	ldr	r3, [pc, #352]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800597c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005980:	f023 0108 	bic.w	r1, r3, #8
 8005984:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005988:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800598c:	4a53      	ldr	r2, [pc, #332]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800598e:	430b      	orrs	r3, r1
 8005990:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005994:	e003      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005996:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800599a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800599e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80059aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ac:	2300      	movs	r3, #0
 80059ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80059b4:	460b      	mov	r3, r1
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f000 80b9 	beq.w	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80059bc:	4b48      	ldr	r3, [pc, #288]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	4a47      	ldr	r2, [pc, #284]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059c8:	f7fb fe96 	bl	80016f8 <HAL_GetTick>
 80059cc:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80059d0:	e00b      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d2:	f7fb fe91 	bl	80016f8 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d903      	bls.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80059e8:	e005      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80059ea:	4b3d      	ldr	r3, [pc, #244]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0ed      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80059f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 8093 	bne.w	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a00:	4b36      	ldr	r3, [pc, #216]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005a0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d023      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a1a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8005a1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01b      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a26:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a30:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a34:	4b29      	ldr	r3, [pc, #164]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a3a:	4a28      	ldr	r2, [pc, #160]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a44:	4b25      	ldr	r3, [pc, #148]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a4a:	4a24      	ldr	r2, [pc, #144]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a54:	4a21      	ldr	r2, [pc, #132]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a56:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d019      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6a:	f7fb fe45 	bl	80016f8 <HAL_GetTick>
 8005a6e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a72:	e00d      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a74:	f7fb fe40 	bl	80016f8 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d903      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8005a8e:	e006      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a90:	4b12      	ldr	r3, [pc, #72]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0ea      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8005a9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d13a      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005aaa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab6:	d115      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005ab8:	4b08      	ldr	r3, [pc, #32]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ac4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005ac8:	091b      	lsrs	r3, r3, #4
 8005aca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ace:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005ad2:	4a02      	ldr	r2, [pc, #8]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	61d3      	str	r3, [r2, #28]
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8005ada:	bf00      	nop
 8005adc:	44020c00 	.word	0x44020c00
 8005ae0:	44020800 	.word	0x44020800
 8005ae4:	4b9f      	ldr	r3, [pc, #636]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	4a9e      	ldr	r2, [pc, #632]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005aea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005aee:	61d3      	str	r3, [r2, #28]
 8005af0:	4b9c      	ldr	r3, [pc, #624]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005af6:	4a9b      	ldr	r2, [pc, #620]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005b00:	4b98      	ldr	r3, [pc, #608]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b02:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8005b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b0a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b12:	4a94      	ldr	r2, [pc, #592]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b14:	430b      	orrs	r3, r1
 8005b16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005b1a:	e008      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b1c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b20:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8005b24:	e003      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b2a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005b44:	460b      	mov	r3, r1
 8005b46:	4313      	orrs	r3, r2
 8005b48:	d035      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005b52:	2b30      	cmp	r3, #48	; 0x30
 8005b54:	d014      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005b56:	2b30      	cmp	r3, #48	; 0x30
 8005b58:	d80e      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d012      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d80a      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d010      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d106      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6a:	4b7e      	ldr	r3, [pc, #504]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	4a7d      	ldr	r2, [pc, #500]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b74:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b76:	e008      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b7e:	e004      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005b80:	bf00      	nop
 8005b82:	e002      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005b84:	bf00      	nop
 8005b86:	e000      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10d      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005b92:	4b74      	ldr	r3, [pc, #464]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b98:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ba0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005ba4:	4a6f      	ldr	r2, [pc, #444]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005bac:	e003      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bb2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005bb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005bc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bc8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	d033      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005bd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bd6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	d007      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8005be2:	e010      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be4:	4b5f      	ldr	r3, [pc, #380]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	4a5e      	ldr	r2, [pc, #376]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bee:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005bf0:	e00d      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f003 fb6f 	bl	80092dc <RCCEx_PLL2_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005c04:	e003      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10d      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005c16:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c1c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c24:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005c28:	4a4e      	ldr	r2, [pc, #312]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c36:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005c46:	653b      	str	r3, [r7, #80]	; 0x50
 8005c48:	2300      	movs	r3, #0
 8005c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c4c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005c50:	460b      	mov	r3, r1
 8005c52:	4313      	orrs	r3, r2
 8005c54:	d033      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c5a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	d007      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005c66:	e010      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c68:	4b3e      	ldr	r3, [pc, #248]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	4a3d      	ldr	r2, [pc, #244]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c72:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005c74:	e00d      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f003 fb2d 	bl	80092dc <RCCEx_PLL2_Config>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005c88:	e003      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005c9a:	4b32      	ldr	r3, [pc, #200]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ca0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ca8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005cac:	4a2d      	ldr	r2, [pc, #180]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005cb4:	e003      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ccc:	2300      	movs	r3, #0
 8005cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	d04a      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005cda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d827      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8005ce6:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cec:	08005d01 	.word	0x08005d01
 8005cf0:	08005d0f 	.word	0x08005d0f
 8005cf4:	08005d23 	.word	0x08005d23
 8005cf8:	08005d3f 	.word	0x08005d3f
 8005cfc:	08005d3f 	.word	0x08005d3f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d00:	4b18      	ldr	r3, [pc, #96]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d0a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005d0c:	e018      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d12:	3308      	adds	r3, #8
 8005d14:	4618      	mov	r0, r3
 8005d16:	f003 fae1 	bl	80092dc <RCCEx_PLL2_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005d20:	e00e      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d26:	3330      	adds	r3, #48	; 0x30
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f003 fb6f 	bl	800940c <RCCEx_PLL3_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005d34:	e004      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d3c:	e000      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10f      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d4e:	f023 0107 	bic.w	r1, r3, #7
 8005d52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d5a:	4a02      	ldr	r2, [pc, #8]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d62:	e005      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8005d64:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d6c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d7e:	2300      	movs	r3, #0
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
 8005d82:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005d86:	460b      	mov	r3, r1
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f000 8081 	beq.w	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005d8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d85f      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005e25 	.word	0x08005e25
 8005da4:	08005e5b 	.word	0x08005e5b
 8005da8:	08005e5b 	.word	0x08005e5b
 8005dac:	08005e5b 	.word	0x08005e5b
 8005db0:	08005e5b 	.word	0x08005e5b
 8005db4:	08005e5b 	.word	0x08005e5b
 8005db8:	08005e5b 	.word	0x08005e5b
 8005dbc:	08005e5b 	.word	0x08005e5b
 8005dc0:	08005e33 	.word	0x08005e33
 8005dc4:	08005e5b 	.word	0x08005e5b
 8005dc8:	08005e5b 	.word	0x08005e5b
 8005dcc:	08005e5b 	.word	0x08005e5b
 8005dd0:	08005e5b 	.word	0x08005e5b
 8005dd4:	08005e5b 	.word	0x08005e5b
 8005dd8:	08005e5b 	.word	0x08005e5b
 8005ddc:	08005e5b 	.word	0x08005e5b
 8005de0:	08005e47 	.word	0x08005e47
 8005de4:	08005e5b 	.word	0x08005e5b
 8005de8:	08005e5b 	.word	0x08005e5b
 8005dec:	08005e5b 	.word	0x08005e5b
 8005df0:	08005e5b 	.word	0x08005e5b
 8005df4:	08005e5b 	.word	0x08005e5b
 8005df8:	08005e5b 	.word	0x08005e5b
 8005dfc:	08005e5b 	.word	0x08005e5b
 8005e00:	08005e63 	.word	0x08005e63
 8005e04:	08005e5b 	.word	0x08005e5b
 8005e08:	08005e5b 	.word	0x08005e5b
 8005e0c:	08005e5b 	.word	0x08005e5b
 8005e10:	08005e5b 	.word	0x08005e5b
 8005e14:	08005e5b 	.word	0x08005e5b
 8005e18:	08005e5b 	.word	0x08005e5b
 8005e1c:	08005e5b 	.word	0x08005e5b
 8005e20:	08005e63 	.word	0x08005e63
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e24:	4bab      	ldr	r3, [pc, #684]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	4aaa      	ldr	r2, [pc, #680]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e2e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005e30:	e018      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e36:	3308      	adds	r3, #8
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f003 fa4f 	bl	80092dc <RCCEx_PLL2_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005e44:	e00e      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e4a:	3330      	adds	r3, #48	; 0x30
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f003 fadd 	bl	800940c <RCCEx_PLL3_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005e58:	e004      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e60:	e000      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8005e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10d      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005e6c:	4b99      	ldr	r3, [pc, #612]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e72:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e7e:	4a95      	ldr	r2, [pc, #596]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e80:	430b      	orrs	r3, r1
 8005e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e86:	e003      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e88:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e8c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	d04e      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb8:	d02e      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ebe:	d827      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005ec0:	2bc0      	cmp	r3, #192	; 0xc0
 8005ec2:	d02b      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8005ec4:	2bc0      	cmp	r3, #192	; 0xc0
 8005ec6:	d823      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005ec8:	2b80      	cmp	r3, #128	; 0x80
 8005eca:	d017      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005ecc:	2b80      	cmp	r3, #128	; 0x80
 8005ece:	d81f      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d007      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005ed8:	e01a      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eda:	4b7e      	ldr	r3, [pc, #504]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	4a7d      	ldr	r2, [pc, #500]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ee4:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005ee6:	e01a      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005eec:	3308      	adds	r3, #8
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f003 f9f4 	bl	80092dc <RCCEx_PLL2_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005efa:	e010      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f00:	3330      	adds	r3, #48	; 0x30
 8005f02:	4618      	mov	r0, r3
 8005f04:	f003 fa82 	bl	800940c <RCCEx_PLL3_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005f0e:	e006      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005f16:	e002      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005f18:	bf00      	nop
 8005f1a:	e000      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10d      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005f26:	4b6b      	ldr	r3, [pc, #428]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f2c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f38:	4a66      	ldr	r2, [pc, #408]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f40:	e003      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f46:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005f56:	633b      	str	r3, [r7, #48]	; 0x30
 8005f58:	2300      	movs	r3, #0
 8005f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005f60:	460b      	mov	r3, r1
 8005f62:	4313      	orrs	r3, r2
 8005f64:	d055      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005f66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005f6e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f72:	d031      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005f74:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f78:	d82a      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f7e:	d02d      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f84:	d824      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005f86:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f8a:	d029      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005f8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f90:	d81e      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f96:	d011      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9c:	d818      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d020      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa6:	d113      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fac:	3308      	adds	r3, #8
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f003 f994 	bl	80092dc <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005fba:	e014      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fc0:	3330      	adds	r3, #48	; 0x30
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f003 fa22 	bl	800940c <RCCEx_PLL3_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005fce:	e00a      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005fd6:	e006      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005fd8:	bf00      	nop
 8005fda:	e004      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005fdc:	bf00      	nop
 8005fde:	e002      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005fe0:	bf00      	nop
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10d      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005fee:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ff4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ffc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006000:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006002:	430b      	orrs	r3, r1
 8006004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006008:	e003      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800600e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006012:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006020:	2300      	movs	r3, #0
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006024:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006028:	460b      	mov	r3, r1
 800602a:	4313      	orrs	r3, r2
 800602c:	d058      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800602e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006036:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800603a:	d031      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800603c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006040:	d82a      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006046:	d02d      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800604c:	d824      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800604e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006052:	d029      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006054:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006058:	d81e      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800605a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605e:	d011      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006064:	d818      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d020      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800606a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606e:	d113      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006070:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006074:	3308      	adds	r3, #8
 8006076:	4618      	mov	r0, r3
 8006078:	f003 f930 	bl	80092dc <RCCEx_PLL2_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006082:	e014      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006084:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006088:	3330      	adds	r3, #48	; 0x30
 800608a:	4618      	mov	r0, r3
 800608c:	f003 f9be 	bl	800940c <RCCEx_PLL3_Config>
 8006090:	4603      	mov	r3, r0
 8006092:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006096:	e00a      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800609e:	e006      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80060a0:	bf00      	nop
 80060a2:	e004      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80060a4:	bf00      	nop
 80060a6:	e002      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80060a8:	bf00      	nop
 80060aa:	e000      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80060ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d110      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80060b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80060c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060c8:	4902      	ldr	r1, [pc, #8]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80060d0:	e006      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80060d2:	bf00      	nop
 80060d4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80060dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	2100      	movs	r1, #0
 80060ea:	6239      	str	r1, [r7, #32]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
 80060f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80060f6:	460b      	mov	r3, r1
 80060f8:	4313      	orrs	r3, r2
 80060fa:	d055      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80060fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006104:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006108:	d031      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800610a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800610e:	d82a      	bhi.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006114:	d02d      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800611a:	d824      	bhi.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800611c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006120:	d029      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006122:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006126:	d81e      	bhi.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612c:	d011      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800612e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006132:	d818      	bhi.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d020      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800613c:	d113      	bne.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800613e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006142:	3308      	adds	r3, #8
 8006144:	4618      	mov	r0, r3
 8006146:	f003 f8c9 	bl	80092dc <RCCEx_PLL2_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006150:	e014      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006152:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006156:	3330      	adds	r3, #48	; 0x30
 8006158:	4618      	mov	r0, r3
 800615a:	f003 f957 	bl	800940c <RCCEx_PLL3_Config>
 800615e:	4603      	mov	r3, r0
 8006160:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006164:	e00a      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800616c:	e006      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800616e:	bf00      	nop
 8006170:	e004      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006172:	bf00      	nop
 8006174:	e002      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006176:	bf00      	nop
 8006178:	e000      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800617a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10d      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006184:	4b88      	ldr	r3, [pc, #544]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800618a:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 800618e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006192:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006196:	4984      	ldr	r1, [pc, #528]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800619e:	e003      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80061a4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80061a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	2100      	movs	r1, #0
 80061b2:	61b9      	str	r1, [r7, #24]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061be:	460b      	mov	r3, r1
 80061c0:	4313      	orrs	r3, r2
 80061c2:	d03d      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80061c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d81c      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	08006213 	.word	0x08006213
 80061dc:	080061e9 	.word	0x080061e9
 80061e0:	080061f7 	.word	0x080061f7
 80061e4:	08006213 	.word	0x08006213
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e8:	4b6f      	ldr	r3, [pc, #444]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	4a6e      	ldr	r2, [pc, #440]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061f2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80061f4:	e00e      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061fa:	3308      	adds	r3, #8
 80061fc:	4618      	mov	r0, r3
 80061fe:	f003 f86d 	bl	80092dc <RCCEx_PLL2_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006208:	e004      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006210:	e000      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006214:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10d      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800621c:	4b62      	ldr	r3, [pc, #392]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800621e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006222:	f023 0203 	bic.w	r2, r3, #3
 8006226:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800622a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800622e:	495e      	ldr	r1, [pc, #376]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006236:	e003      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800623c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006240:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	2100      	movs	r1, #0
 800624a:	6139      	str	r1, [r7, #16]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006256:	460b      	mov	r3, r1
 8006258:	4313      	orrs	r3, r2
 800625a:	d03a      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800625c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006260:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006268:	d00e      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800626a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800626e:	d815      	bhi.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006270:	2b00      	cmp	r3, #0
 8006272:	d017      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006278:	d110      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800627a:	4b4b      	ldr	r3, [pc, #300]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627e:	4a4a      	ldr	r2, [pc, #296]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006284:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006286:	e00e      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006288:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800628c:	3308      	adds	r3, #8
 800628e:	4618      	mov	r0, r3
 8006290:	f003 f824 	bl	80092dc <RCCEx_PLL2_Config>
 8006294:	4603      	mov	r3, r0
 8006296:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800629a:	e004      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80062a2:	e000      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80062a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10d      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80062ae:	4b3e      	ldr	r3, [pc, #248]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80062b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80062c0:	4939      	ldr	r1, [pc, #228]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80062c8:	e003      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	2100      	movs	r1, #0
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80062e8:	460b      	mov	r3, r1
 80062ea:	4313      	orrs	r3, r2
 80062ec:	d038      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80062ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	d01b      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80062fa:	2b30      	cmp	r3, #48	; 0x30
 80062fc:	d815      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d002      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006302:	2b20      	cmp	r3, #32
 8006304:	d007      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006306:	e010      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006308:	4b27      	ldr	r3, [pc, #156]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630c:	4a26      	ldr	r2, [pc, #152]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800630e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006312:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006314:	e00e      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006316:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800631a:	3330      	adds	r3, #48	; 0x30
 800631c:	4618      	mov	r0, r3
 800631e:	f003 f875 	bl	800940c <RCCEx_PLL3_Config>
 8006322:	4603      	mov	r3, r0
 8006324:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006328:	e004      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006330:	e000      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006334:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10d      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800633c:	4b1a      	ldr	r3, [pc, #104]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800633e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006342:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006346:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800634a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800634e:	4916      	ldr	r1, [pc, #88]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006356:	e003      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800635c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006360:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	2100      	movs	r1, #0
 800636a:	6039      	str	r1, [r7, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	607b      	str	r3, [r7, #4]
 8006372:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006376:	460b      	mov	r3, r1
 8006378:	4313      	orrs	r3, r2
 800637a:	d00c      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800637e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006382:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006386:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800638a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800638e:	4906      	ldr	r1, [pc, #24]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8006396:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 800639a:	4618      	mov	r0, r3
 800639c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80063a0:	46bd      	mov	sp, r7
 80063a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063a6:	bf00      	nop
 80063a8:	44020c00 	.word	0x44020c00

080063ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b08b      	sub	sp, #44	; 0x2c
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80063b4:	4bad      	ldr	r3, [pc, #692]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063bc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80063be:	4bab      	ldr	r3, [pc, #684]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80063c8:	4ba8      	ldr	r3, [pc, #672]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80063d4:	4ba5      	ldr	r3, [pc, #660]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	f003 0310 	and.w	r3, r3, #16
 80063dc:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80063de:	4ba3      	ldr	r3, [pc, #652]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	08db      	lsrs	r3, r3, #3
 80063e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	fb02 f303 	mul.w	r3, r2, r3
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8126 	beq.w	800664e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	2b03      	cmp	r3, #3
 8006406:	d053      	beq.n	80064b0 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b03      	cmp	r3, #3
 800640c:	d86f      	bhi.n	80064ee <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d003      	beq.n	800641c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b02      	cmp	r3, #2
 8006418:	d02b      	beq.n	8006472 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800641a:	e068      	b.n	80064ee <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800641c:	4b93      	ldr	r3, [pc, #588]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	4a92      	ldr	r2, [pc, #584]	; (8006670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
 800642c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	ee07 3a90 	vmov	s15, r3
 800644c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006450:	ed97 6a04 	vldr	s12, [r7, #16]
 8006454:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006674 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006470:	e068      	b.n	8006544 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006678 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006492:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006674 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80064ae:	e049      	b.n	8006544 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	eddf 6a70 	vldr	s13, [pc, #448]	; 800667c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80064be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80064d0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006674 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80064d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80064ec:	e02a      	b.n	8006544 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064ee:	4b5f      	ldr	r3, [pc, #380]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	08db      	lsrs	r3, r3, #3
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	4a5d      	ldr	r2, [pc, #372]	; (8006670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80064fa:	fa22 f303 	lsr.w	r3, r2, r3
 80064fe:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006522:	ed97 6a04 	vldr	s12, [r7, #16]
 8006526:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006674 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800652a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006542:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006544:	4b49      	ldr	r3, [pc, #292]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006550:	d121      	bne.n	8006596 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006552:	4b46      	ldr	r3, [pc, #280]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d017      	beq.n	800658e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800655e:	4b43      	ldr	r3, [pc, #268]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	0a5b      	lsrs	r3, r3, #9
 8006564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006568:	ee07 3a90 	vmov	s15, r3
 800656c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006574:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006578:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800657c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006584:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	e006      	b.n	800659c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	e002      	b.n	800659c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800659c:	4b33      	ldr	r3, [pc, #204]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065a8:	d121      	bne.n	80065ee <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80065aa:	4b30      	ldr	r3, [pc, #192]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d017      	beq.n	80065e6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80065b6:	4b2d      	ldr	r3, [pc, #180]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	0c1b      	lsrs	r3, r3, #16
 80065bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c0:	ee07 3a90 	vmov	s15, r3
 80065c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80065c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065cc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80065d0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80065d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065dc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	605a      	str	r2, [r3, #4]
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	605a      	str	r2, [r3, #4]
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065f4:	4b1d      	ldr	r3, [pc, #116]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006600:	d121      	bne.n	8006646 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006602:	4b1a      	ldr	r3, [pc, #104]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d017      	beq.n	800663e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800660e:	4b17      	ldr	r3, [pc, #92]	; (800666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006612:	0e1b      	lsrs	r3, r3, #24
 8006614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006618:	ee07 3a90 	vmov	s15, r3
 800661c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006624:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006628:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800662c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006634:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800663c:	e010      	b.n	8006660 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	609a      	str	r2, [r3, #8]
}
 8006644:	e00c      	b.n	8006660 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	609a      	str	r2, [r3, #8]
}
 800664c:	e008      	b.n	8006660 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	609a      	str	r2, [r3, #8]
}
 8006660:	bf00      	nop
 8006662:	372c      	adds	r7, #44	; 0x2c
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	44020c00 	.word	0x44020c00
 8006670:	03d09000 	.word	0x03d09000
 8006674:	46000000 	.word	0x46000000
 8006678:	4a742400 	.word	0x4a742400
 800667c:	4af42400 	.word	0x4af42400

08006680 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006680:	b480      	push	{r7}
 8006682:	b08b      	sub	sp, #44	; 0x2c
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006688:	4bad      	ldr	r3, [pc, #692]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800668a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006690:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006692:	4bab      	ldr	r3, [pc, #684]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800669c:	4ba8      	ldr	r3, [pc, #672]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066a6:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80066a8:	4ba5      	ldr	r3, [pc, #660]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80066b2:	4ba3      	ldr	r3, [pc, #652]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	08db      	lsrs	r3, r3, #3
 80066b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ca:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8126 	beq.w	8006922 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d053      	beq.n	8006784 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d86f      	bhi.n	80067c2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d003      	beq.n	80066f0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d02b      	beq.n	8006746 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80066ee:	e068      	b.n	80067c2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066f0:	4b93      	ldr	r3, [pc, #588]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	08db      	lsrs	r3, r3, #3
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	4a92      	ldr	r2, [pc, #584]	; (8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006700:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	ee07 3a90 	vmov	s15, r3
 8006708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	ee07 3a90 	vmov	s15, r3
 8006720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006724:	ed97 6a04 	vldr	s12, [r7, #16]
 8006728:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800672c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800673c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006740:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006744:	e068      	b.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006750:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800694c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006762:	ed97 6a04 	vldr	s12, [r7, #16]
 8006766:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800676a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006782:	e049      	b.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006950 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	ee07 3a90 	vmov	s15, r3
 800679c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80067a4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80067a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80067c0:	e02a      	b.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067c2:	4b5f      	ldr	r3, [pc, #380]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	08db      	lsrs	r3, r3, #3
 80067c8:	f003 0303 	and.w	r3, r3, #3
 80067cc:	4a5d      	ldr	r2, [pc, #372]	; (8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80067ce:	fa22 f303 	lsr.w	r3, r2, r3
 80067d2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80067fa:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80067fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800680a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006812:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006816:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006818:	4b49      	ldr	r3, [pc, #292]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006824:	d121      	bne.n	800686a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006826:	4b46      	ldr	r3, [pc, #280]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d017      	beq.n	8006862 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006832:	4b43      	ldr	r3, [pc, #268]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	0a5b      	lsrs	r3, r3, #9
 8006838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006848:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800684c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006858:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e006      	b.n	8006870 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	e002      	b.n	8006870 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006870:	4b33      	ldr	r3, [pc, #204]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800687c:	d121      	bne.n	80068c2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800687e:	4b30      	ldr	r3, [pc, #192]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d017      	beq.n	80068ba <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800688a:	4b2d      	ldr	r3, [pc, #180]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800688c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800689c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80068a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80068a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	e006      	b.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	605a      	str	r2, [r3, #4]
 80068c0:	e002      	b.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068d4:	d121      	bne.n	800691a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80068d6:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d017      	beq.n	8006912 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80068e2:	4b17      	ldr	r3, [pc, #92]	; (8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	0e1b      	lsrs	r3, r3, #24
 80068e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ec:	ee07 3a90 	vmov	s15, r3
 80068f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80068f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80068fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006908:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006910:	e010      	b.n	8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	e00c      	b.n	8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	e008      	b.n	8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	609a      	str	r2, [r3, #8]
}
 8006934:	bf00      	nop
 8006936:	372c      	adds	r7, #44	; 0x2c
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	44020c00 	.word	0x44020c00
 8006944:	03d09000 	.word	0x03d09000
 8006948:	46000000 	.word	0x46000000
 800694c:	4a742400 	.word	0x4a742400
 8006950:	4af42400 	.word	0x4af42400

08006954 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006954:	b480      	push	{r7}
 8006956:	b08b      	sub	sp, #44	; 0x2c
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800695c:	4bad      	ldr	r3, [pc, #692]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800695e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006964:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006966:	4bab      	ldr	r3, [pc, #684]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006970:	4ba8      	ldr	r3, [pc, #672]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	0a1b      	lsrs	r3, r3, #8
 8006976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800697a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800697c:	4ba5      	ldr	r3, [pc, #660]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006986:	4ba3      	ldr	r3, [pc, #652]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698a:	08db      	lsrs	r3, r3, #3
 800698c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	fb02 f303 	mul.w	r3, r2, r3
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8126 	beq.w	8006bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d053      	beq.n	8006a58 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d86f      	bhi.n	8006a96 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d003      	beq.n	80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d02b      	beq.n	8006a1a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80069c2:	e068      	b.n	8006a96 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069c4:	4b93      	ldr	r3, [pc, #588]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	08db      	lsrs	r3, r3, #3
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	4a92      	ldr	r2, [pc, #584]	; (8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
 80069d4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	ee07 3a90 	vmov	s15, r3
 80069dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	ee07 3a90 	vmov	s15, r3
 80069f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80069fc:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006a18:	e068      	b.n	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	ee07 3a90 	vmov	s15, r3
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a24:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a36:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006a56:	e049      	b.n	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a62:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a74:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a78:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006a94:	e02a      	b.n	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a96:	4b5f      	ldr	r3, [pc, #380]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	08db      	lsrs	r3, r3, #3
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	4a5d      	ldr	r2, [pc, #372]	; (8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aca:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ace:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006aea:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006aec:	4b49      	ldr	r3, [pc, #292]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006af8:	d121      	bne.n	8006b3e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006afa:	4b46      	ldr	r3, [pc, #280]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d017      	beq.n	8006b36 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b06:	4b43      	ldr	r3, [pc, #268]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0a:	0a5b      	lsrs	r3, r3, #9
 8006b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006b18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006b20:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b2c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e006      	b.n	8006b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	e002      	b.n	8006b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b44:	4b33      	ldr	r3, [pc, #204]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b50:	d121      	bne.n	8006b96 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006b52:	4b30      	ldr	r3, [pc, #192]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d017      	beq.n	8006b8e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b5e:	4b2d      	ldr	r3, [pc, #180]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b62:	0c1b      	lsrs	r3, r3, #16
 8006b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006b70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b74:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006b78:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b84:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	605a      	str	r2, [r3, #4]
 8006b8c:	e006      	b.n	8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	605a      	str	r2, [r3, #4]
 8006b94:	e002      	b.n	8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b9c:	4b1d      	ldr	r3, [pc, #116]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ba8:	d121      	bne.n	8006bee <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006baa:	4b1a      	ldr	r3, [pc, #104]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d017      	beq.n	8006be6 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006bb6:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	0e1b      	lsrs	r3, r3, #24
 8006bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc0:	ee07 3a90 	vmov	s15, r3
 8006bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006bc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bcc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006bd0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bdc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006be4:	e010      	b.n	8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	e00c      	b.n	8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	609a      	str	r2, [r3, #8]
}
 8006bf4:	e008      	b.n	8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	609a      	str	r2, [r3, #8]
}
 8006c08:	bf00      	nop
 8006c0a:	372c      	adds	r7, #44	; 0x2c
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	44020c00 	.word	0x44020c00
 8006c18:	03d09000 	.word	0x03d09000
 8006c1c:	46000000 	.word	0x46000000
 8006c20:	4a742400 	.word	0x4a742400
 8006c24:	4af42400 	.word	0x4af42400

08006c28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b08f      	sub	sp, #60	; 0x3c
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006c32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c36:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8006c3a:	4321      	orrs	r1, r4
 8006c3c:	d150      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006c3e:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c48:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006c4a:	4b23      	ldr	r3, [pc, #140]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d108      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5e:	d104      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
 8006c66:	f002 bb2a 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c78:	d108      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c80:	d104      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006c82:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34
 8006c88:	f002 bb19 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006c8c:	4b12      	ldr	r3, [pc, #72]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c98:	d119      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca0:	d115      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cae:	d30a      	bcc.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006cb0:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	0a1b      	lsrs	r3, r3, #8
 8006cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cba:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006cc2:	f002 bafc 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006cca:	f002 baf8 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd2:	f002 baf4 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cd6:	bf00      	nop
 8006cd8:	44020c00 	.word	0x44020c00
 8006cdc:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ce4:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8006ce8:	ea50 0104 	orrs.w	r1, r0, r4
 8006cec:	f001 8275 	beq.w	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cf4:	2801      	cmp	r0, #1
 8006cf6:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8006cfa:	f082 82dd 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d02:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8006d06:	ea50 0104 	orrs.w	r1, r0, r4
 8006d0a:	f001 816c 	beq.w	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d12:	2801      	cmp	r0, #1
 8006d14:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8006d18:	f082 82ce 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d20:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8006d24:	ea50 0104 	orrs.w	r1, r0, r4
 8006d28:	f001 8602 	beq.w	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8006d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d30:	2801      	cmp	r0, #1
 8006d32:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8006d36:	f082 82bf 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d3e:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8006d42:	ea50 0104 	orrs.w	r1, r0, r4
 8006d46:	f001 854c 	beq.w	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8006d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d4e:	2801      	cmp	r0, #1
 8006d50:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8006d54:	f082 82b0 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d5c:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8006d60:	ea50 0104 	orrs.w	r1, r0, r4
 8006d64:	f001 849e 	beq.w	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d6c:	2801      	cmp	r0, #1
 8006d6e:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8006d72:	f082 82a1 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d7a:	f1a1 0420 	sub.w	r4, r1, #32
 8006d7e:	ea50 0104 	orrs.w	r1, r0, r4
 8006d82:	f001 83e8 	beq.w	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d8a:	2801      	cmp	r0, #1
 8006d8c:	f171 0120 	sbcs.w	r1, r1, #32
 8006d90:	f082 8292 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d98:	f1a1 0410 	sub.w	r4, r1, #16
 8006d9c:	ea50 0104 	orrs.w	r1, r0, r4
 8006da0:	f002 8256 	beq.w	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006da8:	2801      	cmp	r0, #1
 8006daa:	f171 0110 	sbcs.w	r1, r1, #16
 8006dae:	f082 8283 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006db2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006db6:	f1a1 0408 	sub.w	r4, r1, #8
 8006dba:	ea50 0104 	orrs.w	r1, r0, r4
 8006dbe:	f002 81cc 	beq.w	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8006dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dc6:	2801      	cmp	r0, #1
 8006dc8:	f171 0108 	sbcs.w	r1, r1, #8
 8006dcc:	f082 8274 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006dd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dd4:	1f0c      	subs	r4, r1, #4
 8006dd6:	ea50 0104 	orrs.w	r1, r0, r4
 8006dda:	f001 8648 	beq.w	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8006dde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006de2:	2801      	cmp	r0, #1
 8006de4:	f171 0104 	sbcs.w	r1, r1, #4
 8006de8:	f082 8266 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006dec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006df0:	1e8c      	subs	r4, r1, #2
 8006df2:	ea50 0104 	orrs.w	r1, r0, r4
 8006df6:	f002 8143 	beq.w	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dfe:	2801      	cmp	r0, #1
 8006e00:	f171 0102 	sbcs.w	r1, r1, #2
 8006e04:	f082 8258 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e0c:	1e4c      	subs	r4, r1, #1
 8006e0e:	ea50 0104 	orrs.w	r1, r0, r4
 8006e12:	f002 80ce 	beq.w	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8006e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e1a:	2801      	cmp	r0, #1
 8006e1c:	f171 0101 	sbcs.w	r1, r1, #1
 8006e20:	f082 824a 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e28:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8006e2c:	4321      	orrs	r1, r4
 8006e2e:	f002 8059 	beq.w	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8006e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e36:	4cd9      	ldr	r4, [pc, #868]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	f171 0100 	sbcs.w	r1, r1, #0
 8006e3e:	f082 823b 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e46:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8006e4a:	4321      	orrs	r1, r4
 8006e4c:	f001 87d9 	beq.w	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006e50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e54:	4cd2      	ldr	r4, [pc, #840]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006e56:	42a0      	cmp	r0, r4
 8006e58:	f171 0100 	sbcs.w	r1, r1, #0
 8006e5c:	f082 822c 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e64:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8006e68:	4321      	orrs	r1, r4
 8006e6a:	f001 8751 	beq.w	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8006e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e72:	4ccc      	ldr	r4, [pc, #816]	; (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006e74:	42a0      	cmp	r0, r4
 8006e76:	f171 0100 	sbcs.w	r1, r1, #0
 8006e7a:	f082 821d 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e82:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8006e86:	4321      	orrs	r1, r4
 8006e88:	f001 869a 	beq.w	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8006e8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e90:	4cc5      	ldr	r4, [pc, #788]	; (80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006e92:	42a0      	cmp	r0, r4
 8006e94:	f171 0100 	sbcs.w	r1, r1, #0
 8006e98:	f082 820e 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ea0:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8006ea4:	4321      	orrs	r1, r4
 8006ea6:	f001 8612 	beq.w	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8006eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eae:	4cbf      	ldr	r4, [pc, #764]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006eb0:	42a0      	cmp	r0, r4
 8006eb2:	f171 0100 	sbcs.w	r1, r1, #0
 8006eb6:	f082 81ff 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ebe:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8006ec2:	4321      	orrs	r1, r4
 8006ec4:	f002 817e 	beq.w	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ecc:	4cb8      	ldr	r4, [pc, #736]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ece:	42a0      	cmp	r0, r4
 8006ed0:	f171 0100 	sbcs.w	r1, r1, #0
 8006ed4:	f082 81f0 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006edc:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8006ee0:	4321      	orrs	r1, r4
 8006ee2:	f000 829e 	beq.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8006ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eea:	4cb2      	ldr	r4, [pc, #712]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006eec:	42a0      	cmp	r0, r4
 8006eee:	f171 0100 	sbcs.w	r1, r1, #0
 8006ef2:	f082 81e1 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006efa:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8006efe:	4321      	orrs	r1, r4
 8006f00:	f000 826d 	beq.w	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006f04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f08:	4cab      	ldr	r4, [pc, #684]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f0a:	42a0      	cmp	r0, r4
 8006f0c:	f171 0100 	sbcs.w	r1, r1, #0
 8006f10:	f082 81d2 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f18:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8006f1c:	4321      	orrs	r1, r4
 8006f1e:	f001 800d 	beq.w	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8006f22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f26:	4ca5      	ldr	r4, [pc, #660]	; (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006f28:	42a0      	cmp	r0, r4
 8006f2a:	f171 0100 	sbcs.w	r1, r1, #0
 8006f2e:	f082 81c3 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f36:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8006f3a:	4321      	orrs	r1, r4
 8006f3c:	f000 81d0 	beq.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f44:	4c9e      	ldr	r4, [pc, #632]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f46:	42a0      	cmp	r0, r4
 8006f48:	f171 0100 	sbcs.w	r1, r1, #0
 8006f4c:	f082 81b4 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f54:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8006f58:	4321      	orrs	r1, r4
 8006f5a:	f000 8142 	beq.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006f5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f62:	4c98      	ldr	r4, [pc, #608]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006f64:	42a0      	cmp	r0, r4
 8006f66:	f171 0100 	sbcs.w	r1, r1, #0
 8006f6a:	f082 81a5 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f72:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8006f76:	4321      	orrs	r1, r4
 8006f78:	f001 824e 	beq.w	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006f7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f80:	4c91      	ldr	r4, [pc, #580]	; (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006f82:	42a0      	cmp	r0, r4
 8006f84:	f171 0100 	sbcs.w	r1, r1, #0
 8006f88:	f082 8196 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f90:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8006f94:	4321      	orrs	r1, r4
 8006f96:	f001 8197 	beq.w	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006f9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f9e:	4c8b      	ldr	r4, [pc, #556]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	f171 0100 	sbcs.w	r1, r1, #0
 8006fa6:	f082 8187 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fae:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8006fb2:	4321      	orrs	r1, r4
 8006fb4:	f001 8154 	beq.w	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fbc:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8006fc0:	f171 0100 	sbcs.w	r1, r1, #0
 8006fc4:	f082 8178 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fcc:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006fd0:	4321      	orrs	r1, r4
 8006fd2:	f001 80b7 	beq.w	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006fd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fda:	f248 0401 	movw	r4, #32769	; 0x8001
 8006fde:	42a0      	cmp	r0, r4
 8006fe0:	f171 0100 	sbcs.w	r1, r1, #0
 8006fe4:	f082 8168 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fec:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8006ff0:	4321      	orrs	r1, r4
 8006ff2:	f001 8064 	beq.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ffa:	f244 0401 	movw	r4, #16385	; 0x4001
 8006ffe:	42a0      	cmp	r0, r4
 8007000:	f171 0100 	sbcs.w	r1, r1, #0
 8007004:	f082 8158 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800700c:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8007010:	4321      	orrs	r1, r4
 8007012:	f001 8011 	beq.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800701a:	f242 0401 	movw	r4, #8193	; 0x2001
 800701e:	42a0      	cmp	r0, r4
 8007020:	f171 0100 	sbcs.w	r1, r1, #0
 8007024:	f082 8148 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800702c:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8007030:	4321      	orrs	r1, r4
 8007032:	f000 871e 	beq.w	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007036:	e9d7 0100 	ldrd	r0, r1, [r7]
 800703a:	f241 0401 	movw	r4, #4097	; 0x1001
 800703e:	42a0      	cmp	r0, r4
 8007040:	f171 0100 	sbcs.w	r1, r1, #0
 8007044:	f082 8138 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800704c:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8007050:	4321      	orrs	r1, r4
 8007052:	f000 86a8 	beq.w	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800705a:	f640 0401 	movw	r4, #2049	; 0x801
 800705e:	42a0      	cmp	r0, r4
 8007060:	f171 0100 	sbcs.w	r1, r1, #0
 8007064:	f082 8128 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800706c:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8007070:	4321      	orrs	r1, r4
 8007072:	f000 8632 	beq.w	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800707a:	f240 4401 	movw	r4, #1025	; 0x401
 800707e:	42a0      	cmp	r0, r4
 8007080:	f171 0100 	sbcs.w	r1, r1, #0
 8007084:	f082 8118 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800708c:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8007090:	4321      	orrs	r1, r4
 8007092:	f000 85b0 	beq.w	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800709a:	f240 2401 	movw	r4, #513	; 0x201
 800709e:	42a0      	cmp	r0, r4
 80070a0:	f171 0100 	sbcs.w	r1, r1, #0
 80070a4:	f082 8108 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070ac:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 80070b0:	4321      	orrs	r1, r4
 80070b2:	f000 8535 	beq.w	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80070b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070ba:	f240 1401 	movw	r4, #257	; 0x101
 80070be:	42a0      	cmp	r0, r4
 80070c0:	f171 0100 	sbcs.w	r1, r1, #0
 80070c4:	f082 80f8 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070cc:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 80070d0:	4321      	orrs	r1, r4
 80070d2:	f000 84ba 	beq.w	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80070d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070da:	2881      	cmp	r0, #129	; 0x81
 80070dc:	f171 0100 	sbcs.w	r1, r1, #0
 80070e0:	f082 80ea 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070e8:	2821      	cmp	r0, #33	; 0x21
 80070ea:	f171 0100 	sbcs.w	r1, r1, #0
 80070ee:	d26f      	bcs.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80070f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070f4:	4301      	orrs	r1, r0
 80070f6:	f002 80df 	beq.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070fe:	1e42      	subs	r2, r0, #1
 8007100:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007104:	2a20      	cmp	r2, #32
 8007106:	f173 0100 	sbcs.w	r1, r3, #0
 800710a:	f082 80d5 	bcs.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800710e:	2a1f      	cmp	r2, #31
 8007110:	f202 80d2 	bhi.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007114:	a101      	add	r1, pc, #4	; (adr r1, 800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007116:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800711a:	bf00      	nop
 800711c:	0800747d 	.word	0x0800747d
 8007120:	08007549 	.word	0x08007549
 8007124:	080092b9 	.word	0x080092b9
 8007128:	08007609 	.word	0x08007609
 800712c:	080092b9 	.word	0x080092b9
 8007130:	080092b9 	.word	0x080092b9
 8007134:	080092b9 	.word	0x080092b9
 8007138:	080076d9 	.word	0x080076d9
 800713c:	080092b9 	.word	0x080092b9
 8007140:	080092b9 	.word	0x080092b9
 8007144:	080092b9 	.word	0x080092b9
 8007148:	080092b9 	.word	0x080092b9
 800714c:	080092b9 	.word	0x080092b9
 8007150:	080092b9 	.word	0x080092b9
 8007154:	080092b9 	.word	0x080092b9
 8007158:	080077bb 	.word	0x080077bb
 800715c:	080092b9 	.word	0x080092b9
 8007160:	080092b9 	.word	0x080092b9
 8007164:	080092b9 	.word	0x080092b9
 8007168:	080092b9 	.word	0x080092b9
 800716c:	080092b9 	.word	0x080092b9
 8007170:	080092b9 	.word	0x080092b9
 8007174:	080092b9 	.word	0x080092b9
 8007178:	080092b9 	.word	0x080092b9
 800717c:	080092b9 	.word	0x080092b9
 8007180:	080092b9 	.word	0x080092b9
 8007184:	080092b9 	.word	0x080092b9
 8007188:	080092b9 	.word	0x080092b9
 800718c:	080092b9 	.word	0x080092b9
 8007190:	080092b9 	.word	0x080092b9
 8007194:	080092b9 	.word	0x080092b9
 8007198:	08007891 	.word	0x08007891
 800719c:	80000001 	.word	0x80000001
 80071a0:	40000001 	.word	0x40000001
 80071a4:	20000001 	.word	0x20000001
 80071a8:	10000001 	.word	0x10000001
 80071ac:	08000001 	.word	0x08000001
 80071b0:	04000001 	.word	0x04000001
 80071b4:	00800001 	.word	0x00800001
 80071b8:	00400001 	.word	0x00400001
 80071bc:	00200001 	.word	0x00200001
 80071c0:	00100001 	.word	0x00100001
 80071c4:	00080001 	.word	0x00080001
 80071c8:	00040001 	.word	0x00040001
 80071cc:	00020001 	.word	0x00020001
 80071d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d4:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80071d8:	430b      	orrs	r3, r1
 80071da:	f000 83c4 	beq.w	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80071de:	f002 b86b 	b.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80071e2:	4ba1      	ldr	r3, [pc, #644]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80071e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071e8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80071ec:	633b      	str	r3, [r7, #48]	; 0x30
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071f4:	d036      	beq.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071fc:	d86b      	bhi.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007204:	d02b      	beq.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800720c:	d863      	bhi.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007214:	d01b      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800721c:	d85b      	bhi.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	2b00      	cmp	r3, #0
 8007222:	d004      	beq.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722a:	d008      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800722c:	e053      	b.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800722e:	f107 0320 	add.w	r3, r7, #32
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff f8ba 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800723c:	e04e      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800723e:	f107 0314 	add.w	r3, r7, #20
 8007242:	4618      	mov	r0, r3
 8007244:	f7ff fa1c 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800724c:	e046      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800724e:	f107 0308 	add.w	r3, r7, #8
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff fb7e 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800725c:	e03e      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800725e:	4b83      	ldr	r3, [pc, #524]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007262:	e03b      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007264:	4b80      	ldr	r3, [pc, #512]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800726a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007270:	4b7d      	ldr	r3, [pc, #500]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b02      	cmp	r3, #2
 800727a:	d10c      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007282:	4b79      	ldr	r3, [pc, #484]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	08db      	lsrs	r3, r3, #3
 8007288:	f003 0303 	and.w	r3, r3, #3
 800728c:	4a78      	ldr	r2, [pc, #480]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800728e:	fa22 f303 	lsr.w	r3, r2, r3
 8007292:	637b      	str	r3, [r7, #52]	; 0x34
 8007294:	e01e      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007296:	4b74      	ldr	r3, [pc, #464]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800729e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a2:	d106      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072aa:	d102      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072ac:	4b71      	ldr	r3, [pc, #452]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34
 80072b0:	e010      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072b2:	4b6d      	ldr	r3, [pc, #436]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072be:	d106      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072c6:	d102      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072c8:	4b6b      	ldr	r3, [pc, #428]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
 80072cc:	e002      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80072d2:	e003      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80072d4:	e002      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072da:	bf00      	nop
          }
        }
        break;
 80072dc:	f001 bfef 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80072e0:	4b61      	ldr	r3, [pc, #388]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80072e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072e6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80072ea:	633b      	str	r3, [r7, #48]	; 0x30
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072f2:	d036      	beq.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072fa:	d86b      	bhi.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007302:	d02b      	beq.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800730a:	d863      	bhi.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007312:	d01b      	beq.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800731a:	d85b      	bhi.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	2b00      	cmp	r3, #0
 8007320:	d004      	beq.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007328:	d008      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800732a:	e053      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800732c:	f107 0320 	add.w	r3, r7, #32
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff f83b 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800733a:	e04e      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800733c:	f107 0314 	add.w	r3, r7, #20
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff f99d 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800734a:	e046      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800734c:	f107 0308 	add.w	r3, r7, #8
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff faff 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800735a:	e03e      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800735c:	4b43      	ldr	r3, [pc, #268]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800735e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007360:	e03b      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007362:	4b41      	ldr	r3, [pc, #260]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007368:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800736c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800736e:	4b3e      	ldr	r3, [pc, #248]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b02      	cmp	r3, #2
 8007378:	d10c      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007380:	4b39      	ldr	r3, [pc, #228]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	08db      	lsrs	r3, r3, #3
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	4a39      	ldr	r2, [pc, #228]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800738c:	fa22 f303 	lsr.w	r3, r2, r3
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
 8007392:	e01e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007394:	4b34      	ldr	r3, [pc, #208]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800739c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a0:	d106      	bne.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a8:	d102      	bne.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073aa:	4b32      	ldr	r3, [pc, #200]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
 80073ae:	e010      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073b0:	4b2d      	ldr	r3, [pc, #180]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073bc:	d106      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c4:	d102      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80073c6:	4b2c      	ldr	r3, [pc, #176]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ca:	e002      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80073d0:	e003      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80073d2:	e002      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073d8:	bf00      	nop
          }
        }
        break;
 80073da:	f001 bf70 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80073de:	4b22      	ldr	r3, [pc, #136]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80073e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80073e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d108      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073f0:	f107 0320 	add.w	r3, r7, #32
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe ffd9 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073fe:	f001 bf5e 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	2b40      	cmp	r3, #64	; 0x40
 8007406:	d108      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff f937 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007416:	f001 bf52 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800741e:	f001 bf4e 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007422:	4b11      	ldr	r3, [pc, #68]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007424:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	2b00      	cmp	r3, #0
 8007432:	d108      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007434:	f107 0320 	add.w	r3, r7, #32
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe ffb7 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007442:	f001 bf3c 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	2b80      	cmp	r3, #128	; 0x80
 800744a:	d108      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800744c:	f107 0314 	add.w	r3, r7, #20
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff f915 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800745a:	f001 bf30 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007462:	f001 bf2c 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007466:	bf00      	nop
 8007468:	44020c00 	.word	0x44020c00
 800746c:	00bb8000 	.word	0x00bb8000
 8007470:	03d09000 	.word	0x03d09000
 8007474:	003d0900 	.word	0x003d0900
 8007478:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800747c:	4b9d      	ldr	r3, [pc, #628]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800747e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800748e:	f7fc ffd7 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8007492:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007494:	f001 bf13 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007498:	4b96      	ldr	r3, [pc, #600]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074a4:	d10a      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d107      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ac:	f107 0314 	add.w	r3, r7, #20
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff f8e5 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ba:	e043      	b.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80074bc:	4b8d      	ldr	r3, [pc, #564]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074c8:	d10a      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d107      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d0:	f107 0308 	add.w	r3, r7, #8
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff fa3d 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	637b      	str	r3, [r7, #52]	; 0x34
 80074de:	e031      	b.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80074e0:	4b84      	ldr	r3, [pc, #528]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d10c      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d109      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074f2:	4b80      	ldr	r3, [pc, #512]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	08db      	lsrs	r3, r3, #3
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	4a7e      	ldr	r2, [pc, #504]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80074fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007502:	637b      	str	r3, [r7, #52]	; 0x34
 8007504:	e01e      	b.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007506:	4b7b      	ldr	r3, [pc, #492]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800750e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007512:	d105      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	2b04      	cmp	r3, #4
 8007518:	d102      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800751a:	4b78      	ldr	r3, [pc, #480]	; (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800751c:	637b      	str	r3, [r7, #52]	; 0x34
 800751e:	e011      	b.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007520:	4b74      	ldr	r3, [pc, #464]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d106      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	2b05      	cmp	r3, #5
 8007532:	d103      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
 800753a:	e003      	b.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007540:	f001 bebd 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007544:	f001 bebb 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007548:	4b6a      	ldr	r3, [pc, #424]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800754a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800754e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007552:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800755a:	f7fc ff5b 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 800755e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007560:	f001 bead 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007564:	4b63      	ldr	r3, [pc, #396]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800756c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007570:	d10a      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	2b08      	cmp	r3, #8
 8007576:	d107      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007578:	f107 0314 	add.w	r3, r7, #20
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff f87f 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
 8007586:	e03d      	b.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	2b10      	cmp	r3, #16
 800758c:	d108      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800758e:	f107 0308 	add.w	r3, r7, #8
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff f9de 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800759c:	f001 be8f 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80075a0:	4b54      	ldr	r3, [pc, #336]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d10c      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	2b18      	cmp	r3, #24
 80075b0:	d109      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075b2:	4b50      	ldr	r3, [pc, #320]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	08db      	lsrs	r3, r3, #3
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	4a4e      	ldr	r2, [pc, #312]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80075be:	fa22 f303 	lsr.w	r3, r2, r3
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
 80075c4:	e01e      	b.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80075c6:	4b4b      	ldr	r3, [pc, #300]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d2:	d105      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	d102      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80075da:	4b48      	ldr	r3, [pc, #288]	; (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80075dc:	637b      	str	r3, [r7, #52]	; 0x34
 80075de:	e011      	b.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80075e0:	4b44      	ldr	r3, [pc, #272]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80075e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d106      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	2b28      	cmp	r3, #40	; 0x28
 80075f2:	d103      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80075f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
 80075fa:	e003      	b.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007600:	f001 be5d 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007604:	f001 be5b 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007608:	4b3a      	ldr	r3, [pc, #232]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800760a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800760e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007612:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	2b00      	cmp	r3, #0
 8007618:	d104      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800761a:	f7fc fefb 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 800761e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007620:	f001 be4d 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007624:	4b33      	ldr	r3, [pc, #204]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800762c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007630:	d10a      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	2b40      	cmp	r3, #64	; 0x40
 8007636:	d107      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007638:	f107 0314 	add.w	r3, r7, #20
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff f81f 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
 8007646:	e045      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007648:	4b2a      	ldr	r3, [pc, #168]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007654:	d10a      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	2b80      	cmp	r3, #128	; 0x80
 800765a:	d107      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800765c:	f107 0308 	add.w	r3, r7, #8
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff f977 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	637b      	str	r3, [r7, #52]	; 0x34
 800766a:	e033      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800766c:	4b21      	ldr	r3, [pc, #132]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b02      	cmp	r3, #2
 8007676:	d10c      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767a:	2bc0      	cmp	r3, #192	; 0xc0
 800767c:	d109      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800767e:	4b1d      	ldr	r3, [pc, #116]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	08db      	lsrs	r3, r3, #3
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	4a1b      	ldr	r2, [pc, #108]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800768a:	fa22 f303 	lsr.w	r3, r2, r3
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
 8007690:	e020      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007692:	4b18      	ldr	r3, [pc, #96]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800769a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800769e:	d106      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a6:	d102      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80076a8:	4b14      	ldr	r3, [pc, #80]	; (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80076aa:	637b      	str	r3, [r7, #52]	; 0x34
 80076ac:	e012      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80076ae:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80076b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d107      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80076c2:	d103      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80076c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ca:	e003      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076d0:	f001 bdf5 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076d4:	f001 bdf3 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80076d8:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80076da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80076de:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80076e2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076ea:	f7fc fe93 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 80076ee:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80076f0:	f001 bde5 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076f4:	44020c00 	.word	0x44020c00
 80076f8:	03d09000 	.word	0x03d09000
 80076fc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007700:	4ba0      	ldr	r3, [pc, #640]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800770c:	d10b      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007714:	d107      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007716:	f107 0314 	add.w	r3, r7, #20
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe ffb0 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	637b      	str	r3, [r7, #52]	; 0x34
 8007724:	e047      	b.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007726:	4b97      	ldr	r3, [pc, #604]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800772e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007732:	d10b      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800773a:	d107      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800773c:	f107 0308 	add.w	r3, r7, #8
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff f907 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	637b      	str	r3, [r7, #52]	; 0x34
 800774a:	e034      	b.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800774c:	4b8d      	ldr	r3, [pc, #564]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b02      	cmp	r3, #2
 8007756:	d10d      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800775e:	d109      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007760:	4b88      	ldr	r3, [pc, #544]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	08db      	lsrs	r3, r3, #3
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	4a87      	ldr	r2, [pc, #540]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
 8007770:	637b      	str	r3, [r7, #52]	; 0x34
 8007772:	e020      	b.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007774:	4b83      	ldr	r3, [pc, #524]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800777c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007780:	d106      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007788:	d102      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800778a:	4b80      	ldr	r3, [pc, #512]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
 800778e:	e012      	b.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007790:	4b7c      	ldr	r3, [pc, #496]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b02      	cmp	r3, #2
 800779c:	d107      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80077a4:	d103      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80077a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077aa:	637b      	str	r3, [r7, #52]	; 0x34
 80077ac:	e003      	b.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077b2:	f001 bd84 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077b6:	f001 bd82 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80077ba:	4b72      	ldr	r3, [pc, #456]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80077bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80077c4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80077cc:	f7fc fe22 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 80077d0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80077d2:	f001 bd74 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80077d6:	4b6b      	ldr	r3, [pc, #428]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077e2:	d10b      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	d107      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ec:	f107 0314 	add.w	r3, r7, #20
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe ff45 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
 80077fa:	e047      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80077fc:	4b61      	ldr	r3, [pc, #388]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007808:	d10b      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007810:	d107      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007812:	f107 0308 	add.w	r3, r7, #8
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff f89c 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
 8007820:	e034      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007822:	4b58      	ldr	r3, [pc, #352]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d10d      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007834:	d109      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007836:	4b53      	ldr	r3, [pc, #332]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	08db      	lsrs	r3, r3, #3
 800783c:	f003 0303 	and.w	r3, r3, #3
 8007840:	4a51      	ldr	r2, [pc, #324]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007842:	fa22 f303 	lsr.w	r3, r2, r3
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
 8007848:	e020      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800784a:	4b4e      	ldr	r3, [pc, #312]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007856:	d106      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800785e:	d102      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007860:	4b4a      	ldr	r3, [pc, #296]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
 8007864:	e012      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007866:	4b47      	ldr	r3, [pc, #284]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b02      	cmp	r3, #2
 8007872:	d107      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800787a:	d103      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800787c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007880:	637b      	str	r3, [r7, #52]	; 0x34
 8007882:	e003      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007888:	f001 bd19 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800788c:	f001 bd17 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007890:	4b3c      	ldr	r3, [pc, #240]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007896:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800789a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d104      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078a2:	f7fc fdb7 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 80078a6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80078a8:	f001 bd09 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80078ac:	4b35      	ldr	r3, [pc, #212]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078b8:	d10b      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078c0:	d107      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078c2:	f107 0314 	add.w	r3, r7, #20
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe feda 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	637b      	str	r3, [r7, #52]	; 0x34
 80078d0:	e047      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80078d2:	4b2c      	ldr	r3, [pc, #176]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078de:	d10b      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e6:	d107      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078e8:	f107 0308 	add.w	r3, r7, #8
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff f831 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
 80078f6:	e034      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80078f8:	4b22      	ldr	r3, [pc, #136]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b02      	cmp	r3, #2
 8007902:	d10d      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800790a:	d109      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800790c:	4b1d      	ldr	r3, [pc, #116]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	08db      	lsrs	r3, r3, #3
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	4a1c      	ldr	r2, [pc, #112]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
 800791e:	e020      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007920:	4b18      	ldr	r3, [pc, #96]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800792c:	d106      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007934:	d102      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007936:	4b15      	ldr	r3, [pc, #84]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007938:	637b      	str	r3, [r7, #52]	; 0x34
 800793a:	e012      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800793c:	4b11      	ldr	r3, [pc, #68]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800793e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b02      	cmp	r3, #2
 8007948:	d107      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007950:	d103      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007956:	637b      	str	r3, [r7, #52]	; 0x34
 8007958:	e003      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800795e:	f001 bcae 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007962:	f001 bcac 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8007966:	4b07      	ldr	r3, [pc, #28]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800796c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8007970:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10b      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007978:	f7fc fd4c 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 800797c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800797e:	f001 bc9e 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007982:	bf00      	nop
 8007984:	44020c00 	.word	0x44020c00
 8007988:	03d09000 	.word	0x03d09000
 800798c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007990:	4ba0      	ldr	r3, [pc, #640]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800799c:	d10b      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079a4:	d107      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079a6:	f107 0314 	add.w	r3, r7, #20
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe fe68 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	637b      	str	r3, [r7, #52]	; 0x34
 80079b4:	e047      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80079b6:	4b97      	ldr	r3, [pc, #604]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c2:	d10b      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80079ca:	d107      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079cc:	f107 0308 	add.w	r3, r7, #8
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fe ffbf 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	637b      	str	r3, [r7, #52]	; 0x34
 80079da:	e034      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80079dc:	4b8d      	ldr	r3, [pc, #564]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d10d      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80079ee:	d109      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079f0:	4b88      	ldr	r3, [pc, #544]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	08db      	lsrs	r3, r3, #3
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	4a87      	ldr	r2, [pc, #540]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80079fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
 8007a02:	e020      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007a04:	4b83      	ldr	r3, [pc, #524]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a10:	d106      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a18:	d102      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8007a1a:	4b80      	ldr	r3, [pc, #512]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1e:	e012      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007a20:	4b7c      	ldr	r3, [pc, #496]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d107      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007a34:	d103      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8007a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3c:	e003      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a42:	f001 bc3c 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a46:	f001 bc3a 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8007a4a:	4b72      	ldr	r3, [pc, #456]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a50:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007a54:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a5c:	f7fc fcda 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8007a60:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a62:	f001 bc2c 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8007a66:	4b6b      	ldr	r3, [pc, #428]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a72:	d10b      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a7a:	d107      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a7c:	f107 0314 	add.w	r3, r7, #20
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fe fdfd 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8a:	e047      	b.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007a8c:	4b61      	ldr	r3, [pc, #388]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a98:	d10b      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aa0:	d107      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aa2:	f107 0308 	add.w	r3, r7, #8
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe ff54 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab0:	e034      	b.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007ab2:	4b58      	ldr	r3, [pc, #352]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d10d      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ac4:	d109      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ac6:	4b53      	ldr	r3, [pc, #332]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	08db      	lsrs	r3, r3, #3
 8007acc:	f003 0303 	and.w	r3, r3, #3
 8007ad0:	4a51      	ldr	r2, [pc, #324]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad8:	e020      	b.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007ada:	4b4e      	ldr	r3, [pc, #312]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae6:	d106      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aee:	d102      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8007af0:	4b4a      	ldr	r3, [pc, #296]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
 8007af4:	e012      	b.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8007af6:	4b47      	ldr	r3, [pc, #284]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d107      	bne.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007b0a:	d103      	bne.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b10:	637b      	str	r3, [r7, #52]	; 0x34
 8007b12:	e003      	b.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b18:	f001 bbd1 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b1c:	f001 bbcf 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007b20:	4b3c      	ldr	r3, [pc, #240]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007b26:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b2a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d104      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b32:	f7fc fc6f 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8007b36:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b38:	f001 bbc1 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007b3c:	4b35      	ldr	r3, [pc, #212]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b48:	d10b      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b50:	d107      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b52:	f107 0314 	add.w	r3, r7, #20
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fd92 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b60:	e047      	b.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8007b62:	4b2c      	ldr	r3, [pc, #176]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b6e:	d10b      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b76:	d107      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b78:	f107 0308 	add.w	r3, r7, #8
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe fee9 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
 8007b86:	e034      	b.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007b88:	4b22      	ldr	r3, [pc, #136]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d10d      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8007b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b9a:	d109      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b9c:	4b1d      	ldr	r3, [pc, #116]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	08db      	lsrs	r3, r3, #3
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bac:	637b      	str	r3, [r7, #52]	; 0x34
 8007bae:	e020      	b.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007bb0:	4b18      	ldr	r3, [pc, #96]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bbc:	d106      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bc4:	d102      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8007bc6:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bca:	e012      	b.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007bcc:	4b11      	ldr	r3, [pc, #68]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d107      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007be0:	d103      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8007be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
 8007be8:	e003      	b.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bee:	f001 bb66 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bf2:	f001 bb64 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007bf6:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007bfc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8007c00:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10b      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c08:	f7fc fc04 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8007c0c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c0e:	f001 bb56 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c12:	bf00      	nop
 8007c14:	44020c00 	.word	0x44020c00
 8007c18:	03d09000 	.word	0x03d09000
 8007c1c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007c20:	4ba1      	ldr	r3, [pc, #644]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c2c:	d10b      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c34:	d107      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c36:	f107 0314 	add.w	r3, r7, #20
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fd20 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34
 8007c44:	e047      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007c46:	4b98      	ldr	r3, [pc, #608]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c52:	d10b      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c5a:	d107      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c5c:	f107 0308 	add.w	r3, r7, #8
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fe77 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6a:	e034      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007c6c:	4b8e      	ldr	r3, [pc, #568]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d10d      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007c7e:	d109      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c80:	4b89      	ldr	r3, [pc, #548]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	08db      	lsrs	r3, r3, #3
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	4a88      	ldr	r2, [pc, #544]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34
 8007c92:	e020      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007c94:	4b84      	ldr	r3, [pc, #528]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca0:	d106      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca8:	d102      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8007caa:	4b81      	ldr	r3, [pc, #516]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007cac:	637b      	str	r3, [r7, #52]	; 0x34
 8007cae:	e012      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007cb0:	4b7d      	ldr	r3, [pc, #500]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d107      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8007cc4:	d103      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8007cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cca:	637b      	str	r3, [r7, #52]	; 0x34
 8007ccc:	e003      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cd2:	f001 baf4 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cd6:	f001 baf2 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007cda:	4b73      	ldr	r3, [pc, #460]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007cdc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cec:	f7fc fb92 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8007cf0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cf2:	f001 bae4 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8007cf6:	4b6c      	ldr	r3, [pc, #432]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d02:	d10a      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d107      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d0a:	f107 0314 	add.w	r3, r7, #20
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe fcb6 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	637b      	str	r3, [r7, #52]	; 0x34
 8007d18:	e043      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8007d1a:	4b63      	ldr	r3, [pc, #396]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d26:	d10a      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d107      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d2e:	f107 0308 	add.w	r3, r7, #8
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fe0e 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d3c:	e031      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007d3e:	4b5a      	ldr	r3, [pc, #360]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d10c      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d109      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d50:	4b55      	ldr	r3, [pc, #340]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	08db      	lsrs	r3, r3, #3
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	4a54      	ldr	r2, [pc, #336]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34
 8007d62:	e01e      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8007d64:	4b50      	ldr	r3, [pc, #320]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d70:	d105      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d102      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007d78:	4b4d      	ldr	r3, [pc, #308]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7c:	e011      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8007d7e:	4b4a      	ldr	r3, [pc, #296]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d106      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	d103      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8007d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d96:	637b      	str	r3, [r7, #52]	; 0x34
 8007d98:	e003      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d9e:	f001 ba8e 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007da2:	f001 ba8c 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007da6:	4b40      	ldr	r3, [pc, #256]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007da8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007db0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007db8:	f7fc fb2c 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8007dbc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8007dbe:	f001 ba7e 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8007dc2:	4b39      	ldr	r3, [pc, #228]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dce:	d10a      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	2b10      	cmp	r3, #16
 8007dd4:	d107      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dd6:	f107 0314 	add.w	r3, r7, #20
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fc50 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	637b      	str	r3, [r7, #52]	; 0x34
 8007de4:	e043      	b.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007de6:	4b30      	ldr	r3, [pc, #192]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df2:	d10a      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	2b20      	cmp	r3, #32
 8007df8:	d107      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dfa:	f107 0308 	add.w	r3, r7, #8
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe fda8 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	637b      	str	r3, [r7, #52]	; 0x34
 8007e08:	e031      	b.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007e0a:	4b27      	ldr	r3, [pc, #156]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d10c      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	2b30      	cmp	r3, #48	; 0x30
 8007e1a:	d109      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e1c:	4b22      	ldr	r3, [pc, #136]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	08db      	lsrs	r3, r3, #3
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	4a21      	ldr	r2, [pc, #132]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007e28:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2e:	e01e      	b.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007e30:	4b1d      	ldr	r3, [pc, #116]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e3c:	d105      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	d102      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8007e44:	4b1a      	ldr	r3, [pc, #104]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007e46:	637b      	str	r3, [r7, #52]	; 0x34
 8007e48:	e011      	b.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007e4a:	4b17      	ldr	r3, [pc, #92]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e50:	f003 0302 	and.w	r3, r3, #2
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d106      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	2b50      	cmp	r3, #80	; 0x50
 8007e5c:	d103      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e62:	637b      	str	r3, [r7, #52]	; 0x34
 8007e64:	e003      	b.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e6a:	f001 ba28 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e6e:	f001 ba26 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007e72:	4b0d      	ldr	r3, [pc, #52]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e78:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007e7c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007e84:	f7fc faf2 	bl	800446c <HAL_RCC_GetPCLK3Freq>
 8007e88:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e8a:	f001 ba18 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e94:	d10e      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e96:	f107 0314 	add.w	r3, r7, #20
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fbf0 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ea4:	f001 ba0b 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ea8:	44020c00 	.word	0x44020c00
 8007eac:	03d09000 	.word	0x03d09000
 8007eb0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eba:	d108      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ebc:	f107 0308 	add.w	r3, r7, #8
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fe fd47 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007eca:	f001 b9f8 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007ece:	4ba4      	ldr	r3, [pc, #656]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d10d      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ee0:	d109      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ee2:	4b9f      	ldr	r3, [pc, #636]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	08db      	lsrs	r3, r3, #3
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	4a9d      	ldr	r2, [pc, #628]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007eee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef4:	e020      	b.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007ef6:	4b9a      	ldr	r3, [pc, #616]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f02:	d106      	bne.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f0a:	d102      	bne.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007f0c:	4b96      	ldr	r3, [pc, #600]	; (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f10:	e012      	b.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007f12:	4b93      	ldr	r3, [pc, #588]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d107      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007f26:	d103      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007f28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f2e:	e003      	b.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f34:	f001 b9c3 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f38:	f001 b9c1 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007f3c:	4b88      	ldr	r3, [pc, #544]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007f4e:	f7fc fa45 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8007f52:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007f54:	f001 b9b3 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d104      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f5e:	f7fc f911 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8007f62:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f64:	f001 b9ab 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d108      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f6e:	f107 0314 	add.w	r3, r7, #20
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fb84 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f7c:	f001 b99f 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007f80:	4b77      	ldr	r3, [pc, #476]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f8c:	d105      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d102      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007f94:	4b75      	ldr	r3, [pc, #468]	; (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007f96:	637b      	str	r3, [r7, #52]	; 0x34
 8007f98:	e023      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007f9a:	4b71      	ldr	r3, [pc, #452]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d10c      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d109      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fac:	4b6c      	ldr	r3, [pc, #432]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	08db      	lsrs	r3, r3, #3
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	4a6b      	ldr	r2, [pc, #428]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fbe:	e010      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007fc0:	4b67      	ldr	r3, [pc, #412]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fcc:	d105      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2b05      	cmp	r3, #5
 8007fd2:	d102      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007fd4:	4b64      	ldr	r3, [pc, #400]	; (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd8:	e003      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fde:	f001 b96e 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fe2:	f001 b96c 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007fe6:	4b5e      	ldr	r3, [pc, #376]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007ff2:	4b5b      	ldr	r3, [pc, #364]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d106      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800800a:	637b      	str	r3, [r7, #52]	; 0x34
 800800c:	e012      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800800e:	4b54      	ldr	r3, [pc, #336]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800801c:	d106      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	2b08      	cmp	r3, #8
 8008022:	d103      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008024:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
 800802a:	e003      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008030:	f001 b945 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008034:	f001 b943 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008038:	4b49      	ldr	r3, [pc, #292]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800803a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800803e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008042:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	2b00      	cmp	r3, #0
 8008048:	d104      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800804a:	f7fc f9e3 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 800804e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008050:	f001 b935 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805a:	d108      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800805c:	f107 0308 	add.w	r3, r7, #8
 8008060:	4618      	mov	r0, r3
 8008062:	f7fe fc77 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800806a:	f001 b928 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800806e:	4b3c      	ldr	r3, [pc, #240]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b02      	cmp	r3, #2
 8008078:	d10d      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008080:	d109      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008082:	4b37      	ldr	r3, [pc, #220]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	08db      	lsrs	r3, r3, #3
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	4a35      	ldr	r2, [pc, #212]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800808e:	fa22 f303 	lsr.w	r3, r2, r3
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
 8008094:	e011      	b.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008096:	4b32      	ldr	r3, [pc, #200]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800809e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a2:	d106      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080aa:	d102      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80080ac:	4b2e      	ldr	r3, [pc, #184]	; (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80080ae:	637b      	str	r3, [r7, #52]	; 0x34
 80080b0:	e003      	b.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080b6:	f001 b902 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080ba:	f001 b900 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80080be:	4b28      	ldr	r3, [pc, #160]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80080c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80080c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80080c8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d104      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80080d0:	f7fc f9a0 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 80080d4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80080d6:	f001 b8f2 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080e0:	d108      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e2:	f107 0308 	add.w	r3, r7, #8
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fc34 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080f0:	f001 b8e5 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80080f4:	4b1a      	ldr	r3, [pc, #104]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d10d      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008106:	d109      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008108:	4b15      	ldr	r3, [pc, #84]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	08db      	lsrs	r3, r3, #3
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	4a14      	ldr	r2, [pc, #80]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008114:	fa22 f303 	lsr.w	r3, r2, r3
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
 800811a:	e011      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800811c:	4b10      	ldr	r3, [pc, #64]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008128:	d106      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008130:	d102      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008132:	4b0d      	ldr	r3, [pc, #52]	; (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
 8008136:	e003      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008138:	2300      	movs	r3, #0
 800813a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800813c:	f001 b8bf 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008140:	f001 b8bd 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008144:	4b06      	ldr	r3, [pc, #24]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008146:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800814a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800814e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10c      	bne.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008156:	f7fc f989 	bl	800446c <HAL_RCC_GetPCLK3Freq>
 800815a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800815c:	f001 b8af 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008160:	44020c00 	.word	0x44020c00
 8008164:	03d09000 	.word	0x03d09000
 8008168:	003d0900 	.word	0x003d0900
 800816c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008176:	d108      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008178:	f107 0308 	add.w	r3, r7, #8
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe fbe9 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008186:	f001 b89a 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800818a:	4b9f      	ldr	r3, [pc, #636]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b02      	cmp	r3, #2
 8008194:	d10d      	bne.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800819c:	d109      	bne.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800819e:	4b9a      	ldr	r3, [pc, #616]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	08db      	lsrs	r3, r3, #3
 80081a4:	f003 0303 	and.w	r3, r3, #3
 80081a8:	4a98      	ldr	r2, [pc, #608]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80081aa:	fa22 f303 	lsr.w	r3, r2, r3
 80081ae:	637b      	str	r3, [r7, #52]	; 0x34
 80081b0:	e011      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80081b2:	4b95      	ldr	r3, [pc, #596]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081be:	d106      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081c6:	d102      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80081c8:	4b91      	ldr	r3, [pc, #580]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80081ca:	637b      	str	r3, [r7, #52]	; 0x34
 80081cc:	e003      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081d2:	f001 b874 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081d6:	f001 b872 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80081da:	4b8b      	ldr	r3, [pc, #556]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80081e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80081e4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d104      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80081ec:	f7fc f93e 	bl	800446c <HAL_RCC_GetPCLK3Freq>
 80081f0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80081f2:	f001 b864 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081fc:	d108      	bne.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081fe:	f107 0308 	add.w	r3, r7, #8
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe fba6 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800820c:	f001 b857 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008210:	4b7d      	ldr	r3, [pc, #500]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b02      	cmp	r3, #2
 800821a:	d10d      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008222:	d109      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008224:	4b78      	ldr	r3, [pc, #480]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	08db      	lsrs	r3, r3, #3
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	4a77      	ldr	r2, [pc, #476]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
 8008234:	637b      	str	r3, [r7, #52]	; 0x34
 8008236:	e011      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008238:	4b73      	ldr	r3, [pc, #460]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008244:	d106      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800824c:	d102      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800824e:	4b70      	ldr	r3, [pc, #448]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
 8008252:	e003      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008258:	f001 b831 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800825c:	f001 b82f 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008260:	4b69      	ldr	r3, [pc, #420]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008262:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008266:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800826a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	2b00      	cmp	r3, #0
 8008270:	d104      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008272:	f7fc f8cf 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8008276:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008278:	f001 b821 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008282:	d108      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008284:	f107 0308 	add.w	r3, r7, #8
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fb63 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008292:	f001 b814 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008296:	4b5c      	ldr	r3, [pc, #368]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d10e      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082a8:	d10a      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082aa:	4b57      	ldr	r3, [pc, #348]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	08db      	lsrs	r3, r3, #3
 80082b0:	f003 0303 	and.w	r3, r3, #3
 80082b4:	4a55      	ldr	r2, [pc, #340]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80082b6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082bc:	f000 bfff 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082c4:	f000 bffb 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80082c8:	4b4f      	ldr	r3, [pc, #316]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80082ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80082ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082d2:	633b      	str	r3, [r7, #48]	; 0x30
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80082da:	d056      	beq.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80082e2:	f200 808b 	bhi.w	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ec:	d03e      	beq.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f4:	f200 8082 	bhi.w	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082fe:	d027      	beq.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008306:	d879      	bhi.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800830e:	d017      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008316:	d871      	bhi.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008324:	d004      	beq.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008326:	e069      	b.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008328:	f7fc f8a0 	bl	800446c <HAL_RCC_GetPCLK3Freq>
 800832c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800832e:	e068      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008330:	f107 0314 	add.w	r3, r7, #20
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe f9a3 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800833e:	e060      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008340:	f107 0308 	add.w	r3, r7, #8
 8008344:	4618      	mov	r0, r3
 8008346:	f7fe fb05 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800834e:	e058      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008350:	4b2d      	ldr	r3, [pc, #180]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b02      	cmp	r3, #2
 800835c:	d103      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800835e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008362:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008364:	e04d      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800836a:	e04a      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800836c:	4b26      	ldr	r3, [pc, #152]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800836e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800837a:	d103      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800837c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008380:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008382:	e03e      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008388:	e03b      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800838a:	4b1f      	ldr	r3, [pc, #124]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800838c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008390:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008396:	4b1c      	ldr	r3, [pc, #112]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d10c      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d109      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083a8:	4b17      	ldr	r3, [pc, #92]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	08db      	lsrs	r3, r3, #3
 80083ae:	f003 0303 	and.w	r3, r3, #3
 80083b2:	4a16      	ldr	r2, [pc, #88]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80083b4:	fa22 f303 	lsr.w	r3, r2, r3
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ba:	e01e      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083bc:	4b12      	ldr	r3, [pc, #72]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c8:	d106      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80083ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d0:	d102      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80083d2:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80083d4:	637b      	str	r3, [r7, #52]	; 0x34
 80083d6:	e010      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083d8:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083e4:	d106      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083ec:	d102      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80083f0:	637b      	str	r3, [r7, #52]	; 0x34
 80083f2:	e002      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80083f8:	e003      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80083fa:	e002      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008400:	bf00      	nop
          }
        }
        break;
 8008402:	f000 bf5c 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008406:	bf00      	nop
 8008408:	44020c00 	.word	0x44020c00
 800840c:	03d09000 	.word	0x03d09000
 8008410:	003d0900 	.word	0x003d0900
 8008414:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008418:	4b9e      	ldr	r3, [pc, #632]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800841a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800841e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008422:	633b      	str	r3, [r7, #48]	; 0x30
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800842a:	d056      	beq.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008432:	f200 808b 	bhi.w	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800843c:	d03e      	beq.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008444:	f200 8082 	bhi.w	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800844e:	d027      	beq.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008456:	d879      	bhi.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800845e:	d017      	beq.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008466:	d871      	bhi.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008474:	d004      	beq.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008476:	e069      	b.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008478:	f7fb ffcc 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 800847c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800847e:	e068      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008480:	f107 0314 	add.w	r3, r7, #20
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe f8fb 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800848e:	e060      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008490:	f107 0308 	add.w	r3, r7, #8
 8008494:	4618      	mov	r0, r3
 8008496:	f7fe fa5d 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800849e:	e058      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084a0:	4b7c      	ldr	r3, [pc, #496]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d103      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80084ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084b2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084b4:	e04d      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084ba:	e04a      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80084bc:	4b75      	ldr	r3, [pc, #468]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084ca:	d103      	bne.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80084cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80084d0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084d2:	e03e      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084d8:	e03b      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084da:	4b6e      	ldr	r3, [pc, #440]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084e0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80084e4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084e6:	4b6b      	ldr	r3, [pc, #428]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d10c      	bne.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80084f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d109      	bne.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084f8:	4b66      	ldr	r3, [pc, #408]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	08db      	lsrs	r3, r3, #3
 80084fe:	f003 0303 	and.w	r3, r3, #3
 8008502:	4a65      	ldr	r2, [pc, #404]	; (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008504:	fa22 f303 	lsr.w	r3, r2, r3
 8008508:	637b      	str	r3, [r7, #52]	; 0x34
 800850a:	e01e      	b.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800850c:	4b61      	ldr	r3, [pc, #388]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008518:	d106      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008520:	d102      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008522:	4b5e      	ldr	r3, [pc, #376]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008524:	637b      	str	r3, [r7, #52]	; 0x34
 8008526:	e010      	b.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008528:	4b5a      	ldr	r3, [pc, #360]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008534:	d106      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800853c:	d102      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800853e:	4b58      	ldr	r3, [pc, #352]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
 8008542:	e002      	b.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008548:	e003      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800854a:	e002      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008550:	bf00      	nop
          }
        }
        break;
 8008552:	f000 beb4 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008556:	4b4f      	ldr	r3, [pc, #316]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008558:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800855c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008560:	633b      	str	r3, [r7, #48]	; 0x30
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008568:	d056      	beq.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008570:	f200 808b 	bhi.w	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800857a:	d03e      	beq.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008582:	f200 8082 	bhi.w	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800858c:	d027      	beq.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008594:	d879      	bhi.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859c:	d017      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a4:	d871      	bhi.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d004      	beq.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085b2:	d004      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80085b4:	e069      	b.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80085b6:	f7fb ff59 	bl	800446c <HAL_RCC_GetPCLK3Freq>
 80085ba:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80085bc:	e068      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085be:	f107 0314 	add.w	r3, r7, #20
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe f85c 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085cc:	e060      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ce:	f107 0308 	add.w	r3, r7, #8
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe f9be 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085dc:	e058      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085de:	4b2d      	ldr	r3, [pc, #180]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80085e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d103      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80085ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80085f2:	e04d      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085f8:	e04a      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80085fa:	4b26      	ldr	r3, [pc, #152]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80085fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008608:	d103      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800860a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800860e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008610:	e03e      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008616:	e03b      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008618:	4b1e      	ldr	r3, [pc, #120]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800861a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800861e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008622:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008624:	4b1b      	ldr	r3, [pc, #108]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b02      	cmp	r3, #2
 800862e:	d10c      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d109      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008636:	4b17      	ldr	r3, [pc, #92]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	08db      	lsrs	r3, r3, #3
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	4a15      	ldr	r2, [pc, #84]	; (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008642:	fa22 f303 	lsr.w	r3, r2, r3
 8008646:	637b      	str	r3, [r7, #52]	; 0x34
 8008648:	e01e      	b.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800864a:	4b12      	ldr	r3, [pc, #72]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008656:	d106      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800865e:	d102      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008660:	4b0e      	ldr	r3, [pc, #56]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008662:	637b      	str	r3, [r7, #52]	; 0x34
 8008664:	e010      	b.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008666:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800866e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008672:	d106      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800867a:	d102      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800867c:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800867e:	637b      	str	r3, [r7, #52]	; 0x34
 8008680:	e002      	b.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008686:	e003      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008688:	e002      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800868e:	bf00      	nop
          }
        }
        break;
 8008690:	f000 be15 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008694:	44020c00 	.word	0x44020c00
 8008698:	03d09000 	.word	0x03d09000
 800869c:	003d0900 	.word	0x003d0900
 80086a0:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80086a4:	4b9e      	ldr	r3, [pc, #632]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80086a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80086aa:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80086ae:	633b      	str	r3, [r7, #48]	; 0x30
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80086b6:	d056      	beq.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80086be:	f200 808b 	bhi.w	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086c8:	d03e      	beq.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086d0:	f200 8082 	bhi.w	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086da:	d027      	beq.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086e2:	d879      	bhi.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086ea:	d017      	beq.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086f2:	d871      	bhi.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d004      	beq.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008700:	d004      	beq.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008702:	e069      	b.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008704:	f7fb feb2 	bl	800446c <HAL_RCC_GetPCLK3Freq>
 8008708:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800870a:	e068      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800870c:	f107 0314 	add.w	r3, r7, #20
 8008710:	4618      	mov	r0, r3
 8008712:	f7fd ffb5 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800871a:	e060      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800871c:	f107 0308 	add.w	r3, r7, #8
 8008720:	4618      	mov	r0, r3
 8008722:	f7fe f917 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800872a:	e058      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800872c:	4b7c      	ldr	r3, [pc, #496]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800872e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d103      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800873e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008740:	e04d      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008746:	e04a      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008748:	4b75      	ldr	r3, [pc, #468]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800874a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800874e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008756:	d103      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008758:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800875e:	e03e      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008760:	2300      	movs	r3, #0
 8008762:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008764:	e03b      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008766:	4b6e      	ldr	r3, [pc, #440]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800876c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008772:	4b6b      	ldr	r3, [pc, #428]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0302 	and.w	r3, r3, #2
 800877a:	2b02      	cmp	r3, #2
 800877c:	d10c      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800877e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d109      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008784:	4b66      	ldr	r3, [pc, #408]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	08db      	lsrs	r3, r3, #3
 800878a:	f003 0303 	and.w	r3, r3, #3
 800878e:	4a65      	ldr	r2, [pc, #404]	; (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008790:	fa22 f303 	lsr.w	r3, r2, r3
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
 8008796:	e01e      	b.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008798:	4b61      	ldr	r3, [pc, #388]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087a4:	d106      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ac:	d102      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087ae:	4b5e      	ldr	r3, [pc, #376]	; (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
 80087b2:	e010      	b.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087b4:	4b5a      	ldr	r3, [pc, #360]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087c0:	d106      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087c8:	d102      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80087ca:	4b58      	ldr	r3, [pc, #352]	; (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80087cc:	637b      	str	r3, [r7, #52]	; 0x34
 80087ce:	e002      	b.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80087d4:	e003      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80087d6:	e002      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087dc:	bf00      	nop
          }
        }
        break;
 80087de:	f000 bd6e 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80087e2:	4b4f      	ldr	r3, [pc, #316]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80087e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80087e8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80087ec:	633b      	str	r3, [r7, #48]	; 0x30
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80087f4:	d056      	beq.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80087fc:	f200 808b 	bhi.w	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008806:	d03e      	beq.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800880e:	f200 8082 	bhi.w	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008818:	d027      	beq.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008820:	d879      	bhi.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008828:	d017      	beq.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008830:	d871      	bhi.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800883e:	d004      	beq.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008840:	e069      	b.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008842:	f7fb fe13 	bl	800446c <HAL_RCC_GetPCLK3Freq>
 8008846:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008848:	e068      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800884a:	f107 0314 	add.w	r3, r7, #20
 800884e:	4618      	mov	r0, r3
 8008850:	f7fd ff16 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008858:	e060      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800885a:	f107 0308 	add.w	r3, r7, #8
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe f878 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008868:	e058      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800886a:	4b2d      	ldr	r3, [pc, #180]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800886c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b02      	cmp	r3, #2
 8008876:	d103      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800887e:	e04d      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008884:	e04a      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008886:	4b26      	ldr	r3, [pc, #152]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800888c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008894:	d103      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008896:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800889a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800889c:	e03e      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088a2:	e03b      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088a4:	4b1e      	ldr	r3, [pc, #120]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088aa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80088ae:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088b0:	4b1b      	ldr	r3, [pc, #108]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d10c      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088c2:	4b17      	ldr	r3, [pc, #92]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	08db      	lsrs	r3, r3, #3
 80088c8:	f003 0303 	and.w	r3, r3, #3
 80088cc:	4a15      	ldr	r2, [pc, #84]	; (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80088ce:	fa22 f303 	lsr.w	r3, r2, r3
 80088d2:	637b      	str	r3, [r7, #52]	; 0x34
 80088d4:	e01e      	b.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088d6:	4b12      	ldr	r3, [pc, #72]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088e2:	d106      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ea:	d102      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80088ec:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
 80088f0:	e010      	b.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088f2:	4b0b      	ldr	r3, [pc, #44]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088fe:	d106      	bne.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008906:	d102      	bne.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008908:	4b08      	ldr	r3, [pc, #32]	; (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800890a:	637b      	str	r3, [r7, #52]	; 0x34
 800890c:	e002      	b.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008912:	e003      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008914:	e002      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800891a:	bf00      	nop
          }
        }
        break;
 800891c:	f000 bccf 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008920:	44020c00 	.word	0x44020c00
 8008924:	03d09000 	.word	0x03d09000
 8008928:	003d0900 	.word	0x003d0900
 800892c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008930:	4b9e      	ldr	r3, [pc, #632]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008932:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008936:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800893a:	633b      	str	r3, [r7, #48]	; 0x30
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008942:	d056      	beq.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008946:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800894a:	f200 808b 	bhi.w	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008954:	d03e      	beq.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800895c:	f200 8082 	bhi.w	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008966:	d027      	beq.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800896e:	d879      	bhi.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008976:	d017      	beq.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800897e:	d871      	bhi.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	2b00      	cmp	r3, #0
 8008984:	d004      	beq.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800898c:	d004      	beq.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800898e:	e069      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008990:	f7fb fd6c 	bl	800446c <HAL_RCC_GetPCLK3Freq>
 8008994:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008996:	e068      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008998:	f107 0314 	add.w	r3, r7, #20
 800899c:	4618      	mov	r0, r3
 800899e:	f7fd fe6f 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089a6:	e060      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a8:	f107 0308 	add.w	r3, r7, #8
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fd ffd1 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089b6:	e058      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80089b8:	4b7c      	ldr	r3, [pc, #496]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80089ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d103      	bne.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80089c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ca:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80089cc:	e04d      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089d2:	e04a      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80089d4:	4b75      	ldr	r3, [pc, #468]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80089d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e2:	d103      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80089e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80089e8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80089ea:	e03e      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089f0:	e03b      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089f2:	4b6e      	ldr	r3, [pc, #440]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80089f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089f8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089fe:	4b6b      	ldr	r3, [pc, #428]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d10c      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d109      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a10:	4b66      	ldr	r3, [pc, #408]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	08db      	lsrs	r3, r3, #3
 8008a16:	f003 0303 	and.w	r3, r3, #3
 8008a1a:	4a65      	ldr	r2, [pc, #404]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a20:	637b      	str	r3, [r7, #52]	; 0x34
 8008a22:	e01e      	b.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a24:	4b61      	ldr	r3, [pc, #388]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a30:	d106      	bne.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a38:	d102      	bne.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a3a:	4b5e      	ldr	r3, [pc, #376]	; (8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a3e:	e010      	b.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a40:	4b5a      	ldr	r3, [pc, #360]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a4c:	d106      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a54:	d102      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008a56:	4b58      	ldr	r3, [pc, #352]	; (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
 8008a5a:	e002      	b.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008a60:	e003      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8008a62:	e002      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008a68:	bf00      	nop
          }
        }
        break;
 8008a6a:	f000 bc28 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008a6e:	4b4f      	ldr	r3, [pc, #316]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a78:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008a7a:	4b4c      	ldr	r3, [pc, #304]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a86:	d106      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d103      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8008a8e:	4b4a      	ldr	r3, [pc, #296]	; (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008a92:	f000 bc14 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a9c:	d108      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a9e:	f107 0320 	add.w	r3, r7, #32
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fd fc82 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008aac:	f000 bc07 	b.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab6:	d107      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ab8:	f107 0314 	add.w	r3, r7, #20
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fd fddf 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ac6:	e3fa      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008acc:	e3f7      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008ace:	4b37      	ldr	r3, [pc, #220]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8008ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d861      	bhi.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8008ae0:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8008ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae6:	bf00      	nop
 8008ae8:	08008afd 	.word	0x08008afd
 8008aec:	08008b0d 	.word	0x08008b0d
 8008af0:	08008b1d 	.word	0x08008b1d
 8008af4:	08008b2d 	.word	0x08008b2d
 8008af8:	08008b33 	.word	0x08008b33
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008afc:	f107 0320 	add.w	r3, r7, #32
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fd fc53 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b0a:	e04e      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b0c:	f107 0314 	add.w	r3, r7, #20
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fd fdb5 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b1a:	e046      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b1c:	f107 0308 	add.w	r3, r7, #8
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fd ff17 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b2a:	e03e      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008b2c:	4b23      	ldr	r3, [pc, #140]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8008b2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b30:	e03b      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b32:	4b1e      	ldr	r3, [pc, #120]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008b38:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b3e:	4b1b      	ldr	r3, [pc, #108]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d10c      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d109      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b50:	4b16      	ldr	r3, [pc, #88]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	08db      	lsrs	r3, r3, #3
 8008b56:	f003 0303 	and.w	r3, r3, #3
 8008b5a:	4a15      	ldr	r2, [pc, #84]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b60:	637b      	str	r3, [r7, #52]	; 0x34
 8008b62:	e01e      	b.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b64:	4b11      	ldr	r3, [pc, #68]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b70:	d106      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b78:	d102      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008b7a:	4b0e      	ldr	r3, [pc, #56]	; (8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7e:	e010      	b.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b8c:	d106      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b94:	d102      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008b96:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008b98:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9a:	e002      	b.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008ba0:	e003      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8008ba2:	e002      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ba8:	bf00      	nop
          }
        }
        break;
 8008baa:	e388      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bac:	44020c00 	.word	0x44020c00
 8008bb0:	03d09000 	.word	0x03d09000
 8008bb4:	003d0900 	.word	0x003d0900
 8008bb8:	007a1200 	.word	0x007a1200
 8008bbc:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008bc0:	4ba9      	ldr	r3, [pc, #676]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bca:	633b      	str	r3, [r7, #48]	; 0x30
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	2b20      	cmp	r3, #32
 8008bd0:	f200 809a 	bhi.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8008bd4:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8008bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bda:	bf00      	nop
 8008bdc:	08008c61 	.word	0x08008c61
 8008be0:	08008d09 	.word	0x08008d09
 8008be4:	08008d09 	.word	0x08008d09
 8008be8:	08008d09 	.word	0x08008d09
 8008bec:	08008d09 	.word	0x08008d09
 8008bf0:	08008d09 	.word	0x08008d09
 8008bf4:	08008d09 	.word	0x08008d09
 8008bf8:	08008d09 	.word	0x08008d09
 8008bfc:	08008c71 	.word	0x08008c71
 8008c00:	08008d09 	.word	0x08008d09
 8008c04:	08008d09 	.word	0x08008d09
 8008c08:	08008d09 	.word	0x08008d09
 8008c0c:	08008d09 	.word	0x08008d09
 8008c10:	08008d09 	.word	0x08008d09
 8008c14:	08008d09 	.word	0x08008d09
 8008c18:	08008d09 	.word	0x08008d09
 8008c1c:	08008c81 	.word	0x08008c81
 8008c20:	08008d09 	.word	0x08008d09
 8008c24:	08008d09 	.word	0x08008d09
 8008c28:	08008d09 	.word	0x08008d09
 8008c2c:	08008d09 	.word	0x08008d09
 8008c30:	08008d09 	.word	0x08008d09
 8008c34:	08008d09 	.word	0x08008d09
 8008c38:	08008d09 	.word	0x08008d09
 8008c3c:	08008c91 	.word	0x08008c91
 8008c40:	08008d09 	.word	0x08008d09
 8008c44:	08008d09 	.word	0x08008d09
 8008c48:	08008d09 	.word	0x08008d09
 8008c4c:	08008d09 	.word	0x08008d09
 8008c50:	08008d09 	.word	0x08008d09
 8008c54:	08008d09 	.word	0x08008d09
 8008c58:	08008d09 	.word	0x08008d09
 8008c5c:	08008c97 	.word	0x08008c97
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c60:	f107 0320 	add.w	r3, r7, #32
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fd fba1 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c6e:	e04e      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c70:	f107 0314 	add.w	r3, r7, #20
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fd fd03 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c7e:	e046      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c80:	f107 0308 	add.w	r3, r7, #8
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fd fe65 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c8e:	e03e      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008c90:	4b76      	ldr	r3, [pc, #472]	; (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008c92:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c94:	e03b      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c96:	4b74      	ldr	r3, [pc, #464]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c9c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ca2:	4b71      	ldr	r3, [pc, #452]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d10c      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8008cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d109      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cb4:	4b6c      	ldr	r3, [pc, #432]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	08db      	lsrs	r3, r3, #3
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	4a6c      	ldr	r2, [pc, #432]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc6:	e01e      	b.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cc8:	4b67      	ldr	r3, [pc, #412]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd4:	d106      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8008cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cdc:	d102      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008cde:	4b65      	ldr	r3, [pc, #404]	; (8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce2:	e010      	b.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ce4:	4b60      	ldr	r3, [pc, #384]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cf0:	d106      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8008cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cf8:	d102      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008cfa:	4b5f      	ldr	r3, [pc, #380]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cfe:	e002      	b.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008d04:	e003      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8008d06:	e002      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d0c:	bf00      	nop
          }
        }
        break;
 8008d0e:	e2d6      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008d10:	4b55      	ldr	r3, [pc, #340]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d16:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d22:	d031      	beq.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d2a:	d866      	bhi.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8008d30:	d027      	beq.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	2bc0      	cmp	r3, #192	; 0xc0
 8008d36:	d860      	bhi.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	2b80      	cmp	r3, #128	; 0x80
 8008d3c:	d019      	beq.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	2b80      	cmp	r3, #128	; 0x80
 8008d42:	d85a      	bhi.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	2b40      	cmp	r3, #64	; 0x40
 8008d4e:	d008      	beq.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008d50:	e053      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d52:	f107 0320 	add.w	r3, r7, #32
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fd fb28 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d60:	e04e      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d62:	f107 0314 	add.w	r3, r7, #20
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fd fc8a 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d70:	e046      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d72:	f107 0308 	add.w	r3, r7, #8
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fd fdec 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d80:	e03e      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008d82:	4b3a      	ldr	r3, [pc, #232]	; (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008d84:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d86:	e03b      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d88:	4b37      	ldr	r3, [pc, #220]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d8e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008d92:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d94:	4b34      	ldr	r3, [pc, #208]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d10c      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d109      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008da6:	4b30      	ldr	r3, [pc, #192]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	08db      	lsrs	r3, r3, #3
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	4a2f      	ldr	r2, [pc, #188]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008db2:	fa22 f303 	lsr.w	r3, r2, r3
 8008db6:	637b      	str	r3, [r7, #52]	; 0x34
 8008db8:	e01e      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dba:	4b2b      	ldr	r3, [pc, #172]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc6:	d106      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dce:	d102      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008dd0:	4b28      	ldr	r3, [pc, #160]	; (8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd4:	e010      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dd6:	4b24      	ldr	r3, [pc, #144]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de2:	d106      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8008de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dea:	d102      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008dec:	4b22      	ldr	r3, [pc, #136]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008dee:	637b      	str	r3, [r7, #52]	; 0x34
 8008df0:	e002      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008df6:	e003      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008df8:	e002      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008dfe:	bf00      	nop
          }
        }
        break;
 8008e00:	e25d      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8008e02:	4b19      	ldr	r3, [pc, #100]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e08:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008e0c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d103      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008e14:	f7fb fb14 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8008e18:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008e1a:	e250      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008e1c:	4b12      	ldr	r3, [pc, #72]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e28:	d10b      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e30:	d107      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e32:	f107 0314 	add.w	r3, r7, #20
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd fc22 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e40:	e04f      	b.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008e42:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e4e:	d115      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e56:	d111      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fd fd79 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
 8008e66:	e03c      	b.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008e68:	44020c00 	.word	0x44020c00
 8008e6c:	00bb8000 	.word	0x00bb8000
 8008e70:	03d09000 	.word	0x03d09000
 8008e74:	003d0900 	.word	0x003d0900
 8008e78:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008e7c:	4b94      	ldr	r3, [pc, #592]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d10d      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008e8e:	d109      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e90:	4b8f      	ldr	r3, [pc, #572]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	08db      	lsrs	r3, r3, #3
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	4a8e      	ldr	r2, [pc, #568]	; (80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea2:	e01e      	b.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008ea4:	4b8a      	ldr	r3, [pc, #552]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb0:	d106      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eb8:	d102      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8008eba:	4b87      	ldr	r3, [pc, #540]	; (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ebe:	e010      	b.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008ec0:	4b83      	ldr	r3, [pc, #524]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ecc:	d106      	bne.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008ed4:	d102      	bne.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8008ed6:	4b81      	ldr	r3, [pc, #516]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eda:	e002      	b.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ee0:	e1ed      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ee2:	e1ec      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008ee4:	4b7a      	ldr	r3, [pc, #488]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008eea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008eee:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008ef6:	f7fb fab9 	bl	800446c <HAL_RCC_GetPCLK3Freq>
 8008efa:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008efc:	e1df      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008efe:	4b74      	ldr	r3, [pc, #464]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f0a:	d10b      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f12:	d107      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f14:	f107 0314 	add.w	r3, r7, #20
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fd fbb1 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	637b      	str	r3, [r7, #52]	; 0x34
 8008f22:	e045      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008f24:	4b6a      	ldr	r3, [pc, #424]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f30:	d10b      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f38:	d107      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f3a:	f107 0308 	add.w	r3, r7, #8
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fd fd08 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	637b      	str	r3, [r7, #52]	; 0x34
 8008f48:	e032      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008f4a:	4b61      	ldr	r3, [pc, #388]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d10d      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f5c:	d109      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f5e:	4b5c      	ldr	r3, [pc, #368]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	4a5a      	ldr	r2, [pc, #360]	; (80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f70:	e01e      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008f72:	4b57      	ldr	r3, [pc, #348]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f7e:	d106      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f86:	d102      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008f88:	4b53      	ldr	r3, [pc, #332]	; (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f8c:	e010      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008f8e:	4b50      	ldr	r3, [pc, #320]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f9a:	d106      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008fa2:	d102      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008fa4:	4b4d      	ldr	r3, [pc, #308]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8008fa8:	e002      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fae:	e186      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fb0:	e185      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008fb2:	4b47      	ldr	r3, [pc, #284]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fb8:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008fbc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d103      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008fc4:	f7fb fa3c 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8008fc8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008fca:	e178      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008fcc:	4b40      	ldr	r3, [pc, #256]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd8:	d10b      	bne.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe0:	d107      	bne.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe2:	f107 0314 	add.w	r3, r7, #20
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fd fb4a 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff0:	e045      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8008ff2:	4b37      	ldr	r3, [pc, #220]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffe:	d10b      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009006:	d107      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009008:	f107 0308 	add.w	r3, r7, #8
 800900c:	4618      	mov	r0, r3
 800900e:	f7fd fca1 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	637b      	str	r3, [r7, #52]	; 0x34
 8009016:	e032      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009018:	4b2d      	ldr	r3, [pc, #180]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0302 	and.w	r3, r3, #2
 8009020:	2b02      	cmp	r3, #2
 8009022:	d10d      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800902a:	d109      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800902c:	4b28      	ldr	r3, [pc, #160]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	08db      	lsrs	r3, r3, #3
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	4a27      	ldr	r2, [pc, #156]	; (80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009038:	fa22 f303 	lsr.w	r3, r2, r3
 800903c:	637b      	str	r3, [r7, #52]	; 0x34
 800903e:	e01e      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009040:	4b23      	ldr	r3, [pc, #140]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800904c:	d106      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009054:	d102      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009056:	4b20      	ldr	r3, [pc, #128]	; (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009058:	637b      	str	r3, [r7, #52]	; 0x34
 800905a:	e010      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800905c:	4b1c      	ldr	r3, [pc, #112]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009068:	d106      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009070:	d102      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009072:	4b1a      	ldr	r3, [pc, #104]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009074:	637b      	str	r3, [r7, #52]	; 0x34
 8009076:	e002      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800907c:	e11f      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800907e:	e11e      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009080:	4b13      	ldr	r3, [pc, #76]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009082:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	633b      	str	r3, [r7, #48]	; 0x30
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	2b03      	cmp	r3, #3
 8009090:	d85f      	bhi.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009092:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009098:	080090a9 	.word	0x080090a9
 800909c:	080090b1 	.word	0x080090b1
 80090a0:	080090c1 	.word	0x080090c1
 80090a4:	080090e1 	.word	0x080090e1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80090a8:	f7fb f998 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 80090ac:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80090ae:	e053      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090b0:	f107 0320 	add.w	r3, r7, #32
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fd f979 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090be:	e04b      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090c0:	f107 0314 	add.w	r3, r7, #20
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fd fadb 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090ce:	e043      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80090d0:	44020c00 	.word	0x44020c00
 80090d4:	03d09000 	.word	0x03d09000
 80090d8:	003d0900 	.word	0x003d0900
 80090dc:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090e0:	4b79      	ldr	r3, [pc, #484]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80090e6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80090ea:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090ec:	4b76      	ldr	r3, [pc, #472]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d10c      	bne.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090fe:	4b72      	ldr	r3, [pc, #456]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	08db      	lsrs	r3, r3, #3
 8009104:	f003 0303 	and.w	r3, r3, #3
 8009108:	4a70      	ldr	r2, [pc, #448]	; (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800910a:	fa22 f303 	lsr.w	r3, r2, r3
 800910e:	637b      	str	r3, [r7, #52]	; 0x34
 8009110:	e01e      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009112:	4b6d      	ldr	r3, [pc, #436]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800911a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800911e:	d106      	bne.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009126:	d102      	bne.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009128:	4b69      	ldr	r3, [pc, #420]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800912a:	637b      	str	r3, [r7, #52]	; 0x34
 800912c:	e010      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800912e:	4b66      	ldr	r3, [pc, #408]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009136:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800913a:	d106      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009142:	d102      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009144:	4b63      	ldr	r3, [pc, #396]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009146:	637b      	str	r3, [r7, #52]	; 0x34
 8009148:	e002      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800914e:	e003      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009150:	e002      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009152:	2300      	movs	r3, #0
 8009154:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009156:	bf00      	nop
          }
        }
        break;
 8009158:	e0b1      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800915a:	4b5b      	ldr	r3, [pc, #364]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800915c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009160:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009164:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009166:	4b58      	ldr	r3, [pc, #352]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b02      	cmp	r3, #2
 8009172:	d106      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	2b00      	cmp	r3, #0
 8009178:	d103      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800917a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800917e:	637b      	str	r3, [r7, #52]	; 0x34
 8009180:	e01f      	b.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009182:	4b51      	ldr	r3, [pc, #324]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800918c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009190:	d106      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d103      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009198:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800919c:	637b      	str	r3, [r7, #52]	; 0x34
 800919e:	e010      	b.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80091a0:	4b49      	ldr	r3, [pc, #292]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ac:	d106      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	2b80      	cmp	r3, #128	; 0x80
 80091b2:	d103      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 80091b4:	f248 0312 	movw	r3, #32786	; 0x8012
 80091b8:	637b      	str	r3, [r7, #52]	; 0x34
 80091ba:	e002      	b.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80091c0:	e07d      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091c2:	e07c      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80091c4:	4b40      	ldr	r3, [pc, #256]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80091c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80091ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80091ce:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80091d0:	4b3d      	ldr	r3, [pc, #244]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091dc:	d105      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d102      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80091e4:	4b3c      	ldr	r3, [pc, #240]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80091e6:	637b      	str	r3, [r7, #52]	; 0x34
 80091e8:	e031      	b.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80091ea:	4b37      	ldr	r3, [pc, #220]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091f6:	d10a      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	2b10      	cmp	r3, #16
 80091fc:	d107      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091fe:	f107 0320 	add.w	r3, r7, #32
 8009202:	4618      	mov	r0, r3
 8009204:	f7fd f8d2 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	637b      	str	r3, [r7, #52]	; 0x34
 800920c:	e01f      	b.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800920e:	4b2e      	ldr	r3, [pc, #184]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b02      	cmp	r3, #2
 800921a:	d106      	bne.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	2b20      	cmp	r3, #32
 8009220:	d103      	bne.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009226:	637b      	str	r3, [r7, #52]	; 0x34
 8009228:	e011      	b.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800922a:	4b27      	ldr	r3, [pc, #156]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800922c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009238:	d106      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	2b30      	cmp	r3, #48	; 0x30
 800923e:	d103      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009240:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009244:	637b      	str	r3, [r7, #52]	; 0x34
 8009246:	e002      	b.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009248:	2300      	movs	r3, #0
 800924a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800924c:	e037      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800924e:	e036      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009250:	4b1d      	ldr	r3, [pc, #116]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009252:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009256:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800925a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925e:	2b10      	cmp	r3, #16
 8009260:	d107      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009262:	f107 0320 	add.w	r3, r7, #32
 8009266:	4618      	mov	r0, r3
 8009268:	f7fd f8a0 	bl	80063ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009270:	e025      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009272:	4b15      	ldr	r3, [pc, #84]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800927a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800927e:	d10a      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	2b20      	cmp	r3, #32
 8009284:	d107      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009286:	f107 0308 	add.w	r3, r7, #8
 800928a:	4618      	mov	r0, r3
 800928c:	f7fd fb62 	bl	8006954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	637b      	str	r3, [r7, #52]	; 0x34
 8009294:	e00f      	b.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009296:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800929e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092a2:	d105      	bne.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	2b30      	cmp	r3, #48	; 0x30
 80092a8:	d102      	bne.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80092aa:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80092ac:	637b      	str	r3, [r7, #52]	; 0x34
 80092ae:	e002      	b.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 80092b4:	e003      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092b6:	e002      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092bc:	bf00      	nop
    }
  }

  return (frequency);
 80092be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	373c      	adds	r7, #60	; 0x3c
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd90      	pop	{r4, r7, pc}
 80092c8:	44020c00 	.word	0x44020c00
 80092cc:	03d09000 	.word	0x03d09000
 80092d0:	003d0900 	.word	0x003d0900
 80092d4:	007a1200 	.word	0x007a1200
 80092d8:	02dc6c00 	.word	0x02dc6c00

080092dc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80092e4:	4b48      	ldr	r3, [pc, #288]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a47      	ldr	r2, [pc, #284]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 80092ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80092f0:	f7f8 fa02 	bl	80016f8 <HAL_GetTick>
 80092f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092f6:	e008      	b.n	800930a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092f8:	f7f8 f9fe 	bl	80016f8 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b02      	cmp	r3, #2
 8009304:	d901      	bls.n	800930a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e07a      	b.n	8009400 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800930a:	4b3f      	ldr	r3, [pc, #252]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f0      	bne.n	80092f8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009316:	4b3c      	ldr	r3, [pc, #240]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 8009318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800931e:	f023 0303 	bic.w	r3, r3, #3
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6811      	ldr	r1, [r2, #0]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6852      	ldr	r2, [r2, #4]
 800932a:	0212      	lsls	r2, r2, #8
 800932c:	430a      	orrs	r2, r1
 800932e:	4936      	ldr	r1, [pc, #216]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 8009330:	4313      	orrs	r3, r2
 8009332:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	3b01      	subs	r3, #1
 800933a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	3b01      	subs	r3, #1
 8009344:	025b      	lsls	r3, r3, #9
 8009346:	b29b      	uxth	r3, r3
 8009348:	431a      	orrs	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	3b01      	subs	r3, #1
 8009350:	041b      	lsls	r3, r3, #16
 8009352:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	3b01      	subs	r3, #1
 800935e:	061b      	lsls	r3, r3, #24
 8009360:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009364:	4928      	ldr	r1, [pc, #160]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 8009366:	4313      	orrs	r3, r2
 8009368:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800936a:	4b27      	ldr	r3, [pc, #156]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	f023 020c 	bic.w	r2, r3, #12
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	4924      	ldr	r1, [pc, #144]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 8009378:	4313      	orrs	r3, r2
 800937a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800937c:	4b22      	ldr	r3, [pc, #136]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 800937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009380:	f023 0220 	bic.w	r2, r3, #32
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	491f      	ldr	r1, [pc, #124]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 800938a:	4313      	orrs	r3, r2
 800938c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800938e:	4b1e      	ldr	r3, [pc, #120]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 8009390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	491c      	ldr	r1, [pc, #112]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 8009398:	4313      	orrs	r3, r2
 800939a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800939c:	4b1a      	ldr	r3, [pc, #104]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 800939e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a0:	4a19      	ldr	r2, [pc, #100]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 80093a2:	f023 0310 	bic.w	r3, r3, #16
 80093a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80093a8:	4b17      	ldr	r3, [pc, #92]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 80093aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	6a12      	ldr	r2, [r2, #32]
 80093b8:	00d2      	lsls	r2, r2, #3
 80093ba:	4913      	ldr	r1, [pc, #76]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 80093bc:	4313      	orrs	r3, r2
 80093be:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80093c0:	4b11      	ldr	r3, [pc, #68]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	4a10      	ldr	r2, [pc, #64]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 80093c6:	f043 0310 	orr.w	r3, r3, #16
 80093ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80093cc:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a0d      	ldr	r2, [pc, #52]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 80093d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80093d8:	f7f8 f98e 	bl	80016f8 <HAL_GetTick>
 80093dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093de:	e008      	b.n	80093f2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093e0:	f7f8 f98a 	bl	80016f8 <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d901      	bls.n	80093f2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e006      	b.n	8009400 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093f2:	4b05      	ldr	r3, [pc, #20]	; (8009408 <RCCEx_PLL2_Config+0x12c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0f0      	beq.n	80093e0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80093fe:	2300      	movs	r3, #0

}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	44020c00 	.word	0x44020c00

0800940c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009414:	4b48      	ldr	r3, [pc, #288]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a47      	ldr	r2, [pc, #284]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 800941a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800941e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009420:	f7f8 f96a 	bl	80016f8 <HAL_GetTick>
 8009424:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009426:	e008      	b.n	800943a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009428:	f7f8 f966 	bl	80016f8 <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	2b02      	cmp	r3, #2
 8009434:	d901      	bls.n	800943a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e07a      	b.n	8009530 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800943a:	4b3f      	ldr	r3, [pc, #252]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1f0      	bne.n	8009428 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009446:	4b3c      	ldr	r3, [pc, #240]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800944e:	f023 0303 	bic.w	r3, r3, #3
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	6811      	ldr	r1, [r2, #0]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	6852      	ldr	r2, [r2, #4]
 800945a:	0212      	lsls	r2, r2, #8
 800945c:	430a      	orrs	r2, r1
 800945e:	4936      	ldr	r1, [pc, #216]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 8009460:	4313      	orrs	r3, r2
 8009462:	630b      	str	r3, [r1, #48]	; 0x30
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	3b01      	subs	r3, #1
 800946a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	3b01      	subs	r3, #1
 8009474:	025b      	lsls	r3, r3, #9
 8009476:	b29b      	uxth	r3, r3
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	3b01      	subs	r3, #1
 8009480:	041b      	lsls	r3, r3, #16
 8009482:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	695b      	ldr	r3, [r3, #20]
 800948c:	3b01      	subs	r3, #1
 800948e:	061b      	lsls	r3, r3, #24
 8009490:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009494:	4928      	ldr	r1, [pc, #160]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 8009496:	4313      	orrs	r3, r2
 8009498:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800949a:	4b27      	ldr	r3, [pc, #156]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 800949c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949e:	f023 020c 	bic.w	r2, r3, #12
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	4924      	ldr	r1, [pc, #144]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80094ac:	4b22      	ldr	r3, [pc, #136]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b0:	f023 0220 	bic.w	r2, r3, #32
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	491f      	ldr	r1, [pc, #124]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80094be:	4b1e      	ldr	r3, [pc, #120]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c6:	491c      	ldr	r1, [pc, #112]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80094cc:	4b1a      	ldr	r3, [pc, #104]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d0:	4a19      	ldr	r2, [pc, #100]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094d2:	f023 0310 	bic.w	r3, r3, #16
 80094d6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80094d8:	4b17      	ldr	r3, [pc, #92]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6a12      	ldr	r2, [r2, #32]
 80094e8:	00d2      	lsls	r2, r2, #3
 80094ea:	4913      	ldr	r1, [pc, #76]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80094f0:	4b11      	ldr	r3, [pc, #68]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f4:	4a10      	ldr	r2, [pc, #64]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094f6:	f043 0310 	orr.w	r3, r3, #16
 80094fa:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80094fc:	4b0e      	ldr	r3, [pc, #56]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a0d      	ldr	r2, [pc, #52]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 8009502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009506:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009508:	f7f8 f8f6 	bl	80016f8 <HAL_GetTick>
 800950c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800950e:	e008      	b.n	8009522 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009510:	f7f8 f8f2 	bl	80016f8 <HAL_GetTick>
 8009514:	4602      	mov	r2, r0
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	2b02      	cmp	r3, #2
 800951c:	d901      	bls.n	8009522 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e006      	b.n	8009530 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009522:	4b05      	ldr	r3, [pc, #20]	; (8009538 <RCCEx_PLL3_Config+0x12c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0f0      	beq.n	8009510 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	44020c00 	.word	0x44020c00

0800953c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e041      	b.n	80095d4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d106      	bne.n	800956a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7f7 feb9 	bl	80012dc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2202      	movs	r2, #2
 800956e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3304      	adds	r3, #4
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f000 f82d 	bl	80095dc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0208 	bic.w	r2, r2, #8
 8009590:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6819      	ldr	r1, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a74      	ldr	r2, [pc, #464]	; (80097c0 <TIM_Base_SetConfig+0x1e4>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d02b      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a73      	ldr	r2, [pc, #460]	; (80097c4 <TIM_Base_SetConfig+0x1e8>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d027      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009602:	d023      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800960a:	d01f      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a6e      	ldr	r2, [pc, #440]	; (80097c8 <TIM_Base_SetConfig+0x1ec>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d01b      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a6d      	ldr	r2, [pc, #436]	; (80097cc <TIM_Base_SetConfig+0x1f0>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d017      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a6c      	ldr	r2, [pc, #432]	; (80097d0 <TIM_Base_SetConfig+0x1f4>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d013      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a6b      	ldr	r2, [pc, #428]	; (80097d4 <TIM_Base_SetConfig+0x1f8>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d00f      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a6a      	ldr	r2, [pc, #424]	; (80097d8 <TIM_Base_SetConfig+0x1fc>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d00b      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a69      	ldr	r2, [pc, #420]	; (80097dc <TIM_Base_SetConfig+0x200>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d007      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a68      	ldr	r2, [pc, #416]	; (80097e0 <TIM_Base_SetConfig+0x204>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d003      	beq.n	800964c <TIM_Base_SetConfig+0x70>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a67      	ldr	r2, [pc, #412]	; (80097e4 <TIM_Base_SetConfig+0x208>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d108      	bne.n	800965e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a57      	ldr	r2, [pc, #348]	; (80097c0 <TIM_Base_SetConfig+0x1e4>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d05b      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a56      	ldr	r2, [pc, #344]	; (80097c4 <TIM_Base_SetConfig+0x1e8>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d057      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009674:	d053      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800967c:	d04f      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a51      	ldr	r2, [pc, #324]	; (80097c8 <TIM_Base_SetConfig+0x1ec>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d04b      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a50      	ldr	r2, [pc, #320]	; (80097cc <TIM_Base_SetConfig+0x1f0>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d047      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a4f      	ldr	r2, [pc, #316]	; (80097d0 <TIM_Base_SetConfig+0x1f4>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d043      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a4e      	ldr	r2, [pc, #312]	; (80097d4 <TIM_Base_SetConfig+0x1f8>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d03f      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a4d      	ldr	r2, [pc, #308]	; (80097d8 <TIM_Base_SetConfig+0x1fc>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d03b      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a4c      	ldr	r2, [pc, #304]	; (80097dc <TIM_Base_SetConfig+0x200>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d037      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a4b      	ldr	r2, [pc, #300]	; (80097e0 <TIM_Base_SetConfig+0x204>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d033      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a4a      	ldr	r2, [pc, #296]	; (80097e4 <TIM_Base_SetConfig+0x208>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d02f      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a49      	ldr	r2, [pc, #292]	; (80097e8 <TIM_Base_SetConfig+0x20c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d02b      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a48      	ldr	r2, [pc, #288]	; (80097ec <TIM_Base_SetConfig+0x210>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d027      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a47      	ldr	r2, [pc, #284]	; (80097f0 <TIM_Base_SetConfig+0x214>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d023      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a46      	ldr	r2, [pc, #280]	; (80097f4 <TIM_Base_SetConfig+0x218>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d01f      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a45      	ldr	r2, [pc, #276]	; (80097f8 <TIM_Base_SetConfig+0x21c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d01b      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a44      	ldr	r2, [pc, #272]	; (80097fc <TIM_Base_SetConfig+0x220>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d017      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a43      	ldr	r2, [pc, #268]	; (8009800 <TIM_Base_SetConfig+0x224>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d013      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a42      	ldr	r2, [pc, #264]	; (8009804 <TIM_Base_SetConfig+0x228>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d00f      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a41      	ldr	r2, [pc, #260]	; (8009808 <TIM_Base_SetConfig+0x22c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d00b      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a40      	ldr	r2, [pc, #256]	; (800980c <TIM_Base_SetConfig+0x230>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d007      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a3f      	ldr	r2, [pc, #252]	; (8009810 <TIM_Base_SetConfig+0x234>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d003      	beq.n	800971e <TIM_Base_SetConfig+0x142>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a3e      	ldr	r2, [pc, #248]	; (8009814 <TIM_Base_SetConfig+0x238>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d108      	bne.n	8009730 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	4313      	orrs	r3, r2
 800972e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	4313      	orrs	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a1a      	ldr	r2, [pc, #104]	; (80097c0 <TIM_Base_SetConfig+0x1e4>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d023      	beq.n	80097a4 <TIM_Base_SetConfig+0x1c8>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a19      	ldr	r2, [pc, #100]	; (80097c4 <TIM_Base_SetConfig+0x1e8>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d01f      	beq.n	80097a4 <TIM_Base_SetConfig+0x1c8>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a1e      	ldr	r2, [pc, #120]	; (80097e0 <TIM_Base_SetConfig+0x204>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d01b      	beq.n	80097a4 <TIM_Base_SetConfig+0x1c8>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a1d      	ldr	r2, [pc, #116]	; (80097e4 <TIM_Base_SetConfig+0x208>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d017      	beq.n	80097a4 <TIM_Base_SetConfig+0x1c8>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a22      	ldr	r2, [pc, #136]	; (8009800 <TIM_Base_SetConfig+0x224>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d013      	beq.n	80097a4 <TIM_Base_SetConfig+0x1c8>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a21      	ldr	r2, [pc, #132]	; (8009804 <TIM_Base_SetConfig+0x228>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d00f      	beq.n	80097a4 <TIM_Base_SetConfig+0x1c8>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a20      	ldr	r2, [pc, #128]	; (8009808 <TIM_Base_SetConfig+0x22c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d00b      	beq.n	80097a4 <TIM_Base_SetConfig+0x1c8>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a1f      	ldr	r2, [pc, #124]	; (800980c <TIM_Base_SetConfig+0x230>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d007      	beq.n	80097a4 <TIM_Base_SetConfig+0x1c8>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a1e      	ldr	r2, [pc, #120]	; (8009810 <TIM_Base_SetConfig+0x234>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d003      	beq.n	80097a4 <TIM_Base_SetConfig+0x1c8>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a1d      	ldr	r2, [pc, #116]	; (8009814 <TIM_Base_SetConfig+0x238>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d103      	bne.n	80097ac <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	615a      	str	r2, [r3, #20]
}
 80097b2:	bf00      	nop
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	40012c00 	.word	0x40012c00
 80097c4:	50012c00 	.word	0x50012c00
 80097c8:	40000400 	.word	0x40000400
 80097cc:	50000400 	.word	0x50000400
 80097d0:	40000800 	.word	0x40000800
 80097d4:	50000800 	.word	0x50000800
 80097d8:	40000c00 	.word	0x40000c00
 80097dc:	50000c00 	.word	0x50000c00
 80097e0:	40013400 	.word	0x40013400
 80097e4:	50013400 	.word	0x50013400
 80097e8:	40001800 	.word	0x40001800
 80097ec:	50001800 	.word	0x50001800
 80097f0:	40001c00 	.word	0x40001c00
 80097f4:	50001c00 	.word	0x50001c00
 80097f8:	40002000 	.word	0x40002000
 80097fc:	50002000 	.word	0x50002000
 8009800:	40014000 	.word	0x40014000
 8009804:	50014000 	.word	0x50014000
 8009808:	40014400 	.word	0x40014400
 800980c:	50014400 	.word	0x50014400
 8009810:	40014800 	.word	0x40014800
 8009814:	50014800 	.word	0x50014800

08009818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009828:	2b01      	cmp	r3, #1
 800982a:	d101      	bne.n	8009830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800982c:	2302      	movs	r3, #2
 800982e:	e0a1      	b.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a4a      	ldr	r2, [pc, #296]	; (8009980 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d00e      	beq.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a49      	ldr	r2, [pc, #292]	; (8009984 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d009      	beq.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a47      	ldr	r2, [pc, #284]	; (8009988 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d004      	beq.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a46      	ldr	r2, [pc, #280]	; (800998c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d108      	bne.n	800988a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800987e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4313      	orrs	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009894:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	4313      	orrs	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a34      	ldr	r2, [pc, #208]	; (8009980 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d04a      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a33      	ldr	r2, [pc, #204]	; (8009984 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d045      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c4:	d040      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098ce:	d03b      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a2e      	ldr	r2, [pc, #184]	; (8009990 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d036      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a2d      	ldr	r2, [pc, #180]	; (8009994 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d031      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a2b      	ldr	r2, [pc, #172]	; (8009998 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d02c      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a2a      	ldr	r2, [pc, #168]	; (800999c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d027      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a28      	ldr	r2, [pc, #160]	; (80099a0 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d022      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a27      	ldr	r2, [pc, #156]	; (80099a4 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d01d      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a1d      	ldr	r2, [pc, #116]	; (8009988 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d018      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a1c      	ldr	r2, [pc, #112]	; (800998c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d013      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a20      	ldr	r2, [pc, #128]	; (80099a8 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d00e      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a1f      	ldr	r2, [pc, #124]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d009      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a1d      	ldr	r2, [pc, #116]	; (80099b0 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d004      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a1c      	ldr	r2, [pc, #112]	; (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d10c      	bne.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800994e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	4313      	orrs	r3, r2
 8009958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	40012c00 	.word	0x40012c00
 8009984:	50012c00 	.word	0x50012c00
 8009988:	40013400 	.word	0x40013400
 800998c:	50013400 	.word	0x50013400
 8009990:	40000400 	.word	0x40000400
 8009994:	50000400 	.word	0x50000400
 8009998:	40000800 	.word	0x40000800
 800999c:	50000800 	.word	0x50000800
 80099a0:	40000c00 	.word	0x40000c00
 80099a4:	50000c00 	.word	0x50000c00
 80099a8:	40001800 	.word	0x40001800
 80099ac:	50001800 	.word	0x50001800
 80099b0:	40014000 	.word	0x40014000
 80099b4:	50014000 	.word	0x50014000

080099b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e042      	b.n	8009a50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d106      	bne.n	80099e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7f7 fbef 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2224      	movs	r2, #36	; 0x24
 80099e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 0201 	bic.w	r2, r2, #1
 80099f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fa16 	bl	8009e34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f825 	bl	8009a58 <UART_SetConfig>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d101      	bne.n	8009a18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e01b      	b.n	8009a50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689a      	ldr	r2, [r3, #8]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f042 0201 	orr.w	r2, r2, #1
 8009a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fa95 	bl	8009f78 <UART_CheckIdleState>
 8009a4e:	4603      	mov	r3, r0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a5c:	b094      	sub	sp, #80	; 0x50
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	4b78      	ldr	r3, [pc, #480]	; (8009c50 <UART_SetConfig+0x1f8>)
 8009a6e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4971      	ldr	r1, [pc, #452]	; (8009c54 <UART_SetConfig+0x1fc>)
 8009a90:	4019      	ands	r1, r3
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a98:	430b      	orrs	r3, r1
 8009a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	68d9      	ldr	r1, [r3, #12]
 8009aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	ea40 0301 	orr.w	r3, r0, r1
 8009ab2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	4b64      	ldr	r3, [pc, #400]	; (8009c50 <UART_SetConfig+0x1f8>)
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d009      	beq.n	8009ad8 <UART_SetConfig+0x80>
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	4b63      	ldr	r3, [pc, #396]	; (8009c58 <UART_SetConfig+0x200>)
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d004      	beq.n	8009ad8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	6a1a      	ldr	r2, [r3, #32]
 8009ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8009ae2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aec:	430b      	orrs	r3, r1
 8009aee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af6:	f023 000f 	bic.w	r0, r3, #15
 8009afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	ea40 0301 	orr.w	r3, r0, r1
 8009b06:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	4b53      	ldr	r3, [pc, #332]	; (8009c5c <UART_SetConfig+0x204>)
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d102      	bne.n	8009b18 <UART_SetConfig+0xc0>
 8009b12:	2301      	movs	r3, #1
 8009b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b16:	e066      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	4b50      	ldr	r3, [pc, #320]	; (8009c60 <UART_SetConfig+0x208>)
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d102      	bne.n	8009b28 <UART_SetConfig+0xd0>
 8009b22:	2302      	movs	r3, #2
 8009b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b26:	e05e      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	4b4d      	ldr	r3, [pc, #308]	; (8009c64 <UART_SetConfig+0x20c>)
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d102      	bne.n	8009b38 <UART_SetConfig+0xe0>
 8009b32:	2304      	movs	r3, #4
 8009b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b36:	e056      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	4b4a      	ldr	r3, [pc, #296]	; (8009c68 <UART_SetConfig+0x210>)
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d102      	bne.n	8009b48 <UART_SetConfig+0xf0>
 8009b42:	2308      	movs	r3, #8
 8009b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b46:	e04e      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	4b47      	ldr	r3, [pc, #284]	; (8009c6c <UART_SetConfig+0x214>)
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d102      	bne.n	8009b58 <UART_SetConfig+0x100>
 8009b52:	2310      	movs	r3, #16
 8009b54:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b56:	e046      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	4b44      	ldr	r3, [pc, #272]	; (8009c70 <UART_SetConfig+0x218>)
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d102      	bne.n	8009b68 <UART_SetConfig+0x110>
 8009b62:	2320      	movs	r3, #32
 8009b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b66:	e03e      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	4b41      	ldr	r3, [pc, #260]	; (8009c74 <UART_SetConfig+0x21c>)
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d102      	bne.n	8009b78 <UART_SetConfig+0x120>
 8009b72:	2340      	movs	r3, #64	; 0x40
 8009b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b76:	e036      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	4b3e      	ldr	r3, [pc, #248]	; (8009c78 <UART_SetConfig+0x220>)
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d102      	bne.n	8009b88 <UART_SetConfig+0x130>
 8009b82:	2380      	movs	r3, #128	; 0x80
 8009b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b86:	e02e      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	4b3b      	ldr	r3, [pc, #236]	; (8009c7c <UART_SetConfig+0x224>)
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d103      	bne.n	8009b9a <UART_SetConfig+0x142>
 8009b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b98:	e025      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	4b38      	ldr	r3, [pc, #224]	; (8009c80 <UART_SetConfig+0x228>)
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d103      	bne.n	8009bac <UART_SetConfig+0x154>
 8009ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009baa:	e01c      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	4b34      	ldr	r3, [pc, #208]	; (8009c84 <UART_SetConfig+0x22c>)
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d103      	bne.n	8009bbe <UART_SetConfig+0x166>
 8009bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bbc:	e013      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b31      	ldr	r3, [pc, #196]	; (8009c88 <UART_SetConfig+0x230>)
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d103      	bne.n	8009bd0 <UART_SetConfig+0x178>
 8009bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bce:	e00a      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <UART_SetConfig+0x1f8>)
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d103      	bne.n	8009be2 <UART_SetConfig+0x18a>
 8009bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8009be0:	e001      	b.n	8009be6 <UART_SetConfig+0x18e>
 8009be2:	2300      	movs	r3, #0
 8009be4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	4b19      	ldr	r3, [pc, #100]	; (8009c50 <UART_SetConfig+0x1f8>)
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d005      	beq.n	8009bfc <UART_SetConfig+0x1a4>
 8009bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	4b18      	ldr	r3, [pc, #96]	; (8009c58 <UART_SetConfig+0x200>)
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	f040 8094 	bne.w	8009d24 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bfe:	2200      	movs	r2, #0
 8009c00:	623b      	str	r3, [r7, #32]
 8009c02:	627a      	str	r2, [r7, #36]	; 0x24
 8009c04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009c08:	f7fd f80e 	bl	8006c28 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c0c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 80f7 	beq.w	8009e04 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1a:	4a1c      	ldr	r2, [pc, #112]	; (8009c8c <UART_SetConfig+0x234>)
 8009c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c20:	461a      	mov	r2, r3
 8009c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c28:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	4413      	add	r3, r2
 8009c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d305      	bcc.n	8009c46 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d924      	bls.n	8009c90 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009c4c:	e069      	b.n	8009d22 <UART_SetConfig+0x2ca>
 8009c4e:	bf00      	nop
 8009c50:	44002400 	.word	0x44002400
 8009c54:	cfff69f3 	.word	0xcfff69f3
 8009c58:	54002400 	.word	0x54002400
 8009c5c:	40013800 	.word	0x40013800
 8009c60:	40004400 	.word	0x40004400
 8009c64:	40004800 	.word	0x40004800
 8009c68:	40004c00 	.word	0x40004c00
 8009c6c:	40005000 	.word	0x40005000
 8009c70:	40006400 	.word	0x40006400
 8009c74:	40007800 	.word	0x40007800
 8009c78:	40007c00 	.word	0x40007c00
 8009c7c:	40008000 	.word	0x40008000
 8009c80:	40006800 	.word	0x40006800
 8009c84:	40006c00 	.word	0x40006c00
 8009c88:	40008400 	.word	0x40008400
 8009c8c:	0800a93c 	.word	0x0800a93c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c92:	2200      	movs	r2, #0
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	61fa      	str	r2, [r7, #28]
 8009c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9c:	4a64      	ldr	r2, [pc, #400]	; (8009e30 <UART_SetConfig+0x3d8>)
 8009c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	613b      	str	r3, [r7, #16]
 8009ca8:	617a      	str	r2, [r7, #20]
 8009caa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009cae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009cb2:	f7f6 faeb 	bl	800028c <__aeabi_uldivmod>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4610      	mov	r0, r2
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	f04f 0200 	mov.w	r2, #0
 8009cc2:	f04f 0300 	mov.w	r3, #0
 8009cc6:	020b      	lsls	r3, r1, #8
 8009cc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ccc:	0202      	lsls	r2, r0, #8
 8009cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cd0:	6849      	ldr	r1, [r1, #4]
 8009cd2:	0849      	lsrs	r1, r1, #1
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	4605      	mov	r5, r0
 8009cda:	eb12 0804 	adds.w	r8, r2, r4
 8009cde:	eb43 0905 	adc.w	r9, r3, r5
 8009ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	60bb      	str	r3, [r7, #8]
 8009cea:	60fa      	str	r2, [r7, #12]
 8009cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 faca 	bl	800028c <__aeabi_uldivmod>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d06:	d308      	bcc.n	8009d1a <UART_SetConfig+0x2c2>
 8009d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d0e:	d204      	bcs.n	8009d1a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d16:	60da      	str	r2, [r3, #12]
 8009d18:	e003      	b.n	8009d22 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009d20:	e070      	b.n	8009e04 <UART_SetConfig+0x3ac>
 8009d22:	e06f      	b.n	8009e04 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d2c:	d13c      	bne.n	8009da8 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d30:	2200      	movs	r2, #0
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d3a:	f7fc ff75 	bl	8006c28 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d3e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d05e      	beq.n	8009e04 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4a:	4a39      	ldr	r2, [pc, #228]	; (8009e30 <UART_SetConfig+0x3d8>)
 8009d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d50:	461a      	mov	r2, r3
 8009d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d58:	005a      	lsls	r2, r3, #1
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	085b      	lsrs	r3, r3, #1
 8009d60:	441a      	add	r2, r3
 8009d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d6e:	2b0f      	cmp	r3, #15
 8009d70:	d916      	bls.n	8009da0 <UART_SetConfig+0x348>
 8009d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d78:	d212      	bcs.n	8009da0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	f023 030f 	bic.w	r3, r3, #15
 8009d82:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d86:	085b      	lsrs	r3, r3, #1
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009d92:	4313      	orrs	r3, r2
 8009d94:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009d9c:	60da      	str	r2, [r3, #12]
 8009d9e:	e031      	b.n	8009e04 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009da6:	e02d      	b.n	8009e04 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009daa:	2200      	movs	r2, #0
 8009dac:	469a      	mov	sl, r3
 8009dae:	4693      	mov	fp, r2
 8009db0:	4650      	mov	r0, sl
 8009db2:	4659      	mov	r1, fp
 8009db4:	f7fc ff38 	bl	8006c28 <HAL_RCCEx_GetPeriphCLKFreq>
 8009db8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8009dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d021      	beq.n	8009e04 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc4:	4a1a      	ldr	r2, [pc, #104]	; (8009e30 <UART_SetConfig+0x3d8>)
 8009dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dce:	fbb3 f2f2 	udiv	r2, r3, r2
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	085b      	lsrs	r3, r3, #1
 8009dd8:	441a      	add	r2, r3
 8009dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de6:	2b0f      	cmp	r3, #15
 8009de8:	d909      	bls.n	8009dfe <UART_SetConfig+0x3a6>
 8009dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df0:	d205      	bcs.n	8009dfe <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	60da      	str	r2, [r3, #12]
 8009dfc:	e002      	b.n	8009e04 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e06:	2201      	movs	r2, #1
 8009e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e16:	2200      	movs	r2, #0
 8009e18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009e20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3750      	adds	r7, #80	; 0x50
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e2e:	bf00      	nop
 8009e30:	0800a93c 	.word	0x0800a93c

08009e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e40:	f003 0308 	and.w	r3, r3, #8
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00a      	beq.n	8009e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00a      	beq.n	8009ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea6:	f003 0304 	and.w	r3, r3, #4
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec8:	f003 0310 	and.w	r3, r3, #16
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00a      	beq.n	8009ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eea:	f003 0320 	and.w	r3, r3, #32
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00a      	beq.n	8009f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	430a      	orrs	r2, r1
 8009f06:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01a      	beq.n	8009f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	430a      	orrs	r2, r1
 8009f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f32:	d10a      	bne.n	8009f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	605a      	str	r2, [r3, #4]
  }
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b098      	sub	sp, #96	; 0x60
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f88:	f7f7 fbb6 	bl	80016f8 <HAL_GetTick>
 8009f8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 0308 	and.w	r3, r3, #8
 8009f98:	2b08      	cmp	r3, #8
 8009f9a:	d12f      	bne.n	8009ffc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f88e 	bl	800a0cc <UART_WaitOnFlagUntilTimeout>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d022      	beq.n	8009ffc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbe:	e853 3f00 	ldrex	r3, [r3]
 8009fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fca:	653b      	str	r3, [r7, #80]	; 0x50
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fdc:	e841 2300 	strex	r3, r2, [r1]
 8009fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1e6      	bne.n	8009fb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e063      	b.n	800a0c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0304 	and.w	r3, r3, #4
 800a006:	2b04      	cmp	r3, #4
 800a008:	d149      	bne.n	800a09e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a00a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a012:	2200      	movs	r2, #0
 800a014:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f857 	bl	800a0cc <UART_WaitOnFlagUntilTimeout>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d03c      	beq.n	800a09e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	623b      	str	r3, [r7, #32]
   return(result);
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a038:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a042:	633b      	str	r3, [r7, #48]	; 0x30
 800a044:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e6      	bne.n	800a024 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3308      	adds	r3, #8
 800a05c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	e853 3f00 	ldrex	r3, [r3]
 800a064:	60fb      	str	r3, [r7, #12]
   return(result);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f023 0301 	bic.w	r3, r3, #1
 800a06c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3308      	adds	r3, #8
 800a074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a076:	61fa      	str	r2, [r7, #28]
 800a078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	69b9      	ldr	r1, [r7, #24]
 800a07c:	69fa      	ldr	r2, [r7, #28]
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	617b      	str	r3, [r7, #20]
   return(result);
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e5      	bne.n	800a056 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a09a:	2303      	movs	r3, #3
 800a09c:	e012      	b.n	800a0c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3758      	adds	r7, #88	; 0x58
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0dc:	e049      	b.n	800a172 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e4:	d045      	beq.n	800a172 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0e6:	f7f7 fb07 	bl	80016f8 <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	69ba      	ldr	r2, [r7, #24]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d302      	bcc.n	800a0fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e048      	b.n	800a192 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d031      	beq.n	800a172 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	69db      	ldr	r3, [r3, #28]
 800a114:	f003 0308 	and.w	r3, r3, #8
 800a118:	2b08      	cmp	r3, #8
 800a11a:	d110      	bne.n	800a13e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2208      	movs	r2, #8
 800a122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 f838 	bl	800a19a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2208      	movs	r2, #8
 800a12e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e029      	b.n	800a192 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a14c:	d111      	bne.n	800a172 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 f81e 	bl	800a19a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2220      	movs	r2, #32
 800a162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e00f      	b.n	800a192 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	69da      	ldr	r2, [r3, #28]
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	4013      	ands	r3, r2
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	429a      	cmp	r2, r3
 800a180:	bf0c      	ite	eq
 800a182:	2301      	moveq	r3, #1
 800a184:	2300      	movne	r3, #0
 800a186:	b2db      	uxtb	r3, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	79fb      	ldrb	r3, [r7, #7]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d0a6      	beq.n	800a0de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b095      	sub	sp, #84	; 0x54
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c0:	643b      	str	r3, [r7, #64]	; 0x40
 800a1c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1c8:	e841 2300 	strex	r3, r2, [r1]
 800a1cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1e6      	bne.n	800a1a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	e853 3f00 	ldrex	r3, [r3]
 800a1e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1ea:	f023 0301 	bic.w	r3, r3, #1
 800a1ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a200:	e841 2300 	strex	r3, r2, [r1]
 800a204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1e3      	bne.n	800a1d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a210:	2b01      	cmp	r3, #1
 800a212:	d118      	bne.n	800a246 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	60bb      	str	r3, [r7, #8]
   return(result);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f023 0310 	bic.w	r3, r3, #16
 800a228:	647b      	str	r3, [r7, #68]	; 0x44
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a232:	61bb      	str	r3, [r7, #24]
 800a234:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6979      	ldr	r1, [r7, #20]
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	613b      	str	r3, [r7, #16]
   return(result);
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e6      	bne.n	800a214 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2220      	movs	r2, #32
 800a24a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a25a:	bf00      	nop
 800a25c:	3754      	adds	r7, #84	; 0x54
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a266:	b480      	push	{r7}
 800a268:	b085      	sub	sp, #20
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a274:	2b01      	cmp	r3, #1
 800a276:	d101      	bne.n	800a27c <HAL_UARTEx_DisableFifoMode+0x16>
 800a278:	2302      	movs	r3, #2
 800a27a:	e027      	b.n	800a2cc <HAL_UARTEx_DisableFifoMode+0x66>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2224      	movs	r2, #36	; 0x24
 800a288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f022 0201 	bic.w	r2, r2, #1
 800a2a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d101      	bne.n	800a2f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	e02d      	b.n	800a34c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2224      	movs	r2, #36	; 0x24
 800a2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f022 0201 	bic.w	r2, r2, #1
 800a316:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	430a      	orrs	r2, r1
 800a32a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f84f 	bl	800a3d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a364:	2b01      	cmp	r3, #1
 800a366:	d101      	bne.n	800a36c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a368:	2302      	movs	r3, #2
 800a36a:	e02d      	b.n	800a3c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2224      	movs	r2, #36	; 0x24
 800a378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 0201 	bic.w	r2, r2, #1
 800a392:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	430a      	orrs	r2, r1
 800a3a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f811 	bl	800a3d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d108      	bne.n	800a3f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3f0:	e031      	b.n	800a456 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3f2:	2308      	movs	r3, #8
 800a3f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3f6:	2308      	movs	r3, #8
 800a3f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	0e5b      	lsrs	r3, r3, #25
 800a402:	b2db      	uxtb	r3, r3
 800a404:	f003 0307 	and.w	r3, r3, #7
 800a408:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	0f5b      	lsrs	r3, r3, #29
 800a412:	b2db      	uxtb	r3, r3
 800a414:	f003 0307 	and.w	r3, r3, #7
 800a418:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a41a:	7bbb      	ldrb	r3, [r7, #14]
 800a41c:	7b3a      	ldrb	r2, [r7, #12]
 800a41e:	4911      	ldr	r1, [pc, #68]	; (800a464 <UARTEx_SetNbDataToProcess+0x94>)
 800a420:	5c8a      	ldrb	r2, [r1, r2]
 800a422:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a426:	7b3a      	ldrb	r2, [r7, #12]
 800a428:	490f      	ldr	r1, [pc, #60]	; (800a468 <UARTEx_SetNbDataToProcess+0x98>)
 800a42a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a42c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a430:	b29a      	uxth	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	7b7a      	ldrb	r2, [r7, #13]
 800a43c:	4909      	ldr	r1, [pc, #36]	; (800a464 <UARTEx_SetNbDataToProcess+0x94>)
 800a43e:	5c8a      	ldrb	r2, [r1, r2]
 800a440:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a444:	7b7a      	ldrb	r2, [r7, #13]
 800a446:	4908      	ldr	r1, [pc, #32]	; (800a468 <UARTEx_SetNbDataToProcess+0x98>)
 800a448:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a44a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a44e:	b29a      	uxth	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a456:	bf00      	nop
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	0800a954 	.word	0x0800a954
 800a468:	0800a95c 	.word	0x0800a95c

0800a46c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b08b      	sub	sp, #44	; 0x2c
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	fa93 f3a3 	rbit	r3, r3
 800a486:	613b      	str	r3, [r7, #16]
  return result;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a492:	2320      	movs	r3, #32
 800a494:	e003      	b.n	800a49e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	fab3 f383 	clz	r3, r3
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	2103      	movs	r1, #3
 800a4a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4a6:	43db      	mvns	r3, r3
 800a4a8:	401a      	ands	r2, r3
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	fa93 f3a3 	rbit	r3, r3
 800a4b4:	61fb      	str	r3, [r7, #28]
  return result;
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a4c0:	2320      	movs	r3, #32
 800a4c2:	e003      	b.n	800a4cc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	fab3 f383 	clz	r3, r3
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d4:	431a      	orrs	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	601a      	str	r2, [r3, #0]
}
 800a4da:	bf00      	nop
 800a4dc:	372c      	adds	r7, #44	; 0x2c
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	43db      	mvns	r3, r3
 800a4fa:	401a      	ands	r2, r3
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	fb01 f303 	mul.w	r3, r1, r3
 800a504:	431a      	orrs	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	605a      	str	r2, [r3, #4]
}
 800a50a:	bf00      	nop
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a516:	b480      	push	{r7}
 800a518:	b08b      	sub	sp, #44	; 0x2c
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	60b9      	str	r1, [r7, #8]
 800a520:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	689a      	ldr	r2, [r3, #8]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	fa93 f3a3 	rbit	r3, r3
 800a530:	613b      	str	r3, [r7, #16]
  return result;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a53c:	2320      	movs	r3, #32
 800a53e:	e003      	b.n	800a548 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	fab3 f383 	clz	r3, r3
 800a546:	b2db      	uxtb	r3, r3
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	2103      	movs	r1, #3
 800a54c:	fa01 f303 	lsl.w	r3, r1, r3
 800a550:	43db      	mvns	r3, r3
 800a552:	401a      	ands	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	fa93 f3a3 	rbit	r3, r3
 800a55e:	61fb      	str	r3, [r7, #28]
  return result;
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a56a:	2320      	movs	r3, #32
 800a56c:	e003      	b.n	800a576 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	fab3 f383 	clz	r3, r3
 800a574:	b2db      	uxtb	r3, r3
 800a576:	005b      	lsls	r3, r3, #1
 800a578:	6879      	ldr	r1, [r7, #4]
 800a57a:	fa01 f303 	lsl.w	r3, r1, r3
 800a57e:	431a      	orrs	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a584:	bf00      	nop
 800a586:	372c      	adds	r7, #44	; 0x2c
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a590:	b480      	push	{r7}
 800a592:	b08b      	sub	sp, #44	; 0x2c
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	68da      	ldr	r2, [r3, #12]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	fa93 f3a3 	rbit	r3, r3
 800a5aa:	613b      	str	r3, [r7, #16]
  return result;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a5b6:	2320      	movs	r3, #32
 800a5b8:	e003      	b.n	800a5c2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	fab3 f383 	clz	r3, r3
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	2103      	movs	r1, #3
 800a5c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ca:	43db      	mvns	r3, r3
 800a5cc:	401a      	ands	r2, r3
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	fa93 f3a3 	rbit	r3, r3
 800a5d8:	61fb      	str	r3, [r7, #28]
  return result;
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a5e4:	2320      	movs	r3, #32
 800a5e6:	e003      	b.n	800a5f0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	fab3 f383 	clz	r3, r3
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	005b      	lsls	r3, r3, #1
 800a5f2:	6879      	ldr	r1, [r7, #4]
 800a5f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f8:	431a      	orrs	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	60da      	str	r2, [r3, #12]
}
 800a5fe:	bf00      	nop
 800a600:	372c      	adds	r7, #44	; 0x2c
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b08b      	sub	sp, #44	; 0x2c
 800a60e:	af00      	add	r7, sp, #0
 800a610:	60f8      	str	r0, [r7, #12]
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6a1a      	ldr	r2, [r3, #32]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	fa93 f3a3 	rbit	r3, r3
 800a624:	613b      	str	r3, [r7, #16]
  return result;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a630:	2320      	movs	r3, #32
 800a632:	e003      	b.n	800a63c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	fab3 f383 	clz	r3, r3
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	210f      	movs	r1, #15
 800a640:	fa01 f303 	lsl.w	r3, r1, r3
 800a644:	43db      	mvns	r3, r3
 800a646:	401a      	ands	r2, r3
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	fa93 f3a3 	rbit	r3, r3
 800a652:	61fb      	str	r3, [r7, #28]
  return result;
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a65e:	2320      	movs	r3, #32
 800a660:	e003      	b.n	800a66a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	fab3 f383 	clz	r3, r3
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	fa01 f303 	lsl.w	r3, r1, r3
 800a672:	431a      	orrs	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a678:	bf00      	nop
 800a67a:	372c      	adds	r7, #44	; 0x2c
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a684:	b480      	push	{r7}
 800a686:	b08b      	sub	sp, #44	; 0x2c
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	0a1b      	lsrs	r3, r3, #8
 800a698:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	fa93 f3a3 	rbit	r3, r3
 800a6a0:	613b      	str	r3, [r7, #16]
  return result;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a6ac:	2320      	movs	r3, #32
 800a6ae:	e003      	b.n	800a6b8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	fab3 f383 	clz	r3, r3
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	210f      	movs	r1, #15
 800a6bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c0:	43db      	mvns	r3, r3
 800a6c2:	401a      	ands	r2, r3
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	0a1b      	lsrs	r3, r3, #8
 800a6c8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	fa93 f3a3 	rbit	r3, r3
 800a6d0:	61fb      	str	r3, [r7, #28]
  return result;
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a6dc:	2320      	movs	r3, #32
 800a6de:	e003      	b.n	800a6e8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	fab3 f383 	clz	r3, r3
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a6f6:	bf00      	nop
 800a6f8:	372c      	adds	r7, #44	; 0x2c
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b08a      	sub	sp, #40	; 0x28
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	fa93 f3a3 	rbit	r3, r3
 800a718:	617b      	str	r3, [r7, #20]
  return result;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d101      	bne.n	800a728 <LL_GPIO_Init+0x26>
    return 32U;
 800a724:	2320      	movs	r3, #32
 800a726:	e003      	b.n	800a730 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	fab3 f383 	clz	r3, r3
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a732:	e058      	b.n	800a7e6 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	2101      	movs	r1, #1
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	fa01 f303 	lsl.w	r3, r1, r3
 800a740:	4013      	ands	r3, r2
 800a742:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d04a      	beq.n	800a7e0 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d003      	beq.n	800a75a <LL_GPIO_Init+0x58>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2b02      	cmp	r3, #2
 800a758:	d10e      	bne.n	800a778 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	461a      	mov	r2, r3
 800a760:	6a39      	ldr	r1, [r7, #32]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7ff fed7 	bl	800a516 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	6819      	ldr	r1, [r3, #0]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	461a      	mov	r2, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff feb7 	bl	800a4e6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	461a      	mov	r2, r3
 800a77e:	6a39      	ldr	r1, [r7, #32]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7ff ff05 	bl	800a590 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d121      	bne.n	800a7d2 <LL_GPIO_Init+0xd0>
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	fa93 f3a3 	rbit	r3, r3
 800a798:	60bb      	str	r3, [r7, #8]
  return result;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <LL_GPIO_Init+0xa6>
    return 32U;
 800a7a4:	2320      	movs	r3, #32
 800a7a6:	e003      	b.n	800a7b0 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	fab3 f383 	clz	r3, r3
 800a7ae:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a7b0:	2b07      	cmp	r3, #7
 800a7b2:	d807      	bhi.n	800a7c4 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	6a39      	ldr	r1, [r7, #32]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7ff ff24 	bl	800a60a <LL_GPIO_SetAFPin_0_7>
 800a7c2:	e006      	b.n	800a7d2 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6a39      	ldr	r1, [r7, #32]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff ff59 	bl	800a684 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	6a39      	ldr	r1, [r7, #32]
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff fe46 	bl	800a46c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d19f      	bne.n	800a734 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3728      	adds	r7, #40	; 0x28
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b085      	sub	sp, #20
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a806:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a80a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	43db      	mvns	r3, r3
 800a814:	401a      	ands	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	460b      	mov	r3, r1
 800a832:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800a834:	78fb      	ldrb	r3, [r7, #3]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	641a      	str	r2, [r3, #64]	; 0x40
 800a846:	e00b      	b.n	800a860 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d106      	bne.n	800a85c <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a852:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	641a      	str	r2, [r3, #64]	; 0x40
 800a85a:	e001      	b.n	800a860 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e000      	b.n	800a862 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800a86e:	b084      	sub	sp, #16
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	f107 001c 	add.w	r0, r7, #28
 800a87c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	f023 0201 	bic.w	r2, r3, #1
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800a892:	2100      	movs	r1, #0
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff ffc7 	bl	800a828 <USB_SetCurrentMode>
 800a89a:	4603      	mov	r3, r0
 800a89c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8b0:	b004      	add	sp, #16
 800a8b2:	4770      	bx	lr

0800a8b4 <memset>:
 800a8b4:	4402      	add	r2, r0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d100      	bne.n	800a8be <memset+0xa>
 800a8bc:	4770      	bx	lr
 800a8be:	f803 1b01 	strb.w	r1, [r3], #1
 800a8c2:	e7f9      	b.n	800a8b8 <memset+0x4>

0800a8c4 <__libc_init_array>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	4d0d      	ldr	r5, [pc, #52]	; (800a8fc <__libc_init_array+0x38>)
 800a8c8:	2600      	movs	r6, #0
 800a8ca:	4c0d      	ldr	r4, [pc, #52]	; (800a900 <__libc_init_array+0x3c>)
 800a8cc:	1b64      	subs	r4, r4, r5
 800a8ce:	10a4      	asrs	r4, r4, #2
 800a8d0:	42a6      	cmp	r6, r4
 800a8d2:	d109      	bne.n	800a8e8 <__libc_init_array+0x24>
 800a8d4:	4d0b      	ldr	r5, [pc, #44]	; (800a904 <__libc_init_array+0x40>)
 800a8d6:	2600      	movs	r6, #0
 800a8d8:	4c0b      	ldr	r4, [pc, #44]	; (800a908 <__libc_init_array+0x44>)
 800a8da:	f000 f817 	bl	800a90c <_init>
 800a8de:	1b64      	subs	r4, r4, r5
 800a8e0:	10a4      	asrs	r4, r4, #2
 800a8e2:	42a6      	cmp	r6, r4
 800a8e4:	d105      	bne.n	800a8f2 <__libc_init_array+0x2e>
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ec:	3601      	adds	r6, #1
 800a8ee:	4798      	blx	r3
 800a8f0:	e7ee      	b.n	800a8d0 <__libc_init_array+0xc>
 800a8f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8f6:	3601      	adds	r6, #1
 800a8f8:	4798      	blx	r3
 800a8fa:	e7f2      	b.n	800a8e2 <__libc_init_array+0x1e>
 800a8fc:	0800a96c 	.word	0x0800a96c
 800a900:	0800a96c 	.word	0x0800a96c
 800a904:	0800a96c 	.word	0x0800a96c
 800a908:	0800a970 	.word	0x0800a970

0800a90c <_init>:
 800a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90e:	bf00      	nop
 800a910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a912:	bc08      	pop	{r3}
 800a914:	469e      	mov	lr, r3
 800a916:	4770      	bx	lr

0800a918 <_fini>:
 800a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91a:	bf00      	nop
 800a91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91e:	bc08      	pop	{r3}
 800a920:	469e      	mov	lr, r3
 800a922:	4770      	bx	lr
