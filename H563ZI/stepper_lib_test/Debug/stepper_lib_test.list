
stepper_lib_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac68  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800aeb4  0800aeb4  0001aeb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef4  0800aef4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aef4  0800aef4  0001aef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aefc  0800aefc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aefc  0800aefc  0001aefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af00  0800af00  0001af00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800af04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  2000002c  0800af30  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  0800af30  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021085  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003528  00000000  00000000  0004112a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  00044658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001321  00000000  00000000  00045ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000382a9  00000000  00000000  00047209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020bb2  00000000  00000000  0007f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016f940  00000000  00000000  000a0064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bd0  00000000  00000000  0020f9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00216574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000002c 	.word	0x2000002c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800ae9c 	.word	0x0800ae9c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000030 	.word	0x20000030
 8000288:	0800ae9c 	.word	0x0800ae9c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d0:	68fb      	ldr	r3, [r7, #12]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	44020c00 	.word	0x44020c00

080005e4 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005f2:	4909      	ldr	r1, [pc, #36]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000608:	68fb      	ldr	r3, [r7, #12]
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	44020c00 	.word	0x44020c00

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f001 f925 	bl	8001870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f84d 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 fa39 	bl	8000aa0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800062e:	f000 f8b9 	bl	80007a4 <MX_ADC1_Init>
  MX_ETH_Init();
 8000632:	f000 f91b 	bl	800086c <MX_ETH_Init>
  MX_ICACHE_Init();
 8000636:	f000 f965 	bl	8000904 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 800063a:	f000 f96f 	bl	800091c <MX_LPUART1_UART_Init>
  MX_UCPD1_Init();
 800063e:	f000 f9d9 	bl	80009f4 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000642:	f000 f9fb 	bl	8000a3c <MX_USB_PCD_Init>
  MX_TIM14_Init();
 8000646:	f000 f9b3 	bl	80009b0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 800064a:	4815      	ldr	r0, [pc, #84]	; (80006a0 <main+0x84>)
 800064c:	f009 f8f8 	bl	8009840 <HAL_TIM_Base_Start_IT>
	Stepper_Init(&Stepper1, Step_Port, Step_Pin, Dir_Port, Dir_Pin, MS_Ports, MS_Pins, FULL);
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <main+0x88>)
 8000652:	6819      	ldr	r1, [r3, #0]
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <main+0x8c>)
 8000656:	881a      	ldrh	r2, [r3, #0]
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <main+0x90>)
 800065a:	6818      	ldr	r0, [r3, #0]
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <main+0x94>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	2400      	movs	r4, #0
 8000662:	9403      	str	r4, [sp, #12]
 8000664:	4c13      	ldr	r4, [pc, #76]	; (80006b4 <main+0x98>)
 8000666:	9402      	str	r4, [sp, #8]
 8000668:	4c13      	ldr	r4, [pc, #76]	; (80006b8 <main+0x9c>)
 800066a:	9401      	str	r4, [sp, #4]
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	4603      	mov	r3, r0
 8000670:	4812      	ldr	r0, [pc, #72]	; (80006bc <main+0xa0>)
 8000672:	f000 fb43 	bl	8000cfc <Stepper_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Stepper_Empty(&Stepper1))
 8000676:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0xa0>)
 8000678:	f000 fca1 	bl	8000fbe <Stepper_Empty>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d00a      	beq.n	8000698 <main+0x7c>
	  {
		  x = 10;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <main+0xa4>)
 8000684:	220a      	movs	r2, #10
 8000686:	601a      	str	r2, [r3, #0]
		  HAL_Delay(1000);
 8000688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068c:	f001 f96c 	bl	8001968 <HAL_Delay>
		  Stepper_Add_Steps(&Stepper1, 200);
 8000690:	21c8      	movs	r1, #200	; 0xc8
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <main+0xa0>)
 8000694:	f000 fc76 	bl	8000f84 <Stepper_Add_Steps>
	  }
	  x = 9;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <main+0xa4>)
 800069a:	2209      	movs	r2, #9
 800069c:	601a      	str	r2, [r3, #0]
	  if(Stepper_Empty(&Stepper1))
 800069e:	e7ea      	b.n	8000676 <main+0x5a>
 80006a0:	200002ec 	.word	0x200002ec
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000014 	.word	0x20000014
 80006ac:	20000004 	.word	0x20000004
 80006b0:	20000016 	.word	0x20000016
 80006b4:	20000018 	.word	0x20000018
 80006b8:	20000008 	.word	0x20000008
 80006bc:	2000064c 	.word	0x2000064c
 80006c0:	20000648 	.word	0x20000648

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	; 0x70
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2250      	movs	r2, #80	; 0x50
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00a fbb6 	bl	800ae44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <SystemClock_Config+0xdc>)
 80006ec:	691b      	ldr	r3, [r3, #16]
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <SystemClock_Config+0xdc>)
 80006f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006f4:	6113      	str	r3, [r2, #16]
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <SystemClock_Config+0xdc>)
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000702:	bf00      	nop
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <SystemClock_Config+0xdc>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	2b08      	cmp	r3, #8
 800070e:	d1f9      	bne.n	8000704 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000710:	2323      	movs	r3, #35	; 0x23
 8000712:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000714:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000730:	2303      	movs	r3, #3
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000738:	2310      	movs	r3, #16
 800073a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000748:	230c      	movs	r3, #12
 800074a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800074c:	2300      	movs	r3, #0
 800074e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f003 f84d 	bl	80037f8 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000764:	f000 fac0 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	231f      	movs	r3, #31
 800076a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2303      	movs	r3, #3
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2103      	movs	r1, #3
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fc6e 	bl	8004068 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000792:	f000 faa9 	bl	8000ce8 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3770      	adds	r7, #112	; 0x70
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	44020800 	.word	0x44020800

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2220      	movs	r2, #32
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f00a fb47 	bl	800ae44 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007b8:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <MX_ADC1_Init+0xc0>)
 80007ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007d6:	2204      	movs	r2, #4
 80007d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_ADC1_Init+0xbc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_ADC1_Init+0xbc>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_ADC1_Init+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_ADC1_Init+0xbc>)
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_ADC1_Init+0xbc>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081c:	4810      	ldr	r0, [pc, #64]	; (8000860 <MX_ADC1_Init+0xbc>)
 800081e:	f001 fad9 	bl	8001dd4 <HAL_ADC_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000828:	f000 fa5e 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_ADC1_Init+0xc4>)
 800082e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000830:	2306      	movs	r3, #6
 8000832:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000838:	237f      	movs	r3, #127	; 0x7f
 800083a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083c:	2304      	movs	r3, #4
 800083e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_ADC1_Init+0xbc>)
 800084a:	f001 fc17 	bl	800207c <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000854:	f000 fa48 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000140 	.word	0x20000140
 8000864:	42028000 	.word	0x42028000
 8000868:	4b840000 	.word	0x4b840000

0800086c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_ETH_Init+0x80>)
 8000872:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <MX_ETH_Init+0x84>)
 8000874:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ETH_Init+0x88>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_ETH_Init+0x88>)
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ETH_Init+0x88>)
 8000884:	22e1      	movs	r2, #225	; 0xe1
 8000886:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ETH_Init+0x88>)
 800088a:	2200      	movs	r2, #0
 800088c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ETH_Init+0x88>)
 8000890:	2200      	movs	r2, #0
 8000892:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_ETH_Init+0x88>)
 8000896:	2200      	movs	r2, #0
 8000898:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ETH_Init+0x80>)
 800089c:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <MX_ETH_Init+0x88>)
 800089e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ETH_Init+0x80>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ETH_Init+0x80>)
 80008a8:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <MX_ETH_Init+0x8c>)
 80008aa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ETH_Init+0x80>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_ETH_Init+0x90>)
 80008b0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_ETH_Init+0x80>)
 80008b4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008b8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_ETH_Init+0x80>)
 80008bc:	f002 f8f0 	bl	8002aa0 <HAL_ETH_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008c6:	f000 fa0f 	bl	8000ce8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008ca:	2238      	movs	r2, #56	; 0x38
 80008cc:	2100      	movs	r1, #0
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_ETH_Init+0x94>)
 80008d0:	f00a fab8 	bl	800ae44 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_ETH_Init+0x94>)
 80008d6:	2221      	movs	r2, #33	; 0x21
 80008d8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_ETH_Init+0x94>)
 80008dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008e0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_ETH_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200001a8 	.word	0x200001a8
 80008f0:	40028000 	.word	0x40028000
 80008f4:	20000778 	.word	0x20000778
 80008f8:	200000e0 	.word	0x200000e0
 80008fc:	20000080 	.word	0x20000080
 8000900:	20000048 	.word	0x20000048

08000904 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000908:	f002 fe68 	bl	80035dc <HAL_ICACHE_Enable>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000912:	f000 f9e9 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <MX_LPUART1_UART_Init+0x8c>)
 8000924:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000928:	4a20      	ldr	r2, [pc, #128]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 800092a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000940:	220c      	movs	r2, #12
 8000942:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000952:	2200      	movs	r2, #0
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000958:	2200      	movs	r2, #0
 800095a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 800095e:	f009 faf3 	bl	8009f48 <HAL_UART_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000968:	f000 f9be 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	480d      	ldr	r0, [pc, #52]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000970:	f009 ff7a 	bl	800a868 <HAL_UARTEx_SetTxFifoThreshold>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800097a:	f000 f9b5 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000982:	f009 ffaf 	bl	800a8e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800098c:	f000 f9ac 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000992:	f009 ff30 	bl	800a7f6 <HAL_UARTEx_DisableFifoMode>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800099c:	f000 f9a4 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000258 	.word	0x20000258
 80009a8:	44002400 	.word	0x44002400
 80009ac:	00033324 	.word	0x00033324

080009b0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <MX_TIM14_Init+0x3c>)
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <MX_TIM14_Init+0x40>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_TIM14_Init+0x3c>)
 80009bc:	223f      	movs	r2, #63	; 0x3f
 80009be:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_TIM14_Init+0x3c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_TIM14_Init+0x3c>)
 80009c8:	2264      	movs	r2, #100	; 0x64
 80009ca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <MX_TIM14_Init+0x3c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_TIM14_Init+0x3c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_TIM14_Init+0x3c>)
 80009da:	f008 fed9 	bl	8009790 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80009e4:	f000 f980 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200002ec 	.word	0x200002ec
 80009f0:	40002000 	.word	0x40002000

080009f4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
 8000a08:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a0a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a0e:	f7ff fde9 	bl	80005e4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a12:	2002      	movs	r0, #2
 8000a14:	f7ff fdca 	bl	80005ac <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000a18:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <MX_UCPD1_Init+0x44>)
 8000a2c:	f00a f931 	bl	800ac92 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	42020400 	.word	0x42020400

08000a3c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <MX_USB_PCD_Init+0x60>)
 8000a44:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a48:	2208      	movs	r2, #8
 8000a4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a84:	f002 fdba 	bl	80035fc <HAL_PCD_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8000a8e:	f000 f92b 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000338 	.word	0x20000338
 8000a9c:	40016000 	.word	0x40016000

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab6:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000abc:	4a58      	ldr	r2, [pc, #352]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ac6:	4b56      	ldr	r3, [pc, #344]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ada:	4a51      	ldr	r2, [pc, #324]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ae4:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af2:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000af8:	4a49      	ldr	r2, [pc, #292]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000afa:	f043 0320 	orr.w	r3, r3, #32
 8000afe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b02:	4b47      	ldr	r3, [pc, #284]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b08:	f003 0320 	and.w	r3, r3, #32
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b10:	4b43      	ldr	r3, [pc, #268]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b16:	4a42      	ldr	r2, [pc, #264]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b20:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b34:	4a3a      	ldr	r2, [pc, #232]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b3e:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4c:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b52:	4a33      	ldr	r2, [pc, #204]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b70:	4a2b      	ldr	r2, [pc, #172]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <MX_GPIO_Init+0x180>)
 8000b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2114      	movs	r1, #20
 8000b8c:	4825      	ldr	r0, [pc, #148]	; (8000c24 <MX_GPIO_Init+0x184>)
 8000b8e:	f002 fd0d 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000b98:	4823      	ldr	r0, [pc, #140]	; (8000c28 <MX_GPIO_Init+0x188>)
 8000b9a:	f002 fd07 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4822      	ldr	r0, [pc, #136]	; (8000c2c <MX_GPIO_Init+0x18c>)
 8000ba4:	f002 fd02 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000ba8:	2314      	movs	r3, #20
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4819      	ldr	r0, [pc, #100]	; (8000c24 <MX_GPIO_Init+0x184>)
 8000bc0:	f002 fba2 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000bc4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4812      	ldr	r0, [pc, #72]	; (8000c28 <MX_GPIO_Init+0x188>)
 8000bde:	f002 fb93 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_GPIO_Init+0x18c>)
 8000bfa:	f002 fb85 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_GPIO_Init+0x190>)
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_GPIO_Init+0x18c>)
 8000c12:	f002 fb79 	bl	8003308 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c16:	bf00      	nop
 8000c18:	3730      	adds	r7, #48	; 0x30
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	44020c00 	.word	0x44020c00
 8000c24:	42021000 	.word	0x42021000
 8000c28:	42021400 	.word	0x42021400
 8000c2c:	42021800 	.word	0x42021800
 8000c30:	10110000 	.word	0x10110000

08000c34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM14)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a23      	ldr	r2, [pc, #140]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d140      	bne.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		x = 1;
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
		if(cnt14 < 10000000)
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	da05      	bge.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x2e>
			cnt14 ++;
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	e002      	b.n	8000c68 <HAL_TIM_PeriodElapsedCallback+0x34>
		else
			cnt14 = 0;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]

		if(!Stepper_Empty(&Stepper1))
 8000c68:	481d      	ldr	r0, [pc, #116]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c6a:	f000 f9a8 	bl	8000fbe <Stepper_Empty>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f083 0301 	eor.w	r3, r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d026      	beq.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x94>
		{
			x = 2;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	601a      	str	r2, [r3, #0]
			if(Stepper1.time >= Stepper_Current_Interval(&Stepper1))
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c82:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 8000c86:	4816      	ldr	r0, [pc, #88]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c88:	f000 f9d4 	bl	8001034 <Stepper_Current_Interval>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	429c      	cmp	r4, r3
 8000c90:	d310      	bcc.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x80>
			{
				x = 3;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c94:	2203      	movs	r2, #3
 8000c96:	601a      	str	r2, [r3, #0]
				checkpoint = 10-checkpoint;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f1c3 030a 	rsb	r3, r3, #10
 8000ca0:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ca2:	6013      	str	r3, [r2, #0]
				Stepper_Go_One_Step(&Stepper1);
 8000ca4:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ca6:	f000 f9df 	bl	8001068 <Stepper_Go_One_Step>
				Stepper1.time = 0;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
				Stepper1.time += 100;
			}
		}
	}

}
 8000cb2:	e009      	b.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x94>
				x = 4;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	601a      	str	r2, [r3, #0]
				Stepper1.time += 100;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cbc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000cc0:	3364      	adds	r3, #100	; 0x64
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cc4:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	40002000 	.word	0x40002000
 8000cd4:	20000648 	.word	0x20000648
 8000cd8:	20000644 	.word	0x20000644
 8000cdc:	00989680 	.word	0x00989680
 8000ce0:	2000064c 	.word	0x2000064c
 8000ce4:	20000640 	.word	0x20000640

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	x = 100;
 8000cec:	4b02      	ldr	r3, [pc, #8]	; (8000cf8 <Error_Handler+0x10>)
 8000cee:	2264      	movs	r2, #100	; 0x64
 8000cf0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf2:	b672      	cpsid	i
}
 8000cf4:	bf00      	nop
  __disable_irq();
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <Error_Handler+0xe>
 8000cf8:	20000648 	.word	0x20000648

08000cfc <Stepper_Init>:
#include "stepper_motor.h"
#include <stdbool.h>

void Stepper_Init(Stepper_Motor* motor, GPIO_TypeDef* step_port, uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin,
					GPIO_TypeDef* *ms_port, uint16_t *ms_pin, Microstep step_reso)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	80fb      	strh	r3, [r7, #6]
	motor->STEP_PORT = step_port;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	601a      	str	r2, [r3, #0]
	motor->STEP_PIN = step_pin;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	88fa      	ldrh	r2, [r7, #6]
 8000d16:	809a      	strh	r2, [r3, #4]
	motor->DIR_PORT = dir_port;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	609a      	str	r2, [r3, #8]
	motor->DIR_PIN = dir_pin;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	8c3a      	ldrh	r2, [r7, #32]
 8000d22:	819a      	strh	r2, [r3, #12]
	for(int i=0; i<3; i++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e018      	b.n	8000d5c <Stepper_Init+0x60>
	{
		motor->MS_PORT[i] = ms_port[i];
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d30:	4413      	add	r3, r2
 8000d32:	6819      	ldr	r1, [r3, #0]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	3204      	adds	r2, #4
 8000d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		motor->MS_PIN[i] = ms_pin[i];
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d44:	4413      	add	r3, r2
 8000d46:	8819      	ldrh	r1, [r3, #0]
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	330c      	adds	r3, #12
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	460a      	mov	r2, r1
 8000d54:	809a      	strh	r2, [r3, #4]
	for(int i=0; i<3; i++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	dde3      	ble.n	8000d2a <Stepper_Init+0x2e>
	}
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, RESET);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	889b      	ldrh	r3, [r3, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f002 fc1d 	bl	80035ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, SET);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6898      	ldr	r0, [r3, #8]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	899b      	ldrh	r3, [r3, #12]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f002 fc15 	bl	80035ac <HAL_GPIO_WritePin>

	Stepper_Set_StepReso(motor, step_reso);
 8000d82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d86:	4619      	mov	r1, r3
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 f813 	bl	8000db4 <Stepper_Set_StepReso>

	motor->index_shift = 0;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	motor->size = 0;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
	motor->time = 1000000; //1 second
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <Stepper_Init+0xb4>)
 8000da2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	//motor->status = 0;
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	000f4240 	.word	0x000f4240

08000db4 <Stepper_Set_StepReso>:

void Stepper_Set_StepReso(Stepper_Motor *motor, Microstep step_reso)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]
	switch(step_reso)
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	f200 808b 	bhi.w	8000ede <Stepper_Set_StepReso+0x12a>
 8000dc8:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <Stepper_Set_StepReso+0x1c>)
 8000dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dce:	bf00      	nop
 8000dd0:	08000de5 	.word	0x08000de5
 8000dd4:	08000e17 	.word	0x08000e17
 8000dd8:	08000e49 	.word	0x08000e49
 8000ddc:	08000e7b 	.word	0x08000e7b
 8000de0:	08000ead 	.word	0x08000ead
		{
			case FULL:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6918      	ldr	r0, [r3, #16]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	8b9b      	ldrh	r3, [r3, #28]
 8000dec:	2200      	movs	r2, #0
 8000dee:	4619      	mov	r1, r3
 8000df0:	f002 fbdc 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6958      	ldr	r0, [r3, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	8bdb      	ldrh	r3, [r3, #30]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f002 fbd4 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6998      	ldr	r0, [r3, #24]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	8c1b      	ldrh	r3, [r3, #32]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f002 fbcc 	bl	80035ac <HAL_GPIO_WritePin>
				break;
 8000e14:	e07c      	b.n	8000f10 <Stepper_Set_StepReso+0x15c>
			case HALF:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6918      	ldr	r0, [r3, #16]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	8b9b      	ldrh	r3, [r3, #28]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4619      	mov	r1, r3
 8000e22:	f002 fbc3 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6958      	ldr	r0, [r3, #20]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	8bdb      	ldrh	r3, [r3, #30]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4619      	mov	r1, r3
 8000e32:	f002 fbbb 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6998      	ldr	r0, [r3, #24]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	8c1b      	ldrh	r3, [r3, #32]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4619      	mov	r1, r3
 8000e42:	f002 fbb3 	bl	80035ac <HAL_GPIO_WritePin>
				break;
 8000e46:	e063      	b.n	8000f10 <Stepper_Set_StepReso+0x15c>
			case QUARTER:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6918      	ldr	r0, [r3, #16]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	8b9b      	ldrh	r3, [r3, #28]
 8000e50:	2200      	movs	r2, #0
 8000e52:	4619      	mov	r1, r3
 8000e54:	f002 fbaa 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6958      	ldr	r0, [r3, #20]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	8bdb      	ldrh	r3, [r3, #30]
 8000e60:	2201      	movs	r2, #1
 8000e62:	4619      	mov	r1, r3
 8000e64:	f002 fba2 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6998      	ldr	r0, [r3, #24]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	8c1b      	ldrh	r3, [r3, #32]
 8000e70:	2200      	movs	r2, #0
 8000e72:	4619      	mov	r1, r3
 8000e74:	f002 fb9a 	bl	80035ac <HAL_GPIO_WritePin>
				break;
 8000e78:	e04a      	b.n	8000f10 <Stepper_Set_StepReso+0x15c>
			case EIGHTH:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6918      	ldr	r0, [r3, #16]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	8b9b      	ldrh	r3, [r3, #28]
 8000e82:	2201      	movs	r2, #1
 8000e84:	4619      	mov	r1, r3
 8000e86:	f002 fb91 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6958      	ldr	r0, [r3, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	8bdb      	ldrh	r3, [r3, #30]
 8000e92:	2201      	movs	r2, #1
 8000e94:	4619      	mov	r1, r3
 8000e96:	f002 fb89 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6998      	ldr	r0, [r3, #24]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	8c1b      	ldrh	r3, [r3, #32]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f002 fb81 	bl	80035ac <HAL_GPIO_WritePin>
				break;
 8000eaa:	e031      	b.n	8000f10 <Stepper_Set_StepReso+0x15c>
			case SIXTEENTH:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6918      	ldr	r0, [r3, #16]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	8b9b      	ldrh	r3, [r3, #28]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f002 fb78 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6958      	ldr	r0, [r3, #20]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	8bdb      	ldrh	r3, [r3, #30]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f002 fb70 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], SET);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6998      	ldr	r0, [r3, #24]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	8c1b      	ldrh	r3, [r3, #32]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f002 fb68 	bl	80035ac <HAL_GPIO_WritePin>
				break;
 8000edc:	e018      	b.n	8000f10 <Stepper_Set_StepReso+0x15c>
			default:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6918      	ldr	r0, [r3, #16]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	8b9b      	ldrh	r3, [r3, #28]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f002 fb5f 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6958      	ldr	r0, [r3, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	8bdb      	ldrh	r3, [r3, #30]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f002 fb57 	bl	80035ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6998      	ldr	r0, [r3, #24]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	8c1b      	ldrh	r3, [r3, #32]
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f002 fb4f 	bl	80035ac <HAL_GPIO_WritePin>
				break;
 8000f0e:	bf00      	nop
		}
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <Stepper_Add_Task>:

bool Stepper_Add_Task(Stepper_Motor* motor, Step_Task insert)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	e883 0006 	stmia.w	r3, {r1, r2}
	if(motor->size >= QUEUE_SIZE)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8000f2c:	2b1f      	cmp	r3, #31
 8000f2e:	d901      	bls.n	8000f34 <Stepper_Add_Task+0x1c>
	{
		return false;
 8000f30:	2300      	movs	r3, #0
 8000f32:	e021      	b.n	8000f78 <Stepper_Add_Task+0x60>
	}
	motor->size++;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
	motor->Task_Queue[(motor->size -1 +motor->index_shift)%QUEUE_SIZE] = insert;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	f8b2 2124 	ldrh.w	r2, [r2, #292]	; 0x124
 8000f52:	4413      	add	r3, r2
 8000f54:	425a      	negs	r2, r3
 8000f56:	f003 031f 	and.w	r3, r3, #31
 8000f5a:	f002 021f 	and.w	r2, r2, #31
 8000f5e:	bf58      	it	pl
 8000f60:	4253      	negpl	r3, r2
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	3304      	adds	r3, #4
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4413      	add	r3, r2
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	1d3a      	adds	r2, r7, #4
 8000f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f72:	e883 0003 	stmia.w	r3, {r0, r1}
	return true;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <Stepper_Add_Steps>:

bool Stepper_Add_Steps(Stepper_Motor* motor, unsigned int steps)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	if(motor->size >= QUEUE_SIZE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8000f94:	2b1f      	cmp	r3, #31
 8000f96:	d901      	bls.n	8000f9c <Stepper_Add_Steps+0x18>
		return false;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e00c      	b.n	8000fb6 <Stepper_Add_Steps+0x32>
	Step_Task tmp = {steps, DEFAULT_INTERVAL};
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fa4:	60fb      	str	r3, [r7, #12]
	Stepper_Add_Task(motor, tmp);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffb2 	bl	8000f18 <Stepper_Add_Task>
	return true;
 8000fb4:	2301      	movs	r3, #1
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <Stepper_Empty>:

bool Stepper_Empty(Stepper_Motor* motor)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	return motor->size <= 0;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf0c      	ite	eq
 8000fd0:	2301      	moveq	r3, #1
 8000fd2:	2300      	movne	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <Stepper_Pop_Task>:
	}
	return motor->Task_Queue[motor->index_shift];
}

void Stepper_Pop_Task(Stepper_Motor* motor) //delete a task
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	if(motor->size <= 0)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d019      	beq.n	8001028 <Stepper_Pop_Task+0x46>
		return;
	motor->size --;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
	motor->index_shift ++;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 800100a:	3301      	adds	r3, #1
 800100c:	b29a      	uxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	motor->index_shift %= QUEUE_SIZE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	b29a      	uxth	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
 8001026:	e000      	b.n	800102a <Stepper_Pop_Task+0x48>
		return;
 8001028:	bf00      	nop
}
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <Stepper_Current_Interval>:

unsigned int Stepper_Current_Interval(Stepper_Motor* motor)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if(motor->size <= 0)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <Stepper_Current_Interval+0x16>
		return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e007      	b.n	800105a <Stepper_Current_Interval+0x26>
	return motor->Task_Queue[motor->index_shift].interval;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	3304      	adds	r3, #4
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	689b      	ldr	r3, [r3, #8]
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <Stepper_Go_One_Step>:

bool Stepper_Go_One_Step(Stepper_Motor* motor)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if(motor->size <= 0)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <Stepper_Go_One_Step+0x16>
		return false;
 800107a:	2300      	movs	r3, #0
 800107c:	e075      	b.n	800116a <Stepper_Go_One_Step+0x102>
	if(motor->Task_Queue[motor->index_shift].steps > 0)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	3304      	adds	r3, #4
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	dd16      	ble.n	80010c0 <Stepper_Go_One_Step+0x58>
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, SET);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6898      	ldr	r0, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	899b      	ldrh	r3, [r3, #12]
 800109a:	2201      	movs	r2, #1
 800109c:	4619      	mov	r1, r3
 800109e:	f002 fa85 	bl	80035ac <HAL_GPIO_WritePin>
		motor->Task_Queue[motor->index_shift].steps --;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80010a8:	461a      	mov	r2, r3
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	1d13      	adds	r3, r2, #4
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	1e59      	subs	r1, r3, #1
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	1d13      	adds	r3, r2, #4
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4403      	add	r3, r0
 80010be:	6059      	str	r1, [r3, #4]
	}
	if(motor->Task_Queue[motor->index_shift].steps < 0)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da16      	bge.n	8001102 <Stepper_Go_One_Step+0x9a>
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, RESET);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6898      	ldr	r0, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	899b      	ldrh	r3, [r3, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	f002 fa64 	bl	80035ac <HAL_GPIO_WritePin>
		motor->Task_Queue[motor->index_shift].steps ++;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80010ea:	461a      	mov	r2, r3
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	1d13      	adds	r3, r2, #4
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	1c59      	adds	r1, r3, #1
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	1d13      	adds	r3, r2, #4
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4403      	add	r3, r0
 8001100:	6059      	str	r1, [r3, #4]
	}
	unsigned short t = __HAL_TIM_GET_COUNTER(&htim14);
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <Stepper_Go_One_Step+0x10c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, SET);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	f002 fa49 	bl	80035ac <HAL_GPIO_WritePin>
	if(motor->Task_Queue[motor->index_shift].steps == 0)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	3304      	adds	r3, #4
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <Stepper_Go_One_Step+0xcc>
	{
		Stepper_Pop_Task(motor);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff57 	bl	8000fe2 <Stepper_Pop_Task>
	}
	while(__HAL_TIM_GET_COUNTER(&htim14)-t <= 1 || t+__HAL_TIM_GET_COUNTER(&htim14) <= __HAL_TIM_GET_AUTORELOAD(&htim14))
 8001134:	bf00      	nop
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <Stepper_Go_One_Step+0x10c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800113c:	89fb      	ldrh	r3, [r7, #14]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d9f8      	bls.n	8001136 <Stepper_Go_One_Step+0xce>
 8001144:	89fa      	ldrh	r2, [r7, #14]
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <Stepper_Go_One_Step+0x10c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	441a      	add	r2, r3
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <Stepper_Go_One_Step+0x10c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	429a      	cmp	r2, r3
 8001156:	d9ee      	bls.n	8001136 <Stepper_Go_One_Step+0xce>
	{}
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, RESET);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	889b      	ldrh	r3, [r3, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	f002 fa22 	bl	80035ac <HAL_GPIO_WritePin>

	return true;
 8001168:	2301      	movs	r3, #1
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200002ec 	.word	0x200002ec

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0cc      	sub	sp, #304	; 0x130
 800118c:	af00      	add	r7, sp, #0
 800118e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001196:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011b0:	4618      	mov	r0, r3
 80011b2:	f44f 7384 	mov.w	r3, #264	; 0x108
 80011b6:	461a      	mov	r2, r3
 80011b8:	2100      	movs	r1, #0
 80011ba:	f009 fe43 	bl	800ae44 <memset>
  if(hadc->Instance==ADC1)
 80011be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a30      	ldr	r2, [pc, #192]	; (800128c <HAL_ADC_MspInit+0x104>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d157      	bne.n	8001280 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80011d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011d4:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80011d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80011e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fa78 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001202:	f7ff fd71 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_ADC_MspInit+0x108>)
 8001208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800120c:	4a20      	ldr	r2, [pc, #128]	; (8001290 <HAL_ADC_MspInit+0x108>)
 800120e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001212:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_ADC_MspInit+0x108>)
 8001218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800121c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001224:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800122e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001232:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_ADC_MspInit+0x108>)
 8001236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <HAL_ADC_MspInit+0x108>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_ADC_MspInit+0x108>)
 8001246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800124a:	f003 0201 	and.w	r2, r3, #1
 800124e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001252:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800125c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001260:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001262:	2310      	movs	r3, #16
 8001264:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001274:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	; (8001294 <HAL_ADC_MspInit+0x10c>)
 800127c:	f002 f844 	bl	8003308 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	42028000 	.word	0x42028000
 8001290:	44020c00 	.word	0x44020c00
 8001294:	42020000 	.word	0x42020000

08001298 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a59      	ldr	r2, [pc, #356]	; (800141c <HAL_ETH_MspInit+0x184>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	f040 80ab 	bne.w	8001412 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012bc:	4b58      	ldr	r3, [pc, #352]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c2:	4a57      	ldr	r2, [pc, #348]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80012cc:	4b54      	ldr	r3, [pc, #336]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 80012da:	4b51      	ldr	r3, [pc, #324]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e0:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80012ea:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 80012f8:	4b49      	ldr	r3, [pc, #292]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a48      	ldr	r2, [pc, #288]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001308:	4b45      	ldr	r3, [pc, #276]	; (8001420 <HAL_ETH_MspInit+0x188>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800131c:	4a40      	ldr	r2, [pc, #256]	; (8001420 <HAL_ETH_MspInit+0x188>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001326:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800133a:	4a39      	ldr	r2, [pc, #228]	; (8001420 <HAL_ETH_MspInit+0x188>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001358:	4a31      	ldr	r2, [pc, #196]	; (8001420 <HAL_ETH_MspInit+0x188>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001376:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800138e:	2332      	movs	r3, #50	; 0x32
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139a:	2302      	movs	r3, #2
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139e:	230b      	movs	r3, #11
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	481e      	ldr	r0, [pc, #120]	; (8001424 <HAL_ETH_MspInit+0x18c>)
 80013aa:	f001 ffad 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013ae:	2386      	movs	r3, #134	; 0x86
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ba:	2302      	movs	r3, #2
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013be:	230b      	movs	r3, #11
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4817      	ldr	r0, [pc, #92]	; (8001428 <HAL_ETH_MspInit+0x190>)
 80013ca:	f001 ff9d 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013dc:	2302      	movs	r3, #2
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e0:	230b      	movs	r3, #11
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <HAL_ETH_MspInit+0x194>)
 80013ec:	f001 ff8c 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80013f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fe:	2302      	movs	r3, #2
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001402:	230b      	movs	r3, #11
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <HAL_ETH_MspInit+0x198>)
 800140e:	f001 ff7b 	bl	8003308 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3738      	adds	r7, #56	; 0x38
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40028000 	.word	0x40028000
 8001420:	44020c00 	.word	0x44020c00
 8001424:	42020800 	.word	0x42020800
 8001428:	42020000 	.word	0x42020000
 800142c:	42020400 	.word	0x42020400
 8001430:	42021800 	.word	0x42021800

08001434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0cc      	sub	sp, #304	; 0x130
 8001438:	af00      	add	r7, sp, #0
 800143a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800143e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001442:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001458:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800145c:	4618      	mov	r0, r3
 800145e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001462:	461a      	mov	r2, r3
 8001464:	2100      	movs	r1, #0
 8001466:	f009 fced 	bl	800ae44 <memset>
  if(huart->Instance==LPUART1)
 800146a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800146e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <HAL_UART_MspInit+0x110>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d15d      	bne.n	8001538 <HAL_UART_MspInit+0x104>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800147c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001480:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8001490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001494:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001498:	2200      	movs	r2, #0
 800149a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 f922 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 80014ae:	f7ff fc1b 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014b2:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_UART_MspInit+0x114>)
 80014b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014b8:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_UART_MspInit+0x114>)
 80014ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014be:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_UART_MspInit+0x114>)
 80014c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014c8:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80014cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014da:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014de:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_UART_MspInit+0x114>)
 80014e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_UART_MspInit+0x114>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_UART_MspInit+0x114>)
 80014f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014f6:	f003 0202 	and.w	r2, r3, #2
 80014fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001508:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800150c:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 800150e:	23c0      	movs	r3, #192	; 0xc0
 8001510:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001526:	2308      	movs	r3, #8
 8001528:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <HAL_UART_MspInit+0x118>)
 8001534:	f001 fee8 	bl	8003308 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	44002400 	.word	0x44002400
 8001548:	44020c00 	.word	0x44020c00
 800154c:	42020400 	.word	0x42020400

08001550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_TIM_Base_MspInit+0x48>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d116      	bne.n	8001590 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_TIM_Base_MspInit+0x4c>)
 8001564:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <HAL_TIM_Base_MspInit+0x4c>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_TIM_Base_MspInit+0x4c>)
 8001574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	207a      	movs	r0, #122	; 0x7a
 8001586:	f001 fa56 	bl	8002a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800158a:	207a      	movs	r0, #122	; 0x7a
 800158c:	f001 fa6d 	bl	8002a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40002000 	.word	0x40002000
 800159c:	44020c00 	.word	0x44020c00

080015a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0cc      	sub	sp, #304	; 0x130
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015ae:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015c8:	4618      	mov	r0, r3
 80015ca:	f44f 7384 	mov.w	r3, #264	; 0x108
 80015ce:	461a      	mov	r2, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	f009 fc37 	bl	800ae44 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80015d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a33      	ldr	r2, [pc, #204]	; (80016b0 <HAL_PCD_MspInit+0x110>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d15e      	bne.n	80016a6 <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015ec:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0310 	mov.w	r3, #16
 80015f8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80015fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001600:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001604:	2230      	movs	r2, #48	; 0x30
 8001606:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4618      	mov	r0, r3
 8001610:	f003 f86c 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 800161a:	f7ff fb65 	bl	8000ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_PCD_MspInit+0x114>)
 8001620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001624:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_PCD_MspInit+0x114>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_PCD_MspInit+0x114>)
 8001630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001634:	f003 0201 	and.w	r2, r3, #1
 8001638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800163c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001646:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800164a:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800164c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001650:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001666:	230a      	movs	r3, #10
 8001668:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001670:	4619      	mov	r1, r3
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <HAL_PCD_MspInit+0x118>)
 8001674:	f001 fe48 	bl	8003308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_PCD_MspInit+0x114>)
 800167a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800167e:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <HAL_PCD_MspInit+0x114>)
 8001680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001684:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_PCD_MspInit+0x114>)
 800168a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800168e:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8001692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001696:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80016a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016a4:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 80016a6:	bf00      	nop
 80016a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40016000 	.word	0x40016000
 80016b4:	44020c00 	.word	0x44020c00
 80016b8:	42020000 	.word	0x42020000

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f000 f90e 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM14_IRQHandler+0x10>)
 8001716:	f008 f941 	bl	800999c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200002ec 	.word	0x200002ec

08001724 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <SystemInit+0xdc>)
 800172c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001730:	4a33      	ldr	r2, [pc, #204]	; (8001800 <SystemInit+0xdc>)
 8001732:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001736:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <SystemInit+0xe0>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <SystemInit+0xe0>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001746:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <SystemInit+0xe0>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <SystemInit+0xe0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	492c      	ldr	r1, [pc, #176]	; (8001804 <SystemInit+0xe0>)
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <SystemInit+0xe4>)
 8001754:	4013      	ands	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <SystemInit+0xe0>)
 800175a:	2200      	movs	r2, #0
 800175c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <SystemInit+0xe0>)
 8001760:	2200      	movs	r2, #0
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <SystemInit+0xe0>)
 8001766:	2200      	movs	r2, #0
 8001768:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <SystemInit+0xe0>)
 800176c:	4a27      	ldr	r2, [pc, #156]	; (800180c <SystemInit+0xe8>)
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <SystemInit+0xe0>)
 8001772:	2200      	movs	r2, #0
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <SystemInit+0xe0>)
 8001778:	4a24      	ldr	r2, [pc, #144]	; (800180c <SystemInit+0xe8>)
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <SystemInit+0xe0>)
 800177e:	2200      	movs	r2, #0
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <SystemInit+0xe0>)
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <SystemInit+0xe8>)
 8001786:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <SystemInit+0xe0>)
 800178a:	2200      	movs	r2, #0
 800178c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <SystemInit+0xe0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <SystemInit+0xe0>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <SystemInit+0xe0>)
 800179c:	2200      	movs	r2, #0
 800179e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <SystemInit+0xdc>)
 80017a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <SystemInit+0xec>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80017b0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80017b8:	d003      	beq.n	80017c2 <SystemInit+0x9e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80017c0:	d117      	bne.n	80017f2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <SystemInit+0xec>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <SystemInit+0xec>)
 80017d0:	4a10      	ldr	r2, [pc, #64]	; (8001814 <SystemInit+0xf0>)
 80017d2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <SystemInit+0xec>)
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <SystemInit+0xf4>)
 80017d8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <SystemInit+0xec>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <SystemInit+0xec>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <SystemInit+0xec>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <SystemInit+0xec>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	61d3      	str	r3, [r2, #28]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00
 8001804:	44020c00 	.word	0x44020c00
 8001808:	eae2eae3 	.word	0xeae2eae3
 800180c:	01010280 	.word	0x01010280
 8001810:	40022000 	.word	0x40022000
 8001814:	08192a3b 	.word	0x08192a3b
 8001818:	4c5d6e7f 	.word	0x4c5d6e7f

0800181c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800181e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001820:	f7ff ff80 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <LoopForever+0x6>)
  ldr r1, =_edata
 8001826:	490d      	ldr	r1, [pc, #52]	; (800185c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <LoopForever+0xe>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800183c:	4c0a      	ldr	r4, [pc, #40]	; (8001868 <LoopForever+0x16>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800184a:	f009 fb03 	bl	800ae54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800184e:	f7fe fee5 	bl	800061c <main>

08001852 <LoopForever>:

LoopForever:
    b LoopForever
 8001852:	e7fe      	b.n	8001852 <LoopForever>
  ldr   r0, =_estack
 8001854:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001860:	0800af04 	.word	0x0800af04
  ldr r2, =_sbss
 8001864:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001868:	20000784 	.word	0x20000784

0800186c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC1_IRQHandler>
	...

08001870 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f001 f8d3 	bl	8002a20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800187a:	f002 fdad 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_Init+0x40>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	490a      	ldr	r1, [pc, #40]	; (80018b4 <HAL_Init+0x44>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_Init+0x48>)
 8001892:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001894:	200f      	movs	r0, #15
 8001896:	f000 f811 	bl	80018bc <HAL_InitTick>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e002      	b.n	80018aa <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018a4:	f7ff fc68 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	44020c00 	.word	0x44020c00
 80018b4:	0800aeb4 	.word	0x0800aeb4
 80018b8:	20000020 	.word	0x20000020

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_InitTick+0x60>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e021      	b.n	8001914 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_InitTick+0x64>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_InitTick+0x60>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 f8cd 	bl	8002a86 <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f001 f897 	bl	8002a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_InitTick+0x68>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000028 	.word	0x20000028
 8001920:	20000020 	.word	0x20000020
 8001924:	20000024 	.word	0x20000024

08001928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000028 	.word	0x20000028
 800194c:	20000780 	.word	0x20000780

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000780 	.word	0x20000780

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffde 	bl	8001950 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000028 	.word	0x20000028

080019b0 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80019ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80019be:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80019c2:	4905      	ldr	r1, [pc, #20]	; (80019d8 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	44000400 	.word	0x44000400

080019dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	609a      	str	r2, [r3, #8]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001a72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	42028000 	.word	0x42028000

08001a90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3360      	adds	r3, #96	; 0x60
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <LL_ADC_SetOffset+0x44>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ac8:	bf00      	nop
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	03fff000 	.word	0x03fff000

08001ad8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3360      	adds	r3, #96	; 0x60
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3360      	adds	r3, #96	; 0x60
 8001b14:	461a      	mov	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b2e:	bf00      	nop
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b087      	sub	sp, #28
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3360      	adds	r3, #96	; 0x60
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b64:	bf00      	nop
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3360      	adds	r3, #96	; 0x60
 8001b80:	461a      	mov	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b9a:	bf00      	nop
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	615a      	str	r2, [r3, #20]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3330      	adds	r3, #48	; 0x30
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	4413      	add	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	211f      	movs	r1, #31
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	401a      	ands	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	f003 011f 	and.w	r1, r3, #31
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	431a      	orrs	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3314      	adds	r3, #20
 8001c34:	461a      	mov	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	0e5b      	lsrs	r3, r3, #25
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	4413      	add	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	0d1b      	lsrs	r3, r3, #20
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2107      	movs	r1, #7
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	401a      	ands	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	0d1b      	lsrs	r3, r3, #20
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c6e:	bf00      	nop
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c94:	43db      	mvns	r3, r3
 8001c96:	401a      	ands	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0318 	and.w	r3, r3, #24
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ca0:	40d9      	lsrs	r1, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001caa:	431a      	orrs	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	000fffff 	.word	0x000fffff

08001cc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001cd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6093      	str	r3, [r2, #8]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cfc:	d101      	bne.n	8001d02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d4c:	d101      	bne.n	8001d52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <LL_ADC_IsEnabled+0x18>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <LL_ADC_IsEnabled+0x1a>
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d101      	bne.n	8001dc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e136      	b.n	800205c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff f9c3 	bl	8001188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff67 	bl	8001ce8 <LL_ADC_IsDeepPowerDownEnabled>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff4d 	bl	8001cc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff82 	bl	8001d38 <LL_ADC_IsInternalRegulatorEnabled>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d115      	bne.n	8001e66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff66 	bl	8001d10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e44:	4b87      	ldr	r3, [pc, #540]	; (8002064 <HAL_ADC_Init+0x290>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	4a87      	ldr	r2, [pc, #540]	; (8002068 <HAL_ADC_Init+0x294>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	3301      	adds	r3, #1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e58:	e002      	b.n	8001e60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f9      	bne.n	8001e5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff64 	bl	8001d38 <LL_ADC_IsInternalRegulatorEnabled>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10d      	bne.n	8001e92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f043 0210 	orr.w	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff75 	bl	8001d86 <LL_ADC_REG_IsConversionOngoing>
 8001e9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 80cf 	bne.w	800204a <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80cb 	bne.w	800204a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ebc:	f043 0202 	orr.w	r2, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff49 	bl	8001d60 <LL_ADC_IsEnabled>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d110      	bne.n	8001ef6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ed4:	4865      	ldr	r0, [pc, #404]	; (800206c <HAL_ADC_Init+0x298>)
 8001ed6:	f7ff ff43 	bl	8001d60 <LL_ADC_IsEnabled>
 8001eda:	4604      	mov	r4, r0
 8001edc:	4864      	ldr	r0, [pc, #400]	; (8002070 <HAL_ADC_Init+0x29c>)
 8001ede:	f7ff ff3f 	bl	8001d60 <LL_ADC_IsEnabled>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4323      	orrs	r3, r4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4860      	ldr	r0, [pc, #384]	; (8002074 <HAL_ADC_Init+0x2a0>)
 8001ef2:	f7ff fd73 	bl	80019dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7e5b      	ldrb	r3, [r3, #25]
 8001efa:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f00:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f06:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f0c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	045b      	lsls	r3, r3, #17
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b48      	ldr	r3, [pc, #288]	; (8002078 <HAL_ADC_Init+0x2a4>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	69b9      	ldr	r1, [r7, #24]
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff15 	bl	8001dac <LL_ADC_INJ_IsConversionOngoing>
 8001f82:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d13d      	bne.n	8002006 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d13a      	bne.n	8002006 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e1b      	ldrb	r3, [r3, #24]
 8001f94:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f9c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fac:	f023 0302 	bic.w	r3, r3, #2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	69b9      	ldr	r1, [r7, #24]
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d118      	bne.n	8001ff6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fce:	f023 0304 	bic.w	r3, r3, #4
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fda:	4311      	orrs	r1, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fe0:	4311      	orrs	r1, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	e007      	b.n	8002006 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10c      	bne.n	8002028 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f023 010f 	bic.w	r1, r3, #15
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
 8002026:	e007      	b.n	8002038 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 020f 	bic.w	r2, r2, #15
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f023 0303 	bic.w	r3, r3, #3
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	; 0x58
 8002048:	e007      	b.n	800205a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	f043 0210 	orr.w	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800205a:	7ffb      	ldrb	r3, [r7, #31]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3724      	adds	r7, #36	; 0x24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd90      	pop	{r4, r7, pc}
 8002064:	20000020 	.word	0x20000020
 8002068:	053e2d63 	.word	0x053e2d63
 800206c:	42028000 	.word	0x42028000
 8002070:	42028100 	.word	0x42028100
 8002074:	42028300 	.word	0x42028300
 8002078:	fff04007 	.word	0xfff04007

0800207c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0b6      	sub	sp, #216	; 0xd8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x22>
 800209a:	2302      	movs	r3, #2
 800209c:	e3d8      	b.n	8002850 <HAL_ADC_ConfigChannel+0x7d4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fe6b 	bl	8001d86 <LL_ADC_REG_IsConversionOngoing>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 83bd 	bne.w	8002832 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d104      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fccf 	bl	8001a68 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6859      	ldr	r1, [r3, #4]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f7ff fd78 	bl	8001bcc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fe50 	bl	8001d86 <LL_ADC_REG_IsConversionOngoing>
 80020e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fe5c 	bl	8001dac <LL_ADC_INJ_IsConversionOngoing>
 80020f4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f040 81d9 	bne.w	80024b4 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 81d4 	bne.w	80024b4 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002114:	d10f      	bne.n	8002136 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	4619      	mov	r1, r3
 8002122:	f7ff fd7f 	bl	8001c24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fd39 	bl	8001ba6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002134:	e00e      	b.n	8002154 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	461a      	mov	r2, r3
 8002144:	f7ff fd6e 	bl	8001c24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fd29 	bl	8001ba6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	08db      	lsrs	r3, r3, #3
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b04      	cmp	r3, #4
 8002174:	d022      	beq.n	80021bc <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6919      	ldr	r1, [r3, #16]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002186:	f7ff fc83 	bl	8001a90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	461a      	mov	r2, r3
 8002198:	f7ff fccf 	bl	8001b3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d102      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x136>
 80021ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b0:	e000      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x138>
 80021b2:	2300      	movs	r3, #0
 80021b4:	461a      	mov	r2, r3
 80021b6:	f7ff fcdb 	bl	8001b70 <LL_ADC_SetOffsetSaturation>
 80021ba:	e17b      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fc88 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x16c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fc7d 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	e01e      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1aa>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fc72 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8002206:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800220a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800220e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8002216:	2320      	movs	r3, #32
 8002218:	e004      	b.n	8002224 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800221a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_ADC_ConfigChannel+0x1c2>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	e018      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1f4>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002256:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800225a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e004      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8002266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fc41 	bl	8001b04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fc25 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x232>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fc1a 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	e01e      	b.n	80022ec <HAL_ADC_ConfigChannel+0x270>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2101      	movs	r1, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fc0f 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e004      	b.n	80022ea <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 80022e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x288>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	e018      	b.n	8002336 <HAL_ADC_ConfigChannel+0x2ba>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002318:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800231c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8002328:	2320      	movs	r3, #32
 800232a:	e004      	b.n	8002336 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 800232c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002336:	429a      	cmp	r2, r3
 8002338:	d106      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2200      	movs	r2, #0
 8002340:	2101      	movs	r1, #1
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fbde 	bl	8001b04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2102      	movs	r1, #2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fbc2 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x2f8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2102      	movs	r1, #2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fbb7 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	f003 021f 	and.w	r2, r3, #31
 8002372:	e01e      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x336>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2102      	movs	r1, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fbac 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800239a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80023a2:	2320      	movs	r3, #32
 80023a4:	e004      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80023a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x34e>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	e016      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x37c>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e004      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 80023ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2200      	movs	r2, #0
 8002402:	2102      	movs	r1, #2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fb7d 	bl	8001b04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2103      	movs	r1, #3
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fb61 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x3ba>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2103      	movs	r1, #3
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fb56 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	0e9b      	lsrs	r3, r3, #26
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	e017      	b.n	8002466 <HAL_ADC_ConfigChannel+0x3ea>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2103      	movs	r1, #3
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fb4b 	bl	8001ad8 <LL_ADC_GetOffsetChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800244e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002450:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e003      	b.n	8002464 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 800245c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <HAL_ADC_ConfigChannel+0x402>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	e011      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x426>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800248c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800248e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e003      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 800249a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d106      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	2103      	movs	r1, #3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fb28 	bl	8001b04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fc51 	bl	8001d60 <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f040 813f 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f7ff fbd2 	bl	8001c7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a8e      	ldr	r2, [pc, #568]	; (8002718 <HAL_ADC_ConfigChannel+0x69c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	f040 8130 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <HAL_ADC_ConfigChannel+0x490>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0e9b      	lsrs	r3, r3, #26
 80024fa:	3301      	adds	r3, #1
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2b09      	cmp	r3, #9
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e019      	b.n	8002540 <HAL_ADC_ConfigChannel+0x4c4>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800251a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800251c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800251e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e003      	b.n	8002530 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2b09      	cmp	r3, #9
 8002538:	bf94      	ite	ls
 800253a:	2301      	movls	r3, #1
 800253c:	2300      	movhi	r3, #0
 800253e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002540:	2b00      	cmp	r3, #0
 8002542:	d079      	beq.n	8002638 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x4e4>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	069b      	lsls	r3, r3, #26
 800255a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255e:	e015      	b.n	800258c <HAL_ADC_ConfigChannel+0x510>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800256e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002570:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002578:	2320      	movs	r3, #32
 800257a:	e003      	b.n	8002584 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 800257c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	069b      	lsls	r3, r3, #26
 8002588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x530>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	3301      	adds	r3, #1
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	e017      	b.n	80025dc <HAL_ADC_ConfigChannel+0x560>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 80025c4:	2320      	movs	r3, #32
 80025c6:	e003      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 80025c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2101      	movs	r1, #1
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	ea42 0103 	orr.w	r1, r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x586>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	3301      	adds	r3, #1
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	051b      	lsls	r3, r3, #20
 8002600:	e018      	b.n	8002634 <HAL_ADC_ConfigChannel+0x5b8>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 800261a:	2320      	movs	r3, #32
 800261c:	e003      	b.n	8002626 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 800261e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002634:	430b      	orrs	r3, r1
 8002636:	e080      	b.n	800273a <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x5d8>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	3301      	adds	r3, #1
 800264c:	069b      	lsls	r3, r3, #26
 800264e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002652:	e015      	b.n	8002680 <HAL_ADC_ConfigChannel+0x604>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 800266c:	2320      	movs	r3, #32
 800266e:	e003      	b.n	8002678 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	3301      	adds	r3, #1
 800267a:	069b      	lsls	r3, r3, #26
 800267c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x624>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	3301      	adds	r3, #1
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	e017      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x654>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	61fb      	str	r3, [r7, #28]
  return result;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 80026b8:	2320      	movs	r3, #32
 80026ba:	e003      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	ea42 0103 	orr.w	r1, r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x680>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0e9b      	lsrs	r3, r3, #26
 80026e6:	3301      	adds	r3, #1
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	3b1e      	subs	r3, #30
 80026f4:	051b      	lsls	r3, r3, #20
 80026f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026fa:	e01d      	b.n	8002738 <HAL_ADC_ConfigChannel+0x6bc>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	613b      	str	r3, [r7, #16]
  return result;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e005      	b.n	8002724 <HAL_ADC_ConfigChannel+0x6a8>
 8002718:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f003 021f 	and.w	r2, r3, #31
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	3b1e      	subs	r3, #30
 8002732:	051b      	lsls	r3, r3, #20
 8002734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002738:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273e:	4619      	mov	r1, r3
 8002740:	f7ff fa70 	bl	8001c24 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_ADC_ConfigChannel+0x7dc>)
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d079      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002750:	4842      	ldr	r0, [pc, #264]	; (800285c <HAL_ADC_ConfigChannel+0x7e0>)
 8002752:	f7ff f969 	bl	8001a28 <LL_ADC_GetCommonPathInternalCh>
 8002756:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a40      	ldr	r2, [pc, #256]	; (8002860 <HAL_ADC_ConfigChannel+0x7e4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d124      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11e      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a3b      	ldr	r2, [pc, #236]	; (8002864 <HAL_ADC_ConfigChannel+0x7e8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d164      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800277a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800277e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002782:	4619      	mov	r1, r3
 8002784:	4835      	ldr	r0, [pc, #212]	; (800285c <HAL_ADC_ConfigChannel+0x7e0>)
 8002786:	f7ff f93c 	bl	8001a02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_ADC_ConfigChannel+0x7ec>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	099b      	lsrs	r3, r3, #6
 8002790:	4a36      	ldr	r2, [pc, #216]	; (800286c <HAL_ADC_ConfigChannel+0x7f0>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	3301      	adds	r3, #1
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800279e:	e002      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f9      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ac:	e04a      	b.n	8002844 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2f      	ldr	r2, [pc, #188]	; (8002870 <HAL_ADC_ConfigChannel+0x7f4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d113      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10d      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2a      	ldr	r2, [pc, #168]	; (8002874 <HAL_ADC_ConfigChannel+0x7f8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d13a      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	4619      	mov	r1, r3
 80027d8:	4820      	ldr	r0, [pc, #128]	; (800285c <HAL_ADC_ConfigChannel+0x7e0>)
 80027da:	f7ff f912 	bl	8001a02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027de:	e031      	b.n	8002844 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a24      	ldr	r2, [pc, #144]	; (8002878 <HAL_ADC_ConfigChannel+0x7fc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d113      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <HAL_ADC_ConfigChannel+0x7e8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d121      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002808:	4619      	mov	r1, r3
 800280a:	4814      	ldr	r0, [pc, #80]	; (800285c <HAL_ADC_ConfigChannel+0x7e0>)
 800280c:	f7ff f8f9 	bl	8001a02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002810:	e018      	b.n	8002844 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_ADC_ConfigChannel+0x800>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d113      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a10      	ldr	r2, [pc, #64]	; (8002864 <HAL_ADC_ConfigChannel+0x7e8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00e      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f90a 	bl	8001a44 <LL_ADC_EnableChannelVDDcore>
 8002830:	e008      	b.n	8002844 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800284c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002850:	4618      	mov	r0, r3
 8002852:	37d8      	adds	r7, #216	; 0xd8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	80080000 	.word	0x80080000
 800285c:	42028300 	.word	0x42028300
 8002860:	c3210000 	.word	0xc3210000
 8002864:	42028000 	.word	0x42028000
 8002868:	20000020 	.word	0x20000020
 800286c:	053e2d63 	.word	0x053e2d63
 8002870:	43290000 	.word	0x43290000
 8002874:	42028100 	.word	0x42028100
 8002878:	c7520000 	.word	0xc7520000
 800287c:	475a0000 	.word	0x475a0000

08002880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800289c:	4013      	ands	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	f003 0307 	and.w	r3, r3, #7
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	db0b      	blt.n	800290e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	f003 021f 	and.w	r2, r3, #31
 80028fc:	4907      	ldr	r1, [pc, #28]	; (800291c <__NVIC_EnableIRQ+0x38>)
 80028fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2001      	movs	r0, #1
 8002906:	fa00 f202 	lsl.w	r2, r0, r2
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000e100 	.word	0xe000e100

08002920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800292c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002930:	2b00      	cmp	r3, #0
 8002932:	db0a      	blt.n	800294a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	490c      	ldr	r1, [pc, #48]	; (800296c <__NVIC_SetPriority+0x4c>)
 800293a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	440b      	add	r3, r1
 8002944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002948:	e00a      	b.n	8002960 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4908      	ldr	r1, [pc, #32]	; (8002970 <__NVIC_SetPriority+0x50>)
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	3b04      	subs	r3, #4
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	440b      	add	r3, r1
 800295e:	761a      	strb	r2, [r3, #24]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000e100 	.word	0xe000e100
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f1c3 0307 	rsb	r3, r3, #7
 800298e:	2b04      	cmp	r3, #4
 8002990:	bf28      	it	cs
 8002992:	2304      	movcs	r3, #4
 8002994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3304      	adds	r3, #4
 800299a:	2b06      	cmp	r3, #6
 800299c:	d902      	bls.n	80029a4 <NVIC_EncodePriority+0x30>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3b03      	subs	r3, #3
 80029a2:	e000      	b.n	80029a6 <NVIC_EncodePriority+0x32>
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	401a      	ands	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029bc:	f04f 31ff 	mov.w	r1, #4294967295
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43d9      	mvns	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	4313      	orrs	r3, r2
         );
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3724      	adds	r7, #36	; 0x24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ec:	d301      	bcc.n	80029f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00f      	b.n	8002a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <SysTick_Config+0x40>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fa:	210f      	movs	r1, #15
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	f7ff ff8e 	bl	8002920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <SysTick_Config+0x40>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a0a:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <SysTick_Config+0x40>)
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	e000e010 	.word	0xe000e010

08002a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff29 	bl	8002880 <__NVIC_SetPriorityGrouping>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a44:	f7ff ff40 	bl	80028c8 <__NVIC_GetPriorityGrouping>
 8002a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	6978      	ldr	r0, [r7, #20]
 8002a50:	f7ff ff90 	bl	8002974 <NVIC_EncodePriority>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff5f 	bl	8002920 <__NVIC_SetPriority>
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff33 	bl	80028e4 <__NVIC_EnableIRQ>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ffa4 	bl	80029dc <SysTick_Config>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0d2      	b.n	8002c58 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2223      	movs	r2, #35	; 0x23
 8002ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7fe fbe7 	bl	8001298 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8002aca:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_ETH_Init+0x1c0>)
 8002acc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ad0:	4a63      	ldr	r2, [pc, #396]	; (8002c60 <HAL_ETH_Init+0x1c0>)
 8002ad2:	f043 0302 	orr.w	r3, r3, #2
 8002ad6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002ada:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <HAL_ETH_Init+0x1c0>)
 8002adc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7a1b      	ldrb	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d103      	bne.n	8002af8 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fe ff5d 	bl	80019b0 <HAL_SBS_ETHInterfaceSelect>
 8002af6:	e003      	b.n	8002b00 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8002af8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002afc:	f7fe ff58 	bl	80019b0 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8002b00:	4b58      	ldr	r3, [pc, #352]	; (8002c64 <HAL_ETH_Init+0x1c4>)
 8002b02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b1e:	f7fe ff17 	bl	8001950 <HAL_GetTick>
 8002b22:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b24:	e011      	b.n	8002b4a <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b26:	f7fe ff13 	bl	8001950 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b34:	d909      	bls.n	8002b4a <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	22e0      	movs	r2, #224	; 0xe0
 8002b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e086      	b.n	8002c58 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e4      	bne.n	8002b26 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f885 	bl	8002c6c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b62:	f001 fd65 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4a3f      	ldr	r2, [pc, #252]	; (8002c68 <HAL_ETH_Init+0x1c8>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0c9a      	lsrs	r2, r3, #18
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3a01      	subs	r2, #1
 8002b76:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fa80 	bl	8003080 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002b8c:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b9c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	22e0      	movs	r2, #224	; 0xe0
 8002bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e04b      	b.n	8002c58 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bcc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bd0:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6952      	ldr	r2, [r2, #20]
 8002bd8:	0051      	lsls	r1, r2, #1
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	430b      	orrs	r3, r1
 8002be0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002be4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fae6 	bl	80031ba <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fb2c 	bl	800324c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	3305      	adds	r3, #5
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	021a      	lsls	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	3303      	adds	r3, #3
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	061a      	lsls	r2, r3, #24
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	3302      	adds	r3, #2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c32:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c40:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c42:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2210      	movs	r2, #16
 8002c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	44020c00 	.word	0x44020c00
 8002c64:	44000400 	.word	0x44000400
 8002c68:	431bde83 	.word	0x431bde83

08002c6c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c86:	f001 fcd3 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 8002c8a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4a25      	ldr	r2, [pc, #148]	; (8002d24 <HAL_ETH_SetMDIOClockRange+0xb8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d908      	bls.n	8002ca6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4a24      	ldr	r2, [pc, #144]	; (8002d28 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d804      	bhi.n	8002ca6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e034      	b.n	8002d10 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d908      	bls.n	8002cc0 <HAL_ETH_SetMDIOClockRange+0x54>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d204      	bcs.n	8002cc0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e027      	b.n	8002d10 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d303      	bcc.n	8002cd0 <HAL_ETH_SetMDIOClockRange+0x64>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4a19      	ldr	r2, [pc, #100]	; (8002d30 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d91e      	bls.n	8002d0e <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d908      	bls.n	8002cea <HAL_ETH_SetMDIOClockRange+0x7e>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d804      	bhi.n	8002cea <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e012      	b.n	8002d10 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d908      	bls.n	8002d04 <HAL_ETH_SetMDIOClockRange+0x98>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d804      	bhi.n	8002d04 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e005      	b.n	8002d10 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e000      	b.n	8002d10 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002d0e:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	01312cff 	.word	0x01312cff
 8002d28:	02160ebf 	.word	0x02160ebf
 8002d2c:	03938700 	.word	0x03938700
 8002d30:	05f5e0ff 	.word	0x05f5e0ff
 8002d34:	08f0d17f 	.word	0x08f0d17f
 8002d38:	0ee6b280 	.word	0x0ee6b280

08002d3c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002d4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	791b      	ldrb	r3, [r3, #4]
 8002d54:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002d56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	7b1b      	ldrb	r3, [r3, #12]
 8002d5c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002d5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	7b5b      	ldrb	r3, [r3, #13]
 8002d64:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	7b9b      	ldrb	r3, [r3, #14]
 8002d6c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	7bdb      	ldrb	r3, [r3, #15]
 8002d74:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	7c12      	ldrb	r2, [r2, #16]
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d102      	bne.n	8002d86 <ETH_SetMACConfig+0x4a>
 8002d80:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d84:	e000      	b.n	8002d88 <ETH_SetMACConfig+0x4c>
 8002d86:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	7c52      	ldrb	r2, [r2, #17]
 8002d8e:	2a00      	cmp	r2, #0
 8002d90:	d102      	bne.n	8002d98 <ETH_SetMACConfig+0x5c>
 8002d92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d96:	e000      	b.n	8002d9a <ETH_SetMACConfig+0x5e>
 8002d98:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	7c9b      	ldrb	r3, [r3, #18]
 8002da0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002da2:	431a      	orrs	r2, r3
               macconf->Speed |
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002da8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002dae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	7f1b      	ldrb	r3, [r3, #28]
 8002db4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002db6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	7f5b      	ldrb	r3, [r3, #29]
 8002dbc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002dbe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	7f92      	ldrb	r2, [r2, #30]
 8002dc4:	2a00      	cmp	r2, #0
 8002dc6:	d102      	bne.n	8002dce <ETH_SetMACConfig+0x92>
 8002dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dcc:	e000      	b.n	8002dd0 <ETH_SetMACConfig+0x94>
 8002dce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002dd0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	7fdb      	ldrb	r3, [r3, #31]
 8002dd6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002dd8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002de0:	2a00      	cmp	r2, #0
 8002de2:	d102      	bne.n	8002dea <ETH_SetMACConfig+0xae>
 8002de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002de8:	e000      	b.n	8002dec <ETH_SetMACConfig+0xb0>
 8002dea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002dec:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002df2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dfa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002dfc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <ETH_SetMACConfig+0x230>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	68f9      	ldr	r1, [r7, #12]
 8002e16:	430b      	orrs	r3, r1
 8002e18:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e26:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e28:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e30:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002e32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e3a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002e3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d102      	bne.n	8002e4e <ETH_SetMACConfig+0x112>
 8002e48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e4c:	e000      	b.n	8002e50 <ETH_SetMACConfig+0x114>
 8002e4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002e50:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4b43      	ldr	r3, [pc, #268]	; (8002f70 <ETH_SetMACConfig+0x234>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	68f9      	ldr	r1, [r7, #12]
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e74:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	68f9      	ldr	r1, [r7, #12]
 8002e92:	430b      	orrs	r3, r1
 8002e94:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e9c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ea2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	d101      	bne.n	8002eb2 <ETH_SetMACConfig+0x176>
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	e000      	b.n	8002eb4 <ETH_SetMACConfig+0x178>
 8002eb2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002eb4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eba:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ec6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002eca:	4013      	ands	r3, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	68f9      	ldr	r1, [r7, #12]
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002edc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002ee4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	f023 0103 	bic.w	r1, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002f0a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	d101      	bne.n	8002f2e <ETH_SetMACConfig+0x1f2>
 8002f2a:	2240      	movs	r2, #64	; 0x40
 8002f2c:	e000      	b.n	8002f30 <ETH_SetMACConfig+0x1f4>
 8002f2e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002f30:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002f38:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002f42:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002f50:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	00048083 	.word	0x00048083
 8002f70:	c0f88000 	.word	0xc0f88000

08002f74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002f8c:	f023 0302 	bic.w	r3, r3, #2
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	6811      	ldr	r1, [r2, #0]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f9e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	791b      	ldrb	r3, [r3, #4]
 8002fa4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002faa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	7b1b      	ldrb	r3, [r3, #12]
 8002fb0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fd4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	7b5b      	ldrb	r3, [r3, #13]
 8002fda:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <ETH_SetDMAConfig+0x104>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003000:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	7d1b      	ldrb	r3, [r3, #20]
 800300c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800300e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	7f5b      	ldrb	r3, [r3, #29]
 8003014:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003022:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <ETH_SetDMAConfig+0x108>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	68f9      	ldr	r1, [r7, #12]
 8003030:	430b      	orrs	r3, r1
 8003032:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003036:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	7f1b      	ldrb	r3, [r3, #28]
 800303e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003050:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003058:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	430b      	orrs	r3, r1
 8003064:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003068:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	fffec000 	.word	0xfffec000
 800307c:	ffc0efef 	.word	0xffc0efef

08003080 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b0a4      	sub	sp, #144	; 0x90
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800308e:	2300      	movs	r3, #0
 8003090:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80030bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030c0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80030d8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80030dc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80030e4:	2300      	movs	r3, #0
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80030fa:	2300      	movs	r3, #0
 80030fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003102:	2300      	movs	r3, #0
 8003104:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800310c:	2300      	movs	r3, #0
 800310e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003118:	2320      	movs	r3, #32
 800311a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800312a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003130:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003134:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800313c:	2302      	movs	r3, #2
 800313e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800315a:	2300      	movs	r3, #0
 800315c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff fde6 	bl	8002d3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003170:	2301      	movs	r3, #1
 8003172:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003174:	2301      	movs	r3, #1
 8003176:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800318a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800318e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003194:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003198:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80031a0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031a6:	f107 0308 	add.w	r3, r7, #8
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fee1 	bl	8002f74 <ETH_SetDMAConfig>
}
 80031b2:	bf00      	nop
 80031b4:	3790      	adds	r7, #144	; 0x90
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e01d      	b.n	8003204 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68d9      	ldr	r1, [r3, #12]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4613      	mov	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	3206      	adds	r2, #6
 80031fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3301      	adds	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d9de      	bls.n	80031c8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003218:	461a      	mov	r2, r3
 800321a:	2303      	movs	r3, #3
 800321c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e023      	b.n	80032a2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6919      	ldr	r1, [r3, #16]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2200      	movs	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2200      	movs	r2, #0
 800328e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	3212      	adds	r2, #18
 8003298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3301      	adds	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d9d8      	bls.n	800325a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ce:	461a      	mov	r2, r3
 80032d0:	2303      	movs	r3, #3
 80032d2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003316:	e136      	b.n	8003586 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	2101      	movs	r1, #1
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	4013      	ands	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8128 	beq.w	8003580 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x38>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b12      	cmp	r3, #18
 800333e:	d125      	bne.n	800338c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	08da      	lsrs	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3208      	adds	r2, #8
 8003348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800334c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	220f      	movs	r2, #15
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4013      	ands	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f003 020f 	and.w	r2, r3, #15
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	08da      	lsrs	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3208      	adds	r2, #8
 8003386:	6979      	ldr	r1, [r7, #20]
 8003388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4013      	ands	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0203 	and.w	r2, r3, #3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d00b      	beq.n	80033e0 <HAL_GPIO_Init+0xd8>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d007      	beq.n	80033e0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d4:	2b11      	cmp	r3, #17
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b12      	cmp	r3, #18
 80033de:	d130      	bne.n	8003442 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4013      	ands	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003416:	2201      	movs	r2, #1
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4013      	ands	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0201 	and.w	r2, r3, #1
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d017      	beq.n	800347a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4013      	ands	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d07c      	beq.n	8003580 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003486:	4a47      	ldr	r2, [pc, #284]	; (80035a4 <HAL_GPIO_Init+0x29c>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3318      	adds	r3, #24
 800348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003492:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4013      	ands	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0a9a      	lsrs	r2, r3, #10
 80034ae:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <HAL_GPIO_Init+0x2a0>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	f002 0203 	and.w	r2, r2, #3
 80034b8:	00d2      	lsls	r2, r2, #3
 80034ba:	4093      	lsls	r3, r2
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80034c2:	4938      	ldr	r1, [pc, #224]	; (80035a4 <HAL_GPIO_Init+0x29c>)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3318      	adds	r3, #24
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80034d0:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_GPIO_Init+0x29c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4013      	ands	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80034f4:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <HAL_GPIO_Init+0x29c>)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80034fa:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <HAL_GPIO_Init+0x29c>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43db      	mvns	r3, r3
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4013      	ands	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800351e:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <HAL_GPIO_Init+0x29c>)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003524:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <HAL_GPIO_Init+0x29c>)
 8003526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800352a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	43db      	mvns	r3, r3
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4013      	ands	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800354a:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <HAL_GPIO_Init+0x29c>)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <HAL_GPIO_Init+0x29c>)
 8003554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003558:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43db      	mvns	r3, r3
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4013      	ands	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003578:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_GPIO_Init+0x29c>)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	3301      	adds	r3, #1
 8003584:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	f47f aec1 	bne.w	8003318 <HAL_GPIO_Init+0x10>
  }
}
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	44022000 	.word	0x44022000
 80035a8:	002f7f7f 	.word	0x002f7f7f

080035ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
 80035b8:	4613      	mov	r3, r2
 80035ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035bc:	787b      	ldrb	r3, [r7, #1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035c8:	e002      	b.n	80035d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ca:	887a      	ldrh	r2, [r7, #2]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_ICACHE_Enable+0x1c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <HAL_ICACHE_Enable+0x1c>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	40030400 	.word	0x40030400

080035fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fe:	b08f      	sub	sp, #60	; 0x3c
 8003600:	af0a      	add	r7, sp, #40	; 0x28
 8003602:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0cd      	b.n	80037aa <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd ffbc 	bl	80015a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2203      	movs	r2, #3
 800362c:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f007 fbaa 	bl	800ad8e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	e03e      	b.n	80036be <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	333d      	adds	r3, #61	; 0x3d
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	333c      	adds	r3, #60	; 0x3c
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	333f      	adds	r3, #63	; 0x3f
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	440b      	add	r3, r1
 800368a:	334c      	adds	r3, #76	; 0x4c
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	3350      	adds	r3, #80	; 0x50
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	440b      	add	r3, r1
 80036b2:	3354      	adds	r3, #84	; 0x54
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	3301      	adds	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d3bb      	bcc.n	8003640 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	e044      	b.n	8003758 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	f203 137d 	addw	r3, r3, #381	; 0x17d
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	440b      	add	r3, r1
 80036f2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036fa:	7bfa      	ldrb	r2, [r7, #15]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	f203 137f 	addw	r3, r3, #383	; 0x17f
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	440b      	add	r3, r1
 800371e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	440b      	add	r3, r1
 800374a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	3301      	adds	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	429a      	cmp	r2, r3
 8003760:	d3b5      	bcc.n	80036ce <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	687e      	ldr	r6, [r7, #4]
 800376a:	466d      	mov	r5, sp
 800376c:	f106 0410 	add.w	r4, r6, #16
 8003770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003778:	e894 0003 	ldmia.w	r4, {r0, r1}
 800377c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003780:	1d33      	adds	r3, r6, #4
 8003782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003784:	6838      	ldr	r0, [r7, #0]
 8003786:	f007 fb3a 	bl	800adfe <USB_DevInit>

  hpcd->USB_Address = 0U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d102      	bne.n	80037a8 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f805 	bl	80037b2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f043 0202 	orr.w	r2, r3, #2
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f000 bc28 	b.w	800405c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380c:	4b94      	ldr	r3, [pc, #592]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f003 0318 	and.w	r3, r3, #24
 8003814:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003816:	4b92      	ldr	r3, [pc, #584]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d05b      	beq.n	80038e4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	2b08      	cmp	r3, #8
 8003830:	d005      	beq.n	800383e <HAL_RCC_OscConfig+0x46>
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2b18      	cmp	r3, #24
 8003836:	d114      	bne.n	8003862 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d111      	bne.n	8003862 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f000 bc08 	b.w	800405c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800384c:	4b84      	ldr	r3, [pc, #528]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	041b      	lsls	r3, r3, #16
 800385a:	4981      	ldr	r1, [pc, #516]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 800385c:	4313      	orrs	r3, r2
 800385e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003860:	e040      	b.n	80038e4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d023      	beq.n	80038b2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800386a:	4b7d      	ldr	r3, [pc, #500]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a7c      	ldr	r2, [pc, #496]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe f86b 	bl	8001950 <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800387e:	f7fe f867 	bl	8001950 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e3e5      	b.n	800405c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003890:	4b73      	ldr	r3, [pc, #460]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800389c:	4b70      	ldr	r3, [pc, #448]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	041b      	lsls	r3, r3, #16
 80038aa:	496d      	ldr	r1, [pc, #436]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	618b      	str	r3, [r1, #24]
 80038b0:	e018      	b.n	80038e4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80038b2:	4b6b      	ldr	r3, [pc, #428]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6a      	ldr	r2, [pc, #424]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80038b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fe f847 	bl	8001950 <HAL_GetTick>
 80038c2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80038c6:	f7fe f843 	bl	8001950 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e3c1      	b.n	800405c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80038d8:	4b61      	ldr	r3, [pc, #388]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a0 	beq.w	8003a32 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_OscConfig+0x10c>
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b18      	cmp	r3, #24
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f040 8092 	bne.w	8003a32 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e3a4      	b.n	800405c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x132>
 800391c:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a4f      	ldr	r2, [pc, #316]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e058      	b.n	80039dc <HAL_RCC_OscConfig+0x1e4>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d112      	bne.n	8003958 <HAL_RCC_OscConfig+0x160>
 8003932:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a4a      	ldr	r2, [pc, #296]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b48      	ldr	r3, [pc, #288]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a47      	ldr	r2, [pc, #284]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003944:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b45      	ldr	r3, [pc, #276]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a44      	ldr	r2, [pc, #272]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e041      	b.n	80039dc <HAL_RCC_OscConfig+0x1e4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003960:	d112      	bne.n	8003988 <HAL_RCC_OscConfig+0x190>
 8003962:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a3e      	ldr	r2, [pc, #248]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b3c      	ldr	r3, [pc, #240]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3b      	ldr	r2, [pc, #236]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003974:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e029      	b.n	80039dc <HAL_RCC_OscConfig+0x1e4>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003990:	d112      	bne.n	80039b8 <HAL_RCC_OscConfig+0x1c0>
 8003992:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a32      	ldr	r2, [pc, #200]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2f      	ldr	r2, [pc, #188]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80039a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2c      	ldr	r2, [pc, #176]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e011      	b.n	80039dc <HAL_RCC_OscConfig+0x1e4>
 80039b8:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80039be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a25      	ldr	r2, [pc, #148]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80039ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 80039d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd ffb4 	bl	8001950 <HAL_GetTick>
 80039e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80039ec:	f7fd ffb0 	bl	8001950 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e32e      	b.n	800405c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fe:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x1f4>
 8003a0a:	e012      	b.n	8003a32 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fd ffa0 	bl	8001950 <HAL_GetTick>
 8003a10:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003a14:	f7fd ff9c 	bl	8001950 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e31a      	b.n	800405c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a26:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <HAL_RCC_OscConfig+0x268>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 809a 	beq.w	8003b74 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_OscConfig+0x25a>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b18      	cmp	r3, #24
 8003a4a:	d149      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d146      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e2fe      	b.n	800405c <HAL_RCC_OscConfig+0x864>
 8003a5e:	bf00      	nop
 8003a60:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003a6a:	4b9a      	ldr	r3, [pc, #616]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0218 	and.w	r2, r3, #24
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d014      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003a7a:	4b96      	ldr	r3, [pc, #600]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 0218 	bic.w	r2, r3, #24
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	4993      	ldr	r1, [pc, #588]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003a8c:	f000 fdd0 	bl	8004630 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a90:	4b91      	ldr	r3, [pc, #580]	; (8003cd8 <HAL_RCC_OscConfig+0x4e0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fd ff11 	bl	80018bc <HAL_InitTick>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e2db      	b.n	800405c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fd ff54 	bl	8001950 <HAL_GetTick>
 8003aa8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003aac:	f7fd ff50 	bl	8001950 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e2ce      	b.n	800405c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003abe:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003aca:	4b82      	ldr	r3, [pc, #520]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	041b      	lsls	r3, r3, #16
 8003ad8:	497e      	ldr	r1, [pc, #504]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003ade:	e049      	b.n	8003b74 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02c      	beq.n	8003b42 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003ae8:	4b7a      	ldr	r3, [pc, #488]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 0218 	bic.w	r2, r3, #24
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	4977      	ldr	r1, [pc, #476]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003afa:	4b76      	ldr	r3, [pc, #472]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a75      	ldr	r2, [pc, #468]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fd ff23 	bl	8001950 <HAL_GetTick>
 8003b0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003b0e:	f7fd ff1f 	bl	8001950 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e29d      	b.n	800405c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b20:	4b6c      	ldr	r3, [pc, #432]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003b2c:	4b69      	ldr	r3, [pc, #420]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	4966      	ldr	r1, [pc, #408]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	610b      	str	r3, [r1, #16]
 8003b40:	e018      	b.n	8003b74 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b42:	4b64      	ldr	r3, [pc, #400]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a63      	ldr	r2, [pc, #396]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fd feff 	bl	8001950 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003b56:	f7fd fefb 	bl	8001950 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e279      	b.n	800405c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b68:	4b5a      	ldr	r3, [pc, #360]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d03c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01c      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b88:	4b52      	ldr	r3, [pc, #328]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b8e:	4a51      	ldr	r2, [pc, #324]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003b90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd feda 	bl	8001950 <HAL_GetTick>
 8003b9c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003ba0:	f7fd fed6 	bl	8001950 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e254      	b.n	800405c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003bb2:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ef      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x3a8>
 8003bc0:	e01b      	b.n	8003bfa <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc2:	4b44      	ldr	r3, [pc, #272]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bc8:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003bca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fd febd 	bl	8001950 <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003bda:	f7fd feb9 	bl	8001950 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e237      	b.n	800405c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bec:	4b39      	ldr	r3, [pc, #228]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ef      	bne.n	8003bda <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80d2 	beq.w	8003dac <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <HAL_RCC_OscConfig+0x4e4>)
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d118      	bne.n	8003c46 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003c14:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <HAL_RCC_OscConfig+0x4e4>)
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	4a30      	ldr	r2, [pc, #192]	; (8003cdc <HAL_RCC_OscConfig+0x4e4>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c20:	f7fd fe96 	bl	8001950 <HAL_GetTick>
 8003c24:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c28:	f7fd fe92 	bl	8001950 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e210      	b.n	800405c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003c3a:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <HAL_RCC_OscConfig+0x4e4>)
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_OscConfig+0x468>
 8003c4e:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c54:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c5e:	e074      	b.n	8003d4a <HAL_RCC_OscConfig+0x552>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d118      	bne.n	8003c9a <HAL_RCC_OscConfig+0x4a2>
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c6e:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c78:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c7e:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c8e:	4a11      	ldr	r2, [pc, #68]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c98:	e057      	b.n	8003d4a <HAL_RCC_OscConfig+0x552>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b05      	cmp	r3, #5
 8003ca0:	d11e      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x4e8>
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ca8:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003caa:	f043 0304 	orr.w	r3, r3, #4
 8003cae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cb8:	4a06      	ldr	r2, [pc, #24]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003cc2:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cc8:	4a02      	ldr	r2, [pc, #8]	; (8003cd4 <HAL_RCC_OscConfig+0x4dc>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003cd2:	e03a      	b.n	8003d4a <HAL_RCC_OscConfig+0x552>
 8003cd4:	44020c00 	.word	0x44020c00
 8003cd8:	20000024 	.word	0x20000024
 8003cdc:	44020800 	.word	0x44020800
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b85      	cmp	r3, #133	; 0x85
 8003ce6:	d118      	bne.n	8003d1a <HAL_RCC_OscConfig+0x522>
 8003ce8:	4ba2      	ldr	r3, [pc, #648]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cee:	4aa1      	ldr	r2, [pc, #644]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003cf0:	f043 0304 	orr.w	r3, r3, #4
 8003cf4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003cf8:	4b9e      	ldr	r3, [pc, #632]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cfe:	4a9d      	ldr	r2, [pc, #628]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d08:	4b9a      	ldr	r3, [pc, #616]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d0e:	4a99      	ldr	r2, [pc, #612]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d18:	e017      	b.n	8003d4a <HAL_RCC_OscConfig+0x552>
 8003d1a:	4b96      	ldr	r3, [pc, #600]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d20:	4a94      	ldr	r2, [pc, #592]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d2a:	4b92      	ldr	r3, [pc, #584]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d30:	4a90      	ldr	r2, [pc, #576]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003d32:	f023 0304 	bic.w	r3, r3, #4
 8003d36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d3a:	4b8e      	ldr	r3, [pc, #568]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d40:	4a8c      	ldr	r2, [pc, #560]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d016      	beq.n	8003d80 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fd fdfd 	bl	8001950 <HAL_GetTick>
 8003d56:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fd fdf9 	bl	8001950 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e175      	b.n	800405c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d70:	4b80      	ldr	r3, [pc, #512]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ed      	beq.n	8003d5a <HAL_RCC_OscConfig+0x562>
 8003d7e:	e015      	b.n	8003dac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd fde6 	bl	8001950 <HAL_GetTick>
 8003d84:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fd fde2 	bl	8001950 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e15e      	b.n	800405c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d9e:	4b75      	ldr	r3, [pc, #468]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ed      	bne.n	8003d88 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d036      	beq.n	8003e26 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d019      	beq.n	8003df4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dc0:	4b6c      	ldr	r3, [pc, #432]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a6b      	ldr	r2, [pc, #428]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003dc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fd fdc0 	bl	8001950 <HAL_GetTick>
 8003dd0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003dd4:	f7fd fdbc 	bl	8001950 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e13a      	b.n	800405c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003de6:	4b63      	ldr	r3, [pc, #396]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x5dc>
 8003df2:	e018      	b.n	8003e26 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003df4:	4b5f      	ldr	r3, [pc, #380]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5e      	ldr	r2, [pc, #376]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e00:	f7fd fda6 	bl	8001950 <HAL_GetTick>
 8003e04:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003e08:	f7fd fda2 	bl	8001950 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e120      	b.n	800405c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e1a:	4b56      	ldr	r3, [pc, #344]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8115 	beq.w	800405a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b18      	cmp	r3, #24
 8003e34:	f000 80af 	beq.w	8003f96 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	f040 8086 	bne.w	8003f4e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003e42:	4b4c      	ldr	r3, [pc, #304]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a4b      	ldr	r2, [pc, #300]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fd7f 	bl	8001950 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003e56:	f7fd fd7b 	bl	8001950 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0f9      	b.n	800405c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e68:	4b42      	ldr	r3, [pc, #264]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003e74:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e7c:	f023 0303 	bic.w	r3, r3, #3
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e88:	0212      	lsls	r2, r2, #8
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	4939      	ldr	r1, [pc, #228]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	628b      	str	r3, [r1, #40]	; 0x28
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	3b01      	subs	r3, #1
 8003e98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	025b      	lsls	r3, r3, #9
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	3b01      	subs	r3, #1
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ec2:	492c      	ldr	r1, [pc, #176]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003ec8:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003ece:	f023 0310 	bic.w	r3, r3, #16
 8003ed2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed8:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003ede:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	4a24      	ldr	r2, [pc, #144]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003ee4:	f043 0310 	orr.w	r3, r3, #16
 8003ee8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	f023 020c 	bic.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	491f      	ldr	r1, [pc, #124]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	f023 0220 	bic.w	r2, r3, #32
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f08:	491a      	ldr	r1, [pc, #104]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f0e:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f18:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003f1a:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fd fd13 	bl	8001950 <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003f2e:	f7fd fd0f 	bl	8001950 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e08d      	b.n	800405c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x736>
 8003f4c:	e085      	b.n	800405a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <HAL_RCC_OscConfig+0x77c>)
 8003f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fd fcf9 	bl	8001950 <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003f62:	f7fd fcf5 	bl	8001950 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d903      	bls.n	8003f78 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e073      	b.n	800405c <HAL_RCC_OscConfig+0x864>
 8003f74:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f78:	4b3a      	ldr	r3, [pc, #232]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ee      	bne.n	8003f62 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003f84:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	4a36      	ldr	r2, [pc, #216]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 8003f8a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003f8e:	f023 0303 	bic.w	r3, r3, #3
 8003f92:	6293      	str	r3, [r2, #40]	; 0x28
 8003f94:	e061      	b.n	800405a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003f96:	4b33      	ldr	r3, [pc, #204]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f9c:	4b31      	ldr	r3, [pc, #196]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d031      	beq.n	800400e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0203 	and.w	r2, r3, #3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d12a      	bne.n	800400e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d122      	bne.n	800400e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d11a      	bne.n	800400e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	0a5b      	lsrs	r3, r3, #9
 8003fdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d111      	bne.n	800400e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d108      	bne.n	800400e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	0e1b      	lsrs	r3, r3, #24
 8004000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e024      	b.n	800405c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004012:	4b14      	ldr	r3, [pc, #80]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	08db      	lsrs	r3, r3, #3
 8004018:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004020:	429a      	cmp	r2, r3
 8004022:	d01a      	beq.n	800405a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 800402a:	f023 0310 	bic.w	r3, r3, #16
 800402e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd fc8e 	bl	8001950 <HAL_GetTick>
 8004034:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004036:	bf00      	nop
 8004038:	f7fd fc8a 	bl	8001950 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	4293      	cmp	r3, r2
 8004042:	d0f9      	beq.n	8004038 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004048:	4a06      	ldr	r2, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	4a04      	ldr	r2, [pc, #16]	; (8004064 <HAL_RCC_OscConfig+0x86c>)
 8004054:	f043 0310 	orr.w	r3, r3, #16
 8004058:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	44020c00 	.word	0x44020c00

08004068 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e19e      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b83      	ldr	r3, [pc, #524]	; (800428c <HAL_RCC_ClockConfig+0x224>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d910      	bls.n	80040ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b80      	ldr	r3, [pc, #512]	; (800428c <HAL_RCC_ClockConfig+0x224>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 020f 	bic.w	r2, r3, #15
 8004092:	497e      	ldr	r1, [pc, #504]	; (800428c <HAL_RCC_ClockConfig+0x224>)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b7c      	ldr	r3, [pc, #496]	; (800428c <HAL_RCC_ClockConfig+0x224>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e186      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d012      	beq.n	80040de <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	4b74      	ldr	r3, [pc, #464]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d909      	bls.n	80040de <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80040ca:	4b71      	ldr	r3, [pc, #452]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	496d      	ldr	r1, [pc, #436]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d012      	beq.n	8004110 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	4b68      	ldr	r3, [pc, #416]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d909      	bls.n	8004110 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80040fc:	4b64      	ldr	r3, [pc, #400]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	4961      	ldr	r1, [pc, #388]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 800410c:	4313      	orrs	r3, r2
 800410e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d010      	beq.n	800413e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	4b5b      	ldr	r3, [pc, #364]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004128:	429a      	cmp	r2, r3
 800412a:	d908      	bls.n	800413e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800412c:	4b58      	ldr	r3, [pc, #352]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4955      	ldr	r1, [pc, #340]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 800413a:	4313      	orrs	r3, r2
 800413c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d010      	beq.n	800416c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	4b50      	ldr	r3, [pc, #320]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	429a      	cmp	r2, r3
 8004158:	d908      	bls.n	800416c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800415a:	4b4d      	ldr	r3, [pc, #308]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 020f 	bic.w	r2, r3, #15
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	494a      	ldr	r1, [pc, #296]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 8004168:	4313      	orrs	r3, r2
 800416a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8093 	beq.w	80042a0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004182:	4b43      	ldr	r3, [pc, #268]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d121      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e113      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800419a:	4b3d      	ldr	r3, [pc, #244]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d115      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e107      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d107      	bne.n	80041c2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80041b2:	4b37      	ldr	r3, [pc, #220]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e0fb      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c2:	4b33      	ldr	r3, [pc, #204]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0f3      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80041d2:	4b2f      	ldr	r3, [pc, #188]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	492c      	ldr	r1, [pc, #176]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e4:	f7fd fbb4 	bl	8001950 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d112      	bne.n	8004218 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f2:	e00a      	b.n	800420a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80041f4:	f7fd fbac 	bl	8001950 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e0d7      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800420a:	4b21      	ldr	r3, [pc, #132]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f003 0318 	and.w	r3, r3, #24
 8004212:	2b18      	cmp	r3, #24
 8004214:	d1ee      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x18c>
 8004216:	e043      	b.n	80042a0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d112      	bne.n	8004246 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004220:	e00a      	b.n	8004238 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004222:	f7fd fb95 	bl	8001950 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0c0      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004238:	4b15      	ldr	r3, [pc, #84]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 0318 	and.w	r3, r3, #24
 8004240:	2b10      	cmp	r3, #16
 8004242:	d1ee      	bne.n	8004222 <HAL_RCC_ClockConfig+0x1ba>
 8004244:	e02c      	b.n	80042a0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d122      	bne.n	8004294 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800424e:	e00a      	b.n	8004266 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004250:	f7fd fb7e 	bl	8001950 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e0a9      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x228>)
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0318 	and.w	r3, r3, #24
 800426e:	2b08      	cmp	r3, #8
 8004270:	d1ee      	bne.n	8004250 <HAL_RCC_ClockConfig+0x1e8>
 8004272:	e015      	b.n	80042a0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004274:	f7fd fb6c 	bl	8001950 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d906      	bls.n	8004294 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e097      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
 800428a:	bf00      	nop
 800428c:	40022000 	.word	0x40022000
 8004290:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004294:	4b4b      	ldr	r3, [pc, #300]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f003 0318 	and.w	r3, r3, #24
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e9      	bne.n	8004274 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d010      	beq.n	80042ce <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d208      	bcs.n	80042ce <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80042bc:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f023 020f 	bic.w	r2, r3, #15
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	493e      	ldr	r1, [pc, #248]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ce:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <HAL_RCC_ClockConfig+0x360>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d210      	bcs.n	80042fe <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042dc:	4b3a      	ldr	r3, [pc, #232]	; (80043c8 <HAL_RCC_ClockConfig+0x360>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 020f 	bic.w	r2, r3, #15
 80042e4:	4938      	ldr	r1, [pc, #224]	; (80043c8 <HAL_RCC_ClockConfig+0x360>)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ec:	4b36      	ldr	r3, [pc, #216]	; (80043c8 <HAL_RCC_ClockConfig+0x360>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e05d      	b.n	80043ba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	d010      	beq.n	800432c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004316:	429a      	cmp	r2, r3
 8004318:	d208      	bcs.n	800432c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800431a:	4b2a      	ldr	r3, [pc, #168]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	4927      	ldr	r1, [pc, #156]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 8004328:	4313      	orrs	r3, r2
 800432a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d012      	beq.n	800435e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004346:	429a      	cmp	r2, r3
 8004348:	d209      	bcs.n	800435e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800434a:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	491a      	ldr	r1, [pc, #104]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	d012      	beq.n	8004390 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004378:	429a      	cmp	r2, r3
 800437a:	d209      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	490e      	ldr	r1, [pc, #56]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004390:	f000 f822 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_ClockConfig+0x35c>)
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	490b      	ldr	r1, [pc, #44]	; (80043cc <HAL_RCC_ClockConfig+0x364>)
 80043a0:	5ccb      	ldrb	r3, [r1, r3]
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <HAL_RCC_ClockConfig+0x368>)
 80043a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <HAL_RCC_ClockConfig+0x36c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fd fa84 	bl	80018bc <HAL_InitTick>
 80043b4:	4603      	mov	r3, r0
 80043b6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80043b8:	7afb      	ldrb	r3, [r7, #11]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	44020c00 	.word	0x44020c00
 80043c8:	40022000 	.word	0x40022000
 80043cc:	0800aeb4 	.word	0x0800aeb4
 80043d0:	20000020 	.word	0x20000020
 80043d4:	20000024 	.word	0x20000024

080043d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80043de:	4b8c      	ldr	r3, [pc, #560]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f003 0318 	and.w	r3, r3, #24
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d102      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80043ea:	4b8a      	ldr	r3, [pc, #552]	; (8004614 <HAL_RCC_GetSysClockFreq+0x23c>)
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e107      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043f0:	4b87      	ldr	r3, [pc, #540]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f003 0318 	and.w	r3, r3, #24
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d112      	bne.n	8004422 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80043fc:	4b84      	ldr	r3, [pc, #528]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004408:	4b81      	ldr	r3, [pc, #516]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	08db      	lsrs	r3, r3, #3
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	4a81      	ldr	r2, [pc, #516]	; (8004618 <HAL_RCC_GetSysClockFreq+0x240>)
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e0f1      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800441c:	4b7e      	ldr	r3, [pc, #504]	; (8004618 <HAL_RCC_GetSysClockFreq+0x240>)
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	e0ee      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004422:	4b7b      	ldr	r3, [pc, #492]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f003 0318 	and.w	r3, r3, #24
 800442a:	2b10      	cmp	r3, #16
 800442c:	d102      	bne.n	8004434 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800442e:	4b7b      	ldr	r3, [pc, #492]	; (800461c <HAL_RCC_GetSysClockFreq+0x244>)
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	e0e5      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004434:	4b76      	ldr	r3, [pc, #472]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f003 0318 	and.w	r3, r3, #24
 800443c:	2b18      	cmp	r3, #24
 800443e:	f040 80dd 	bne.w	80045fc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004442:	4b73      	ldr	r3, [pc, #460]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800444c:	4b70      	ldr	r3, [pc, #448]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004456:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004458:	4b6d      	ldr	r3, [pc, #436]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004464:	4b6a      	ldr	r3, [pc, #424]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004468:	08db      	lsrs	r3, r3, #3
 800446a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 80b7 	beq.w	80045f6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d003      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0xbe>
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d056      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0x16a>
 8004494:	e077      	b.n	8004586 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004496:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d02d      	beq.n	80044fe <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044a2:	4b5b      	ldr	r3, [pc, #364]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	08db      	lsrs	r3, r3, #3
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	4a5a      	ldr	r2, [pc, #360]	; (8004618 <HAL_RCC_GetSysClockFreq+0x240>)
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	ee07 3a90 	vmov	s15, r3
 80044c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044cc:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 80044ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80044dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80044e0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004620 <HAL_RCC_GetSysClockFreq+0x248>
 80044e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80044ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80044fc:	e065      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	ee07 3a90 	vmov	s15, r3
 8004504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004508:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004624 <HAL_RCC_GetSysClockFreq+0x24c>
 800450c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004510:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004520:	ed97 6a02 	vldr	s12, [r7, #8]
 8004524:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004620 <HAL_RCC_GetSysClockFreq+0x248>
 8004528:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800452c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004534:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004540:	e043      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004628 <HAL_RCC_GetSysClockFreq+0x250>
 8004550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004554:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004564:	ed97 6a02 	vldr	s12, [r7, #8]
 8004568:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004620 <HAL_RCC_GetSysClockFreq+0x248>
 800456c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004570:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004578:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800457c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004580:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004584:	e021      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004590:	eddf 6a26 	vldr	s13, [pc, #152]	; 800462c <HAL_RCC_GetSysClockFreq+0x254>
 8004594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 800459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a0:	ee07 3a90 	vmov	s15, r3
 80045a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80045a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ac:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004620 <HAL_RCC_GetSysClockFreq+0x248>
 80045b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80045c8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <HAL_RCC_GetSysClockFreq+0x238>)
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	0a5b      	lsrs	r3, r3, #9
 80045d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d4:	3301      	adds	r3, #1
 80045d6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80045e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ee:	ee17 3a90 	vmov	r3, s15
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e004      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e001      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_RCC_GetSysClockFreq+0x240>)
 80045fe:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004600:	69fb      	ldr	r3, [r7, #28]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3724      	adds	r7, #36	; 0x24
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	44020c00 	.word	0x44020c00
 8004614:	003d0900 	.word	0x003d0900
 8004618:	03d09000 	.word	0x03d09000
 800461c:	007a1200 	.word	0x007a1200
 8004620:	46000000 	.word	0x46000000
 8004624:	4c742400 	.word	0x4c742400
 8004628:	4af42400 	.word	0x4af42400
 800462c:	4a742400 	.word	0x4a742400

08004630 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004634:	f7ff fed0 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004638:	4602      	mov	r2, r0
 800463a:	4b08      	ldr	r3, [pc, #32]	; (800465c <HAL_RCC_GetHCLKFreq+0x2c>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800463e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004642:	4907      	ldr	r1, [pc, #28]	; (8004660 <HAL_RCC_GetHCLKFreq+0x30>)
 8004644:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004646:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	4a05      	ldr	r2, [pc, #20]	; (8004664 <HAL_RCC_GetHCLKFreq+0x34>)
 8004650:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004652:	4b04      	ldr	r3, [pc, #16]	; (8004664 <HAL_RCC_GetHCLKFreq+0x34>)
 8004654:	681b      	ldr	r3, [r3, #0]
}
 8004656:	4618      	mov	r0, r3
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	44020c00 	.word	0x44020c00
 8004660:	0800aeb4 	.word	0x0800aeb4
 8004664:	20000020 	.word	0x20000020

08004668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800466c:	f7ff ffe0 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4904      	ldr	r1, [pc, #16]	; (8004690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	44020c00 	.word	0x44020c00
 8004690:	0800aec4 	.word	0x0800aec4

08004694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004698:	f7ff ffca 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	0a1b      	lsrs	r3, r3, #8
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4904      	ldr	r1, [pc, #16]	; (80046bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	44020c00 	.word	0x44020c00
 80046bc:	0800aec4 	.word	0x0800aec4

080046c0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80046c4:	f7ff ffb4 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	0b1b      	lsrs	r3, r3, #12
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4904      	ldr	r1, [pc, #16]	; (80046e8 <HAL_RCC_GetPCLK3Freq+0x28>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	44020c00 	.word	0x44020c00
 80046e8:	0800aec4 	.word	0x0800aec4

080046ec <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80046ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f0:	b0d8      	sub	sp, #352	; 0x160
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046fe:	2300      	movs	r3, #0
 8004700:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004704:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8004710:	2500      	movs	r5, #0
 8004712:	ea54 0305 	orrs.w	r3, r4, r5
 8004716:	d00b      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004718:	4bcd      	ldr	r3, [pc, #820]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800471a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800471e:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8004722:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	4ac9      	ldr	r2, [pc, #804]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800472a:	430b      	orrs	r3, r1
 800472c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004730:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f002 0801 	and.w	r8, r2, #1
 800473c:	f04f 0900 	mov.w	r9, #0
 8004740:	ea58 0309 	orrs.w	r3, r8, r9
 8004744:	d042      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004746:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	2b05      	cmp	r3, #5
 800474e:	d823      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	080047a1 	.word	0x080047a1
 800475c:	08004771 	.word	0x08004771
 8004760:	08004785 	.word	0x08004785
 8004764:	080047a1 	.word	0x080047a1
 8004768:	080047a1 	.word	0x080047a1
 800476c:	080047a1 	.word	0x080047a1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004770:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004774:	3308      	adds	r3, #8
 8004776:	4618      	mov	r0, r3
 8004778:	f004 feda 	bl	8009530 <RCCEx_PLL2_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004782:	e00e      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004784:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004788:	3330      	adds	r3, #48	; 0x30
 800478a:	4618      	mov	r0, r3
 800478c:	f004 ff68 	bl	8009660 <RCCEx_PLL3_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004796:	e004      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800479e:	e000      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80047a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80047aa:	4ba9      	ldr	r3, [pc, #676]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80047ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80047b0:	f023 0107 	bic.w	r1, r3, #7
 80047b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ba:	4aa5      	ldr	r2, [pc, #660]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80047bc:	430b      	orrs	r3, r1
 80047be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80047c2:	e003      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047c8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f002 0a02 	and.w	sl, r2, #2
 80047d8:	f04f 0b00 	mov.w	fp, #0
 80047dc:	ea5a 030b 	orrs.w	r3, sl, fp
 80047e0:	f000 8088 	beq.w	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80047e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ea:	2b28      	cmp	r3, #40	; 0x28
 80047ec:	d868      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80047ee:	a201      	add	r2, pc, #4	; (adr r2, 80047f4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80047f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f4:	080048c9 	.word	0x080048c9
 80047f8:	080048c1 	.word	0x080048c1
 80047fc:	080048c1 	.word	0x080048c1
 8004800:	080048c1 	.word	0x080048c1
 8004804:	080048c1 	.word	0x080048c1
 8004808:	080048c1 	.word	0x080048c1
 800480c:	080048c1 	.word	0x080048c1
 8004810:	080048c1 	.word	0x080048c1
 8004814:	08004899 	.word	0x08004899
 8004818:	080048c1 	.word	0x080048c1
 800481c:	080048c1 	.word	0x080048c1
 8004820:	080048c1 	.word	0x080048c1
 8004824:	080048c1 	.word	0x080048c1
 8004828:	080048c1 	.word	0x080048c1
 800482c:	080048c1 	.word	0x080048c1
 8004830:	080048c1 	.word	0x080048c1
 8004834:	080048ad 	.word	0x080048ad
 8004838:	080048c1 	.word	0x080048c1
 800483c:	080048c1 	.word	0x080048c1
 8004840:	080048c1 	.word	0x080048c1
 8004844:	080048c1 	.word	0x080048c1
 8004848:	080048c1 	.word	0x080048c1
 800484c:	080048c1 	.word	0x080048c1
 8004850:	080048c1 	.word	0x080048c1
 8004854:	080048c9 	.word	0x080048c9
 8004858:	080048c1 	.word	0x080048c1
 800485c:	080048c1 	.word	0x080048c1
 8004860:	080048c1 	.word	0x080048c1
 8004864:	080048c1 	.word	0x080048c1
 8004868:	080048c1 	.word	0x080048c1
 800486c:	080048c1 	.word	0x080048c1
 8004870:	080048c1 	.word	0x080048c1
 8004874:	080048c9 	.word	0x080048c9
 8004878:	080048c1 	.word	0x080048c1
 800487c:	080048c1 	.word	0x080048c1
 8004880:	080048c1 	.word	0x080048c1
 8004884:	080048c1 	.word	0x080048c1
 8004888:	080048c1 	.word	0x080048c1
 800488c:	080048c1 	.word	0x080048c1
 8004890:	080048c1 	.word	0x080048c1
 8004894:	080048c9 	.word	0x080048c9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004898:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800489c:	3308      	adds	r3, #8
 800489e:	4618      	mov	r0, r3
 80048a0:	f004 fe46 	bl	8009530 <RCCEx_PLL2_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80048aa:	e00e      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048b0:	3330      	adds	r3, #48	; 0x30
 80048b2:	4618      	mov	r0, r3
 80048b4:	f004 fed4 	bl	8009660 <RCCEx_PLL3_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80048be:	e004      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10c      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80048d2:	4b5f      	ldr	r3, [pc, #380]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80048d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048d8:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80048dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e2:	4a5b      	ldr	r2, [pc, #364]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80048ea:	e003      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f002 0304 	and.w	r3, r2, #4
 8004900:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800490a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800490e:	460b      	mov	r3, r1
 8004910:	4313      	orrs	r3, r2
 8004912:	d04e      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004914:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800491a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800491e:	d02c      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004920:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004924:	d825      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492a:	d028      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800492c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004930:	d81f      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004932:	2bc0      	cmp	r3, #192	; 0xc0
 8004934:	d025      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004936:	2bc0      	cmp	r3, #192	; 0xc0
 8004938:	d81b      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d00f      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800493e:	2b80      	cmp	r3, #128	; 0x80
 8004940:	d817      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01f      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d113      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800494a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800494e:	3308      	adds	r3, #8
 8004950:	4618      	mov	r0, r3
 8004952:	f004 fded 	bl	8009530 <RCCEx_PLL2_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800495c:	e014      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800495e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004962:	3330      	adds	r3, #48	; 0x30
 8004964:	4618      	mov	r0, r3
 8004966:	f004 fe7b 	bl	8009660 <RCCEx_PLL3_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004970:	e00a      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004978:	e006      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800497a:	bf00      	nop
 800497c:	e004      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800497e:	bf00      	nop
 8004980:	e002      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004982:	bf00      	nop
 8004984:	e000      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004988:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10c      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004990:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004992:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004996:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800499a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800499e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a0:	4a2b      	ldr	r2, [pc, #172]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049a2:	430b      	orrs	r3, r1
 80049a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80049a8:	e003      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	f002 0308 	and.w	r3, r2, #8
 80049be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80049c2:	2300      	movs	r3, #0
 80049c4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80049c8:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80049cc:	460b      	mov	r3, r1
 80049ce:	4313      	orrs	r3, r2
 80049d0:	d056      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80049d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80049dc:	d031      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80049de:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80049e2:	d82a      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80049e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e8:	d02d      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80049ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ee:	d824      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80049f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049f4:	d029      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80049f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049fa:	d81e      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d011      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a06:	d818      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d023      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a10:	d113      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a16:	3308      	adds	r3, #8
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f004 fd89 	bl	8009530 <RCCEx_PLL2_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004a24:	e017      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a2a:	3330      	adds	r3, #48	; 0x30
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f004 fe17 	bl	8009660 <RCCEx_PLL3_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004a38:	e00d      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a40:	e009      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004a42:	bf00      	nop
 8004a44:	e007      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004a46:	bf00      	nop
 8004a48:	e005      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004a4a:	bf00      	nop
 8004a4c:	e003      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004a4e:	bf00      	nop
 8004a50:	44020c00 	.word	0x44020c00
        break;
 8004a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004a5e:	4bbb      	ldr	r3, [pc, #748]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004a60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a64:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a6e:	4ab7      	ldr	r2, [pc, #732]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004a70:	430b      	orrs	r3, r1
 8004a72:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004a76:	e003      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a78:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a7c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f002 0310 	and.w	r3, r2, #16
 8004a8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004a96:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	d053      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004aaa:	d031      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004aac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004ab0:	d82a      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab6:	d02d      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004abc:	d824      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004abe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ac2:	d029      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004ac4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ac8:	d81e      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ace:	d011      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad4:	d818      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d020      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ade:	d113      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f004 fd22 	bl	8009530 <RCCEx_PLL2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004af2:	e014      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004af4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004af8:	3330      	adds	r3, #48	; 0x30
 8004afa:	4618      	mov	r0, r3
 8004afc:	f004 fdb0 	bl	8009660 <RCCEx_PLL3_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004b06:	e00a      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b0e:	e006      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004b10:	bf00      	nop
 8004b12:	e004      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004b14:	bf00      	nop
 8004b16:	e002      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004b26:	4b89      	ldr	r3, [pc, #548]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004b28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b2c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b36:	4a85      	ldr	r2, [pc, #532]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004b3e:	e003      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b44:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f002 0320 	and.w	r3, r2, #32
 8004b54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004b5e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	d053      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004b72:	d031      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004b74:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004b78:	d82a      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b7e:	d02d      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b84:	d824      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004b86:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004b8a:	d029      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004b8c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004b90:	d81e      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b96:	d011      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d818      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d020      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba6:	d113      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bac:	3308      	adds	r3, #8
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f004 fcbe 	bl	8009530 <RCCEx_PLL2_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004bba:	e014      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bc0:	3330      	adds	r3, #48	; 0x30
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f004 fd4c 	bl	8009660 <RCCEx_PLL3_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004bce:	e00a      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bd6:	e006      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004bd8:	bf00      	nop
 8004bda:	e004      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004bdc:	bf00      	nop
 8004bde:	e002      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004be0:	bf00      	nop
 8004be2:	e000      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004bee:	4b57      	ldr	r3, [pc, #348]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004bf4:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8004bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	4a53      	ldr	r2, [pc, #332]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004c00:	430b      	orrs	r3, r1
 8004c02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004c06:	e003      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c08:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c0c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004c1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c26:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	d053      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004c30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c36:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c3a:	d031      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004c3c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c40:	d82a      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c46:	d02d      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4c:	d824      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004c4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c52:	d029      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c58:	d81e      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004c5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c5e:	d011      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004c60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c64:	d818      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d020      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c6e:	d113      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c74:	3308      	adds	r3, #8
 8004c76:	4618      	mov	r0, r3
 8004c78:	f004 fc5a 	bl	8009530 <RCCEx_PLL2_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004c82:	e014      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c88:	3330      	adds	r3, #48	; 0x30
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f004 fce8 	bl	8009660 <RCCEx_PLL3_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004c96:	e00a      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c9e:	e006      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ca0:	bf00      	nop
 8004ca2:	e004      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ca4:	bf00      	nop
 8004ca6:	e002      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8004cb6:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004cb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cbc:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8004cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004cce:	e003      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cd4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004ce4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004cee:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	d055      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cfe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004d02:	d033      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004d04:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004d08:	d82c      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004d0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d0e:	d02f      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d14:	d826      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004d16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d1a:	d02b      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004d1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d20:	d820      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d26:	d013      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d2c:	d81a      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d022      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004d32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d36:	d115      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f004 fbf6 	bl	8009530 <RCCEx_PLL2_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004d4a:	e016      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004d4c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d54:	3330      	adds	r3, #48	; 0x30
 8004d56:	4618      	mov	r0, r3
 8004d58:	f004 fc82 	bl	8009660 <RCCEx_PLL3_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004d62:	e00a      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d6a:	e006      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004d6c:	bf00      	nop
 8004d6e:	e004      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004d70:	bf00      	nop
 8004d72:	e002      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004d74:	bf00      	nop
 8004d76:	e000      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10c      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8004d82:	4bbb      	ldr	r3, [pc, #748]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004d84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004d88:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004d8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d92:	4ab7      	ldr	r2, [pc, #732]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004d94:	430b      	orrs	r3, r1
 8004d96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004d9a:	e003      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004da0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004da4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004db0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004db4:	2300      	movs	r3, #0
 8004db6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004dba:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	d053      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004dce:	d031      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004dd0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004dd4:	d82a      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004dd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dda:	d02d      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de0:	d824      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004de2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004de6:	d029      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004de8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dec:	d81e      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004df2:	d011      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004df8:	d818      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d020      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e02:	d113      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e08:	3308      	adds	r3, #8
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f004 fb90 	bl	8009530 <RCCEx_PLL2_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004e16:	e014      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e1c:	3330      	adds	r3, #48	; 0x30
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f004 fc1e 	bl	8009660 <RCCEx_PLL3_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e32:	e006      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004e34:	bf00      	nop
 8004e36:	e004      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004e38:	bf00      	nop
 8004e3a:	e002      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004e3c:	bf00      	nop
 8004e3e:	e000      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004e4a:	4b89      	ldr	r3, [pc, #548]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e50:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e5a:	4a85      	ldr	r2, [pc, #532]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004e62:	e003      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004e78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e82:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004e86:	460b      	mov	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	d055      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e94:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004e98:	d031      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004e9a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004e9e:	d82a      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ea4:	d02d      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eaa:	d824      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004eac:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004eb0:	d029      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004eb2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004eb6:	d81e      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ebc:	d011      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec2:	d818      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d020      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004ec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ecc:	d113      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f004 fb2b 	bl	8009530 <RCCEx_PLL2_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004ee0:	e014      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ee6:	3330      	adds	r3, #48	; 0x30
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f004 fbb9 	bl	8009660 <RCCEx_PLL3_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004efc:	e006      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004efe:	bf00      	nop
 8004f00:	e004      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004f02:	bf00      	nop
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004f06:	bf00      	nop
 8004f08:	e000      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004f14:	4b56      	ldr	r3, [pc, #344]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f1a:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8004f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f26:	4a52      	ldr	r2, [pc, #328]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004f2e:	e003      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f34:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004f38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004f44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f4e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	d044      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f60:	2b05      	cmp	r3, #5
 8004f62:	d823      	bhi.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004fb5 	.word	0x08004fb5
 8004f70:	08004f85 	.word	0x08004f85
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004fb5 	.word	0x08004fb5
 8004f7c:	08004fb5 	.word	0x08004fb5
 8004f80:	08004fb5 	.word	0x08004fb5
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f88:	3308      	adds	r3, #8
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f004 fad0 	bl	8009530 <RCCEx_PLL2_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004f96:	e00e      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f9c:	3330      	adds	r3, #48	; 0x30
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f004 fb5e 	bl	8009660 <RCCEx_PLL3_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004faa:	e004      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10d      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8004fbe:	4b2c      	ldr	r3, [pc, #176]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004fc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004fc4:	f023 0107 	bic.w	r1, r3, #7
 8004fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd0:	4a27      	ldr	r2, [pc, #156]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004fd8:	e003      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fda:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fde:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004fee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ff8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4313      	orrs	r3, r2
 8005000:	d04f      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005002:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500a:	2b50      	cmp	r3, #80	; 0x50
 800500c:	d029      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800500e:	2b50      	cmp	r3, #80	; 0x50
 8005010:	d823      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d027      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005016:	2b40      	cmp	r3, #64	; 0x40
 8005018:	d81f      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800501a:	2b30      	cmp	r3, #48	; 0x30
 800501c:	d025      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800501e:	2b30      	cmp	r3, #48	; 0x30
 8005020:	d81b      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005022:	2b20      	cmp	r3, #32
 8005024:	d00f      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005026:	2b20      	cmp	r3, #32
 8005028:	d817      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d022      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800502e:	2b10      	cmp	r3, #16
 8005030:	d113      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005032:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005036:	3308      	adds	r3, #8
 8005038:	4618      	mov	r0, r3
 800503a:	f004 fa79 	bl	8009530 <RCCEx_PLL2_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005044:	e017      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005046:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800504a:	3330      	adds	r3, #48	; 0x30
 800504c:	4618      	mov	r0, r3
 800504e:	f004 fb07 	bl	8009660 <RCCEx_PLL3_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005058:	e00d      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005060:	e009      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005062:	bf00      	nop
 8005064:	e007      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005066:	bf00      	nop
 8005068:	e005      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800506a:	bf00      	nop
 800506c:	e003      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800506e:	bf00      	nop
 8005070:	44020c00 	.word	0x44020c00
        break;
 8005074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005076:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800507e:	4baf      	ldr	r3, [pc, #700]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005080:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005084:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005088:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	4aaa      	ldr	r2, [pc, #680]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005092:	430b      	orrs	r3, r1
 8005094:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005098:	e003      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800509e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80050ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80050b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80050bc:	460b      	mov	r3, r1
 80050be:	4313      	orrs	r3, r2
 80050c0:	d055      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80050c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80050ce:	d031      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80050d0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80050d4:	d82a      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80050d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050da:	d02d      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80050dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050e0:	d824      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80050e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050e6:	d029      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80050e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050ec:	d81e      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80050ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050f2:	d011      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80050f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050f8:	d818      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d020      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80050fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005102:	d113      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005108:	3308      	adds	r3, #8
 800510a:	4618      	mov	r0, r3
 800510c:	f004 fa10 	bl	8009530 <RCCEx_PLL2_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005116:	e014      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005118:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800511c:	3330      	adds	r3, #48	; 0x30
 800511e:	4618      	mov	r0, r3
 8005120:	f004 fa9e 	bl	8009660 <RCCEx_PLL3_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800512a:	e00a      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005132:	e006      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005134:	bf00      	nop
 8005136:	e004      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005138:	bf00      	nop
 800513a:	e002      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800513c:	bf00      	nop
 800513e:	e000      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005142:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800514a:	4b7c      	ldr	r3, [pc, #496]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800514c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005150:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005154:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800515c:	4a77      	ldr	r2, [pc, #476]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800515e:	430b      	orrs	r3, r1
 8005160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005164:	e003      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005166:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800516a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800516e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800517a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800517e:	2300      	movs	r3, #0
 8005180:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005184:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005188:	460b      	mov	r3, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	d03d      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800518e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005196:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800519a:	d01b      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800519c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051a0:	d814      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80051a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051a6:	d017      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80051a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ac:	d80e      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d014      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80051b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b6:	d109      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051bc:	3330      	adds	r3, #48	; 0x30
 80051be:	4618      	mov	r0, r3
 80051c0:	f004 fa4e 	bl	8009660 <RCCEx_PLL3_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80051ca:	e008      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80051d2:	e004      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80051d4:	bf00      	nop
 80051d6:	e002      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80051d8:	bf00      	nop
 80051da:	e000      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80051dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10d      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80051e6:	4b55      	ldr	r3, [pc, #340]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80051e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051ec:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80051f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f8:	4a50      	ldr	r2, [pc, #320]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80051fa:	430b      	orrs	r3, r1
 80051fc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005200:	e003      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005202:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005206:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800520a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005216:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800521a:	2300      	movs	r3, #0
 800521c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005220:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005224:	460b      	mov	r3, r1
 8005226:	4313      	orrs	r3, r2
 8005228:	d03d      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800522a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800522e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005232:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005236:	d01b      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005238:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800523c:	d814      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800523e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005242:	d017      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005244:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005248:	d80e      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d014      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800524e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005252:	d109      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005254:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005258:	3330      	adds	r3, #48	; 0x30
 800525a:	4618      	mov	r0, r3
 800525c:	f004 fa00 	bl	8009660 <RCCEx_PLL3_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005266:	e008      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800526e:	e004      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005270:	bf00      	nop
 8005272:	e002      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005274:	bf00      	nop
 8005276:	e000      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10d      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005282:	4b2e      	ldr	r3, [pc, #184]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005284:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005288:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800528c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005294:	4a29      	ldr	r2, [pc, #164]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005296:	430b      	orrs	r3, r1
 8005298:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800529c:	e003      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052a2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80052b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052bc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052c0:	460b      	mov	r3, r1
 80052c2:	4313      	orrs	r3, r2
 80052c4:	d040      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80052c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052d2:	d01b      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80052d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052d8:	d814      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80052da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052de:	d017      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80052e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052e4:	d80e      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d014      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80052ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ee:	d109      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052f4:	3330      	adds	r3, #48	; 0x30
 80052f6:	4618      	mov	r0, r3
 80052f8:	f004 f9b2 	bl	8009660 <RCCEx_PLL3_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005302:	e008      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800530a:	e004      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800530c:	bf00      	nop
 800530e:	e002      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005310:	bf00      	nop
 8005312:	e000      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005316:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800531a:	2b00      	cmp	r3, #0
 800531c:	d110      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005320:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005324:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800532c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005330:	4a02      	ldr	r2, [pc, #8]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005332:	430b      	orrs	r3, r1
 8005334:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005338:	e006      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800533a:	bf00      	nop
 800533c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005344:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	2100      	movs	r1, #0
 8005352:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800535e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d03d      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005368:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800536c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005370:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005374:	d01b      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005376:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800537a:	d814      	bhi.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800537c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005380:	d017      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005382:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005386:	d80e      	bhi.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d014      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800538c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005390:	d109      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005392:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005396:	3330      	adds	r3, #48	; 0x30
 8005398:	4618      	mov	r0, r3
 800539a:	f004 f961 	bl	8009660 <RCCEx_PLL3_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80053a4:	e008      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053ac:	e004      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80053ae:	bf00      	nop
 80053b0:	e002      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80053b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10d      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80053c0:	4bbe      	ldr	r3, [pc, #760]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80053c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053c6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80053ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053d2:	4aba      	ldr	r2, [pc, #744]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80053d4:	430b      	orrs	r3, r1
 80053d6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80053da:	e003      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80053e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80053f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053f4:	2300      	movs	r3, #0
 80053f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80053fe:	460b      	mov	r3, r1
 8005400:	4313      	orrs	r3, r2
 8005402:	d035      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005404:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800540c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005410:	d015      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005416:	d80e      	bhi.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d012      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800541c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005420:	d109      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005422:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005426:	3330      	adds	r3, #48	; 0x30
 8005428:	4618      	mov	r0, r3
 800542a:	f004 f919 	bl	8009660 <RCCEx_PLL3_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005434:	e006      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800543c:	e002      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005444:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10d      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800544c:	4b9b      	ldr	r3, [pc, #620]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800544e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005452:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8005456:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800545a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800545e:	4a97      	ldr	r2, [pc, #604]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005460:	430b      	orrs	r3, r1
 8005462:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005466:	e003      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800546c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005470:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	2100      	movs	r1, #0
 800547a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800547e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005482:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005486:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800548a:	460b      	mov	r3, r1
 800548c:	4313      	orrs	r3, r2
 800548e:	d00e      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005490:	4b8a      	ldr	r3, [pc, #552]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	4a89      	ldr	r2, [pc, #548]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005496:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800549a:	61d3      	str	r3, [r2, #28]
 800549c:	4b87      	ldr	r3, [pc, #540]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800549e:	69d9      	ldr	r1, [r3, #28]
 80054a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80054a8:	4a84      	ldr	r2, [pc, #528]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80054aa:	430b      	orrs	r3, r1
 80054ac:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80054ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054be:	2300      	movs	r3, #0
 80054c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054c4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80054c8:	460b      	mov	r3, r1
 80054ca:	4313      	orrs	r3, r2
 80054cc:	d055      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80054ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054d6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80054da:	d031      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80054dc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80054e0:	d82a      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80054e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e6:	d02d      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	d824      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80054ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f2:	d029      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80054f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f8:	d81e      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80054fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054fe:	d011      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005504:	d818      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d020      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800550a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800550e:	d113      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005510:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005514:	3308      	adds	r3, #8
 8005516:	4618      	mov	r0, r3
 8005518:	f004 f80a 	bl	8009530 <RCCEx_PLL2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005522:	e014      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005524:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005528:	3330      	adds	r3, #48	; 0x30
 800552a:	4618      	mov	r0, r3
 800552c:	f004 f898 	bl	8009660 <RCCEx_PLL3_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005536:	e00a      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800553e:	e006      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005540:	bf00      	nop
 8005542:	e004      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005544:	bf00      	nop
 8005546:	e002      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005548:	bf00      	nop
 800554a:	e000      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800554c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800554e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10d      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005556:	4b59      	ldr	r3, [pc, #356]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005558:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800555c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005560:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005564:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005568:	4a54      	ldr	r2, [pc, #336]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800556a:	430b      	orrs	r3, r1
 800556c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005570:	e003      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005572:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005576:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800557a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005590:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d055      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800559a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800559e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055a2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80055a6:	d031      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80055a8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80055ac:	d82a      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80055ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b2:	d02d      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80055b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b8:	d824      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80055ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055be:	d029      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80055c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055c4:	d81e      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80055c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ca:	d011      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80055cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d0:	d818      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d020      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80055d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055da:	d113      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055e0:	3308      	adds	r3, #8
 80055e2:	4618      	mov	r0, r3
 80055e4:	f003 ffa4 	bl	8009530 <RCCEx_PLL2_Config>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80055ee:	e014      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055f4:	3330      	adds	r3, #48	; 0x30
 80055f6:	4618      	mov	r0, r3
 80055f8:	f004 f832 	bl	8009660 <RCCEx_PLL3_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005602:	e00a      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800560a:	e006      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800560c:	bf00      	nop
 800560e:	e004      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005610:	bf00      	nop
 8005612:	e002      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005614:	bf00      	nop
 8005616:	e000      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800561a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10d      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005622:	4b26      	ldr	r3, [pc, #152]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005624:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005628:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800562c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005630:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005634:	4a21      	ldr	r2, [pc, #132]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005636:	430b      	orrs	r3, r1
 8005638:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800563c:	e003      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005642:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005646:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	2100      	movs	r1, #0
 8005650:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800565c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005660:	460b      	mov	r3, r1
 8005662:	4313      	orrs	r3, r2
 8005664:	d057      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005666:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800566a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800566e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005672:	d033      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005678:	d82c      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800567a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800567e:	d02f      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005684:	d826      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005686:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800568a:	d02b      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800568c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005690:	d820      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005696:	d013      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800569c:	d81a      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d022      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80056a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a6:	d115      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056ac:	3308      	adds	r3, #8
 80056ae:	4618      	mov	r0, r3
 80056b0:	f003 ff3e 	bl	8009530 <RCCEx_PLL2_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80056ba:	e016      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80056bc:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056c4:	3330      	adds	r3, #48	; 0x30
 80056c6:	4618      	mov	r0, r3
 80056c8:	f003 ffca 	bl	8009660 <RCCEx_PLL3_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80056d2:	e00a      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056da:	e006      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80056dc:	bf00      	nop
 80056de:	e004      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80056e0:	bf00      	nop
 80056e2:	e002      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80056e4:	bf00      	nop
 80056e6:	e000      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80056e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80056f2:	4bbb      	ldr	r3, [pc, #748]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80056f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80056f8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80056fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005700:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005704:	4ab6      	ldr	r2, [pc, #728]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005706:	430b      	orrs	r3, r1
 8005708:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800570c:	e003      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005712:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005716:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	2100      	movs	r1, #0
 8005720:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800572c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005730:	460b      	mov	r3, r1
 8005732:	4313      	orrs	r3, r2
 8005734:	d055      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005736:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800573a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800573e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005742:	d031      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005744:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005748:	d82a      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800574a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574e:	d02d      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005754:	d824      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005756:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800575a:	d029      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800575c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005760:	d81e      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005766:	d011      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800576c:	d818      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d020      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005776:	d113      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005778:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800577c:	3308      	adds	r3, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f003 fed6 	bl	8009530 <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800578a:	e014      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800578c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005790:	3330      	adds	r3, #48	; 0x30
 8005792:	4618      	mov	r0, r3
 8005794:	f003 ff64 	bl	8009660 <RCCEx_PLL3_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800579e:	e00a      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80057a6:	e006      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80057a8:	bf00      	nop
 80057aa:	e004      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80057ac:	bf00      	nop
 80057ae:	e002      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80057b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10d      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80057be:	4b88      	ldr	r3, [pc, #544]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80057c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80057c4:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80057c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d0:	4a83      	ldr	r2, [pc, #524]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80057d2:	430b      	orrs	r3, r1
 80057d4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80057d8:	e003      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80057e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	2100      	movs	r1, #0
 80057ec:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80057f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057f8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80057fc:	460b      	mov	r3, r1
 80057fe:	4313      	orrs	r3, r2
 8005800:	d055      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005802:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005806:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800580a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800580e:	d031      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005810:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005814:	d82a      	bhi.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005816:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800581a:	d02d      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800581c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005820:	d824      	bhi.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005822:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005826:	d029      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005828:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800582c:	d81e      	bhi.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800582e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005832:	d011      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005834:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005838:	d818      	bhi.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d020      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800583e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005842:	d113      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005844:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005848:	3308      	adds	r3, #8
 800584a:	4618      	mov	r0, r3
 800584c:	f003 fe70 	bl	8009530 <RCCEx_PLL2_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005856:	e014      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005858:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800585c:	3330      	adds	r3, #48	; 0x30
 800585e:	4618      	mov	r0, r3
 8005860:	f003 fefe 	bl	8009660 <RCCEx_PLL3_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800586a:	e00a      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005872:	e006      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005874:	bf00      	nop
 8005876:	e004      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005878:	bf00      	nop
 800587a:	e002      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800587c:	bf00      	nop
 800587e:	e000      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005882:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10d      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800588a:	4b55      	ldr	r3, [pc, #340]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800588c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005890:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005894:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005898:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800589c:	4a50      	ldr	r2, [pc, #320]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800589e:	430b      	orrs	r3, r1
 80058a0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80058a4:	e003      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80058aa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80058ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	2100      	movs	r1, #0
 80058b8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058c4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80058c8:	460b      	mov	r3, r1
 80058ca:	4313      	orrs	r3, r2
 80058cc:	d055      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80058ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80058d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058da:	d031      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80058dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058e0:	d82a      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e6:	d02d      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ec:	d824      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80058ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058f2:	d029      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80058f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058f8:	d81e      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80058fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fe:	d011      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005904:	d818      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d020      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800590a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800590e:	d113      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005910:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005914:	3308      	adds	r3, #8
 8005916:	4618      	mov	r0, r3
 8005918:	f003 fe0a 	bl	8009530 <RCCEx_PLL2_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005922:	e014      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005928:	3330      	adds	r3, #48	; 0x30
 800592a:	4618      	mov	r0, r3
 800592c:	f003 fe98 	bl	8009660 <RCCEx_PLL3_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005936:	e00a      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800593e:	e006      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005940:	bf00      	nop
 8005942:	e004      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005944:	bf00      	nop
 8005946:	e002      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005948:	bf00      	nop
 800594a:	e000      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800594c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10d      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005956:	4b22      	ldr	r3, [pc, #136]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005958:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800595c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005960:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005964:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005968:	4a1d      	ldr	r2, [pc, #116]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800596a:	430b      	orrs	r3, r1
 800596c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005970:	e003      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005972:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005976:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800597a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005986:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800598a:	2300      	movs	r3, #0
 800598c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005990:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005994:	460b      	mov	r3, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	d055      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800599a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800599e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059a6:	d035      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80059a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059ac:	d82e      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80059ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059b2:	d031      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80059b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059b8:	d828      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80059ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059be:	d01b      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80059c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059c4:	d822      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80059ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ce:	d009      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80059d0:	e01c      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d2:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	4a02      	ldr	r2, [pc, #8]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80059d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80059de:	e01c      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80059e0:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059e8:	3308      	adds	r3, #8
 80059ea:	4618      	mov	r0, r3
 80059ec:	f003 fda0 	bl	8009530 <RCCEx_PLL2_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80059f6:	e010      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059fc:	3330      	adds	r3, #48	; 0x30
 80059fe:	4618      	mov	r0, r3
 8005a00:	f003 fe2e 	bl	8009660 <RCCEx_PLL3_Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a0a:	e006      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a12:	e002      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005a14:	bf00      	nop
 8005a16:	e000      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10d      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005a22:	4bc3      	ldr	r3, [pc, #780]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a28:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005a34:	4abe      	ldr	r2, [pc, #760]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005a36:	430b      	orrs	r3, r1
 8005a38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a3c:	e003      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a42:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005a52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a56:	2300      	movs	r3, #0
 8005a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a5c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005a60:	460b      	mov	r3, r1
 8005a62:	4313      	orrs	r3, r2
 8005a64:	d051      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005a66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a72:	d033      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005a74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a78:	d82c      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005a7a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005a7e:	d02d      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005a80:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005a84:	d826      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a8a:	d019      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a90:	d820      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005a96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a9a:	d007      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005a9c:	e01a      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9e:	4ba4      	ldr	r3, [pc, #656]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	4aa3      	ldr	r2, [pc, #652]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005aaa:	e018      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f003 fd3c 	bl	8009530 <RCCEx_PLL2_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005abe:	e00e      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ac4:	3330      	adds	r3, #48	; 0x30
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f003 fdca 	bl	8009660 <RCCEx_PLL3_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005ad2:	e004      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005ada:	e000      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ade:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10d      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005ae6:	4b92      	ldr	r3, [pc, #584]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005aec:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8005af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005af4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005af8:	4a8d      	ldr	r2, [pc, #564]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005afa:	430b      	orrs	r3, r1
 8005afc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b00:	e003      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b06:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005b0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005b16:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b18:	2300      	movs	r3, #0
 8005b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b1c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005b20:	460b      	mov	r3, r1
 8005b22:	4313      	orrs	r3, r2
 8005b24:	d032      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005b26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005b2e:	2b05      	cmp	r3, #5
 8005b30:	d80f      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d211      	bcs.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d911      	bls.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d109      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b42:	3308      	adds	r3, #8
 8005b44:	4618      	mov	r0, r3
 8005b46:	f003 fcf3 	bl	8009530 <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b50:	e006      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b60:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10d      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005b68:	4b71      	ldr	r3, [pc, #452]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b6e:	f023 0107 	bic.w	r1, r3, #7
 8005b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005b7a:	4a6d      	ldr	r2, [pc, #436]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b82:	e003      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b84:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b88:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	2100      	movs	r1, #0
 8005b96:	6739      	str	r1, [r7, #112]	; 0x70
 8005b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b9c:	677b      	str	r3, [r7, #116]	; 0x74
 8005b9e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	d024      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005bbe:	e002      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005bc0:	bf00      	nop
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10d      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005bce:	4b58      	ldr	r3, [pc, #352]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bd4:	f023 0108 	bic.w	r1, r3, #8
 8005bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005be0:	4a53      	ldr	r2, [pc, #332]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005be2:	430b      	orrs	r3, r1
 8005be4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005be8:	e003      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c00:	2300      	movs	r3, #0
 8005c02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c04:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f000 80b9 	beq.w	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005c10:	4b48      	ldr	r3, [pc, #288]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	4a47      	ldr	r2, [pc, #284]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005c16:	f043 0301 	orr.w	r3, r3, #1
 8005c1a:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c1c:	f7fb fe98 	bl	8001950 <HAL_GetTick>
 8005c20:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005c24:	e00b      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c26:	f7fb fe93 	bl	8001950 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d903      	bls.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c3c:	e005      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005c3e:	4b3d      	ldr	r3, [pc, #244]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0ed      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8005c4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f040 8093 	bne.w	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c54:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005c62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d023      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c6e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8005c72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01b      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c7a:	4b2d      	ldr	r3, [pc, #180]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c84:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c88:	4b29      	ldr	r3, [pc, #164]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c8e:	4a28      	ldr	r2, [pc, #160]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c98:	4b25      	ldr	r3, [pc, #148]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c9e:	4a24      	ldr	r2, [pc, #144]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ca8:	4a21      	ldr	r2, [pc, #132]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005caa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005cae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cb2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d019      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbe:	f7fb fe47 	bl	8001950 <HAL_GetTick>
 8005cc2:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc6:	e00d      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc8:	f7fb fe42 	bl	8001950 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005cd2:	1ad2      	subs	r2, r2, r3
 8005cd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d903      	bls.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8005ce2:	e006      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce4:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0ea      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8005cf2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d13a      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005cfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cfe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d0a:	d115      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005d0c:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d18:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005d26:	4a02      	ldr	r2, [pc, #8]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	61d3      	str	r3, [r2, #28]
 8005d2c:	e00a      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8005d2e:	bf00      	nop
 8005d30:	44020c00 	.word	0x44020c00
 8005d34:	44020800 	.word	0x44020800
 8005d38:	4b9f      	ldr	r3, [pc, #636]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	4a9e      	ldr	r2, [pc, #632]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d42:	61d3      	str	r3, [r2, #28]
 8005d44:	4b9c      	ldr	r3, [pc, #624]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d4a:	4a9b      	ldr	r2, [pc, #620]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005d54:	4b98      	ldr	r3, [pc, #608]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d56:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8005d5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d5e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d66:	4a94      	ldr	r2, [pc, #592]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005d6e:	e008      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d70:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d74:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8005d78:	e003      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d7e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d90:	2300      	movs	r3, #0
 8005d92:	667b      	str	r3, [r7, #100]	; 0x64
 8005d94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	d035      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005da2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005da6:	2b30      	cmp	r3, #48	; 0x30
 8005da8:	d014      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005daa:	2b30      	cmp	r3, #48	; 0x30
 8005dac:	d80e      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d012      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d80a      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d010      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8005dba:	2b10      	cmp	r3, #16
 8005dbc:	d106      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dbe:	4b7e      	ldr	r3, [pc, #504]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	4a7d      	ldr	r2, [pc, #500]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc8:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005dca:	e008      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005dd2:	e004      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005dd4:	bf00      	nop
 8005dd6:	e002      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005dd8:	bf00      	nop
 8005dda:	e000      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10d      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005de6:	4b74      	ldr	r3, [pc, #464]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005df4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005df8:	4a6f      	ldr	r2, [pc, #444]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e00:	e003      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e06:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005e16:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e18:	2300      	movs	r3, #0
 8005e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e1c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005e20:	460b      	mov	r3, r1
 8005e22:	4313      	orrs	r3, r2
 8005e24:	d033      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e2a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	d007      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8005e36:	e010      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e38:	4b5f      	ldr	r3, [pc, #380]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	4a5e      	ldr	r2, [pc, #376]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e42:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005e44:	e00d      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f003 fb6f 	bl	8009530 <RCCEx_PLL2_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005e58:	e003      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10d      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005e6a:	4b53      	ldr	r3, [pc, #332]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e70:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e78:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005e7c:	4a4e      	ldr	r2, [pc, #312]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005e84:	e003      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e8a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005e8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8005ea0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	d033      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005eaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005eae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005eb6:	2b80      	cmp	r3, #128	; 0x80
 8005eb8:	d007      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005eba:	e010      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ebc:	4b3e      	ldr	r3, [pc, #248]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	4a3d      	ldr	r2, [pc, #244]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005ec8:	e00d      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005eca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ece:	3308      	adds	r3, #8
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f003 fb2d 	bl	8009530 <RCCEx_PLL2_Config>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005edc:	e003      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10d      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005eee:	4b32      	ldr	r3, [pc, #200]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ef0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ef4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005efc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005f00:	4a2d      	ldr	r2, [pc, #180]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005f02:	430b      	orrs	r3, r1
 8005f04:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005f08:	e003      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f0e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005f12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f20:	2300      	movs	r3, #0
 8005f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	d04a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d827      	bhi.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f55 	.word	0x08005f55
 8005f44:	08005f63 	.word	0x08005f63
 8005f48:	08005f77 	.word	0x08005f77
 8005f4c:	08005f93 	.word	0x08005f93
 8005f50:	08005f93 	.word	0x08005f93
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f54:	4b18      	ldr	r3, [pc, #96]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	4a17      	ldr	r2, [pc, #92]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f5e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005f60:	e018      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f66:	3308      	adds	r3, #8
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f003 fae1 	bl	8009530 <RCCEx_PLL2_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005f74:	e00e      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f7a:	3330      	adds	r3, #48	; 0x30
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f003 fb6f 	bl	8009660 <RCCEx_PLL3_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005f88:	e004      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005f90:	e000      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f94:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10f      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fa2:	f023 0107 	bic.w	r1, r3, #7
 8005fa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fae:	4a02      	ldr	r2, [pc, #8]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fb6:	e005      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8005fb8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005fc0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f000 8081 	beq.w	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fe6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d85f      	bhi.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	08006079 	.word	0x08006079
 8005ff8:	080060af 	.word	0x080060af
 8005ffc:	080060af 	.word	0x080060af
 8006000:	080060af 	.word	0x080060af
 8006004:	080060af 	.word	0x080060af
 8006008:	080060af 	.word	0x080060af
 800600c:	080060af 	.word	0x080060af
 8006010:	080060af 	.word	0x080060af
 8006014:	08006087 	.word	0x08006087
 8006018:	080060af 	.word	0x080060af
 800601c:	080060af 	.word	0x080060af
 8006020:	080060af 	.word	0x080060af
 8006024:	080060af 	.word	0x080060af
 8006028:	080060af 	.word	0x080060af
 800602c:	080060af 	.word	0x080060af
 8006030:	080060af 	.word	0x080060af
 8006034:	0800609b 	.word	0x0800609b
 8006038:	080060af 	.word	0x080060af
 800603c:	080060af 	.word	0x080060af
 8006040:	080060af 	.word	0x080060af
 8006044:	080060af 	.word	0x080060af
 8006048:	080060af 	.word	0x080060af
 800604c:	080060af 	.word	0x080060af
 8006050:	080060af 	.word	0x080060af
 8006054:	080060b7 	.word	0x080060b7
 8006058:	080060af 	.word	0x080060af
 800605c:	080060af 	.word	0x080060af
 8006060:	080060af 	.word	0x080060af
 8006064:	080060af 	.word	0x080060af
 8006068:	080060af 	.word	0x080060af
 800606c:	080060af 	.word	0x080060af
 8006070:	080060af 	.word	0x080060af
 8006074:	080060b7 	.word	0x080060b7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006078:	4bab      	ldr	r3, [pc, #684]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	4aaa      	ldr	r2, [pc, #680]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800607e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006082:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006084:	e018      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006086:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800608a:	3308      	adds	r3, #8
 800608c:	4618      	mov	r0, r3
 800608e:	f003 fa4f 	bl	8009530 <RCCEx_PLL2_Config>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006098:	e00e      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800609a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800609e:	3330      	adds	r3, #48	; 0x30
 80060a0:	4618      	mov	r0, r3
 80060a2:	f003 fadd 	bl	8009660 <RCCEx_PLL3_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80060ac:	e004      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80060b4:	e000      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80060b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10d      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80060c0:	4b99      	ldr	r3, [pc, #612]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80060c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060c6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80060ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060d2:	4a95      	ldr	r2, [pc, #596]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060da:	e003      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80060e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80060e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80060f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80060f2:	2300      	movs	r3, #0
 80060f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80060fa:	460b      	mov	r3, r1
 80060fc:	4313      	orrs	r3, r2
 80060fe:	d04e      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006100:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610c:	d02e      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800610e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006112:	d827      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006114:	2bc0      	cmp	r3, #192	; 0xc0
 8006116:	d02b      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006118:	2bc0      	cmp	r3, #192	; 0xc0
 800611a:	d823      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800611c:	2b80      	cmp	r3, #128	; 0x80
 800611e:	d017      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d81f      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	d007      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800612c:	e01a      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800612e:	4b7e      	ldr	r3, [pc, #504]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	4a7d      	ldr	r2, [pc, #500]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006138:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800613a:	e01a      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800613c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006140:	3308      	adds	r3, #8
 8006142:	4618      	mov	r0, r3
 8006144:	f003 f9f4 	bl	8009530 <RCCEx_PLL2_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800614e:	e010      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006150:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006154:	3330      	adds	r3, #48	; 0x30
 8006156:	4618      	mov	r0, r3
 8006158:	f003 fa82 	bl	8009660 <RCCEx_PLL3_Config>
 800615c:	4603      	mov	r3, r0
 800615e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006162:	e006      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800616a:	e002      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800616c:	bf00      	nop
 800616e:	e000      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006172:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10d      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800617a:	4b6b      	ldr	r3, [pc, #428]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800617c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006180:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800618c:	4a66      	ldr	r2, [pc, #408]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800618e:	430b      	orrs	r3, r1
 8006190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006194:	e003      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006196:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800619a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800619e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30
 80061ac:	2300      	movs	r3, #0
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
 80061b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80061b4:	460b      	mov	r3, r1
 80061b6:	4313      	orrs	r3, r2
 80061b8:	d055      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80061ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80061c2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80061c6:	d031      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80061c8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80061cc:	d82a      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80061ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d2:	d02d      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80061d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d8:	d824      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80061da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061de:	d029      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80061e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061e4:	d81e      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80061e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ea:	d011      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80061ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f0:	d818      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d020      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80061f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fa:	d113      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006200:	3308      	adds	r3, #8
 8006202:	4618      	mov	r0, r3
 8006204:	f003 f994 	bl	8009530 <RCCEx_PLL2_Config>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800620e:	e014      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006210:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006214:	3330      	adds	r3, #48	; 0x30
 8006216:	4618      	mov	r0, r3
 8006218:	f003 fa22 	bl	8009660 <RCCEx_PLL3_Config>
 800621c:	4603      	mov	r3, r0
 800621e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006222:	e00a      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800622a:	e006      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800622c:	bf00      	nop
 800622e:	e004      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006230:	bf00      	nop
 8006232:	e002      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006234:	bf00      	nop
 8006236:	e000      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10d      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006242:	4b39      	ldr	r3, [pc, #228]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006248:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800624c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006250:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006254:	4a34      	ldr	r2, [pc, #208]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006256:	430b      	orrs	r3, r1
 8006258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800625c:	e003      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006262:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006266:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
 8006274:	2300      	movs	r3, #0
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006278:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800627c:	460b      	mov	r3, r1
 800627e:	4313      	orrs	r3, r2
 8006280:	d058      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8006282:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800628a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800628e:	d031      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006290:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006294:	d82a      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629a:	d02d      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800629c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a0:	d824      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80062a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062a6:	d029      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80062a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062ac:	d81e      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80062ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b2:	d011      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80062b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b8:	d818      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d020      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80062be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c2:	d113      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062c8:	3308      	adds	r3, #8
 80062ca:	4618      	mov	r0, r3
 80062cc:	f003 f930 	bl	8009530 <RCCEx_PLL2_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80062d6:	e014      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062dc:	3330      	adds	r3, #48	; 0x30
 80062de:	4618      	mov	r0, r3
 80062e0:	f003 f9be 	bl	8009660 <RCCEx_PLL3_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80062ea:	e00a      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80062f2:	e006      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80062f4:	bf00      	nop
 80062f6:	e004      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80062f8:	bf00      	nop
 80062fa:	e002      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80062fc:	bf00      	nop
 80062fe:	e000      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006302:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006306:	2b00      	cmp	r3, #0
 8006308:	d110      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800630a:	4b07      	ldr	r3, [pc, #28]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800630c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006310:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006314:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800631c:	4902      	ldr	r1, [pc, #8]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006324:	e006      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006326:	bf00      	nop
 8006328:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006330:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006334:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	2100      	movs	r1, #0
 800633e:	6239      	str	r1, [r7, #32]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
 8006346:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800634a:	460b      	mov	r3, r1
 800634c:	4313      	orrs	r3, r2
 800634e:	d055      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006350:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006354:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006358:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800635c:	d031      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800635e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006362:	d82a      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006368:	d02d      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800636a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800636e:	d824      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006370:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006374:	d029      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006376:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800637a:	d81e      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d011      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006386:	d818      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006388:	2b00      	cmp	r3, #0
 800638a:	d020      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800638c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006390:	d113      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006392:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006396:	3308      	adds	r3, #8
 8006398:	4618      	mov	r0, r3
 800639a:	f003 f8c9 	bl	8009530 <RCCEx_PLL2_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80063a4:	e014      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063aa:	3330      	adds	r3, #48	; 0x30
 80063ac:	4618      	mov	r0, r3
 80063ae:	f003 f957 	bl	8009660 <RCCEx_PLL3_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80063b8:	e00a      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80063c0:	e006      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80063c2:	bf00      	nop
 80063c4:	e004      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80063c6:	bf00      	nop
 80063c8:	e002      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80063ca:	bf00      	nop
 80063cc:	e000      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80063ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10d      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80063d8:	4b88      	ldr	r3, [pc, #544]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80063da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063de:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 80063e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063ea:	4984      	ldr	r1, [pc, #528]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80063f2:	e003      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80063f8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	2100      	movs	r1, #0
 8006406:	61b9      	str	r1, [r7, #24]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006412:	460b      	mov	r3, r1
 8006414:	4313      	orrs	r3, r2
 8006416:	d03d      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006418:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800641c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006420:	2b03      	cmp	r3, #3
 8006422:	d81c      	bhi.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	08006467 	.word	0x08006467
 8006430:	0800643d 	.word	0x0800643d
 8006434:	0800644b 	.word	0x0800644b
 8006438:	08006467 	.word	0x08006467
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800643c:	4b6f      	ldr	r3, [pc, #444]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006440:	4a6e      	ldr	r2, [pc, #440]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006446:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006448:	e00e      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800644a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800644e:	3308      	adds	r3, #8
 8006450:	4618      	mov	r0, r3
 8006452:	f003 f86d 	bl	8009530 <RCCEx_PLL2_Config>
 8006456:	4603      	mov	r3, r0
 8006458:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800645c:	e004      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006464:	e000      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006468:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10d      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006470:	4b62      	ldr	r3, [pc, #392]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006472:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006476:	f023 0203 	bic.w	r2, r3, #3
 800647a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800647e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006482:	495e      	ldr	r1, [pc, #376]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800648a:	e003      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006490:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006494:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	2100      	movs	r1, #0
 800649e:	6139      	str	r1, [r7, #16]
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80064aa:	460b      	mov	r3, r1
 80064ac:	4313      	orrs	r3, r2
 80064ae:	d03a      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80064b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80064b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064bc:	d00e      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80064be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c2:	d815      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d017      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80064c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064cc:	d110      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ce:	4b4b      	ldr	r3, [pc, #300]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	4a4a      	ldr	r2, [pc, #296]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80064d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d8:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80064da:	e00e      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064e0:	3308      	adds	r3, #8
 80064e2:	4618      	mov	r0, r3
 80064e4:	f003 f824 	bl	8009530 <RCCEx_PLL2_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80064ee:	e004      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80064f6:	e000      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80064f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10d      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006502:	4b3e      	ldr	r3, [pc, #248]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800650c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006510:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006514:	4939      	ldr	r1, [pc, #228]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800651c:	e003      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006522:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006526:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	2100      	movs	r1, #0
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	f003 0310 	and.w	r3, r3, #16
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800653c:	460b      	mov	r3, r1
 800653e:	4313      	orrs	r3, r2
 8006540:	d038      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006542:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006546:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800654a:	2b30      	cmp	r3, #48	; 0x30
 800654c:	d01b      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800654e:	2b30      	cmp	r3, #48	; 0x30
 8006550:	d815      	bhi.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8006552:	2b10      	cmp	r3, #16
 8006554:	d002      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006556:	2b20      	cmp	r3, #32
 8006558:	d007      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800655a:	e010      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655c:	4b27      	ldr	r3, [pc, #156]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	4a26      	ldr	r2, [pc, #152]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006566:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006568:	e00e      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800656a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800656e:	3330      	adds	r3, #48	; 0x30
 8006570:	4618      	mov	r0, r3
 8006572:	f003 f875 	bl	8009660 <RCCEx_PLL3_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800657c:	e004      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006584:	e000      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006588:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006590:	4b1a      	ldr	r3, [pc, #104]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006592:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006596:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800659a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800659e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80065a2:	4916      	ldr	r1, [pc, #88]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80065aa:	e003      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80065b0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	2100      	movs	r1, #0
 80065be:	6039      	str	r1, [r7, #0]
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	607b      	str	r3, [r7, #4]
 80065c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065ca:	460b      	mov	r3, r1
 80065cc:	4313      	orrs	r3, r2
 80065ce:	d00c      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80065d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80065da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065de:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80065e2:	4906      	ldr	r1, [pc, #24]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80065ea:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80065f4:	46bd      	mov	sp, r7
 80065f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065fa:	bf00      	nop
 80065fc:	44020c00 	.word	0x44020c00

08006600 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006600:	b480      	push	{r7}
 8006602:	b08b      	sub	sp, #44	; 0x2c
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006608:	4bad      	ldr	r3, [pc, #692]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006610:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006612:	4bab      	ldr	r3, [pc, #684]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800661c:	4ba8      	ldr	r3, [pc, #672]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	0a1b      	lsrs	r3, r3, #8
 8006622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006626:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006628:	4ba5      	ldr	r3, [pc, #660]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006632:	4ba3      	ldr	r3, [pc, #652]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	08db      	lsrs	r3, r3, #3
 8006638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8126 	beq.w	80068a2 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	2b03      	cmp	r3, #3
 800665a:	d053      	beq.n	8006704 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b03      	cmp	r3, #3
 8006660:	d86f      	bhi.n	8006742 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d003      	beq.n	8006670 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d02b      	beq.n	80066c6 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800666e:	e068      	b.n	8006742 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006670:	4b93      	ldr	r3, [pc, #588]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	08db      	lsrs	r3, r3, #3
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	4a92      	ldr	r2, [pc, #584]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800667c:	fa22 f303 	lsr.w	r3, r2, r3
 8006680:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	ee07 3a90 	vmov	s15, r3
 80066a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80066a8:	eddf 5a87 	vldr	s11, [pc, #540]	; 80068c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80066ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80066c4:	e068      	b.n	8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80068cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80066d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80066e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80068c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80066ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006702:	e049      	b.n	8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670e:	eddf 6a70 	vldr	s13, [pc, #448]	; 80068d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	ee07 3a90 	vmov	s15, r3
 800671c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006720:	ed97 6a04 	vldr	s12, [r7, #16]
 8006724:	eddf 5a68 	vldr	s11, [pc, #416]	; 80068c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006740:	e02a      	b.n	8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006742:	4b5f      	ldr	r3, [pc, #380]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	08db      	lsrs	r3, r3, #3
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	4a5d      	ldr	r2, [pc, #372]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800674e:	fa22 f303 	lsr.w	r3, r2, r3
 8006752:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	ee07 3a90 	vmov	s15, r3
 8006764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006776:	ed97 6a04 	vldr	s12, [r7, #16]
 800677a:	eddf 5a53 	vldr	s11, [pc, #332]	; 80068c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800677e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800678a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006792:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006796:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006798:	4b49      	ldr	r3, [pc, #292]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067a4:	d121      	bne.n	80067ea <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80067a6:	4b46      	ldr	r3, [pc, #280]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d017      	beq.n	80067e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80067b2:	4b43      	ldr	r3, [pc, #268]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80067b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b6:	0a5b      	lsrs	r3, r3, #9
 80067b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80067c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80067cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80067d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067d8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	e006      	b.n	80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	e002      	b.n	80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067f0:	4b33      	ldr	r3, [pc, #204]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067fc:	d121      	bne.n	8006842 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80067fe:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d017      	beq.n	800683a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800680a:	4b2d      	ldr	r3, [pc, #180]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680e:	0c1b      	lsrs	r3, r3, #16
 8006810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800681c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006820:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006824:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800682c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006830:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	605a      	str	r2, [r3, #4]
 8006838:	e006      	b.n	8006848 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	605a      	str	r2, [r3, #4]
 8006840:	e002      	b.n	8006848 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006854:	d121      	bne.n	800689a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006856:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d017      	beq.n	8006892 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006862:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006866:	0e1b      	lsrs	r3, r3, #24
 8006868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686c:	ee07 3a90 	vmov	s15, r3
 8006870:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006878:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800687c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006888:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006890:	e010      	b.n	80068b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	609a      	str	r2, [r3, #8]
}
 8006898:	e00c      	b.n	80068b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	609a      	str	r2, [r3, #8]
}
 80068a0:	e008      	b.n	80068b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	609a      	str	r2, [r3, #8]
}
 80068b4:	bf00      	nop
 80068b6:	372c      	adds	r7, #44	; 0x2c
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	44020c00 	.word	0x44020c00
 80068c4:	03d09000 	.word	0x03d09000
 80068c8:	46000000 	.word	0x46000000
 80068cc:	4a742400 	.word	0x4a742400
 80068d0:	4af42400 	.word	0x4af42400

080068d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b08b      	sub	sp, #44	; 0x2c
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80068dc:	4bad      	ldr	r3, [pc, #692]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80068e6:	4bab      	ldr	r3, [pc, #684]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80068f0:	4ba8      	ldr	r3, [pc, #672]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	0a1b      	lsrs	r3, r3, #8
 80068f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068fa:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80068fc:	4ba5      	ldr	r3, [pc, #660]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006906:	4ba3      	ldr	r3, [pc, #652]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	08db      	lsrs	r3, r3, #3
 800690c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8126 	beq.w	8006b76 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	2b03      	cmp	r3, #3
 800692e:	d053      	beq.n	80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	2b03      	cmp	r3, #3
 8006934:	d86f      	bhi.n	8006a16 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d003      	beq.n	8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d02b      	beq.n	800699a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8006942:	e068      	b.n	8006a16 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006944:	4b93      	ldr	r3, [pc, #588]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	08db      	lsrs	r3, r3, #3
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	4a92      	ldr	r2, [pc, #584]	; (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006950:	fa22 f303 	lsr.w	r3, r2, r3
 8006954:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	ee07 3a90 	vmov	s15, r3
 800695c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	ee07 3a90 	vmov	s15, r3
 8006974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006978:	ed97 6a04 	vldr	s12, [r7, #16]
 800697c:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006980:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006984:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006988:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800698c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006994:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006998:	e068      	b.n	8006a6c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80069a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80069ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80069be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80069d6:	e049      	b.n	8006a6c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e2:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80069f8:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80069fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006a14:	e02a      	b.n	8006a6c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a16:	4b5f      	ldr	r3, [pc, #380]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	08db      	lsrs	r3, r3, #3
 8006a1c:	f003 0303 	and.w	r3, r3, #3
 8006a20:	4a5d      	ldr	r2, [pc, #372]	; (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006a22:	fa22 f303 	lsr.w	r3, r2, r3
 8006a26:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a4e:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006a6a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a6c:	4b49      	ldr	r3, [pc, #292]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a78:	d121      	bne.n	8006abe <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006a7a:	4b46      	ldr	r3, [pc, #280]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d017      	beq.n	8006ab6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a86:	4b43      	ldr	r3, [pc, #268]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8a:	0a5b      	lsrs	r3, r3, #9
 8006a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a90:	ee07 3a90 	vmov	s15, r3
 8006a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a9c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006aa0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aac:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e006      	b.n	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e002      	b.n	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ac4:	4b33      	ldr	r3, [pc, #204]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ad0:	d121      	bne.n	8006b16 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006ad2:	4b30      	ldr	r3, [pc, #192]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d017      	beq.n	8006b0e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ade:	4b2d      	ldr	r3, [pc, #180]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae8:	ee07 3a90 	vmov	s15, r3
 8006aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006af0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006af4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006af8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b04:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	605a      	str	r2, [r3, #4]
 8006b0c:	e006      	b.n	8006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	605a      	str	r2, [r3, #4]
 8006b14:	e002      	b.n	8006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b1c:	4b1d      	ldr	r3, [pc, #116]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b28:	d121      	bne.n	8006b6e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006b2a:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d017      	beq.n	8006b66 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006b36:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3a:	0e1b      	lsrs	r3, r3, #24
 8006b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b40:	ee07 3a90 	vmov	s15, r3
 8006b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006b48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b4c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006b50:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b5c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b64:	e010      	b.n	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	609a      	str	r2, [r3, #8]
}
 8006b6c:	e00c      	b.n	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	609a      	str	r2, [r3, #8]
}
 8006b74:	e008      	b.n	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	609a      	str	r2, [r3, #8]
}
 8006b88:	bf00      	nop
 8006b8a:	372c      	adds	r7, #44	; 0x2c
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	44020c00 	.word	0x44020c00
 8006b98:	03d09000 	.word	0x03d09000
 8006b9c:	46000000 	.word	0x46000000
 8006ba0:	4a742400 	.word	0x4a742400
 8006ba4:	4af42400 	.word	0x4af42400

08006ba8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b08b      	sub	sp, #44	; 0x2c
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006bb0:	4bad      	ldr	r3, [pc, #692]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006bba:	4bab      	ldr	r3, [pc, #684]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006bc4:	4ba8      	ldr	r3, [pc, #672]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc8:	0a1b      	lsrs	r3, r3, #8
 8006bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bce:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006bd0:	4ba5      	ldr	r3, [pc, #660]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	f003 0310 	and.w	r3, r3, #16
 8006bd8:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006bda:	4ba3      	ldr	r3, [pc, #652]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bde:	08db      	lsrs	r3, r3, #3
 8006be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	fb02 f303 	mul.w	r3, r2, r3
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 8126 	beq.w	8006e4a <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d053      	beq.n	8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d86f      	bhi.n	8006cea <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d003      	beq.n	8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d02b      	beq.n	8006c6e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8006c16:	e068      	b.n	8006cea <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c18:	4b93      	ldr	r3, [pc, #588]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	08db      	lsrs	r3, r3, #3
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	4a92      	ldr	r2, [pc, #584]	; (8006e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006c24:	fa22 f303 	lsr.w	r3, r2, r3
 8006c28:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	ee07 3a90 	vmov	s15, r3
 8006c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c50:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006c6c:	e068      	b.n	8006d40 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c78:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006caa:	e049      	b.n	8006d40 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb6:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc8:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ccc:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006ce8:	e02a      	b.n	8006d40 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cea:	4b5f      	ldr	r3, [pc, #380]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	08db      	lsrs	r3, r3, #3
 8006cf0:	f003 0303 	and.w	r3, r3, #3
 8006cf4:	4a5d      	ldr	r2, [pc, #372]	; (8006e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfa:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	ee07 3a90 	vmov	s15, r3
 8006d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d22:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006d3e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d40:	4b49      	ldr	r3, [pc, #292]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d4c:	d121      	bne.n	8006d92 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006d4e:	4b46      	ldr	r3, [pc, #280]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d017      	beq.n	8006d8a <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006d5a:	4b43      	ldr	r3, [pc, #268]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	0a5b      	lsrs	r3, r3, #9
 8006d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d64:	ee07 3a90 	vmov	s15, r3
 8006d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d70:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006d74:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d80:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e006      	b.n	8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	e002      	b.n	8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d98:	4b33      	ldr	r3, [pc, #204]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006da4:	d121      	bne.n	8006dea <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006da6:	4b30      	ldr	r3, [pc, #192]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d017      	beq.n	8006de2 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006db2:	4b2d      	ldr	r3, [pc, #180]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db6:	0c1b      	lsrs	r3, r3, #16
 8006db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006dcc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	605a      	str	r2, [r3, #4]
 8006de0:	e006      	b.n	8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	605a      	str	r2, [r3, #4]
 8006de8:	e002      	b.n	8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006df0:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dfc:	d121      	bne.n	8006e42 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006dfe:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d017      	beq.n	8006e3a <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006e0a:	4b17      	ldr	r3, [pc, #92]	; (8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	0e1b      	lsrs	r3, r3, #24
 8006e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e14:	ee07 3a90 	vmov	s15, r3
 8006e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e20:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006e24:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e30:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006e38:	e010      	b.n	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	e00c      	b.n	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	609a      	str	r2, [r3, #8]
}
 8006e48:	e008      	b.n	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	609a      	str	r2, [r3, #8]
}
 8006e5c:	bf00      	nop
 8006e5e:	372c      	adds	r7, #44	; 0x2c
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	44020c00 	.word	0x44020c00
 8006e6c:	03d09000 	.word	0x03d09000
 8006e70:	46000000 	.word	0x46000000
 8006e74:	4a742400 	.word	0x4a742400
 8006e78:	4af42400 	.word	0x4af42400

08006e7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e7c:	b590      	push	{r4, r7, lr}
 8006e7e:	b08f      	sub	sp, #60	; 0x3c
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006e86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e8a:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8006e8e:	4321      	orrs	r1, r4
 8006e90:	d150      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006e92:	4b26      	ldr	r3, [pc, #152]	; (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006e9e:	4b23      	ldr	r3, [pc, #140]	; (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d108      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb2:	d104      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eba:	f002 bb2a 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006ebe:	4b1b      	ldr	r3, [pc, #108]	; (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ecc:	d108      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed4:	d104      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006ed6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006eda:	637b      	str	r3, [r7, #52]	; 0x34
 8006edc:	f002 bb19 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006ee0:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eec:	d119      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ef4:	d115      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f02:	d30a      	bcc.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006f04:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	0a1b      	lsrs	r3, r3, #8
 8006f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f0e:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006f16:	f002 bafc 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006f1e:	f002 baf8 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	637b      	str	r3, [r7, #52]	; 0x34
 8006f26:	f002 baf4 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f2a:	bf00      	nop
 8006f2c:	44020c00 	.word	0x44020c00
 8006f30:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006f34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f38:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8006f3c:	ea50 0104 	orrs.w	r1, r0, r4
 8006f40:	f001 8275 	beq.w	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f48:	2801      	cmp	r0, #1
 8006f4a:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8006f4e:	f082 82dd 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f56:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8006f5a:	ea50 0104 	orrs.w	r1, r0, r4
 8006f5e:	f001 816c 	beq.w	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f66:	2801      	cmp	r0, #1
 8006f68:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8006f6c:	f082 82ce 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f74:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8006f78:	ea50 0104 	orrs.w	r1, r0, r4
 8006f7c:	f001 8602 	beq.w	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8006f80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f84:	2801      	cmp	r0, #1
 8006f86:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8006f8a:	f082 82bf 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f92:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8006f96:	ea50 0104 	orrs.w	r1, r0, r4
 8006f9a:	f001 854c 	beq.w	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8006f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fa2:	2801      	cmp	r0, #1
 8006fa4:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8006fa8:	f082 82b0 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fb0:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8006fb4:	ea50 0104 	orrs.w	r1, r0, r4
 8006fb8:	f001 849e 	beq.w	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fc0:	2801      	cmp	r0, #1
 8006fc2:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8006fc6:	f082 82a1 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fce:	f1a1 0420 	sub.w	r4, r1, #32
 8006fd2:	ea50 0104 	orrs.w	r1, r0, r4
 8006fd6:	f001 83e8 	beq.w	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fde:	2801      	cmp	r0, #1
 8006fe0:	f171 0120 	sbcs.w	r1, r1, #32
 8006fe4:	f082 8292 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fec:	f1a1 0410 	sub.w	r4, r1, #16
 8006ff0:	ea50 0104 	orrs.w	r1, r0, r4
 8006ff4:	f002 8256 	beq.w	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006ff8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ffc:	2801      	cmp	r0, #1
 8006ffe:	f171 0110 	sbcs.w	r1, r1, #16
 8007002:	f082 8283 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800700a:	f1a1 0408 	sub.w	r4, r1, #8
 800700e:	ea50 0104 	orrs.w	r1, r0, r4
 8007012:	f002 81cc 	beq.w	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800701a:	2801      	cmp	r0, #1
 800701c:	f171 0108 	sbcs.w	r1, r1, #8
 8007020:	f082 8274 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007024:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007028:	1f0c      	subs	r4, r1, #4
 800702a:	ea50 0104 	orrs.w	r1, r0, r4
 800702e:	f001 8648 	beq.w	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007032:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007036:	2801      	cmp	r0, #1
 8007038:	f171 0104 	sbcs.w	r1, r1, #4
 800703c:	f082 8266 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007040:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007044:	1e8c      	subs	r4, r1, #2
 8007046:	ea50 0104 	orrs.w	r1, r0, r4
 800704a:	f002 8143 	beq.w	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800704e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007052:	2801      	cmp	r0, #1
 8007054:	f171 0102 	sbcs.w	r1, r1, #2
 8007058:	f082 8258 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800705c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007060:	1e4c      	subs	r4, r1, #1
 8007062:	ea50 0104 	orrs.w	r1, r0, r4
 8007066:	f002 80ce 	beq.w	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800706a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800706e:	2801      	cmp	r0, #1
 8007070:	f171 0101 	sbcs.w	r1, r1, #1
 8007074:	f082 824a 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800707c:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8007080:	4321      	orrs	r1, r4
 8007082:	f002 8059 	beq.w	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8007086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800708a:	4cd9      	ldr	r4, [pc, #868]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800708c:	42a0      	cmp	r0, r4
 800708e:	f171 0100 	sbcs.w	r1, r1, #0
 8007092:	f082 823b 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800709a:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800709e:	4321      	orrs	r1, r4
 80070a0:	f001 87d9 	beq.w	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80070a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070a8:	4cd2      	ldr	r4, [pc, #840]	; (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80070aa:	42a0      	cmp	r0, r4
 80070ac:	f171 0100 	sbcs.w	r1, r1, #0
 80070b0:	f082 822c 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070b8:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80070bc:	4321      	orrs	r1, r4
 80070be:	f001 8751 	beq.w	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80070c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070c6:	4ccc      	ldr	r4, [pc, #816]	; (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80070c8:	42a0      	cmp	r0, r4
 80070ca:	f171 0100 	sbcs.w	r1, r1, #0
 80070ce:	f082 821d 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070d6:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 80070da:	4321      	orrs	r1, r4
 80070dc:	f001 869a 	beq.w	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80070e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070e4:	4cc5      	ldr	r4, [pc, #788]	; (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80070e6:	42a0      	cmp	r0, r4
 80070e8:	f171 0100 	sbcs.w	r1, r1, #0
 80070ec:	f082 820e 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80070f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070f4:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80070f8:	4321      	orrs	r1, r4
 80070fa:	f001 8612 	beq.w	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80070fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007102:	4cbf      	ldr	r4, [pc, #764]	; (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007104:	42a0      	cmp	r0, r4
 8007106:	f171 0100 	sbcs.w	r1, r1, #0
 800710a:	f082 81ff 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800710e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007112:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8007116:	4321      	orrs	r1, r4
 8007118:	f002 817e 	beq.w	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800711c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007120:	4cb8      	ldr	r4, [pc, #736]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007122:	42a0      	cmp	r0, r4
 8007124:	f171 0100 	sbcs.w	r1, r1, #0
 8007128:	f082 81f0 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800712c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007130:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8007134:	4321      	orrs	r1, r4
 8007136:	f000 829e 	beq.w	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800713a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800713e:	4cb2      	ldr	r4, [pc, #712]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007140:	42a0      	cmp	r0, r4
 8007142:	f171 0100 	sbcs.w	r1, r1, #0
 8007146:	f082 81e1 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800714a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800714e:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8007152:	4321      	orrs	r1, r4
 8007154:	f000 826d 	beq.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800715c:	4cab      	ldr	r4, [pc, #684]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800715e:	42a0      	cmp	r0, r4
 8007160:	f171 0100 	sbcs.w	r1, r1, #0
 8007164:	f082 81d2 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800716c:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8007170:	4321      	orrs	r1, r4
 8007172:	f001 800d 	beq.w	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007176:	e9d7 0100 	ldrd	r0, r1, [r7]
 800717a:	4ca5      	ldr	r4, [pc, #660]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800717c:	42a0      	cmp	r0, r4
 800717e:	f171 0100 	sbcs.w	r1, r1, #0
 8007182:	f082 81c3 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007186:	e9d7 0100 	ldrd	r0, r1, [r7]
 800718a:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800718e:	4321      	orrs	r1, r4
 8007190:	f000 81d0 	beq.w	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007198:	4c9e      	ldr	r4, [pc, #632]	; (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800719a:	42a0      	cmp	r0, r4
 800719c:	f171 0100 	sbcs.w	r1, r1, #0
 80071a0:	f082 81b4 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80071a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071a8:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 80071ac:	4321      	orrs	r1, r4
 80071ae:	f000 8142 	beq.w	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80071b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071b6:	4c98      	ldr	r4, [pc, #608]	; (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80071b8:	42a0      	cmp	r0, r4
 80071ba:	f171 0100 	sbcs.w	r1, r1, #0
 80071be:	f082 81a5 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80071c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071c6:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 80071ca:	4321      	orrs	r1, r4
 80071cc:	f001 824e 	beq.w	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80071d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071d4:	4c91      	ldr	r4, [pc, #580]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80071d6:	42a0      	cmp	r0, r4
 80071d8:	f171 0100 	sbcs.w	r1, r1, #0
 80071dc:	f082 8196 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80071e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071e4:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 80071e8:	4321      	orrs	r1, r4
 80071ea:	f001 8197 	beq.w	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80071ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071f2:	4c8b      	ldr	r4, [pc, #556]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80071f4:	42a0      	cmp	r0, r4
 80071f6:	f171 0100 	sbcs.w	r1, r1, #0
 80071fa:	f082 8187 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80071fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007202:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8007206:	4321      	orrs	r1, r4
 8007208:	f001 8154 	beq.w	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800720c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007210:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8007214:	f171 0100 	sbcs.w	r1, r1, #0
 8007218:	f082 8178 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800721c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007220:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8007224:	4321      	orrs	r1, r4
 8007226:	f001 80b7 	beq.w	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800722a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800722e:	f248 0401 	movw	r4, #32769	; 0x8001
 8007232:	42a0      	cmp	r0, r4
 8007234:	f171 0100 	sbcs.w	r1, r1, #0
 8007238:	f082 8168 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800723c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007240:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8007244:	4321      	orrs	r1, r4
 8007246:	f001 8064 	beq.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800724a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800724e:	f244 0401 	movw	r4, #16385	; 0x4001
 8007252:	42a0      	cmp	r0, r4
 8007254:	f171 0100 	sbcs.w	r1, r1, #0
 8007258:	f082 8158 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800725c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007260:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8007264:	4321      	orrs	r1, r4
 8007266:	f001 8011 	beq.w	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800726a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800726e:	f242 0401 	movw	r4, #8193	; 0x2001
 8007272:	42a0      	cmp	r0, r4
 8007274:	f171 0100 	sbcs.w	r1, r1, #0
 8007278:	f082 8148 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800727c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007280:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8007284:	4321      	orrs	r1, r4
 8007286:	f000 871e 	beq.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800728a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800728e:	f241 0401 	movw	r4, #4097	; 0x1001
 8007292:	42a0      	cmp	r0, r4
 8007294:	f171 0100 	sbcs.w	r1, r1, #0
 8007298:	f082 8138 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800729c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072a0:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 80072a4:	4321      	orrs	r1, r4
 80072a6:	f000 86a8 	beq.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80072aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072ae:	f640 0401 	movw	r4, #2049	; 0x801
 80072b2:	42a0      	cmp	r0, r4
 80072b4:	f171 0100 	sbcs.w	r1, r1, #0
 80072b8:	f082 8128 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80072bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072c0:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 80072c4:	4321      	orrs	r1, r4
 80072c6:	f000 8632 	beq.w	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80072ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072ce:	f240 4401 	movw	r4, #1025	; 0x401
 80072d2:	42a0      	cmp	r0, r4
 80072d4:	f171 0100 	sbcs.w	r1, r1, #0
 80072d8:	f082 8118 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80072dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072e0:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 80072e4:	4321      	orrs	r1, r4
 80072e6:	f000 85b0 	beq.w	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80072ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072ee:	f240 2401 	movw	r4, #513	; 0x201
 80072f2:	42a0      	cmp	r0, r4
 80072f4:	f171 0100 	sbcs.w	r1, r1, #0
 80072f8:	f082 8108 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80072fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007300:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8007304:	4321      	orrs	r1, r4
 8007306:	f000 8535 	beq.w	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800730a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800730e:	f240 1401 	movw	r4, #257	; 0x101
 8007312:	42a0      	cmp	r0, r4
 8007314:	f171 0100 	sbcs.w	r1, r1, #0
 8007318:	f082 80f8 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800731c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007320:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8007324:	4321      	orrs	r1, r4
 8007326:	f000 84ba 	beq.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800732a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800732e:	2881      	cmp	r0, #129	; 0x81
 8007330:	f171 0100 	sbcs.w	r1, r1, #0
 8007334:	f082 80ea 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800733c:	2821      	cmp	r0, #33	; 0x21
 800733e:	f171 0100 	sbcs.w	r1, r1, #0
 8007342:	d26f      	bcs.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007348:	4301      	orrs	r1, r0
 800734a:	f002 80df 	beq.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800734e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007352:	1e42      	subs	r2, r0, #1
 8007354:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007358:	2a20      	cmp	r2, #32
 800735a:	f173 0100 	sbcs.w	r1, r3, #0
 800735e:	f082 80d5 	bcs.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007362:	2a1f      	cmp	r2, #31
 8007364:	f202 80d2 	bhi.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007368:	a101      	add	r1, pc, #4	; (adr r1, 8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800736a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800736e:	bf00      	nop
 8007370:	080076d1 	.word	0x080076d1
 8007374:	0800779d 	.word	0x0800779d
 8007378:	0800950d 	.word	0x0800950d
 800737c:	0800785d 	.word	0x0800785d
 8007380:	0800950d 	.word	0x0800950d
 8007384:	0800950d 	.word	0x0800950d
 8007388:	0800950d 	.word	0x0800950d
 800738c:	0800792d 	.word	0x0800792d
 8007390:	0800950d 	.word	0x0800950d
 8007394:	0800950d 	.word	0x0800950d
 8007398:	0800950d 	.word	0x0800950d
 800739c:	0800950d 	.word	0x0800950d
 80073a0:	0800950d 	.word	0x0800950d
 80073a4:	0800950d 	.word	0x0800950d
 80073a8:	0800950d 	.word	0x0800950d
 80073ac:	08007a0f 	.word	0x08007a0f
 80073b0:	0800950d 	.word	0x0800950d
 80073b4:	0800950d 	.word	0x0800950d
 80073b8:	0800950d 	.word	0x0800950d
 80073bc:	0800950d 	.word	0x0800950d
 80073c0:	0800950d 	.word	0x0800950d
 80073c4:	0800950d 	.word	0x0800950d
 80073c8:	0800950d 	.word	0x0800950d
 80073cc:	0800950d 	.word	0x0800950d
 80073d0:	0800950d 	.word	0x0800950d
 80073d4:	0800950d 	.word	0x0800950d
 80073d8:	0800950d 	.word	0x0800950d
 80073dc:	0800950d 	.word	0x0800950d
 80073e0:	0800950d 	.word	0x0800950d
 80073e4:	0800950d 	.word	0x0800950d
 80073e8:	0800950d 	.word	0x0800950d
 80073ec:	08007ae5 	.word	0x08007ae5
 80073f0:	80000001 	.word	0x80000001
 80073f4:	40000001 	.word	0x40000001
 80073f8:	20000001 	.word	0x20000001
 80073fc:	10000001 	.word	0x10000001
 8007400:	08000001 	.word	0x08000001
 8007404:	04000001 	.word	0x04000001
 8007408:	00800001 	.word	0x00800001
 800740c:	00400001 	.word	0x00400001
 8007410:	00200001 	.word	0x00200001
 8007414:	00100001 	.word	0x00100001
 8007418:	00080001 	.word	0x00080001
 800741c:	00040001 	.word	0x00040001
 8007420:	00020001 	.word	0x00020001
 8007424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007428:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800742c:	430b      	orrs	r3, r1
 800742e:	f000 83c4 	beq.w	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007432:	f002 b86b 	b.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007436:	4ba1      	ldr	r3, [pc, #644]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800743c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007440:	633b      	str	r3, [r7, #48]	; 0x30
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007448:	d036      	beq.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007450:	d86b      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007458:	d02b      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007460:	d863      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007468:	d01b      	beq.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007470:	d85b      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	2b00      	cmp	r3, #0
 8007476:	d004      	beq.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800747e:	d008      	beq.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007480:	e053      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007482:	f107 0320 	add.w	r3, r7, #32
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff f8ba 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007490:	e04e      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007492:	f107 0314 	add.w	r3, r7, #20
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff fa1c 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074a0:	e046      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074a2:	f107 0308 	add.w	r3, r7, #8
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff fb7e 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074b0:	e03e      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80074b2:	4b83      	ldr	r3, [pc, #524]	; (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074b6:	e03b      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074b8:	4b80      	ldr	r3, [pc, #512]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80074ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074c4:	4b7d      	ldr	r3, [pc, #500]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d10c      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074d6:	4b79      	ldr	r3, [pc, #484]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	08db      	lsrs	r3, r3, #3
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	4a78      	ldr	r2, [pc, #480]	; (80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80074e2:	fa22 f303 	lsr.w	r3, r2, r3
 80074e6:	637b      	str	r3, [r7, #52]	; 0x34
 80074e8:	e01e      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074ea:	4b74      	ldr	r3, [pc, #464]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f6:	d106      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fe:	d102      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007500:	4b71      	ldr	r3, [pc, #452]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007502:	637b      	str	r3, [r7, #52]	; 0x34
 8007504:	e010      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007506:	4b6d      	ldr	r3, [pc, #436]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007512:	d106      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800751a:	d102      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800751c:	4b6b      	ldr	r3, [pc, #428]	; (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800751e:	637b      	str	r3, [r7, #52]	; 0x34
 8007520:	e002      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007526:	e003      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007528:	e002      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800752e:	bf00      	nop
          }
        }
        break;
 8007530:	f001 bfef 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007534:	4b61      	ldr	r3, [pc, #388]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800753a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800753e:	633b      	str	r3, [r7, #48]	; 0x30
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007546:	d036      	beq.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800754e:	d86b      	bhi.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007556:	d02b      	beq.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800755e:	d863      	bhi.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007566:	d01b      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800756e:	d85b      	bhi.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800757c:	d008      	beq.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800757e:	e053      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007580:	f107 0320 	add.w	r3, r7, #32
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff f83b 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800758e:	e04e      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007590:	f107 0314 	add.w	r3, r7, #20
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff f99d 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800759e:	e046      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075a0:	f107 0308 	add.w	r3, r7, #8
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff faff 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075ae:	e03e      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80075b0:	4b43      	ldr	r3, [pc, #268]	; (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075b4:	e03b      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075b6:	4b41      	ldr	r3, [pc, #260]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075bc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80075c0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075c2:	4b3e      	ldr	r3, [pc, #248]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d10c      	bne.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d109      	bne.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075d4:	4b39      	ldr	r3, [pc, #228]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	08db      	lsrs	r3, r3, #3
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	4a39      	ldr	r2, [pc, #228]	; (80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80075e0:	fa22 f303 	lsr.w	r3, r2, r3
 80075e4:	637b      	str	r3, [r7, #52]	; 0x34
 80075e6:	e01e      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075e8:	4b34      	ldr	r3, [pc, #208]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f4:	d106      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fc:	d102      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80075fe:	4b32      	ldr	r3, [pc, #200]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007600:	637b      	str	r3, [r7, #52]	; 0x34
 8007602:	e010      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007604:	4b2d      	ldr	r3, [pc, #180]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800760c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007610:	d106      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007618:	d102      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800761a:	4b2c      	ldr	r3, [pc, #176]	; (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800761c:	637b      	str	r3, [r7, #52]	; 0x34
 800761e:	e002      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007624:	e003      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007626:	e002      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800762c:	bf00      	nop
          }
        }
        break;
 800762e:	f001 bf70 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007632:	4b22      	ldr	r3, [pc, #136]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007634:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	2b00      	cmp	r3, #0
 8007642:	d108      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007644:	f107 0320 	add.w	r3, r7, #32
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe ffd9 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007652:	f001 bf5e 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	d108      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800765c:	f107 0314 	add.w	r3, r7, #20
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff f937 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800766a:	f001 bf52 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007672:	f001 bf4e 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007676:	4b11      	ldr	r3, [pc, #68]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007678:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800767c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007680:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	2b00      	cmp	r3, #0
 8007686:	d108      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007688:	f107 0320 	add.w	r3, r7, #32
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe ffb7 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007696:	f001 bf3c 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	2b80      	cmp	r3, #128	; 0x80
 800769e:	d108      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076a0:	f107 0314 	add.w	r3, r7, #20
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7ff f915 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ae:	f001 bf30 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076b6:	f001 bf2c 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076ba:	bf00      	nop
 80076bc:	44020c00 	.word	0x44020c00
 80076c0:	00bb8000 	.word	0x00bb8000
 80076c4:	03d09000 	.word	0x03d09000
 80076c8:	003d0900 	.word	0x003d0900
 80076cc:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80076d0:	4b9d      	ldr	r3, [pc, #628]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80076d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80076e2:	f7fc ffd7 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 80076e6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80076e8:	f001 bf13 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80076ec:	4b96      	ldr	r3, [pc, #600]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076f8:	d10a      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d107      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007700:	f107 0314 	add.w	r3, r7, #20
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff f8e5 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	637b      	str	r3, [r7, #52]	; 0x34
 800770e:	e043      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007710:	4b8d      	ldr	r3, [pc, #564]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800771c:	d10a      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	2b02      	cmp	r3, #2
 8007722:	d107      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007724:	f107 0308 	add.w	r3, r7, #8
 8007728:	4618      	mov	r0, r3
 800772a:	f7ff fa3d 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	637b      	str	r3, [r7, #52]	; 0x34
 8007732:	e031      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007734:	4b84      	ldr	r3, [pc, #528]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b02      	cmp	r3, #2
 800773e:	d10c      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	2b03      	cmp	r3, #3
 8007744:	d109      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007746:	4b80      	ldr	r3, [pc, #512]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	08db      	lsrs	r3, r3, #3
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	4a7e      	ldr	r2, [pc, #504]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007752:	fa22 f303 	lsr.w	r3, r2, r3
 8007756:	637b      	str	r3, [r7, #52]	; 0x34
 8007758:	e01e      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800775a:	4b7b      	ldr	r3, [pc, #492]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007766:	d105      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	2b04      	cmp	r3, #4
 800776c:	d102      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800776e:	4b78      	ldr	r3, [pc, #480]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007770:	637b      	str	r3, [r7, #52]	; 0x34
 8007772:	e011      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007774:	4b74      	ldr	r3, [pc, #464]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b02      	cmp	r3, #2
 8007780:	d106      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	2b05      	cmp	r3, #5
 8007786:	d103      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
 800778e:	e003      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007794:	f001 bebd 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007798:	f001 bebb 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800779c:	4b6a      	ldr	r3, [pc, #424]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800779e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077a6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80077ae:	f7fc ff5b 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 80077b2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80077b4:	f001 bead 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80077b8:	4b63      	ldr	r3, [pc, #396]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077c4:	d10a      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d107      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077cc:	f107 0314 	add.w	r3, r7, #20
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff f87f 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
 80077da:	e03d      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d108      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077e2:	f107 0308 	add.w	r3, r7, #8
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff f9de 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077f0:	f001 be8f 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80077f4:	4b54      	ldr	r3, [pc, #336]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d10c      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	2b18      	cmp	r3, #24
 8007804:	d109      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007806:	4b50      	ldr	r3, [pc, #320]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	08db      	lsrs	r3, r3, #3
 800780c:	f003 0303 	and.w	r3, r3, #3
 8007810:	4a4e      	ldr	r2, [pc, #312]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007812:	fa22 f303 	lsr.w	r3, r2, r3
 8007816:	637b      	str	r3, [r7, #52]	; 0x34
 8007818:	e01e      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800781a:	4b4b      	ldr	r3, [pc, #300]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007826:	d105      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	2b20      	cmp	r3, #32
 800782c:	d102      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800782e:	4b48      	ldr	r3, [pc, #288]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
 8007832:	e011      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007834:	4b44      	ldr	r3, [pc, #272]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b02      	cmp	r3, #2
 8007840:	d106      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	2b28      	cmp	r3, #40	; 0x28
 8007846:	d103      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
 800784e:	e003      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007854:	f001 be5d 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007858:	f001 be5b 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800785c:	4b3a      	ldr	r3, [pc, #232]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800785e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007862:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007866:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800786e:	f7fc fefb 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8007872:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007874:	f001 be4d 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007878:	4b33      	ldr	r3, [pc, #204]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007884:	d10a      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	2b40      	cmp	r3, #64	; 0x40
 800788a:	d107      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800788c:	f107 0314 	add.w	r3, r7, #20
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff f81f 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	637b      	str	r3, [r7, #52]	; 0x34
 800789a:	e045      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800789c:	4b2a      	ldr	r3, [pc, #168]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a8:	d10a      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	2b80      	cmp	r3, #128	; 0x80
 80078ae:	d107      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b0:	f107 0308 	add.w	r3, r7, #8
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff f977 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
 80078be:	e033      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80078c0:	4b21      	ldr	r3, [pc, #132]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d10c      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	2bc0      	cmp	r3, #192	; 0xc0
 80078d0:	d109      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078d2:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	08db      	lsrs	r3, r3, #3
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	4a1b      	ldr	r2, [pc, #108]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80078de:	fa22 f303 	lsr.w	r3, r2, r3
 80078e2:	637b      	str	r3, [r7, #52]	; 0x34
 80078e4:	e020      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80078e6:	4b18      	ldr	r3, [pc, #96]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f2:	d106      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fa:	d102      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80078fc:	4b14      	ldr	r3, [pc, #80]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80078fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007900:	e012      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007902:	4b11      	ldr	r3, [pc, #68]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b02      	cmp	r3, #2
 800790e:	d107      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007916:	d103      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
 800791e:	e003      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007924:	f001 bdf5 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007928:	f001 bdf3 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800792e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007932:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007936:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10a      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800793e:	f7fc fe93 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8007942:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007944:	f001 bde5 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007948:	44020c00 	.word	0x44020c00
 800794c:	03d09000 	.word	0x03d09000
 8007950:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007954:	4ba0      	ldr	r3, [pc, #640]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800795c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007960:	d10b      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007968:	d107      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800796a:	f107 0314 	add.w	r3, r7, #20
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe ffb0 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
 8007978:	e047      	b.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800797a:	4b97      	ldr	r3, [pc, #604]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007986:	d10b      	bne.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800798e:	d107      	bne.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007990:	f107 0308 	add.w	r3, r7, #8
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff f907 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	637b      	str	r3, [r7, #52]	; 0x34
 800799e:	e034      	b.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80079a0:	4b8d      	ldr	r3, [pc, #564]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d10d      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80079b2:	d109      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079b4:	4b88      	ldr	r3, [pc, #544]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	08db      	lsrs	r3, r3, #3
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	4a87      	ldr	r2, [pc, #540]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80079c0:	fa22 f303 	lsr.w	r3, r2, r3
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
 80079c6:	e020      	b.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80079c8:	4b83      	ldr	r3, [pc, #524]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d4:	d106      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079dc:	d102      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80079de:	4b80      	ldr	r3, [pc, #512]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80079e0:	637b      	str	r3, [r7, #52]	; 0x34
 80079e2:	e012      	b.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80079e4:	4b7c      	ldr	r3, [pc, #496]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80079e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d107      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80079f8:	d103      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80079fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007a00:	e003      	b.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a06:	f001 bd84 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a0a:	f001 bd82 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007a0e:	4b72      	ldr	r3, [pc, #456]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a14:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007a18:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a20:	f7fc fe22 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8007a24:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a26:	f001 bd74 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007a2a:	4b6b      	ldr	r3, [pc, #428]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a36:	d10b      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3e:	d107      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a40:	f107 0314 	add.w	r3, r7, #20
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe ff45 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4e:	e047      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007a50:	4b61      	ldr	r3, [pc, #388]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a5c:	d10b      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a64:	d107      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff f89c 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
 8007a74:	e034      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007a76:	4b58      	ldr	r3, [pc, #352]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d10d      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a88:	d109      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a8a:	4b53      	ldr	r3, [pc, #332]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	08db      	lsrs	r3, r3, #3
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	4a51      	ldr	r2, [pc, #324]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007a96:	fa22 f303 	lsr.w	r3, r2, r3
 8007a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a9c:	e020      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007a9e:	4b4e      	ldr	r3, [pc, #312]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aaa:	d106      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab2:	d102      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007ab4:	4b4a      	ldr	r3, [pc, #296]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab8:	e012      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007aba:	4b47      	ldr	r3, [pc, #284]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d107      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007ace:	d103      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad6:	e003      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007adc:	f001 bd19 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ae0:	f001 bd17 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007ae4:	4b3c      	ldr	r3, [pc, #240]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007aea:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007aee:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007af6:	f7fc fdb7 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8007afa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007afc:	f001 bd09 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007b00:	4b35      	ldr	r3, [pc, #212]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b0c:	d10b      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b14:	d107      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b16:	f107 0314 	add.w	r3, r7, #20
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe feda 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	637b      	str	r3, [r7, #52]	; 0x34
 8007b24:	e047      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007b26:	4b2c      	ldr	r3, [pc, #176]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b32:	d10b      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3a:	d107      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b3c:	f107 0308 	add.w	r3, r7, #8
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff f831 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
 8007b4a:	e034      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007b4c:	4b22      	ldr	r3, [pc, #136]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d10d      	bne.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007b5e:	d109      	bne.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b60:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	08db      	lsrs	r3, r3, #3
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	4a1c      	ldr	r2, [pc, #112]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b70:	637b      	str	r3, [r7, #52]	; 0x34
 8007b72:	e020      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007b74:	4b18      	ldr	r3, [pc, #96]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b80:	d106      	bne.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b88:	d102      	bne.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007b8a:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b8e:	e012      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007b90:	4b11      	ldr	r3, [pc, #68]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d107      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007ba4:	d103      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007baa:	637b      	str	r3, [r7, #52]	; 0x34
 8007bac:	e003      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bb2:	f001 bcae 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bb6:	f001 bcac 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8007bba:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007bc0:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8007bc4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10b      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007bcc:	f7fc fd4c 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8007bd0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8007bd2:	f001 bc9e 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bd6:	bf00      	nop
 8007bd8:	44020c00 	.word	0x44020c00
 8007bdc:	03d09000 	.word	0x03d09000
 8007be0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007be4:	4ba0      	ldr	r3, [pc, #640]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bf0:	d10b      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bf8:	d107      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bfa:	f107 0314 	add.w	r3, r7, #20
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fe68 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	637b      	str	r3, [r7, #52]	; 0x34
 8007c08:	e047      	b.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8007c0a:	4b97      	ldr	r3, [pc, #604]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c16:	d10b      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c20:	f107 0308 	add.w	r3, r7, #8
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe ffbf 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2e:	e034      	b.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007c30:	4b8d      	ldr	r3, [pc, #564]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d10d      	bne.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007c42:	d109      	bne.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c44:	4b88      	ldr	r3, [pc, #544]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	08db      	lsrs	r3, r3, #3
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	4a87      	ldr	r2, [pc, #540]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007c50:	fa22 f303 	lsr.w	r3, r2, r3
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
 8007c56:	e020      	b.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007c58:	4b83      	ldr	r3, [pc, #524]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c64:	d106      	bne.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c6c:	d102      	bne.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8007c6e:	4b80      	ldr	r3, [pc, #512]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007c70:	637b      	str	r3, [r7, #52]	; 0x34
 8007c72:	e012      	b.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007c74:	4b7c      	ldr	r3, [pc, #496]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d107      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007c88:	d103      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8007c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c90:	e003      	b.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c96:	f001 bc3c 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c9a:	f001 bc3a 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8007c9e:	4b72      	ldr	r3, [pc, #456]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007ca4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007ca8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d104      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cb0:	f7fc fcda 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8007cb4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cb6:	f001 bc2c 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8007cba:	4b6b      	ldr	r3, [pc, #428]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cc6:	d10b      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cce:	d107      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe fdfd 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8007cde:	e047      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007ce0:	4b61      	ldr	r3, [pc, #388]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cec:	d10b      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cf4:	d107      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cf6:	f107 0308 	add.w	r3, r7, #8
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe ff54 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	637b      	str	r3, [r7, #52]	; 0x34
 8007d04:	e034      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007d06:	4b58      	ldr	r3, [pc, #352]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d10d      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d18:	d109      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d1a:	4b53      	ldr	r3, [pc, #332]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	08db      	lsrs	r3, r3, #3
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	4a51      	ldr	r2, [pc, #324]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007d26:	fa22 f303 	lsr.w	r3, r2, r3
 8007d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d2c:	e020      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007d2e:	4b4e      	ldr	r3, [pc, #312]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3a:	d106      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d42:	d102      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8007d44:	4b4a      	ldr	r3, [pc, #296]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34
 8007d48:	e012      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8007d4a:	4b47      	ldr	r3, [pc, #284]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d107      	bne.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007d5e:	d103      	bne.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d64:	637b      	str	r3, [r7, #52]	; 0x34
 8007d66:	e003      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d6c:	f001 bbd1 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d70:	f001 bbcf 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007d74:	4b3c      	ldr	r3, [pc, #240]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007d7a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007d7e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d104      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d86:	f7fc fc6f 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8007d8a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d8c:	f001 bbc1 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007d90:	4b35      	ldr	r3, [pc, #212]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d9c:	d10b      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007da4:	d107      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da6:	f107 0314 	add.w	r3, r7, #20
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fd92 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	637b      	str	r3, [r7, #52]	; 0x34
 8007db4:	e047      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8007db6:	4b2c      	ldr	r3, [pc, #176]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc2:	d10b      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dca:	d107      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dcc:	f107 0308 	add.w	r3, r7, #8
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe fee9 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dda:	e034      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007ddc:	4b22      	ldr	r3, [pc, #136]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d10d      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007dee:	d109      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007df0:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	08db      	lsrs	r3, r3, #3
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	4a1c      	ldr	r2, [pc, #112]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8007e00:	637b      	str	r3, [r7, #52]	; 0x34
 8007e02:	e020      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007e04:	4b18      	ldr	r3, [pc, #96]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e10:	d106      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e18:	d102      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8007e1a:	4b15      	ldr	r3, [pc, #84]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1e:	e012      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007e20:	4b11      	ldr	r3, [pc, #68]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d107      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007e34:	d103      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8007e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e3c:	e003      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e42:	f001 bb66 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e46:	f001 bb64 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007e4a:	4b07      	ldr	r3, [pc, #28]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007e50:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8007e54:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10b      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e5c:	f7fc fc04 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8007e60:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e62:	f001 bb56 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e66:	bf00      	nop
 8007e68:	44020c00 	.word	0x44020c00
 8007e6c:	03d09000 	.word	0x03d09000
 8007e70:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007e74:	4ba1      	ldr	r3, [pc, #644]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e80:	d10b      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e88:	d107      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e8a:	f107 0314 	add.w	r3, r7, #20
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe fd20 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
 8007e98:	e047      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007e9a:	4b98      	ldr	r3, [pc, #608]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea6:	d10b      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eae:	d107      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb0:	f107 0308 	add.w	r3, r7, #8
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fe fe77 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ebe:	e034      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007ec0:	4b8e      	ldr	r3, [pc, #568]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d10d      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007ed2:	d109      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ed4:	4b89      	ldr	r3, [pc, #548]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	08db      	lsrs	r3, r3, #3
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	4a88      	ldr	r2, [pc, #544]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee6:	e020      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007ee8:	4b84      	ldr	r3, [pc, #528]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef4:	d106      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007efc:	d102      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8007efe:	4b81      	ldr	r3, [pc, #516]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
 8007f02:	e012      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007f04:	4b7d      	ldr	r3, [pc, #500]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d107      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8007f18:	d103      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8007f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f20:	e003      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f26:	f001 baf4 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f2a:	f001 baf2 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007f2e:	4b73      	ldr	r3, [pc, #460]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f40:	f7fc fb92 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8007f44:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f46:	f001 bae4 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8007f4a:	4b6c      	ldr	r3, [pc, #432]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f56:	d10a      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d107      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f5e:	f107 0314 	add.w	r3, r7, #20
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fcb6 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f6c:	e043      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8007f6e:	4b63      	ldr	r3, [pc, #396]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f7a:	d10a      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d107      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f82:	f107 0308 	add.w	r3, r7, #8
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe fe0e 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f90:	e031      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007f92:	4b5a      	ldr	r3, [pc, #360]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d10c      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d109      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fa4:	4b55      	ldr	r3, [pc, #340]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	08db      	lsrs	r3, r3, #3
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	4a54      	ldr	r2, [pc, #336]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb6:	e01e      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8007fb8:	4b50      	ldr	r3, [pc, #320]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fc4:	d105      	bne.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d102      	bne.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007fcc:	4b4d      	ldr	r3, [pc, #308]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007fce:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd0:	e011      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8007fd2:	4b4a      	ldr	r3, [pc, #296]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d106      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	2b05      	cmp	r3, #5
 8007fe4:	d103      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8007fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fea:	637b      	str	r3, [r7, #52]	; 0x34
 8007fec:	e003      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ff2:	f001 ba8e 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ff6:	f001 ba8c 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007ffa:	4b40      	ldr	r3, [pc, #256]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ffc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008000:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008004:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800800c:	f7fc fb2c 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8008010:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008012:	f001 ba7e 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008016:	4b39      	ldr	r3, [pc, #228]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800801e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008022:	d10a      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2b10      	cmp	r3, #16
 8008028:	d107      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800802a:	f107 0314 	add.w	r3, r7, #20
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe fc50 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	637b      	str	r3, [r7, #52]	; 0x34
 8008038:	e043      	b.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800803a:	4b30      	ldr	r3, [pc, #192]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008046:	d10a      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	2b20      	cmp	r3, #32
 800804c:	d107      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800804e:	f107 0308 	add.w	r3, r7, #8
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fda8 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	637b      	str	r3, [r7, #52]	; 0x34
 800805c:	e031      	b.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800805e:	4b27      	ldr	r3, [pc, #156]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b02      	cmp	r3, #2
 8008068:	d10c      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	2b30      	cmp	r3, #48	; 0x30
 800806e:	d109      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008070:	4b22      	ldr	r3, [pc, #136]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	08db      	lsrs	r3, r3, #3
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	4a21      	ldr	r2, [pc, #132]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800807c:	fa22 f303 	lsr.w	r3, r2, r3
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
 8008082:	e01e      	b.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008084:	4b1d      	ldr	r3, [pc, #116]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800808c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008090:	d105      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d102      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008098:	4b1a      	ldr	r3, [pc, #104]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
 800809c:	e011      	b.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800809e:	4b17      	ldr	r3, [pc, #92]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80080a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d106      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	2b50      	cmp	r3, #80	; 0x50
 80080b0:	d103      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80080b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
 80080b8:	e003      	b.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080be:	f001 ba28 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080c2:	f001 ba26 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80080c6:	4b0d      	ldr	r3, [pc, #52]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80080c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80080d0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80080d8:	f7fc faf2 	bl	80046c0 <HAL_RCC_GetPCLK3Freq>
 80080dc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80080de:	f001 ba18 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080e8:	d10e      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ea:	f107 0314 	add.w	r3, r7, #20
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fbf0 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080f8:	f001 ba0b 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080fc:	44020c00 	.word	0x44020c00
 8008100:	03d09000 	.word	0x03d09000
 8008104:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800810e:	d108      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008110:	f107 0308 	add.w	r3, r7, #8
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fd47 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800811e:	f001 b9f8 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008122:	4ba4      	ldr	r3, [pc, #656]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b02      	cmp	r3, #2
 800812c:	d10d      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008134:	d109      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008136:	4b9f      	ldr	r3, [pc, #636]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	08db      	lsrs	r3, r3, #3
 800813c:	f003 0303 	and.w	r3, r3, #3
 8008140:	4a9d      	ldr	r2, [pc, #628]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008142:	fa22 f303 	lsr.w	r3, r2, r3
 8008146:	637b      	str	r3, [r7, #52]	; 0x34
 8008148:	e020      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800814a:	4b9a      	ldr	r3, [pc, #616]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008156:	d106      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800815e:	d102      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008160:	4b96      	ldr	r3, [pc, #600]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
 8008164:	e012      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008166:	4b93      	ldr	r3, [pc, #588]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b02      	cmp	r3, #2
 8008172:	d107      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800817a:	d103      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800817c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008180:	637b      	str	r3, [r7, #52]	; 0x34
 8008182:	e003      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008188:	f001 b9c3 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800818c:	f001 b9c1 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008190:	4b88      	ldr	r3, [pc, #544]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80081a2:	f7fc fa45 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 80081a6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80081a8:	f001 b9b3 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d104      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80081b2:	f7fc f911 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 80081b6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081b8:	f001 b9ab 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d108      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081c2:	f107 0314 	add.w	r3, r7, #20
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fb84 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081d0:	f001 b99f 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80081d4:	4b77      	ldr	r3, [pc, #476]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081e0:	d105      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d102      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80081e8:	4b75      	ldr	r3, [pc, #468]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80081ea:	637b      	str	r3, [r7, #52]	; 0x34
 80081ec:	e023      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80081ee:	4b71      	ldr	r3, [pc, #452]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d10c      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d109      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008200:	4b6c      	ldr	r3, [pc, #432]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	08db      	lsrs	r3, r3, #3
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	4a6b      	ldr	r2, [pc, #428]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800820c:	fa22 f303 	lsr.w	r3, r2, r3
 8008210:	637b      	str	r3, [r7, #52]	; 0x34
 8008212:	e010      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008214:	4b67      	ldr	r3, [pc, #412]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800821c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008220:	d105      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	2b05      	cmp	r3, #5
 8008226:	d102      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008228:	4b64      	ldr	r3, [pc, #400]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800822a:	637b      	str	r3, [r7, #52]	; 0x34
 800822c:	e003      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008232:	f001 b96e 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008236:	f001 b96c 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800823a:	4b5e      	ldr	r3, [pc, #376]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800823c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008246:	4b5b      	ldr	r3, [pc, #364]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b02      	cmp	r3, #2
 8008252:	d106      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	2b00      	cmp	r3, #0
 8008258:	d103      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800825a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800825e:	637b      	str	r3, [r7, #52]	; 0x34
 8008260:	e012      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008262:	4b54      	ldr	r3, [pc, #336]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800826c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008270:	d106      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	2b08      	cmp	r3, #8
 8008276:	d103      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008278:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
 800827e:	e003      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008284:	f001 b945 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008288:	f001 b943 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800828c:	4b49      	ldr	r3, [pc, #292]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800828e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008292:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008296:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800829e:	f7fc f9e3 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 80082a2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80082a4:	f001 b935 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ae:	d108      	bne.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082b0:	f107 0308 	add.w	r3, r7, #8
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe fc77 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082be:	f001 b928 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80082c2:	4b3c      	ldr	r3, [pc, #240]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d10d      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082d4:	d109      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082d6:	4b37      	ldr	r3, [pc, #220]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	08db      	lsrs	r3, r3, #3
 80082dc:	f003 0303 	and.w	r3, r3, #3
 80082e0:	4a35      	ldr	r2, [pc, #212]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80082e2:	fa22 f303 	lsr.w	r3, r2, r3
 80082e6:	637b      	str	r3, [r7, #52]	; 0x34
 80082e8:	e011      	b.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80082ea:	4b32      	ldr	r3, [pc, #200]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f6:	d106      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082fe:	d102      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008300:	4b2e      	ldr	r3, [pc, #184]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008302:	637b      	str	r3, [r7, #52]	; 0x34
 8008304:	e003      	b.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800830a:	f001 b902 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800830e:	f001 b900 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008312:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008314:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008318:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800831c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	2b00      	cmp	r3, #0
 8008322:	d104      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008324:	f7fc f9a0 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8008328:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800832a:	f001 b8f2 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008334:	d108      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008336:	f107 0308 	add.w	r3, r7, #8
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fc34 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008344:	f001 b8e5 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008348:	4b1a      	ldr	r3, [pc, #104]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b02      	cmp	r3, #2
 8008352:	d10d      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800835a:	d109      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800835c:	4b15      	ldr	r3, [pc, #84]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	08db      	lsrs	r3, r3, #3
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	4a14      	ldr	r2, [pc, #80]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008368:	fa22 f303 	lsr.w	r3, r2, r3
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
 800836e:	e011      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008370:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d106      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008384:	d102      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008386:	4b0d      	ldr	r3, [pc, #52]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008388:	637b      	str	r3, [r7, #52]	; 0x34
 800838a:	e003      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008390:	f001 b8bf 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008394:	f001 b8bd 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800839a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800839e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80083a2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10c      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80083aa:	f7fc f989 	bl	80046c0 <HAL_RCC_GetPCLK3Freq>
 80083ae:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80083b0:	f001 b8af 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083b4:	44020c00 	.word	0x44020c00
 80083b8:	03d09000 	.word	0x03d09000
 80083bc:	003d0900 	.word	0x003d0900
 80083c0:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ca:	d108      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083cc:	f107 0308 	add.w	r3, r7, #8
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fe fbe9 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083da:	f001 b89a 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80083de:	4b9f      	ldr	r3, [pc, #636]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d10d      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083f0:	d109      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083f2:	4b9a      	ldr	r3, [pc, #616]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	08db      	lsrs	r3, r3, #3
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	4a98      	ldr	r2, [pc, #608]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80083fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008402:	637b      	str	r3, [r7, #52]	; 0x34
 8008404:	e011      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008406:	4b95      	ldr	r3, [pc, #596]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800840e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008412:	d106      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800841a:	d102      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800841c:	4b91      	ldr	r3, [pc, #580]	; (8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
 8008420:	e003      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008426:	f001 b874 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800842a:	f001 b872 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800842e:	4b8b      	ldr	r3, [pc, #556]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008430:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008434:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008438:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008440:	f7fc f93e 	bl	80046c0 <HAL_RCC_GetPCLK3Freq>
 8008444:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008446:	f001 b864 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008450:	d108      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008452:	f107 0308 	add.w	r3, r7, #8
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fba6 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008460:	f001 b857 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008464:	4b7d      	ldr	r3, [pc, #500]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b02      	cmp	r3, #2
 800846e:	d10d      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008476:	d109      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008478:	4b78      	ldr	r3, [pc, #480]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	08db      	lsrs	r3, r3, #3
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	4a77      	ldr	r2, [pc, #476]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008484:	fa22 f303 	lsr.w	r3, r2, r3
 8008488:	637b      	str	r3, [r7, #52]	; 0x34
 800848a:	e011      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800848c:	4b73      	ldr	r3, [pc, #460]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008498:	d106      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084a0:	d102      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80084a2:	4b70      	ldr	r3, [pc, #448]	; (8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
 80084a6:	e003      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084ac:	f001 b831 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084b0:	f001 b82f 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80084b4:	4b69      	ldr	r3, [pc, #420]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80084b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80084ba:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80084be:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80084c6:	f7fc f8cf 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 80084ca:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80084cc:	f001 b821 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084d6:	d108      	bne.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084d8:	f107 0308 	add.w	r3, r7, #8
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fe fb63 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084e6:	f001 b814 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80084ea:	4b5c      	ldr	r3, [pc, #368]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d10e      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084fc:	d10a      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084fe:	4b57      	ldr	r3, [pc, #348]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	08db      	lsrs	r3, r3, #3
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	4a55      	ldr	r2, [pc, #340]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800850a:	fa22 f303 	lsr.w	r3, r2, r3
 800850e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008510:	f000 bfff 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008518:	f000 bffb 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800851c:	4b4f      	ldr	r3, [pc, #316]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800851e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008522:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008526:	633b      	str	r3, [r7, #48]	; 0x30
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800852e:	d056      	beq.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008536:	f200 808b 	bhi.w	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008540:	d03e      	beq.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008548:	f200 8082 	bhi.w	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008552:	d027      	beq.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855a:	d879      	bhi.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008562:	d017      	beq.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800856a:	d871      	bhi.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008578:	d004      	beq.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800857a:	e069      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800857c:	f7fc f8a0 	bl	80046c0 <HAL_RCC_GetPCLK3Freq>
 8008580:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008582:	e068      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008584:	f107 0314 	add.w	r3, r7, #20
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe f9a3 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008592:	e060      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008594:	f107 0308 	add.w	r3, r7, #8
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe fb05 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085a2:	e058      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085a4:	4b2d      	ldr	r3, [pc, #180]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80085a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d103      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80085b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80085b8:	e04d      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085be:	e04a      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80085c0:	4b26      	ldr	r3, [pc, #152]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80085c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085ce:	d103      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80085d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80085d6:	e03e      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80085d8:	2300      	movs	r3, #0
 80085da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085dc:	e03b      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085de:	4b1f      	ldr	r3, [pc, #124]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80085e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085e4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80085e8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085ea:	4b1c      	ldr	r3, [pc, #112]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d10c      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d109      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085fc:	4b17      	ldr	r3, [pc, #92]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	08db      	lsrs	r3, r3, #3
 8008602:	f003 0303 	and.w	r3, r3, #3
 8008606:	4a16      	ldr	r2, [pc, #88]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008608:	fa22 f303 	lsr.w	r3, r2, r3
 800860c:	637b      	str	r3, [r7, #52]	; 0x34
 800860e:	e01e      	b.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008610:	4b12      	ldr	r3, [pc, #72]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800861c:	d106      	bne.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008624:	d102      	bne.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008626:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008628:	637b      	str	r3, [r7, #52]	; 0x34
 800862a:	e010      	b.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800862c:	4b0b      	ldr	r3, [pc, #44]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008638:	d106      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008640:	d102      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008642:	4b09      	ldr	r3, [pc, #36]	; (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
 8008646:	e002      	b.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800864c:	e003      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800864e:	e002      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008654:	bf00      	nop
          }
        }
        break;
 8008656:	f000 bf5c 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800865a:	bf00      	nop
 800865c:	44020c00 	.word	0x44020c00
 8008660:	03d09000 	.word	0x03d09000
 8008664:	003d0900 	.word	0x003d0900
 8008668:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800866c:	4b9e      	ldr	r3, [pc, #632]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800866e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008672:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008676:	633b      	str	r3, [r7, #48]	; 0x30
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800867e:	d056      	beq.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008686:	f200 808b 	bhi.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008690:	d03e      	beq.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008698:	f200 8082 	bhi.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086a2:	d027      	beq.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086aa:	d879      	bhi.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b2:	d017      	beq.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ba:	d871      	bhi.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d004      	beq.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c8:	d004      	beq.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80086ca:	e069      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80086cc:	f7fb ffcc 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 80086d0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80086d2:	e068      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086d4:	f107 0314 	add.w	r3, r7, #20
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe f8fb 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086e2:	e060      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086e4:	f107 0308 	add.w	r3, r7, #8
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fa5d 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086f2:	e058      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086f4:	4b7c      	ldr	r3, [pc, #496]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80086f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d103      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008706:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008708:	e04d      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800870e:	e04a      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008710:	4b75      	ldr	r3, [pc, #468]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800871a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800871e:	d103      	bne.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008720:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008724:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008726:	e03e      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800872c:	e03b      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800872e:	4b6e      	ldr	r3, [pc, #440]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008734:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008738:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800873a:	4b6b      	ldr	r3, [pc, #428]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b02      	cmp	r3, #2
 8008744:	d10c      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d109      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800874c:	4b66      	ldr	r3, [pc, #408]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	4a65      	ldr	r2, [pc, #404]	; (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008758:	fa22 f303 	lsr.w	r3, r2, r3
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
 800875e:	e01e      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008760:	4b61      	ldr	r3, [pc, #388]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876c:	d106      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008774:	d102      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008776:	4b5e      	ldr	r3, [pc, #376]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
 800877a:	e010      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800877c:	4b5a      	ldr	r3, [pc, #360]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008788:	d106      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008790:	d102      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008792:	4b58      	ldr	r3, [pc, #352]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
 8008796:	e002      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800879c:	e003      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800879e:	e002      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087a4:	bf00      	nop
          }
        }
        break;
 80087a6:	f000 beb4 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80087aa:	4b4f      	ldr	r3, [pc, #316]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80087ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80087b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80087b4:	633b      	str	r3, [r7, #48]	; 0x30
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087bc:	d056      	beq.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087c4:	f200 808b 	bhi.w	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80087c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087ce:	d03e      	beq.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80087d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087d6:	f200 8082 	bhi.w	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087e0:	d027      	beq.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087e8:	d879      	bhi.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087f0:	d017      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087f8:	d871      	bhi.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80087fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d004      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008806:	d004      	beq.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008808:	e069      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800880a:	f7fb ff59 	bl	80046c0 <HAL_RCC_GetPCLK3Freq>
 800880e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008810:	e068      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008812:	f107 0314 	add.w	r3, r7, #20
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe f85c 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008820:	e060      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008822:	f107 0308 	add.w	r3, r7, #8
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe f9be 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008830:	e058      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008832:	4b2d      	ldr	r3, [pc, #180]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b02      	cmp	r3, #2
 800883e:	d103      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008846:	e04d      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800884c:	e04a      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800884e:	4b26      	ldr	r3, [pc, #152]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800885c:	d103      	bne.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800885e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008862:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008864:	e03e      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800886a:	e03b      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800886c:	4b1e      	ldr	r3, [pc, #120]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800886e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008872:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008878:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b02      	cmp	r3, #2
 8008882:	d10c      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800888a:	4b17      	ldr	r3, [pc, #92]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	08db      	lsrs	r3, r3, #3
 8008890:	f003 0303 	and.w	r3, r3, #3
 8008894:	4a15      	ldr	r2, [pc, #84]	; (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008896:	fa22 f303 	lsr.w	r3, r2, r3
 800889a:	637b      	str	r3, [r7, #52]	; 0x34
 800889c:	e01e      	b.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800889e:	4b12      	ldr	r3, [pc, #72]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088aa:	d106      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b2:	d102      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80088b4:	4b0e      	ldr	r3, [pc, #56]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
 80088b8:	e010      	b.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088ba:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088c6:	d106      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80088c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ce:	d102      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80088d0:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80088d2:	637b      	str	r3, [r7, #52]	; 0x34
 80088d4:	e002      	b.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80088da:	e003      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80088dc:	e002      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088e2:	bf00      	nop
          }
        }
        break;
 80088e4:	f000 be15 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088e8:	44020c00 	.word	0x44020c00
 80088ec:	03d09000 	.word	0x03d09000
 80088f0:	003d0900 	.word	0x003d0900
 80088f4:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80088f8:	4b9e      	ldr	r3, [pc, #632]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80088fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80088fe:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8008902:	633b      	str	r3, [r7, #48]	; 0x30
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800890a:	d056      	beq.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008912:	f200 808b 	bhi.w	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800891c:	d03e      	beq.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008924:	f200 8082 	bhi.w	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800892e:	d027      	beq.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008936:	d879      	bhi.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800893e:	d017      	beq.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008946:	d871      	bhi.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008954:	d004      	beq.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008956:	e069      	b.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008958:	f7fb feb2 	bl	80046c0 <HAL_RCC_GetPCLK3Freq>
 800895c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800895e:	e068      	b.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008960:	f107 0314 	add.w	r3, r7, #20
 8008964:	4618      	mov	r0, r3
 8008966:	f7fd ffb5 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800896e:	e060      	b.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008970:	f107 0308 	add.w	r3, r7, #8
 8008974:	4618      	mov	r0, r3
 8008976:	f7fe f917 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800897e:	e058      	b.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008980:	4b7c      	ldr	r3, [pc, #496]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b02      	cmp	r3, #2
 800898c:	d103      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800898e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008992:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008994:	e04d      	b.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800899a:	e04a      	b.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800899c:	4b75      	ldr	r3, [pc, #468]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800899e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089aa:	d103      	bne.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80089ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80089b0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80089b2:	e03e      	b.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089b8:	e03b      	b.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089ba:	4b6e      	ldr	r3, [pc, #440]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80089bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80089c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089c6:	4b6b      	ldr	r3, [pc, #428]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d10c      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d109      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089d8:	4b66      	ldr	r3, [pc, #408]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	08db      	lsrs	r3, r3, #3
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	4a65      	ldr	r2, [pc, #404]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80089e4:	fa22 f303 	lsr.w	r3, r2, r3
 80089e8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ea:	e01e      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089ec:	4b61      	ldr	r3, [pc, #388]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f8:	d106      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a00:	d102      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a02:	4b5e      	ldr	r3, [pc, #376]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008a04:	637b      	str	r3, [r7, #52]	; 0x34
 8008a06:	e010      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a08:	4b5a      	ldr	r3, [pc, #360]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a14:	d106      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a1c:	d102      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008a1e:	4b58      	ldr	r3, [pc, #352]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008a20:	637b      	str	r3, [r7, #52]	; 0x34
 8008a22:	e002      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008a28:	e003      	b.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008a2a:	e002      	b.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008a30:	bf00      	nop
          }
        }
        break;
 8008a32:	f000 bd6e 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008a36:	4b4f      	ldr	r3, [pc, #316]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008a38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008a3c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008a40:	633b      	str	r3, [r7, #48]	; 0x30
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a48:	d056      	beq.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a50:	f200 808b 	bhi.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a5a:	d03e      	beq.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a62:	f200 8082 	bhi.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a6c:	d027      	beq.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a74:	d879      	bhi.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a7c:	d017      	beq.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a84:	d871      	bhi.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d004      	beq.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a92:	d004      	beq.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008a94:	e069      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008a96:	f7fb fe13 	bl	80046c0 <HAL_RCC_GetPCLK3Freq>
 8008a9a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008a9c:	e068      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a9e:	f107 0314 	add.w	r3, r7, #20
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fd ff16 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008aac:	e060      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aae:	f107 0308 	add.w	r3, r7, #8
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe f878 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008abc:	e058      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008abe:	4b2d      	ldr	r3, [pc, #180]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d103      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ad0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008ad2:	e04d      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ad8:	e04a      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008ada:	4b26      	ldr	r3, [pc, #152]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ae8:	d103      	bne.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008aea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008aee:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008af0:	e03e      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008af2:	2300      	movs	r3, #0
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008af6:	e03b      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008af8:	4b1e      	ldr	r3, [pc, #120]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008afe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b04:	4b1b      	ldr	r3, [pc, #108]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d10c      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d109      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b16:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	08db      	lsrs	r3, r3, #3
 8008b1c:	f003 0303 	and.w	r3, r3, #3
 8008b20:	4a15      	ldr	r2, [pc, #84]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008b22:	fa22 f303 	lsr.w	r3, r2, r3
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34
 8008b28:	e01e      	b.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b2a:	4b12      	ldr	r3, [pc, #72]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b36:	d106      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3e:	d102      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008b40:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008b42:	637b      	str	r3, [r7, #52]	; 0x34
 8008b44:	e010      	b.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b46:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b52:	d106      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b5a:	d102      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008b5c:	4b08      	ldr	r3, [pc, #32]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008b60:	e002      	b.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008b62:	2300      	movs	r3, #0
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008b66:	e003      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008b68:	e002      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b6e:	bf00      	nop
          }
        }
        break;
 8008b70:	f000 bccf 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b74:	44020c00 	.word	0x44020c00
 8008b78:	03d09000 	.word	0x03d09000
 8008b7c:	003d0900 	.word	0x003d0900
 8008b80:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008b84:	4b9e      	ldr	r3, [pc, #632]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008b86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008b8a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b96:	d056      	beq.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b9e:	f200 808b 	bhi.w	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba8:	d03e      	beq.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb0:	f200 8082 	bhi.w	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bba:	d027      	beq.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bc2:	d879      	bhi.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bca:	d017      	beq.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bd2:	d871      	bhi.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008be0:	d004      	beq.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8008be2:	e069      	b.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008be4:	f7fb fd6c 	bl	80046c0 <HAL_RCC_GetPCLK3Freq>
 8008be8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008bea:	e068      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bec:	f107 0314 	add.w	r3, r7, #20
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fd fe6f 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bfa:	e060      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bfc:	f107 0308 	add.w	r3, r7, #8
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fd ffd1 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c0a:	e058      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c0c:	4b7c      	ldr	r3, [pc, #496]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d103      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8008c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c1e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c20:	e04d      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c26:	e04a      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008c28:	4b75      	ldr	r3, [pc, #468]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c36:	d103      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8008c38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008c3c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c3e:	e03e      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c44:	e03b      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c46:	4b6e      	ldr	r3, [pc, #440]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c4c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c52:	4b6b      	ldr	r3, [pc, #428]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d10c      	bne.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d109      	bne.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c64:	4b66      	ldr	r3, [pc, #408]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	08db      	lsrs	r3, r3, #3
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	4a65      	ldr	r2, [pc, #404]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008c70:	fa22 f303 	lsr.w	r3, r2, r3
 8008c74:	637b      	str	r3, [r7, #52]	; 0x34
 8008c76:	e01e      	b.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c78:	4b61      	ldr	r3, [pc, #388]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c84:	d106      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c8c:	d102      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008c8e:	4b5e      	ldr	r3, [pc, #376]	; (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
 8008c92:	e010      	b.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c94:	4b5a      	ldr	r3, [pc, #360]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ca0:	d106      	bne.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ca8:	d102      	bne.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008caa:	4b58      	ldr	r3, [pc, #352]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
 8008cae:	e002      	b.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008cb4:	e003      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8008cb6:	e002      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008cbc:	bf00      	nop
          }
        }
        break;
 8008cbe:	f000 bc28 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008cc2:	4b4f      	ldr	r3, [pc, #316]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ccc:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008cce:	4b4c      	ldr	r3, [pc, #304]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cda:	d106      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d103      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8008ce2:	4b4a      	ldr	r3, [pc, #296]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008ce4:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008ce6:	f000 bc14 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cf0:	d108      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cf2:	f107 0320 	add.w	r3, r7, #32
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fd fc82 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d00:	f000 bc07 	b.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d0a:	d107      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d0c:	f107 0314 	add.w	r3, r7, #20
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fd fddf 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d1a:	e3fa      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d20:	e3f7      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008d22:	4b37      	ldr	r3, [pc, #220]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	d861      	bhi.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8008d34:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8008d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3a:	bf00      	nop
 8008d3c:	08008d51 	.word	0x08008d51
 8008d40:	08008d61 	.word	0x08008d61
 8008d44:	08008d71 	.word	0x08008d71
 8008d48:	08008d81 	.word	0x08008d81
 8008d4c:	08008d87 	.word	0x08008d87
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d50:	f107 0320 	add.w	r3, r7, #32
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fd fc53 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d5e:	e04e      	b.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d60:	f107 0314 	add.w	r3, r7, #20
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fd fdb5 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d6e:	e046      	b.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d70:	f107 0308 	add.w	r3, r7, #8
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fd ff17 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d7e:	e03e      	b.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008d80:	4b23      	ldr	r3, [pc, #140]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8008d82:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d84:	e03b      	b.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d86:	4b1e      	ldr	r3, [pc, #120]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d8c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008d90:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d92:	4b1b      	ldr	r3, [pc, #108]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d10c      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d109      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008da4:	4b16      	ldr	r3, [pc, #88]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	08db      	lsrs	r3, r3, #3
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	4a15      	ldr	r2, [pc, #84]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008db0:	fa22 f303 	lsr.w	r3, r2, r3
 8008db4:	637b      	str	r3, [r7, #52]	; 0x34
 8008db6:	e01e      	b.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008db8:	4b11      	ldr	r3, [pc, #68]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc4:	d106      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dcc:	d102      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008dce:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd2:	e010      	b.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dd4:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de0:	d106      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8008de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008de8:	d102      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008dea:	4b08      	ldr	r3, [pc, #32]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008dec:	637b      	str	r3, [r7, #52]	; 0x34
 8008dee:	e002      	b.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008df4:	e003      	b.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8008df6:	e002      	b.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008dfc:	bf00      	nop
          }
        }
        break;
 8008dfe:	e388      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e00:	44020c00 	.word	0x44020c00
 8008e04:	03d09000 	.word	0x03d09000
 8008e08:	003d0900 	.word	0x003d0900
 8008e0c:	007a1200 	.word	0x007a1200
 8008e10:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008e14:	4ba9      	ldr	r3, [pc, #676]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	f200 809a 	bhi.w	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8008e28:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2e:	bf00      	nop
 8008e30:	08008eb5 	.word	0x08008eb5
 8008e34:	08008f5d 	.word	0x08008f5d
 8008e38:	08008f5d 	.word	0x08008f5d
 8008e3c:	08008f5d 	.word	0x08008f5d
 8008e40:	08008f5d 	.word	0x08008f5d
 8008e44:	08008f5d 	.word	0x08008f5d
 8008e48:	08008f5d 	.word	0x08008f5d
 8008e4c:	08008f5d 	.word	0x08008f5d
 8008e50:	08008ec5 	.word	0x08008ec5
 8008e54:	08008f5d 	.word	0x08008f5d
 8008e58:	08008f5d 	.word	0x08008f5d
 8008e5c:	08008f5d 	.word	0x08008f5d
 8008e60:	08008f5d 	.word	0x08008f5d
 8008e64:	08008f5d 	.word	0x08008f5d
 8008e68:	08008f5d 	.word	0x08008f5d
 8008e6c:	08008f5d 	.word	0x08008f5d
 8008e70:	08008ed5 	.word	0x08008ed5
 8008e74:	08008f5d 	.word	0x08008f5d
 8008e78:	08008f5d 	.word	0x08008f5d
 8008e7c:	08008f5d 	.word	0x08008f5d
 8008e80:	08008f5d 	.word	0x08008f5d
 8008e84:	08008f5d 	.word	0x08008f5d
 8008e88:	08008f5d 	.word	0x08008f5d
 8008e8c:	08008f5d 	.word	0x08008f5d
 8008e90:	08008ee5 	.word	0x08008ee5
 8008e94:	08008f5d 	.word	0x08008f5d
 8008e98:	08008f5d 	.word	0x08008f5d
 8008e9c:	08008f5d 	.word	0x08008f5d
 8008ea0:	08008f5d 	.word	0x08008f5d
 8008ea4:	08008f5d 	.word	0x08008f5d
 8008ea8:	08008f5d 	.word	0x08008f5d
 8008eac:	08008f5d 	.word	0x08008f5d
 8008eb0:	08008eeb 	.word	0x08008eeb
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008eb4:	f107 0320 	add.w	r3, r7, #32
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fd fba1 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ec2:	e04e      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ec4:	f107 0314 	add.w	r3, r7, #20
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fd fd03 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ed2:	e046      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed4:	f107 0308 	add.w	r3, r7, #8
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fd fe65 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ee2:	e03e      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008ee4:	4b76      	ldr	r3, [pc, #472]	; (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008ee6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ee8:	e03b      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008eea:	4b74      	ldr	r3, [pc, #464]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ef0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008ef4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ef6:	4b71      	ldr	r3, [pc, #452]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d10c      	bne.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d109      	bne.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f08:	4b6c      	ldr	r3, [pc, #432]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	08db      	lsrs	r3, r3, #3
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	4a6c      	ldr	r2, [pc, #432]	; (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008f14:	fa22 f303 	lsr.w	r3, r2, r3
 8008f18:	637b      	str	r3, [r7, #52]	; 0x34
 8008f1a:	e01e      	b.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f1c:	4b67      	ldr	r3, [pc, #412]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f28:	d106      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8008f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f30:	d102      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f32:	4b65      	ldr	r3, [pc, #404]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008f34:	637b      	str	r3, [r7, #52]	; 0x34
 8008f36:	e010      	b.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f38:	4b60      	ldr	r3, [pc, #384]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f44:	d106      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f4c:	d102      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008f4e:	4b5f      	ldr	r3, [pc, #380]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
 8008f52:	e002      	b.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008f54:	2300      	movs	r3, #0
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008f58:	e003      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8008f5a:	e002      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f60:	bf00      	nop
          }
        }
        break;
 8008f62:	e2d6      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008f64:	4b55      	ldr	r3, [pc, #340]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f6a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f76:	d031      	beq.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f7e:	d866      	bhi.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	2bc0      	cmp	r3, #192	; 0xc0
 8008f84:	d027      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	2bc0      	cmp	r3, #192	; 0xc0
 8008f8a:	d860      	bhi.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	2b80      	cmp	r3, #128	; 0x80
 8008f90:	d019      	beq.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	2b80      	cmp	r3, #128	; 0x80
 8008f96:	d85a      	bhi.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	2b40      	cmp	r3, #64	; 0x40
 8008fa2:	d008      	beq.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008fa4:	e053      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fa6:	f107 0320 	add.w	r3, r7, #32
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fd fb28 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008fb4:	e04e      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fb6:	f107 0314 	add.w	r3, r7, #20
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fd fc8a 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008fc4:	e046      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fc6:	f107 0308 	add.w	r3, r7, #8
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fd fdec 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008fd4:	e03e      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008fd6:	4b3a      	ldr	r3, [pc, #232]	; (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008fd8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008fda:	e03b      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fdc:	4b37      	ldr	r3, [pc, #220]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008fe2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fe8:	4b34      	ldr	r3, [pc, #208]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d10c      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d109      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ffa:	4b30      	ldr	r3, [pc, #192]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	08db      	lsrs	r3, r3, #3
 8009000:	f003 0303 	and.w	r3, r3, #3
 8009004:	4a2f      	ldr	r2, [pc, #188]	; (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009006:	fa22 f303 	lsr.w	r3, r2, r3
 800900a:	637b      	str	r3, [r7, #52]	; 0x34
 800900c:	e01e      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800900e:	4b2b      	ldr	r3, [pc, #172]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800901a:	d106      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009022:	d102      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009024:	4b28      	ldr	r3, [pc, #160]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009026:	637b      	str	r3, [r7, #52]	; 0x34
 8009028:	e010      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800902a:	4b24      	ldr	r3, [pc, #144]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009032:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009036:	d106      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800903e:	d102      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009040:	4b22      	ldr	r3, [pc, #136]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009042:	637b      	str	r3, [r7, #52]	; 0x34
 8009044:	e002      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800904a:	e003      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800904c:	e002      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009052:	bf00      	nop
          }
        }
        break;
 8009054:	e25d      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009056:	4b19      	ldr	r3, [pc, #100]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800905c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8009060:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	2b00      	cmp	r3, #0
 8009066:	d103      	bne.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009068:	f7fb fb14 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 800906c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800906e:	e250      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009070:	4b12      	ldr	r3, [pc, #72]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800907c:	d10b      	bne.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009084:	d107      	bne.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009086:	f107 0314 	add.w	r3, r7, #20
 800908a:	4618      	mov	r0, r3
 800908c:	f7fd fc22 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	637b      	str	r3, [r7, #52]	; 0x34
 8009094:	e04f      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009096:	4b09      	ldr	r3, [pc, #36]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800909e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a2:	d115      	bne.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090aa:	d111      	bne.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ac:	f107 0308 	add.w	r3, r7, #8
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fd fd79 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	637b      	str	r3, [r7, #52]	; 0x34
 80090ba:	e03c      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80090bc:	44020c00 	.word	0x44020c00
 80090c0:	00bb8000 	.word	0x00bb8000
 80090c4:	03d09000 	.word	0x03d09000
 80090c8:	003d0900 	.word	0x003d0900
 80090cc:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80090d0:	4b94      	ldr	r3, [pc, #592]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d10d      	bne.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80090e2:	d109      	bne.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090e4:	4b8f      	ldr	r3, [pc, #572]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	08db      	lsrs	r3, r3, #3
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	4a8e      	ldr	r2, [pc, #568]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80090f0:	fa22 f303 	lsr.w	r3, r2, r3
 80090f4:	637b      	str	r3, [r7, #52]	; 0x34
 80090f6:	e01e      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80090f8:	4b8a      	ldr	r3, [pc, #552]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009104:	d106      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800910c:	d102      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800910e:	4b87      	ldr	r3, [pc, #540]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009110:	637b      	str	r3, [r7, #52]	; 0x34
 8009112:	e010      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009114:	4b83      	ldr	r3, [pc, #524]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009120:	d106      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009128:	d102      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800912a:	4b81      	ldr	r3, [pc, #516]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800912c:	637b      	str	r3, [r7, #52]	; 0x34
 800912e:	e002      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009134:	e1ed      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009136:	e1ec      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009138:	4b7a      	ldr	r3, [pc, #488]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800913a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800913e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009142:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800914a:	f7fb fab9 	bl	80046c0 <HAL_RCC_GetPCLK3Freq>
 800914e:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009150:	e1df      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009152:	4b74      	ldr	r3, [pc, #464]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800915a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800915e:	d10b      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009166:	d107      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009168:	f107 0314 	add.w	r3, r7, #20
 800916c:	4618      	mov	r0, r3
 800916e:	f7fd fbb1 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	637b      	str	r3, [r7, #52]	; 0x34
 8009176:	e045      	b.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009178:	4b6a      	ldr	r3, [pc, #424]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009184:	d10b      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800918c:	d107      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800918e:	f107 0308 	add.w	r3, r7, #8
 8009192:	4618      	mov	r0, r3
 8009194:	f7fd fd08 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	637b      	str	r3, [r7, #52]	; 0x34
 800919c:	e032      	b.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800919e:	4b61      	ldr	r3, [pc, #388]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d10d      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091b0:	d109      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091b2:	4b5c      	ldr	r3, [pc, #368]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	08db      	lsrs	r3, r3, #3
 80091b8:	f003 0303 	and.w	r3, r3, #3
 80091bc:	4a5a      	ldr	r2, [pc, #360]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80091be:	fa22 f303 	lsr.w	r3, r2, r3
 80091c2:	637b      	str	r3, [r7, #52]	; 0x34
 80091c4:	e01e      	b.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80091c6:	4b57      	ldr	r3, [pc, #348]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091d2:	d106      	bne.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091da:	d102      	bne.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80091dc:	4b53      	ldr	r3, [pc, #332]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80091de:	637b      	str	r3, [r7, #52]	; 0x34
 80091e0:	e010      	b.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80091e2:	4b50      	ldr	r3, [pc, #320]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091ee:	d106      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80091f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80091f6:	d102      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80091f8:	4b4d      	ldr	r3, [pc, #308]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80091fa:	637b      	str	r3, [r7, #52]	; 0x34
 80091fc:	e002      	b.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009202:	e186      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009204:	e185      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009206:	4b47      	ldr	r3, [pc, #284]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800920c:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8009210:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	2b00      	cmp	r3, #0
 8009216:	d103      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009218:	f7fb fa3c 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 800921c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800921e:	e178      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009220:	4b40      	ldr	r3, [pc, #256]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800922c:	d10b      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009234:	d107      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009236:	f107 0314 	add.w	r3, r7, #20
 800923a:	4618      	mov	r0, r3
 800923c:	f7fd fb4a 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	637b      	str	r3, [r7, #52]	; 0x34
 8009244:	e045      	b.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009246:	4b37      	ldr	r3, [pc, #220]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800924e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009252:	d10b      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800925a:	d107      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800925c:	f107 0308 	add.w	r3, r7, #8
 8009260:	4618      	mov	r0, r3
 8009262:	f7fd fca1 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	637b      	str	r3, [r7, #52]	; 0x34
 800926a:	e032      	b.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800926c:	4b2d      	ldr	r3, [pc, #180]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b02      	cmp	r3, #2
 8009276:	d10d      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800927e:	d109      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009280:	4b28      	ldr	r3, [pc, #160]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	08db      	lsrs	r3, r3, #3
 8009286:	f003 0303 	and.w	r3, r3, #3
 800928a:	4a27      	ldr	r2, [pc, #156]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
 8009290:	637b      	str	r3, [r7, #52]	; 0x34
 8009292:	e01e      	b.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009294:	4b23      	ldr	r3, [pc, #140]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800929c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092a0:	d106      	bne.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092a8:	d102      	bne.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80092aa:	4b20      	ldr	r3, [pc, #128]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80092ac:	637b      	str	r3, [r7, #52]	; 0x34
 80092ae:	e010      	b.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80092b0:	4b1c      	ldr	r3, [pc, #112]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092bc:	d106      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80092c4:	d102      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80092c6:	4b1a      	ldr	r3, [pc, #104]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80092c8:	637b      	str	r3, [r7, #52]	; 0x34
 80092ca:	e002      	b.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092d0:	e11f      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092d2:	e11e      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80092d4:	4b13      	ldr	r3, [pc, #76]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80092d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80092da:	f003 0303 	and.w	r3, r3, #3
 80092de:	633b      	str	r3, [r7, #48]	; 0x30
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d85f      	bhi.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	080092fd 	.word	0x080092fd
 80092f0:	08009305 	.word	0x08009305
 80092f4:	08009315 	.word	0x08009315
 80092f8:	08009335 	.word	0x08009335

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80092fc:	f7fb f998 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 8009300:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009302:	e053      	b.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009304:	f107 0320 	add.w	r3, r7, #32
 8009308:	4618      	mov	r0, r3
 800930a:	f7fd f979 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009312:	e04b      	b.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009314:	f107 0314 	add.w	r3, r7, #20
 8009318:	4618      	mov	r0, r3
 800931a:	f7fd fadb 	bl	80068d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009322:	e043      	b.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009324:	44020c00 	.word	0x44020c00
 8009328:	03d09000 	.word	0x03d09000
 800932c:	003d0900 	.word	0x003d0900
 8009330:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009334:	4b79      	ldr	r3, [pc, #484]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800933a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800933e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009340:	4b76      	ldr	r3, [pc, #472]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0302 	and.w	r3, r3, #2
 8009348:	2b02      	cmp	r3, #2
 800934a:	d10c      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800934c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934e:	2b00      	cmp	r3, #0
 8009350:	d109      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009352:	4b72      	ldr	r3, [pc, #456]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	08db      	lsrs	r3, r3, #3
 8009358:	f003 0303 	and.w	r3, r3, #3
 800935c:	4a70      	ldr	r2, [pc, #448]	; (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800935e:	fa22 f303 	lsr.w	r3, r2, r3
 8009362:	637b      	str	r3, [r7, #52]	; 0x34
 8009364:	e01e      	b.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009366:	4b6d      	ldr	r3, [pc, #436]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800936e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009372:	d106      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800937a:	d102      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800937c:	4b69      	ldr	r3, [pc, #420]	; (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800937e:	637b      	str	r3, [r7, #52]	; 0x34
 8009380:	e010      	b.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009382:	4b66      	ldr	r3, [pc, #408]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800938a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800938e:	d106      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009396:	d102      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009398:	4b63      	ldr	r3, [pc, #396]	; (8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800939a:	637b      	str	r3, [r7, #52]	; 0x34
 800939c:	e002      	b.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80093a2:	e003      	b.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80093a4:	e002      	b.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80093aa:	bf00      	nop
          }
        }
        break;
 80093ac:	e0b1      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80093ae:	4b5b      	ldr	r3, [pc, #364]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80093b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80093b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80093b8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80093ba:	4b58      	ldr	r3, [pc, #352]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80093bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d106      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80093c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d103      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80093ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093d2:	637b      	str	r3, [r7, #52]	; 0x34
 80093d4:	e01f      	b.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80093d6:	4b51      	ldr	r3, [pc, #324]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80093d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80093dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093e4:	d106      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80093e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e8:	2b40      	cmp	r3, #64	; 0x40
 80093ea:	d103      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80093ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80093f0:	637b      	str	r3, [r7, #52]	; 0x34
 80093f2:	e010      	b.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80093f4:	4b49      	ldr	r3, [pc, #292]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009400:	d106      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	2b80      	cmp	r3, #128	; 0x80
 8009406:	d103      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009408:	f248 0312 	movw	r3, #32786	; 0x8012
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
 800940e:	e002      	b.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8009414:	e07d      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009416:	e07c      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009418:	4b40      	ldr	r3, [pc, #256]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800941a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800941e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009422:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009424:	4b3d      	ldr	r3, [pc, #244]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800942c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009430:	d105      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	2b00      	cmp	r3, #0
 8009436:	d102      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009438:	4b3c      	ldr	r3, [pc, #240]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800943a:	637b      	str	r3, [r7, #52]	; 0x34
 800943c:	e031      	b.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800943e:	4b37      	ldr	r3, [pc, #220]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800944a:	d10a      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	2b10      	cmp	r3, #16
 8009450:	d107      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009452:	f107 0320 	add.w	r3, r7, #32
 8009456:	4618      	mov	r0, r3
 8009458:	f7fd f8d2 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	637b      	str	r3, [r7, #52]	; 0x34
 8009460:	e01f      	b.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009462:	4b2e      	ldr	r3, [pc, #184]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b02      	cmp	r3, #2
 800946e:	d106      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	2b20      	cmp	r3, #32
 8009474:	d103      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800947a:	637b      	str	r3, [r7, #52]	; 0x34
 800947c:	e011      	b.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800947e:	4b27      	ldr	r3, [pc, #156]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800948c:	d106      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800948e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009490:	2b30      	cmp	r3, #48	; 0x30
 8009492:	d103      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009494:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009498:	637b      	str	r3, [r7, #52]	; 0x34
 800949a:	e002      	b.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80094a0:	e037      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094a2:	e036      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80094a4:	4b1d      	ldr	r3, [pc, #116]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80094a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80094aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80094ae:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	2b10      	cmp	r3, #16
 80094b4:	d107      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094b6:	f107 0320 	add.w	r3, r7, #32
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fd f8a0 	bl	8006600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80094c4:	e025      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80094c6:	4b15      	ldr	r3, [pc, #84]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094d2:	d10a      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d107      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094da:	f107 0308 	add.w	r3, r7, #8
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fd fb62 	bl	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	637b      	str	r3, [r7, #52]	; 0x34
 80094e8:	e00f      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80094ea:	4b0c      	ldr	r3, [pc, #48]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f6:	d105      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	2b30      	cmp	r3, #48	; 0x30
 80094fc:	d102      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80094fe:	4b0b      	ldr	r3, [pc, #44]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009500:	637b      	str	r3, [r7, #52]	; 0x34
 8009502:	e002      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009504:	2300      	movs	r3, #0
 8009506:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8009508:	e003      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800950a:	e002      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009510:	bf00      	nop
    }
  }

  return (frequency);
 8009512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009514:	4618      	mov	r0, r3
 8009516:	373c      	adds	r7, #60	; 0x3c
 8009518:	46bd      	mov	sp, r7
 800951a:	bd90      	pop	{r4, r7, pc}
 800951c:	44020c00 	.word	0x44020c00
 8009520:	03d09000 	.word	0x03d09000
 8009524:	003d0900 	.word	0x003d0900
 8009528:	007a1200 	.word	0x007a1200
 800952c:	02dc6c00 	.word	0x02dc6c00

08009530 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009538:	4b48      	ldr	r3, [pc, #288]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a47      	ldr	r2, [pc, #284]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 800953e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009542:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009544:	f7f8 fa04 	bl	8001950 <HAL_GetTick>
 8009548:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800954a:	e008      	b.n	800955e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800954c:	f7f8 fa00 	bl	8001950 <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	2b02      	cmp	r3, #2
 8009558:	d901      	bls.n	800955e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e07a      	b.n	8009654 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800955e:	4b3f      	ldr	r3, [pc, #252]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1f0      	bne.n	800954c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800956a:	4b3c      	ldr	r3, [pc, #240]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 800956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6811      	ldr	r1, [r2, #0]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	6852      	ldr	r2, [r2, #4]
 800957e:	0212      	lsls	r2, r2, #8
 8009580:	430a      	orrs	r2, r1
 8009582:	4936      	ldr	r1, [pc, #216]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 8009584:	4313      	orrs	r3, r2
 8009586:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	3b01      	subs	r3, #1
 800958e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	3b01      	subs	r3, #1
 8009598:	025b      	lsls	r3, r3, #9
 800959a:	b29b      	uxth	r3, r3
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	3b01      	subs	r3, #1
 80095a4:	041b      	lsls	r3, r3, #16
 80095a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	061b      	lsls	r3, r3, #24
 80095b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095b8:	4928      	ldr	r1, [pc, #160]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80095be:	4b27      	ldr	r3, [pc, #156]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	f023 020c 	bic.w	r2, r3, #12
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	4924      	ldr	r1, [pc, #144]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80095d0:	4b22      	ldr	r3, [pc, #136]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	f023 0220 	bic.w	r2, r3, #32
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	491f      	ldr	r1, [pc, #124]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80095e2:	4b1e      	ldr	r3, [pc, #120]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 80095e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	491c      	ldr	r1, [pc, #112]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 80095ec:	4313      	orrs	r3, r2
 80095ee:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80095f0:	4b1a      	ldr	r3, [pc, #104]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	4a19      	ldr	r2, [pc, #100]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 80095f6:	f023 0310 	bic.w	r3, r3, #16
 80095fa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80095fc:	4b17      	ldr	r3, [pc, #92]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009604:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	6a12      	ldr	r2, [r2, #32]
 800960c:	00d2      	lsls	r2, r2, #3
 800960e:	4913      	ldr	r1, [pc, #76]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 8009610:	4313      	orrs	r3, r2
 8009612:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009614:	4b11      	ldr	r3, [pc, #68]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	4a10      	ldr	r2, [pc, #64]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 800961a:	f043 0310 	orr.w	r3, r3, #16
 800961e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009620:	4b0e      	ldr	r3, [pc, #56]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a0d      	ldr	r2, [pc, #52]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 8009626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800962a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800962c:	f7f8 f990 	bl	8001950 <HAL_GetTick>
 8009630:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009632:	e008      	b.n	8009646 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009634:	f7f8 f98c 	bl	8001950 <HAL_GetTick>
 8009638:	4602      	mov	r2, r0
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	2b02      	cmp	r3, #2
 8009640:	d901      	bls.n	8009646 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e006      	b.n	8009654 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <RCCEx_PLL2_Config+0x12c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0f0      	beq.n	8009634 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009652:	2300      	movs	r3, #0

}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	44020c00 	.word	0x44020c00

08009660 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009668:	4b48      	ldr	r3, [pc, #288]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a47      	ldr	r2, [pc, #284]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 800966e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009672:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009674:	f7f8 f96c 	bl	8001950 <HAL_GetTick>
 8009678:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800967a:	e008      	b.n	800968e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800967c:	f7f8 f968 	bl	8001950 <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	2b02      	cmp	r3, #2
 8009688:	d901      	bls.n	800968e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e07a      	b.n	8009784 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800968e:	4b3f      	ldr	r3, [pc, #252]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1f0      	bne.n	800967c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800969a:	4b3c      	ldr	r3, [pc, #240]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 800969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80096a2:	f023 0303 	bic.w	r3, r3, #3
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6811      	ldr	r1, [r2, #0]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	6852      	ldr	r2, [r2, #4]
 80096ae:	0212      	lsls	r2, r2, #8
 80096b0:	430a      	orrs	r2, r1
 80096b2:	4936      	ldr	r1, [pc, #216]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 80096b4:	4313      	orrs	r3, r2
 80096b6:	630b      	str	r3, [r1, #48]	; 0x30
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	3b01      	subs	r3, #1
 80096be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	025b      	lsls	r3, r3, #9
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	041b      	lsls	r3, r3, #16
 80096d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80096da:	431a      	orrs	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	061b      	lsls	r3, r3, #24
 80096e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80096e8:	4928      	ldr	r1, [pc, #160]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096ee:	4b27      	ldr	r3, [pc, #156]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 80096f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f2:	f023 020c 	bic.w	r2, r3, #12
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	4924      	ldr	r1, [pc, #144]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009700:	4b22      	ldr	r3, [pc, #136]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 8009702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009704:	f023 0220 	bic.w	r2, r3, #32
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	491f      	ldr	r1, [pc, #124]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 800970e:	4313      	orrs	r3, r2
 8009710:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009712:	4b1e      	ldr	r3, [pc, #120]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 8009714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	491c      	ldr	r1, [pc, #112]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 800971c:	4313      	orrs	r3, r2
 800971e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009720:	4b1a      	ldr	r3, [pc, #104]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 8009722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009724:	4a19      	ldr	r2, [pc, #100]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 8009726:	f023 0310 	bic.w	r3, r3, #16
 800972a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800972c:	4b17      	ldr	r3, [pc, #92]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 800972e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009730:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009734:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	6a12      	ldr	r2, [r2, #32]
 800973c:	00d2      	lsls	r2, r2, #3
 800973e:	4913      	ldr	r1, [pc, #76]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 8009740:	4313      	orrs	r3, r2
 8009742:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009744:	4b11      	ldr	r3, [pc, #68]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 8009746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009748:	4a10      	ldr	r2, [pc, #64]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 800974a:	f043 0310 	orr.w	r3, r3, #16
 800974e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009750:	4b0e      	ldr	r3, [pc, #56]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a0d      	ldr	r2, [pc, #52]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 8009756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800975a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800975c:	f7f8 f8f8 	bl	8001950 <HAL_GetTick>
 8009760:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009762:	e008      	b.n	8009776 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009764:	f7f8 f8f4 	bl	8001950 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	2b02      	cmp	r3, #2
 8009770:	d901      	bls.n	8009776 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e006      	b.n	8009784 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009776:	4b05      	ldr	r3, [pc, #20]	; (800978c <RCCEx_PLL3_Config+0x12c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d0f0      	beq.n	8009764 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	44020c00 	.word	0x44020c00

08009790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e049      	b.n	8009836 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d106      	bne.n	80097bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7f7 feca 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f000 fa56 	bl	8009c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b01      	cmp	r3, #1
 8009852:	d001      	beq.n	8009858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e07c      	b.n	8009952 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68da      	ldr	r2, [r3, #12]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f042 0201 	orr.w	r2, r2, #1
 800986e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a3a      	ldr	r2, [pc, #232]	; (8009960 <HAL_TIM_Base_Start_IT+0x120>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d04a      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a39      	ldr	r2, [pc, #228]	; (8009964 <HAL_TIM_Base_Start_IT+0x124>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d045      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988c:	d040      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009896:	d03b      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a32      	ldr	r2, [pc, #200]	; (8009968 <HAL_TIM_Base_Start_IT+0x128>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d036      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a31      	ldr	r2, [pc, #196]	; (800996c <HAL_TIM_Base_Start_IT+0x12c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d031      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a2f      	ldr	r2, [pc, #188]	; (8009970 <HAL_TIM_Base_Start_IT+0x130>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d02c      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a2e      	ldr	r2, [pc, #184]	; (8009974 <HAL_TIM_Base_Start_IT+0x134>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d027      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a2c      	ldr	r2, [pc, #176]	; (8009978 <HAL_TIM_Base_Start_IT+0x138>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d022      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a2b      	ldr	r2, [pc, #172]	; (800997c <HAL_TIM_Base_Start_IT+0x13c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d01d      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a29      	ldr	r2, [pc, #164]	; (8009980 <HAL_TIM_Base_Start_IT+0x140>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d018      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a28      	ldr	r2, [pc, #160]	; (8009984 <HAL_TIM_Base_Start_IT+0x144>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d013      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a26      	ldr	r2, [pc, #152]	; (8009988 <HAL_TIM_Base_Start_IT+0x148>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d00e      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a25      	ldr	r2, [pc, #148]	; (800998c <HAL_TIM_Base_Start_IT+0x14c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d009      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a23      	ldr	r2, [pc, #140]	; (8009990 <HAL_TIM_Base_Start_IT+0x150>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d004      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xd0>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a22      	ldr	r2, [pc, #136]	; (8009994 <HAL_TIM_Base_Start_IT+0x154>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d115      	bne.n	800993c <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689a      	ldr	r2, [r3, #8]
 8009916:	4b20      	ldr	r3, [pc, #128]	; (8009998 <HAL_TIM_Base_Start_IT+0x158>)
 8009918:	4013      	ands	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2b06      	cmp	r3, #6
 8009920:	d015      	beq.n	800994e <HAL_TIM_Base_Start_IT+0x10e>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009928:	d011      	beq.n	800994e <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f042 0201 	orr.w	r2, r2, #1
 8009938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800993a:	e008      	b.n	800994e <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0201 	orr.w	r2, r2, #1
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	e000      	b.n	8009950 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800994e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40012c00 	.word	0x40012c00
 8009964:	50012c00 	.word	0x50012c00
 8009968:	40000400 	.word	0x40000400
 800996c:	50000400 	.word	0x50000400
 8009970:	40000800 	.word	0x40000800
 8009974:	50000800 	.word	0x50000800
 8009978:	40000c00 	.word	0x40000c00
 800997c:	50000c00 	.word	0x50000c00
 8009980:	40013400 	.word	0x40013400
 8009984:	50013400 	.word	0x50013400
 8009988:	40001800 	.word	0x40001800
 800998c:	50001800 	.word	0x50001800
 8009990:	40014000 	.word	0x40014000
 8009994:	50014000 	.word	0x50014000
 8009998:	00010007 	.word	0x00010007

0800999c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d020      	beq.n	8009a00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01b      	beq.n	8009a00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f06f 0202 	mvn.w	r2, #2
 80099d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	f003 0303 	and.w	r3, r3, #3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f92c 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 80099ec:	e005      	b.n	80099fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f91e 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f92f 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f003 0304 	and.w	r3, r3, #4
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d020      	beq.n	8009a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f003 0304 	and.w	r3, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d01b      	beq.n	8009a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f06f 0204 	mvn.w	r2, #4
 8009a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2202      	movs	r2, #2
 8009a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f906 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 8009a38:	e005      	b.n	8009a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f8f8 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f909 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f003 0308 	and.w	r3, r3, #8
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d020      	beq.n	8009a98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f003 0308 	and.w	r3, r3, #8
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01b      	beq.n	8009a98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f06f 0208 	mvn.w	r2, #8
 8009a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f8e0 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 8009a84:	e005      	b.n	8009a92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f8d2 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f8e3 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f003 0310 	and.w	r3, r3, #16
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d020      	beq.n	8009ae4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01b      	beq.n	8009ae4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f06f 0210 	mvn.w	r2, #16
 8009ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2208      	movs	r2, #8
 8009aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f8ba 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 8009ad0:	e005      	b.n	8009ade <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f8ac 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f8bd 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00c      	beq.n	8009b08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d007      	beq.n	8009b08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f06f 0201 	mvn.w	r2, #1
 8009b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7f7 f896 	bl	8000c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00c      	beq.n	8009b2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d007      	beq.n	8009b2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f9d2 	bl	8009ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00c      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d007      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f9ca 	bl	8009ee4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00c      	beq.n	8009b74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d007      	beq.n	8009b74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f87c 	bl	8009c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00c      	beq.n	8009b98 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d007      	beq.n	8009b98 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f06f 0220 	mvn.w	r2, #32
 8009b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f992 	bl	8009ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00c      	beq.n	8009bbc <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d007      	beq.n	8009bbc <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f99e 	bl	8009ef8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00c      	beq.n	8009be0 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f996 	bl	8009f0c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00c      	beq.n	8009c04 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d007      	beq.n	8009c04 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f98e 	bl	8009f20 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00c      	beq.n	8009c28 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d007      	beq.n	8009c28 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f986 	bl	8009f34 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a74      	ldr	r2, [pc, #464]	; (8009e64 <TIM_Base_SetConfig+0x1e4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d02b      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a73      	ldr	r2, [pc, #460]	; (8009e68 <TIM_Base_SetConfig+0x1e8>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d027      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ca6:	d023      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cae:	d01f      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a6e      	ldr	r2, [pc, #440]	; (8009e6c <TIM_Base_SetConfig+0x1ec>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d01b      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a6d      	ldr	r2, [pc, #436]	; (8009e70 <TIM_Base_SetConfig+0x1f0>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d017      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a6c      	ldr	r2, [pc, #432]	; (8009e74 <TIM_Base_SetConfig+0x1f4>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d013      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a6b      	ldr	r2, [pc, #428]	; (8009e78 <TIM_Base_SetConfig+0x1f8>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00f      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a6a      	ldr	r2, [pc, #424]	; (8009e7c <TIM_Base_SetConfig+0x1fc>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d00b      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a69      	ldr	r2, [pc, #420]	; (8009e80 <TIM_Base_SetConfig+0x200>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d007      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a68      	ldr	r2, [pc, #416]	; (8009e84 <TIM_Base_SetConfig+0x204>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d003      	beq.n	8009cf0 <TIM_Base_SetConfig+0x70>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a67      	ldr	r2, [pc, #412]	; (8009e88 <TIM_Base_SetConfig+0x208>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d108      	bne.n	8009d02 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a57      	ldr	r2, [pc, #348]	; (8009e64 <TIM_Base_SetConfig+0x1e4>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d05b      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a56      	ldr	r2, [pc, #344]	; (8009e68 <TIM_Base_SetConfig+0x1e8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d057      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d18:	d053      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d20:	d04f      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a51      	ldr	r2, [pc, #324]	; (8009e6c <TIM_Base_SetConfig+0x1ec>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d04b      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a50      	ldr	r2, [pc, #320]	; (8009e70 <TIM_Base_SetConfig+0x1f0>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d047      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a4f      	ldr	r2, [pc, #316]	; (8009e74 <TIM_Base_SetConfig+0x1f4>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d043      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a4e      	ldr	r2, [pc, #312]	; (8009e78 <TIM_Base_SetConfig+0x1f8>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d03f      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a4d      	ldr	r2, [pc, #308]	; (8009e7c <TIM_Base_SetConfig+0x1fc>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d03b      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a4c      	ldr	r2, [pc, #304]	; (8009e80 <TIM_Base_SetConfig+0x200>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d037      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a4b      	ldr	r2, [pc, #300]	; (8009e84 <TIM_Base_SetConfig+0x204>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d033      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a4a      	ldr	r2, [pc, #296]	; (8009e88 <TIM_Base_SetConfig+0x208>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d02f      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a49      	ldr	r2, [pc, #292]	; (8009e8c <TIM_Base_SetConfig+0x20c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d02b      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a48      	ldr	r2, [pc, #288]	; (8009e90 <TIM_Base_SetConfig+0x210>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d027      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a47      	ldr	r2, [pc, #284]	; (8009e94 <TIM_Base_SetConfig+0x214>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d023      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a46      	ldr	r2, [pc, #280]	; (8009e98 <TIM_Base_SetConfig+0x218>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d01f      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a45      	ldr	r2, [pc, #276]	; (8009e9c <TIM_Base_SetConfig+0x21c>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d01b      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a44      	ldr	r2, [pc, #272]	; (8009ea0 <TIM_Base_SetConfig+0x220>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d017      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a43      	ldr	r2, [pc, #268]	; (8009ea4 <TIM_Base_SetConfig+0x224>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d013      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a42      	ldr	r2, [pc, #264]	; (8009ea8 <TIM_Base_SetConfig+0x228>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d00f      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a41      	ldr	r2, [pc, #260]	; (8009eac <TIM_Base_SetConfig+0x22c>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d00b      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a40      	ldr	r2, [pc, #256]	; (8009eb0 <TIM_Base_SetConfig+0x230>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d007      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a3f      	ldr	r2, [pc, #252]	; (8009eb4 <TIM_Base_SetConfig+0x234>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d003      	beq.n	8009dc2 <TIM_Base_SetConfig+0x142>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a3e      	ldr	r2, [pc, #248]	; (8009eb8 <TIM_Base_SetConfig+0x238>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d108      	bne.n	8009dd4 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	689a      	ldr	r2, [r3, #8]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a1a      	ldr	r2, [pc, #104]	; (8009e64 <TIM_Base_SetConfig+0x1e4>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d023      	beq.n	8009e48 <TIM_Base_SetConfig+0x1c8>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a19      	ldr	r2, [pc, #100]	; (8009e68 <TIM_Base_SetConfig+0x1e8>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d01f      	beq.n	8009e48 <TIM_Base_SetConfig+0x1c8>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a1e      	ldr	r2, [pc, #120]	; (8009e84 <TIM_Base_SetConfig+0x204>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d01b      	beq.n	8009e48 <TIM_Base_SetConfig+0x1c8>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a1d      	ldr	r2, [pc, #116]	; (8009e88 <TIM_Base_SetConfig+0x208>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d017      	beq.n	8009e48 <TIM_Base_SetConfig+0x1c8>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a22      	ldr	r2, [pc, #136]	; (8009ea4 <TIM_Base_SetConfig+0x224>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d013      	beq.n	8009e48 <TIM_Base_SetConfig+0x1c8>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a21      	ldr	r2, [pc, #132]	; (8009ea8 <TIM_Base_SetConfig+0x228>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00f      	beq.n	8009e48 <TIM_Base_SetConfig+0x1c8>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a20      	ldr	r2, [pc, #128]	; (8009eac <TIM_Base_SetConfig+0x22c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00b      	beq.n	8009e48 <TIM_Base_SetConfig+0x1c8>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a1f      	ldr	r2, [pc, #124]	; (8009eb0 <TIM_Base_SetConfig+0x230>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d007      	beq.n	8009e48 <TIM_Base_SetConfig+0x1c8>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a1e      	ldr	r2, [pc, #120]	; (8009eb4 <TIM_Base_SetConfig+0x234>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d003      	beq.n	8009e48 <TIM_Base_SetConfig+0x1c8>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a1d      	ldr	r2, [pc, #116]	; (8009eb8 <TIM_Base_SetConfig+0x238>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d103      	bne.n	8009e50 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	691a      	ldr	r2, [r3, #16]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	615a      	str	r2, [r3, #20]
}
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	40012c00 	.word	0x40012c00
 8009e68:	50012c00 	.word	0x50012c00
 8009e6c:	40000400 	.word	0x40000400
 8009e70:	50000400 	.word	0x50000400
 8009e74:	40000800 	.word	0x40000800
 8009e78:	50000800 	.word	0x50000800
 8009e7c:	40000c00 	.word	0x40000c00
 8009e80:	50000c00 	.word	0x50000c00
 8009e84:	40013400 	.word	0x40013400
 8009e88:	50013400 	.word	0x50013400
 8009e8c:	40001800 	.word	0x40001800
 8009e90:	50001800 	.word	0x50001800
 8009e94:	40001c00 	.word	0x40001c00
 8009e98:	50001c00 	.word	0x50001c00
 8009e9c:	40002000 	.word	0x40002000
 8009ea0:	50002000 	.word	0x50002000
 8009ea4:	40014000 	.word	0x40014000
 8009ea8:	50014000 	.word	0x50014000
 8009eac:	40014400 	.word	0x40014400
 8009eb0:	50014400 	.word	0x50014400
 8009eb4:	40014800 	.word	0x40014800
 8009eb8:	50014800 	.word	0x50014800

08009ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e042      	b.n	8009fe0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7f7 fa61 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2224      	movs	r2, #36	; 0x24
 8009f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0201 	bic.w	r2, r2, #1
 8009f88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d002      	beq.n	8009f98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa16 	bl	800a3c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f825 	bl	8009fe8 <UART_SetConfig>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e01b      	b.n	8009fe0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689a      	ldr	r2, [r3, #8]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f042 0201 	orr.w	r2, r2, #1
 8009fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fa95 	bl	800a508 <UART_CheckIdleState>
 8009fde:	4603      	mov	r3, r0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fec:	b094      	sub	sp, #80	; 0x50
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	4b78      	ldr	r3, [pc, #480]	; (800a1e0 <UART_SetConfig+0x1f8>)
 8009ffe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a002:	689a      	ldr	r2, [r3, #8]
 800a004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	431a      	orrs	r2, r3
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	431a      	orrs	r2, r3
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	4313      	orrs	r3, r2
 800a016:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4971      	ldr	r1, [pc, #452]	; (800a1e4 <UART_SetConfig+0x1fc>)
 800a020:	4019      	ands	r1, r3
 800a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a028:	430b      	orrs	r3, r1
 800a02a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a038:	68d9      	ldr	r1, [r3, #12]
 800a03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	ea40 0301 	orr.w	r3, r0, r1
 800a042:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	4b64      	ldr	r3, [pc, #400]	; (800a1e0 <UART_SetConfig+0x1f8>)
 800a050:	429a      	cmp	r2, r3
 800a052:	d009      	beq.n	800a068 <UART_SetConfig+0x80>
 800a054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	4b63      	ldr	r3, [pc, #396]	; (800a1e8 <UART_SetConfig+0x200>)
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d004      	beq.n	800a068 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	6a1a      	ldr	r2, [r3, #32]
 800a062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a064:	4313      	orrs	r3, r2
 800a066:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a072:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a07c:	430b      	orrs	r3, r1
 800a07e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a086:	f023 000f 	bic.w	r0, r3, #15
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	ea40 0301 	orr.w	r3, r0, r1
 800a096:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	4b53      	ldr	r3, [pc, #332]	; (800a1ec <UART_SetConfig+0x204>)
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d102      	bne.n	800a0a8 <UART_SetConfig+0xc0>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0a6:	e066      	b.n	800a176 <UART_SetConfig+0x18e>
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	4b50      	ldr	r3, [pc, #320]	; (800a1f0 <UART_SetConfig+0x208>)
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d102      	bne.n	800a0b8 <UART_SetConfig+0xd0>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0b6:	e05e      	b.n	800a176 <UART_SetConfig+0x18e>
 800a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	4b4d      	ldr	r3, [pc, #308]	; (800a1f4 <UART_SetConfig+0x20c>)
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d102      	bne.n	800a0c8 <UART_SetConfig+0xe0>
 800a0c2:	2304      	movs	r3, #4
 800a0c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0c6:	e056      	b.n	800a176 <UART_SetConfig+0x18e>
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	4b4a      	ldr	r3, [pc, #296]	; (800a1f8 <UART_SetConfig+0x210>)
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d102      	bne.n	800a0d8 <UART_SetConfig+0xf0>
 800a0d2:	2308      	movs	r3, #8
 800a0d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0d6:	e04e      	b.n	800a176 <UART_SetConfig+0x18e>
 800a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	4b47      	ldr	r3, [pc, #284]	; (800a1fc <UART_SetConfig+0x214>)
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d102      	bne.n	800a0e8 <UART_SetConfig+0x100>
 800a0e2:	2310      	movs	r3, #16
 800a0e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0e6:	e046      	b.n	800a176 <UART_SetConfig+0x18e>
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	4b44      	ldr	r3, [pc, #272]	; (800a200 <UART_SetConfig+0x218>)
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d102      	bne.n	800a0f8 <UART_SetConfig+0x110>
 800a0f2:	2320      	movs	r3, #32
 800a0f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0f6:	e03e      	b.n	800a176 <UART_SetConfig+0x18e>
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	4b41      	ldr	r3, [pc, #260]	; (800a204 <UART_SetConfig+0x21c>)
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d102      	bne.n	800a108 <UART_SetConfig+0x120>
 800a102:	2340      	movs	r3, #64	; 0x40
 800a104:	64bb      	str	r3, [r7, #72]	; 0x48
 800a106:	e036      	b.n	800a176 <UART_SetConfig+0x18e>
 800a108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	4b3e      	ldr	r3, [pc, #248]	; (800a208 <UART_SetConfig+0x220>)
 800a10e:	429a      	cmp	r2, r3
 800a110:	d102      	bne.n	800a118 <UART_SetConfig+0x130>
 800a112:	2380      	movs	r3, #128	; 0x80
 800a114:	64bb      	str	r3, [r7, #72]	; 0x48
 800a116:	e02e      	b.n	800a176 <UART_SetConfig+0x18e>
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	4b3b      	ldr	r3, [pc, #236]	; (800a20c <UART_SetConfig+0x224>)
 800a11e:	429a      	cmp	r2, r3
 800a120:	d103      	bne.n	800a12a <UART_SetConfig+0x142>
 800a122:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a126:	64bb      	str	r3, [r7, #72]	; 0x48
 800a128:	e025      	b.n	800a176 <UART_SetConfig+0x18e>
 800a12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4b38      	ldr	r3, [pc, #224]	; (800a210 <UART_SetConfig+0x228>)
 800a130:	429a      	cmp	r2, r3
 800a132:	d103      	bne.n	800a13c <UART_SetConfig+0x154>
 800a134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a138:	64bb      	str	r3, [r7, #72]	; 0x48
 800a13a:	e01c      	b.n	800a176 <UART_SetConfig+0x18e>
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	4b34      	ldr	r3, [pc, #208]	; (800a214 <UART_SetConfig+0x22c>)
 800a142:	429a      	cmp	r2, r3
 800a144:	d103      	bne.n	800a14e <UART_SetConfig+0x166>
 800a146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a14a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a14c:	e013      	b.n	800a176 <UART_SetConfig+0x18e>
 800a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	4b31      	ldr	r3, [pc, #196]	; (800a218 <UART_SetConfig+0x230>)
 800a154:	429a      	cmp	r2, r3
 800a156:	d103      	bne.n	800a160 <UART_SetConfig+0x178>
 800a158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a15c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a15e:	e00a      	b.n	800a176 <UART_SetConfig+0x18e>
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	4b1e      	ldr	r3, [pc, #120]	; (800a1e0 <UART_SetConfig+0x1f8>)
 800a166:	429a      	cmp	r2, r3
 800a168:	d103      	bne.n	800a172 <UART_SetConfig+0x18a>
 800a16a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a16e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a170:	e001      	b.n	800a176 <UART_SetConfig+0x18e>
 800a172:	2300      	movs	r3, #0
 800a174:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	4b19      	ldr	r3, [pc, #100]	; (800a1e0 <UART_SetConfig+0x1f8>)
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d005      	beq.n	800a18c <UART_SetConfig+0x1a4>
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	4b18      	ldr	r3, [pc, #96]	; (800a1e8 <UART_SetConfig+0x200>)
 800a186:	429a      	cmp	r2, r3
 800a188:	f040 8094 	bne.w	800a2b4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a18c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a18e:	2200      	movs	r2, #0
 800a190:	623b      	str	r3, [r7, #32]
 800a192:	627a      	str	r2, [r7, #36]	; 0x24
 800a194:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a198:	f7fc fe70 	bl	8006e7c <HAL_RCCEx_GetPeriphCLKFreq>
 800a19c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a19e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 80f7 	beq.w	800a394 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1aa:	4a1c      	ldr	r2, [pc, #112]	; (800a21c <UART_SetConfig+0x234>)
 800a1ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1b8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	4413      	add	r3, r2
 800a1c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d305      	bcc.n	800a1d6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d924      	bls.n	800a220 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a1dc:	e069      	b.n	800a2b2 <UART_SetConfig+0x2ca>
 800a1de:	bf00      	nop
 800a1e0:	44002400 	.word	0x44002400
 800a1e4:	cfff69f3 	.word	0xcfff69f3
 800a1e8:	54002400 	.word	0x54002400
 800a1ec:	40013800 	.word	0x40013800
 800a1f0:	40004400 	.word	0x40004400
 800a1f4:	40004800 	.word	0x40004800
 800a1f8:	40004c00 	.word	0x40004c00
 800a1fc:	40005000 	.word	0x40005000
 800a200:	40006400 	.word	0x40006400
 800a204:	40007800 	.word	0x40007800
 800a208:	40007c00 	.word	0x40007c00
 800a20c:	40008000 	.word	0x40008000
 800a210:	40006800 	.word	0x40006800
 800a214:	40006c00 	.word	0x40006c00
 800a218:	40008400 	.word	0x40008400
 800a21c:	0800aecc 	.word	0x0800aecc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a222:	2200      	movs	r2, #0
 800a224:	61bb      	str	r3, [r7, #24]
 800a226:	61fa      	str	r2, [r7, #28]
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22c:	4a64      	ldr	r2, [pc, #400]	; (800a3c0 <UART_SetConfig+0x3d8>)
 800a22e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a232:	b29b      	uxth	r3, r3
 800a234:	2200      	movs	r2, #0
 800a236:	613b      	str	r3, [r7, #16]
 800a238:	617a      	str	r2, [r7, #20]
 800a23a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a23e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a242:	f7f6 f823 	bl	800028c <__aeabi_uldivmod>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	4610      	mov	r0, r2
 800a24c:	4619      	mov	r1, r3
 800a24e:	f04f 0200 	mov.w	r2, #0
 800a252:	f04f 0300 	mov.w	r3, #0
 800a256:	020b      	lsls	r3, r1, #8
 800a258:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a25c:	0202      	lsls	r2, r0, #8
 800a25e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a260:	6849      	ldr	r1, [r1, #4]
 800a262:	0849      	lsrs	r1, r1, #1
 800a264:	2000      	movs	r0, #0
 800a266:	460c      	mov	r4, r1
 800a268:	4605      	mov	r5, r0
 800a26a:	eb12 0804 	adds.w	r8, r2, r4
 800a26e:	eb43 0905 	adc.w	r9, r3, r5
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	60bb      	str	r3, [r7, #8]
 800a27a:	60fa      	str	r2, [r7, #12]
 800a27c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a280:	4640      	mov	r0, r8
 800a282:	4649      	mov	r1, r9
 800a284:	f7f6 f802 	bl	800028c <__aeabi_uldivmod>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4613      	mov	r3, r2
 800a28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a296:	d308      	bcc.n	800a2aa <UART_SetConfig+0x2c2>
 800a298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a29e:	d204      	bcs.n	800a2aa <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2a6:	60da      	str	r2, [r3, #12]
 800a2a8:	e003      	b.n	800a2b2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a2b0:	e070      	b.n	800a394 <UART_SetConfig+0x3ac>
 800a2b2:	e06f      	b.n	800a394 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2bc:	d13c      	bne.n	800a338 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a2be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	607a      	str	r2, [r7, #4]
 800a2c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2ca:	f7fc fdd7 	bl	8006e7c <HAL_RCCEx_GetPeriphCLKFreq>
 800a2ce:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d05e      	beq.n	800a394 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	4a39      	ldr	r2, [pc, #228]	; (800a3c0 <UART_SetConfig+0x3d8>)
 800a2dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2e8:	005a      	lsls	r2, r3, #1
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	085b      	lsrs	r3, r3, #1
 800a2f0:	441a      	add	r2, r3
 800a2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2fe:	2b0f      	cmp	r3, #15
 800a300:	d916      	bls.n	800a330 <UART_SetConfig+0x348>
 800a302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a308:	d212      	bcs.n	800a330 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	f023 030f 	bic.w	r3, r3, #15
 800a312:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a316:	085b      	lsrs	r3, r3, #1
 800a318:	b29b      	uxth	r3, r3
 800a31a:	f003 0307 	and.w	r3, r3, #7
 800a31e:	b29a      	uxth	r2, r3
 800a320:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a322:	4313      	orrs	r3, r2
 800a324:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a32c:	60da      	str	r2, [r3, #12]
 800a32e:	e031      	b.n	800a394 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a336:	e02d      	b.n	800a394 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a33a:	2200      	movs	r2, #0
 800a33c:	469a      	mov	sl, r3
 800a33e:	4693      	mov	fp, r2
 800a340:	4650      	mov	r0, sl
 800a342:	4659      	mov	r1, fp
 800a344:	f7fc fd9a 	bl	8006e7c <HAL_RCCEx_GetPeriphCLKFreq>
 800a348:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a34a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d021      	beq.n	800a394 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	4a1a      	ldr	r2, [pc, #104]	; (800a3c0 <UART_SetConfig+0x3d8>)
 800a356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a35a:	461a      	mov	r2, r3
 800a35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a35e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	085b      	lsrs	r3, r3, #1
 800a368:	441a      	add	r2, r3
 800a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a372:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a376:	2b0f      	cmp	r3, #15
 800a378:	d909      	bls.n	800a38e <UART_SetConfig+0x3a6>
 800a37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a37c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a380:	d205      	bcs.n	800a38e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a384:	b29a      	uxth	r2, r3
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60da      	str	r2, [r3, #12]
 800a38c:	e002      	b.n	800a394 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	2201      	movs	r2, #1
 800a398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a3b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3750      	adds	r7, #80	; 0x50
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3be:	bf00      	nop
 800a3c0:	0800aecc 	.word	0x0800aecc

0800a3c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d0:	f003 0308 	and.w	r3, r3, #8
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a436:	f003 0304 	and.w	r3, r3, #4
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a458:	f003 0310 	and.w	r3, r3, #16
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00a      	beq.n	800a476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00a      	beq.n	800a498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01a      	beq.n	800a4da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4c2:	d10a      	bne.n	800a4da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	605a      	str	r2, [r3, #4]
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b098      	sub	sp, #96	; 0x60
 800a50c:	af02      	add	r7, sp, #8
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a518:	f7f7 fa1a 	bl	8001950 <HAL_GetTick>
 800a51c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0308 	and.w	r3, r3, #8
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d12f      	bne.n	800a58c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a52c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a534:	2200      	movs	r2, #0
 800a536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f88e 	bl	800a65c <UART_WaitOnFlagUntilTimeout>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d022      	beq.n	800a58c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	e853 3f00 	ldrex	r3, [r3]
 800a552:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a55a:	653b      	str	r3, [r7, #80]	; 0x50
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a564:	647b      	str	r3, [r7, #68]	; 0x44
 800a566:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a56a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e6      	bne.n	800a546 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e063      	b.n	800a654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b04      	cmp	r3, #4
 800a598:	d149      	bne.n	800a62e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a59a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f857 	bl	800a65c <UART_WaitOnFlagUntilTimeout>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d03c      	beq.n	800a62e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5d2:	633b      	str	r3, [r7, #48]	; 0x30
 800a5d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5da:	e841 2300 	strex	r3, r2, [r1]
 800a5de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1e6      	bne.n	800a5b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	e853 3f00 	ldrex	r3, [r3]
 800a5f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f023 0301 	bic.w	r3, r3, #1
 800a5fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3308      	adds	r3, #8
 800a604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a606:	61fa      	str	r2, [r7, #28]
 800a608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60a:	69b9      	ldr	r1, [r7, #24]
 800a60c:	69fa      	ldr	r2, [r7, #28]
 800a60e:	e841 2300 	strex	r3, r2, [r1]
 800a612:	617b      	str	r3, [r7, #20]
   return(result);
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1e5      	bne.n	800a5e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e012      	b.n	800a654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2220      	movs	r2, #32
 800a632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2220      	movs	r2, #32
 800a63a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3758      	adds	r7, #88	; 0x58
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	4613      	mov	r3, r2
 800a66a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a66c:	e049      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d045      	beq.n	800a702 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a676:	f7f7 f96b 	bl	8001950 <HAL_GetTick>
 800a67a:	4602      	mov	r2, r0
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	429a      	cmp	r2, r3
 800a684:	d302      	bcc.n	800a68c <UART_WaitOnFlagUntilTimeout+0x30>
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e048      	b.n	800a722 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0304 	and.w	r3, r3, #4
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d031      	beq.n	800a702 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	f003 0308 	and.w	r3, r3, #8
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d110      	bne.n	800a6ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2208      	movs	r2, #8
 800a6b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 f838 	bl	800a72a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2208      	movs	r2, #8
 800a6be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e029      	b.n	800a722 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6dc:	d111      	bne.n	800a702 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 f81e 	bl	800a72a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e00f      	b.n	800a722 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	69da      	ldr	r2, [r3, #28]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4013      	ands	r3, r2
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	429a      	cmp	r2, r3
 800a710:	bf0c      	ite	eq
 800a712:	2301      	moveq	r3, #1
 800a714:	2300      	movne	r3, #0
 800a716:	b2db      	uxtb	r3, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d0a6      	beq.n	800a66e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b095      	sub	sp, #84	; 0x54
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73a:	e853 3f00 	ldrex	r3, [r3]
 800a73e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a746:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	461a      	mov	r2, r3
 800a74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a750:	643b      	str	r3, [r7, #64]	; 0x40
 800a752:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a758:	e841 2300 	strex	r3, r2, [r1]
 800a75c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e6      	bne.n	800a732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3308      	adds	r3, #8
 800a76a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76c:	6a3b      	ldr	r3, [r7, #32]
 800a76e:	e853 3f00 	ldrex	r3, [r3]
 800a772:	61fb      	str	r3, [r7, #28]
   return(result);
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a77a:	f023 0301 	bic.w	r3, r3, #1
 800a77e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3308      	adds	r3, #8
 800a786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a78a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a78e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a790:	e841 2300 	strex	r3, r2, [r1]
 800a794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e3      	bne.n	800a764 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d118      	bne.n	800a7d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	e853 3f00 	ldrex	r3, [r3]
 800a7b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	f023 0310 	bic.w	r3, r3, #16
 800a7b8:	647b      	str	r3, [r7, #68]	; 0x44
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c2:	61bb      	str	r3, [r7, #24]
 800a7c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6979      	ldr	r1, [r7, #20]
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e6      	bne.n	800a7a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a7ea:	bf00      	nop
 800a7ec:	3754      	adds	r7, #84	; 0x54
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b085      	sub	sp, #20
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a804:	2b01      	cmp	r3, #1
 800a806:	d101      	bne.n	800a80c <HAL_UARTEx_DisableFifoMode+0x16>
 800a808:	2302      	movs	r3, #2
 800a80a:	e027      	b.n	800a85c <HAL_UARTEx_DisableFifoMode+0x66>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2224      	movs	r2, #36	; 0x24
 800a818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f022 0201 	bic.w	r2, r2, #1
 800a832:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a83a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2220      	movs	r2, #32
 800a84e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d101      	bne.n	800a880 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a87c:	2302      	movs	r3, #2
 800a87e:	e02d      	b.n	800a8dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2224      	movs	r2, #36	; 0x24
 800a88c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f022 0201 	bic.w	r2, r2, #1
 800a8a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f84f 	bl	800a960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2220      	movs	r2, #32
 800a8ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d101      	bne.n	800a8fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	e02d      	b.n	800a958 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2224      	movs	r2, #36	; 0x24
 800a908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f022 0201 	bic.w	r2, r2, #1
 800a922:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	430a      	orrs	r2, r1
 800a936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f811 	bl	800a960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2220      	movs	r2, #32
 800a94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d108      	bne.n	800a982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a980:	e031      	b.n	800a9e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a982:	2308      	movs	r3, #8
 800a984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a986:	2308      	movs	r3, #8
 800a988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	0e5b      	lsrs	r3, r3, #25
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f003 0307 	and.w	r3, r3, #7
 800a998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	0f5b      	lsrs	r3, r3, #29
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 0307 	and.w	r3, r3, #7
 800a9a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	7b3a      	ldrb	r2, [r7, #12]
 800a9ae:	4911      	ldr	r1, [pc, #68]	; (800a9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9b0:	5c8a      	ldrb	r2, [r1, r2]
 800a9b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9b6:	7b3a      	ldrb	r2, [r7, #12]
 800a9b8:	490f      	ldr	r1, [pc, #60]	; (800a9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800a9ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	7b7a      	ldrb	r2, [r7, #13]
 800a9cc:	4909      	ldr	r1, [pc, #36]	; (800a9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9ce:	5c8a      	ldrb	r2, [r1, r2]
 800a9d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9d4:	7b7a      	ldrb	r2, [r7, #13]
 800a9d6:	4908      	ldr	r1, [pc, #32]	; (800a9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800a9d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9da:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9e6:	bf00      	nop
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	0800aee4 	.word	0x0800aee4
 800a9f8:	0800aeec 	.word	0x0800aeec

0800a9fc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b08b      	sub	sp, #44	; 0x2c
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	fa93 f3a3 	rbit	r3, r3
 800aa16:	613b      	str	r3, [r7, #16]
  return result;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d101      	bne.n	800aa26 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800aa22:	2320      	movs	r3, #32
 800aa24:	e003      	b.n	800aa2e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	fab3 f383 	clz	r3, r3
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	005b      	lsls	r3, r3, #1
 800aa30:	2103      	movs	r1, #3
 800aa32:	fa01 f303 	lsl.w	r3, r1, r3
 800aa36:	43db      	mvns	r3, r3
 800aa38:	401a      	ands	r2, r3
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	fa93 f3a3 	rbit	r3, r3
 800aa44:	61fb      	str	r3, [r7, #28]
  return result;
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800aa50:	2320      	movs	r3, #32
 800aa52:	e003      	b.n	800aa5c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	fab3 f383 	clz	r3, r3
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	fa01 f303 	lsl.w	r3, r1, r3
 800aa64:	431a      	orrs	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	601a      	str	r2, [r3, #0]
}
 800aa6a:	bf00      	nop
 800aa6c:	372c      	adds	r7, #44	; 0x2c
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b085      	sub	sp, #20
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	685a      	ldr	r2, [r3, #4]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	43db      	mvns	r3, r3
 800aa8a:	401a      	ands	r2, r3
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	6879      	ldr	r1, [r7, #4]
 800aa90:	fb01 f303 	mul.w	r3, r1, r3
 800aa94:	431a      	orrs	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	605a      	str	r2, [r3, #4]
}
 800aa9a:	bf00      	nop
 800aa9c:	3714      	adds	r7, #20
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b08b      	sub	sp, #44	; 0x2c
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	60b9      	str	r1, [r7, #8]
 800aab0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	689a      	ldr	r2, [r3, #8]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	fa93 f3a3 	rbit	r3, r3
 800aac0:	613b      	str	r3, [r7, #16]
  return result;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800aacc:	2320      	movs	r3, #32
 800aace:	e003      	b.n	800aad8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	fab3 f383 	clz	r3, r3
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	2103      	movs	r1, #3
 800aadc:	fa01 f303 	lsl.w	r3, r1, r3
 800aae0:	43db      	mvns	r3, r3
 800aae2:	401a      	ands	r2, r3
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aae8:	6a3b      	ldr	r3, [r7, #32]
 800aaea:	fa93 f3a3 	rbit	r3, r3
 800aaee:	61fb      	str	r3, [r7, #28]
  return result;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800aafa:	2320      	movs	r3, #32
 800aafc:	e003      	b.n	800ab06 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	fab3 f383 	clz	r3, r3
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	005b      	lsls	r3, r3, #1
 800ab08:	6879      	ldr	r1, [r7, #4]
 800ab0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800ab14:	bf00      	nop
 800ab16:	372c      	adds	r7, #44	; 0x2c
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b08b      	sub	sp, #44	; 0x2c
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	fa93 f3a3 	rbit	r3, r3
 800ab3a:	613b      	str	r3, [r7, #16]
  return result;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800ab46:	2320      	movs	r3, #32
 800ab48:	e003      	b.n	800ab52 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	fab3 f383 	clz	r3, r3
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	2103      	movs	r1, #3
 800ab56:	fa01 f303 	lsl.w	r3, r1, r3
 800ab5a:	43db      	mvns	r3, r3
 800ab5c:	401a      	ands	r2, r3
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	fa93 f3a3 	rbit	r3, r3
 800ab68:	61fb      	str	r3, [r7, #28]
  return result;
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d101      	bne.n	800ab78 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800ab74:	2320      	movs	r3, #32
 800ab76:	e003      	b.n	800ab80 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7a:	fab3 f383 	clz	r3, r3
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	005b      	lsls	r3, r3, #1
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	fa01 f303 	lsl.w	r3, r1, r3
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	60da      	str	r2, [r3, #12]
}
 800ab8e:	bf00      	nop
 800ab90:	372c      	adds	r7, #44	; 0x2c
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b08b      	sub	sp, #44	; 0x2c
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6a1a      	ldr	r2, [r3, #32]
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	fa93 f3a3 	rbit	r3, r3
 800abb4:	613b      	str	r3, [r7, #16]
  return result;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800abc0:	2320      	movs	r3, #32
 800abc2:	e003      	b.n	800abcc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	fab3 f383 	clz	r3, r3
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	210f      	movs	r1, #15
 800abd0:	fa01 f303 	lsl.w	r3, r1, r3
 800abd4:	43db      	mvns	r3, r3
 800abd6:	401a      	ands	r2, r3
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	fa93 f3a3 	rbit	r3, r3
 800abe2:	61fb      	str	r3, [r7, #28]
  return result;
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800abee:	2320      	movs	r3, #32
 800abf0:	e003      	b.n	800abfa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	fab3 f383 	clz	r3, r3
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ac02:	431a      	orrs	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800ac08:	bf00      	nop
 800ac0a:	372c      	adds	r7, #44	; 0x2c
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b08b      	sub	sp, #44	; 0x2c
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	0a1b      	lsrs	r3, r3, #8
 800ac28:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	fa93 f3a3 	rbit	r3, r3
 800ac30:	613b      	str	r3, [r7, #16]
  return result;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800ac3c:	2320      	movs	r3, #32
 800ac3e:	e003      	b.n	800ac48 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	fab3 f383 	clz	r3, r3
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	210f      	movs	r1, #15
 800ac4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac50:	43db      	mvns	r3, r3
 800ac52:	401a      	ands	r2, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	0a1b      	lsrs	r3, r3, #8
 800ac58:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	fa93 f3a3 	rbit	r3, r3
 800ac60:	61fb      	str	r3, [r7, #28]
  return result;
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800ac6c:	2320      	movs	r3, #32
 800ac6e:	e003      	b.n	800ac78 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	fab3 f383 	clz	r3, r3
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	6879      	ldr	r1, [r7, #4]
 800ac7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac80:	431a      	orrs	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800ac86:	bf00      	nop
 800ac88:	372c      	adds	r7, #44	; 0x2c
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b08a      	sub	sp, #40	; 0x28
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	fa93 f3a3 	rbit	r3, r3
 800aca8:	617b      	str	r3, [r7, #20]
  return result;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <LL_GPIO_Init+0x26>
    return 32U;
 800acb4:	2320      	movs	r3, #32
 800acb6:	e003      	b.n	800acc0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	fab3 f383 	clz	r3, r3
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800acc2:	e058      	b.n	800ad76 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	2101      	movs	r1, #1
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	fa01 f303 	lsl.w	r3, r1, r3
 800acd0:	4013      	ands	r3, r2
 800acd2:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d04a      	beq.n	800ad70 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d003      	beq.n	800acea <LL_GPIO_Init+0x58>
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d10e      	bne.n	800ad08 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	461a      	mov	r2, r3
 800acf0:	6a39      	ldr	r1, [r7, #32]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7ff fed7 	bl	800aaa6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	6819      	ldr	r1, [r3, #0]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	461a      	mov	r2, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff feb7 	bl	800aa76 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	6a39      	ldr	r1, [r7, #32]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7ff ff05 	bl	800ab20 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d121      	bne.n	800ad62 <LL_GPIO_Init+0xd0>
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	fa93 f3a3 	rbit	r3, r3
 800ad28:	60bb      	str	r3, [r7, #8]
  return result;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <LL_GPIO_Init+0xa6>
    return 32U;
 800ad34:	2320      	movs	r3, #32
 800ad36:	e003      	b.n	800ad40 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	fab3 f383 	clz	r3, r3
 800ad3e:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800ad40:	2b07      	cmp	r3, #7
 800ad42:	d807      	bhi.n	800ad54 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	6a39      	ldr	r1, [r7, #32]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff ff24 	bl	800ab9a <LL_GPIO_SetAFPin_0_7>
 800ad52:	e006      	b.n	800ad62 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	461a      	mov	r2, r3
 800ad5a:	6a39      	ldr	r1, [r7, #32]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff ff59 	bl	800ac14 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	461a      	mov	r2, r3
 800ad68:	6a39      	ldr	r1, [r7, #32]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff fe46 	bl	800a9fc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	3301      	adds	r3, #1
 800ad74:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d19f      	bne.n	800acc4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3728      	adds	r7, #40	; 0x28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b085      	sub	sp, #20
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ad96:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ad9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	43db      	mvns	r3, r3
 800ada4:	401a      	ands	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800adc4:	78fb      	ldrb	r3, [r7, #3]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d106      	bne.n	800add8 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	641a      	str	r2, [r3, #64]	; 0x40
 800add6:	e00b      	b.n	800adf0 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	2b01      	cmp	r3, #1
 800addc:	d106      	bne.n	800adec <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	641a      	str	r2, [r3, #64]	; 0x40
 800adea:	e001      	b.n	800adf0 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	e000      	b.n	800adf2 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800adfe:	b084      	sub	sp, #16
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	f107 001c 	add.w	r0, r7, #28
 800ae0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1a:	f023 0201 	bic.w	r2, r3, #1
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800ae22:	2100      	movs	r1, #0
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff ffc7 	bl	800adb8 <USB_SetCurrentMode>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae40:	b004      	add	sp, #16
 800ae42:	4770      	bx	lr

0800ae44 <memset>:
 800ae44:	4402      	add	r2, r0
 800ae46:	4603      	mov	r3, r0
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d100      	bne.n	800ae4e <memset+0xa>
 800ae4c:	4770      	bx	lr
 800ae4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae52:	e7f9      	b.n	800ae48 <memset+0x4>

0800ae54 <__libc_init_array>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	4d0d      	ldr	r5, [pc, #52]	; (800ae8c <__libc_init_array+0x38>)
 800ae58:	2600      	movs	r6, #0
 800ae5a:	4c0d      	ldr	r4, [pc, #52]	; (800ae90 <__libc_init_array+0x3c>)
 800ae5c:	1b64      	subs	r4, r4, r5
 800ae5e:	10a4      	asrs	r4, r4, #2
 800ae60:	42a6      	cmp	r6, r4
 800ae62:	d109      	bne.n	800ae78 <__libc_init_array+0x24>
 800ae64:	4d0b      	ldr	r5, [pc, #44]	; (800ae94 <__libc_init_array+0x40>)
 800ae66:	2600      	movs	r6, #0
 800ae68:	4c0b      	ldr	r4, [pc, #44]	; (800ae98 <__libc_init_array+0x44>)
 800ae6a:	f000 f817 	bl	800ae9c <_init>
 800ae6e:	1b64      	subs	r4, r4, r5
 800ae70:	10a4      	asrs	r4, r4, #2
 800ae72:	42a6      	cmp	r6, r4
 800ae74:	d105      	bne.n	800ae82 <__libc_init_array+0x2e>
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae7c:	3601      	adds	r6, #1
 800ae7e:	4798      	blx	r3
 800ae80:	e7ee      	b.n	800ae60 <__libc_init_array+0xc>
 800ae82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae86:	3601      	adds	r6, #1
 800ae88:	4798      	blx	r3
 800ae8a:	e7f2      	b.n	800ae72 <__libc_init_array+0x1e>
 800ae8c:	0800aefc 	.word	0x0800aefc
 800ae90:	0800aefc 	.word	0x0800aefc
 800ae94:	0800aefc 	.word	0x0800aefc
 800ae98:	0800af00 	.word	0x0800af00

0800ae9c <_init>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	bf00      	nop
 800aea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea2:	bc08      	pop	{r3}
 800aea4:	469e      	mov	lr, r3
 800aea6:	4770      	bx	lr

0800aea8 <_fini>:
 800aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeaa:	bf00      	nop
 800aeac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeae:	bc08      	pop	{r3}
 800aeb0:	469e      	mov	lr, r3
 800aeb2:	4770      	bx	lr
