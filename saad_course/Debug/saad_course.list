
saad_course.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004da4  08004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e70  08004e70  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004e70  08004e70  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e70  08004e70  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000020  08004e98  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08004e98  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145f6  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002773  00000000  00000000  00034681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00036df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eaa  00000000  00000000  00038080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001533d  00000000  00000000  00038f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166d9  00000000  00000000  0004e267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008963f  00000000  00000000  00064940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004458  00000000  00000000  000edf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f23d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d8c 	.word	0x08004d8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08004d8c 	.word	0x08004d8c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd73 	bl	8000d0e <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, dir_state);
 8000228:	4b38      	ldr	r3, [pc, #224]	; (800030c <main+0xec>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	4838      	ldr	r0, [pc, #224]	; (8000310 <main+0xf0>)
 800022e:	001a      	movs	r2, r3
 8000230:	2140      	movs	r1, #64	; 0x40
 8000232:	f002 fa73 	bl	800271c <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000236:	f000 f881 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023a:	f000 fa73 	bl	8000724 <MX_GPIO_Init>
  MX_DMA_Init();
 800023e:	f000 fa53 	bl	80006e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000242:	f000 f8bf 	bl	80003c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000246:	f000 f949 	bl	80004dc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800024a:	f000 fa19 	bl	8000680 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800024e:	f000 f985 	bl	800055c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 3);
 8000252:	4930      	ldr	r1, [pc, #192]	; (8000314 <main+0xf4>)
 8000254:	4b30      	ldr	r3, [pc, #192]	; (8000318 <main+0xf8>)
 8000256:	2203      	movs	r2, #3
 8000258:	0018      	movs	r0, r3
 800025a:	f001 f8f3 	bl	8001444 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 800025e:	4b2f      	ldr	r3, [pc, #188]	; (800031c <main+0xfc>)
 8000260:	0018      	movs	r0, r3
 8000262:	f003 f8a5 	bl	80033b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000266:	4b2d      	ldr	r3, [pc, #180]	; (800031c <main+0xfc>)
 8000268:	2100      	movs	r1, #0
 800026a:	0018      	movs	r0, r3
 800026c:	f003 f94e 	bl	800350c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000270:	4b2a      	ldr	r3, [pc, #168]	; (800031c <main+0xfc>)
 8000272:	2104      	movs	r1, #4
 8000274:	0018      	movs	r0, r3
 8000276:	f003 f949 	bl	800350c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(duty1 != duty1_last && duty1 <10000)
 800027a:	4b29      	ldr	r3, [pc, #164]	; (8000320 <main+0x100>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b29      	ldr	r3, [pc, #164]	; (8000324 <main+0x104>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	429a      	cmp	r2, r3
 8000284:	d00d      	beq.n	80002a2 <main+0x82>
 8000286:	4b26      	ldr	r3, [pc, #152]	; (8000320 <main+0x100>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a27      	ldr	r2, [pc, #156]	; (8000328 <main+0x108>)
 800028c:	4293      	cmp	r3, r2
 800028e:	dc08      	bgt.n	80002a2 <main+0x82>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty1);
 8000290:	4b23      	ldr	r3, [pc, #140]	; (8000320 <main+0x100>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b21      	ldr	r3, [pc, #132]	; (800031c <main+0xfc>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	635a      	str	r2, [r3, #52]	; 0x34
		  duty1_last = duty1;
 800029a:	4b21      	ldr	r3, [pc, #132]	; (8000320 <main+0x100>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4b21      	ldr	r3, [pc, #132]	; (8000324 <main+0x104>)
 80002a0:	601a      	str	r2, [r3, #0]
	  }
	  if(duty2 != duty2_last && duty2 <10000)
 80002a2:	4b22      	ldr	r3, [pc, #136]	; (800032c <main+0x10c>)
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	4b22      	ldr	r3, [pc, #136]	; (8000330 <main+0x110>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d00d      	beq.n	80002ca <main+0xaa>
 80002ae:	4b1f      	ldr	r3, [pc, #124]	; (800032c <main+0x10c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a1d      	ldr	r2, [pc, #116]	; (8000328 <main+0x108>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	dc08      	bgt.n	80002ca <main+0xaa>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty2);
 80002b8:	4b1c      	ldr	r3, [pc, #112]	; (800032c <main+0x10c>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <main+0xfc>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	639a      	str	r2, [r3, #56]	; 0x38
		  duty2_last = duty2;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <main+0x10c>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <main+0x110>)
 80002c8:	601a      	str	r2, [r3, #0]
	  }
	  if(step > 0)
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <main+0x114>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	ddd3      	ble.n	800027a <main+0x5a>
	  {

		  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, SET);
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <main+0xf0>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	2180      	movs	r1, #128	; 0x80
 80002d8:	0018      	movs	r0, r3
 80002da:	f002 fa1f 	bl	800271c <HAL_GPIO_WritePin>
		  HAL_Delay(step_interval);
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <main+0x118>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 fd90 	bl	8000e08 <HAL_Delay>
		  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, RESET);
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <main+0xf0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	2180      	movs	r1, #128	; 0x80
 80002ee:	0018      	movs	r0, r3
 80002f0:	f002 fa14 	bl	800271c <HAL_GPIO_WritePin>
		  HAL_Delay(step_interval);
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <main+0x118>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 fd85 	bl	8000e08 <HAL_Delay>
		  step--;
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <main+0x114>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	1e5a      	subs	r2, r3, #1
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <main+0x114>)
 8000306:	601a      	str	r2, [r3, #0]
	  if(duty1 != duty1_last && duty1 <10000)
 8000308:	e7b7      	b.n	800027a <main+0x5a>
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	2000023a 	.word	0x2000023a
 8000310:	50000400 	.word	0x50000400
 8000314:	20000234 	.word	0x20000234
 8000318:	2000003c 	.word	0x2000003c
 800031c:	20000150 	.word	0x20000150
 8000320:	20000000 	.word	0x20000000
 8000324:	20000008 	.word	0x20000008
 8000328:	0000270f 	.word	0x0000270f
 800032c:	20000004 	.word	0x20000004
 8000330:	2000000c 	.word	0x2000000c
 8000334:	2000023c 	.word	0x2000023c
 8000338:	20000010 	.word	0x20000010

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b08d      	sub	sp, #52	; 0x34
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	2414      	movs	r4, #20
 8000344:	193b      	adds	r3, r7, r4
 8000346:	0018      	movs	r0, r3
 8000348:	231c      	movs	r3, #28
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f004 fcf1 	bl	8004d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000352:	003b      	movs	r3, r7
 8000354:	0018      	movs	r0, r3
 8000356:	2314      	movs	r3, #20
 8000358:	001a      	movs	r2, r3
 800035a:	2100      	movs	r1, #0
 800035c:	f004 fcea 	bl	8004d34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	193b      	adds	r3, r7, r4
 8000362:	2202      	movs	r2, #2
 8000364:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000366:	193b      	adds	r3, r7, r4
 8000368:	2280      	movs	r2, #128	; 0x80
 800036a:	0052      	lsls	r2, r2, #1
 800036c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800036e:	193b      	adds	r3, r7, r4
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000374:	193b      	adds	r3, r7, r4
 8000376:	2240      	movs	r2, #64	; 0x40
 8000378:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	193b      	adds	r3, r7, r4
 800037c:	0018      	movs	r0, r3
 800037e:	f002 fb81 	bl	8002a84 <HAL_RCC_OscConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000386:	f000 fa7b 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	003b      	movs	r3, r7
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000390:	003b      	movs	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	003b      	movs	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800039c:	003b      	movs	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003a2:	003b      	movs	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a8:	003b      	movs	r3, r7
 80003aa:	2101      	movs	r1, #1
 80003ac:	0018      	movs	r0, r3
 80003ae:	f002 fd4d 	bl	8002e4c <HAL_RCC_ClockConfig>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003b6:	f000 fa63 	bl	8000880 <Error_Handler>
  }
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b00d      	add	sp, #52	; 0x34
 80003c0:	bd90      	pop	{r4, r7, pc}
	...

080003c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	0018      	movs	r0, r3
 80003ce:	230c      	movs	r3, #12
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f004 fcae 	bl	8004d34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003d8:	4b3c      	ldr	r3, [pc, #240]	; (80004cc <MX_ADC1_Init+0x108>)
 80003da:	4a3d      	ldr	r2, [pc, #244]	; (80004d0 <MX_ADC1_Init+0x10c>)
 80003dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003de:	4b3b      	ldr	r3, [pc, #236]	; (80004cc <MX_ADC1_Init+0x108>)
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	05d2      	lsls	r2, r2, #23
 80003e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003e6:	4b39      	ldr	r3, [pc, #228]	; (80004cc <MX_ADC1_Init+0x108>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ec:	4b37      	ldr	r3, [pc, #220]	; (80004cc <MX_ADC1_Init+0x108>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003f2:	4b36      	ldr	r3, [pc, #216]	; (80004cc <MX_ADC1_Init+0x108>)
 80003f4:	2280      	movs	r2, #128	; 0x80
 80003f6:	0392      	lsls	r2, r2, #14
 80003f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003fa:	4b34      	ldr	r3, [pc, #208]	; (80004cc <MX_ADC1_Init+0x108>)
 80003fc:	2204      	movs	r2, #4
 80003fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000400:	4b32      	ldr	r3, [pc, #200]	; (80004cc <MX_ADC1_Init+0x108>)
 8000402:	2200      	movs	r2, #0
 8000404:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000406:	4b31      	ldr	r3, [pc, #196]	; (80004cc <MX_ADC1_Init+0x108>)
 8000408:	2200      	movs	r2, #0
 800040a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800040c:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <MX_ADC1_Init+0x108>)
 800040e:	2201      	movs	r2, #1
 8000410:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <MX_ADC1_Init+0x108>)
 8000414:	2203      	movs	r2, #3
 8000416:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000418:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <MX_ADC1_Init+0x108>)
 800041a:	2200      	movs	r2, #0
 800041c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <MX_ADC1_Init+0x108>)
 8000420:	2200      	movs	r2, #0
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000424:	4b29      	ldr	r3, [pc, #164]	; (80004cc <MX_ADC1_Init+0x108>)
 8000426:	222c      	movs	r2, #44	; 0x2c
 8000428:	2101      	movs	r1, #1
 800042a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800042c:	4b27      	ldr	r3, [pc, #156]	; (80004cc <MX_ADC1_Init+0x108>)
 800042e:	2200      	movs	r2, #0
 8000430:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000432:	4b26      	ldr	r3, [pc, #152]	; (80004cc <MX_ADC1_Init+0x108>)
 8000434:	2207      	movs	r2, #7
 8000436:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <MX_ADC1_Init+0x108>)
 800043a:	2200      	movs	r2, #0
 800043c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800043e:	4b23      	ldr	r3, [pc, #140]	; (80004cc <MX_ADC1_Init+0x108>)
 8000440:	223c      	movs	r2, #60	; 0x3c
 8000442:	2100      	movs	r1, #0
 8000444:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000446:	4b21      	ldr	r3, [pc, #132]	; (80004cc <MX_ADC1_Init+0x108>)
 8000448:	2200      	movs	r2, #0
 800044a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MX_ADC1_Init+0x108>)
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fe52 	bl	80010f8 <HAL_ADC_Init>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000458:	f000 fa12 	bl	8000880 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2201      	movs	r2, #1
 8000460:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046e:	1d3a      	adds	r2, r7, #4
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <MX_ADC1_Init+0x108>)
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f001 f9ab 	bl	80017d0 <HAL_ADC_ConfigChannel>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800047e:	f000 f9ff 	bl	8000880 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <MX_ADC1_Init+0x110>)
 8000486:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2204      	movs	r2, #4
 800048c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048e:	1d3a      	adds	r2, r7, #4
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_ADC1_Init+0x108>)
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f001 f99b 	bl	80017d0 <HAL_ADC_ConfigChannel>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800049e:	f000 f9ef 	bl	8000880 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <MX_ADC1_Init+0x114>)
 80004a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2208      	movs	r2, #8
 80004ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ae:	1d3a      	adds	r2, r7, #4
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_ADC1_Init+0x108>)
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 f98b 	bl	80017d0 <HAL_ADC_ConfigChannel>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80004be:	f000 f9df 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b004      	add	sp, #16
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	2000003c 	.word	0x2000003c
 80004d0:	40012400 	.word	0x40012400
 80004d4:	04000002 	.word	0x04000002
 80004d8:	10000010 	.word	0x10000010

080004dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_I2C1_Init+0x74>)
 80004e2:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <MX_I2C1_Init+0x78>)
 80004e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_I2C1_Init+0x74>)
 80004e8:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <MX_I2C1_Init+0x7c>)
 80004ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_I2C1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_I2C1_Init+0x74>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_I2C1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_I2C1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_I2C1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_I2C1_Init+0x74>)
 8000518:	0018      	movs	r0, r3
 800051a:	f002 f975 	bl	8002808 <HAL_I2C_Init>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000522:	f000 f9ad 	bl	8000880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_I2C1_Init+0x74>)
 8000528:	2100      	movs	r1, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f002 fa12 	bl	8002954 <HAL_I2CEx_ConfigAnalogFilter>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000534:	f000 f9a4 	bl	8000880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <MX_I2C1_Init+0x74>)
 800053a:	2100      	movs	r1, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f002 fa55 	bl	80029ec <HAL_I2CEx_ConfigDigitalFilter>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000546:	f000 f99b 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200000fc 	.word	0x200000fc
 8000554:	40005400 	.word	0x40005400
 8000558:	20303e5d 	.word	0x20303e5d

0800055c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08e      	sub	sp, #56	; 0x38
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000562:	2328      	movs	r3, #40	; 0x28
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	0018      	movs	r0, r3
 8000568:	2310      	movs	r3, #16
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f004 fbe1 	bl	8004d34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000572:	231c      	movs	r3, #28
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	0018      	movs	r0, r3
 8000578:	230c      	movs	r3, #12
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f004 fbd9 	bl	8004d34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000582:	003b      	movs	r3, r7
 8000584:	0018      	movs	r0, r3
 8000586:	231c      	movs	r3, #28
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f004 fbd2 	bl	8004d34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000590:	4b36      	ldr	r3, [pc, #216]	; (800066c <MX_TIM3_Init+0x110>)
 8000592:	4a37      	ldr	r2, [pc, #220]	; (8000670 <MX_TIM3_Init+0x114>)
 8000594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000596:	4b35      	ldr	r3, [pc, #212]	; (800066c <MX_TIM3_Init+0x110>)
 8000598:	222f      	movs	r2, #47	; 0x2f
 800059a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059c:	4b33      	ldr	r3, [pc, #204]	; (800066c <MX_TIM3_Init+0x110>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80005a2:	4b32      	ldr	r3, [pc, #200]	; (800066c <MX_TIM3_Init+0x110>)
 80005a4:	4a33      	ldr	r2, [pc, #204]	; (8000674 <MX_TIM3_Init+0x118>)
 80005a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a8:	4b30      	ldr	r3, [pc, #192]	; (800066c <MX_TIM3_Init+0x110>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ae:	4b2f      	ldr	r3, [pc, #188]	; (800066c <MX_TIM3_Init+0x110>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005b4:	4b2d      	ldr	r3, [pc, #180]	; (800066c <MX_TIM3_Init+0x110>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 fea2 	bl	8003300 <HAL_TIM_Base_Init>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005c0:	f000 f95e 	bl	8000880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c4:	2128      	movs	r1, #40	; 0x28
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	0152      	lsls	r2, r2, #5
 80005cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ce:	187a      	adds	r2, r7, r1
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <MX_TIM3_Init+0x110>)
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f003 fa73 	bl	8003ac0 <HAL_TIM_ConfigClockSource>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80005de:	f000 f94f 	bl	8000880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <MX_TIM3_Init+0x110>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f002 ff31 	bl	800344c <HAL_TIM_PWM_Init>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80005ee:	f000 f947 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f2:	211c      	movs	r1, #28
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000600:	187a      	adds	r2, r7, r1
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_TIM3_Init+0x110>)
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f003 ff18 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000610:	f000 f936 	bl	8000880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000614:	003b      	movs	r3, r7
 8000616:	2260      	movs	r2, #96	; 0x60
 8000618:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2500;
 800061a:	003b      	movs	r3, r7
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_TIM3_Init+0x11c>)
 800061e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000620:	003b      	movs	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000626:	003b      	movs	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800062c:	0039      	movs	r1, r7
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_TIM3_Init+0x110>)
 8000630:	2200      	movs	r2, #0
 8000632:	0018      	movs	r0, r3
 8000634:	f003 f944 	bl	80038c0 <HAL_TIM_PWM_ConfigChannel>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800063c:	f000 f920 	bl	8000880 <Error_Handler>
  }
  sConfigOC.Pulse = 7500;
 8000640:	003b      	movs	r3, r7
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <MX_TIM3_Init+0x120>)
 8000644:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000646:	0039      	movs	r1, r7
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_TIM3_Init+0x110>)
 800064a:	2204      	movs	r2, #4
 800064c:	0018      	movs	r0, r3
 800064e:	f003 f937 	bl	80038c0 <HAL_TIM_PWM_ConfigChannel>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8000656:	f000 f913 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <MX_TIM3_Init+0x110>)
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fa53 	bl	8000b08 <HAL_TIM_MspPostInit>

}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b00e      	add	sp, #56	; 0x38
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	20000150 	.word	0x20000150
 8000670:	40000400 	.word	0x40000400
 8000674:	00002710 	.word	0x00002710
 8000678:	000009c4 	.word	0x000009c4
 800067c:	00001d4c 	.word	0x00001d4c

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <MX_USART2_UART_Init+0x64>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 800068c:	22e1      	movs	r2, #225	; 0xe1
 800068e:	0252      	lsls	r2, r2, #9
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <MX_USART2_UART_Init+0x60>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f003 ff30 	bl	8004530 <HAL_UART_Init>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006d4:	f000 f8d4 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	2000019c 	.word	0x2000019c
 80006e4:	40004400 	.word	0x40004400

080006e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_DMA_Init+0x38>)
 80006f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_DMA_Init+0x38>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	430a      	orrs	r2, r1
 80006f8:	639a      	str	r2, [r3, #56]	; 0x38
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_DMA_Init+0x38>)
 80006fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006fe:	2201      	movs	r2, #1
 8000700:	4013      	ands	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2009      	movs	r0, #9
 800070c:	f001 fc0e 	bl	8001f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000710:	2009      	movs	r0, #9
 8000712:	f001 fc20 	bl	8001f56 <HAL_NVIC_EnableIRQ>

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40021000 	.word	0x40021000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b08b      	sub	sp, #44	; 0x2c
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	2414      	movs	r4, #20
 800072c:	193b      	adds	r3, r7, r4
 800072e:	0018      	movs	r0, r3
 8000730:	2314      	movs	r3, #20
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f004 fafd 	bl	8004d34 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <MX_GPIO_Init+0x114>)
 800073c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800073e:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <MX_GPIO_Init+0x114>)
 8000740:	2104      	movs	r1, #4
 8000742:	430a      	orrs	r2, r1
 8000744:	635a      	str	r2, [r3, #52]	; 0x34
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <MX_GPIO_Init+0x114>)
 8000748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800074a:	2204      	movs	r2, #4
 800074c:	4013      	ands	r3, r2
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <MX_GPIO_Init+0x114>)
 8000754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000756:	4b38      	ldr	r3, [pc, #224]	; (8000838 <MX_GPIO_Init+0x114>)
 8000758:	2120      	movs	r1, #32
 800075a:	430a      	orrs	r2, r1
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <MX_GPIO_Init+0x114>)
 8000760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000762:	2220      	movs	r2, #32
 8000764:	4013      	ands	r3, r2
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b33      	ldr	r3, [pc, #204]	; (8000838 <MX_GPIO_Init+0x114>)
 800076c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800076e:	4b32      	ldr	r3, [pc, #200]	; (8000838 <MX_GPIO_Init+0x114>)
 8000770:	2101      	movs	r1, #1
 8000772:	430a      	orrs	r2, r1
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
 8000776:	4b30      	ldr	r3, [pc, #192]	; (8000838 <MX_GPIO_Init+0x114>)
 8000778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800077a:	2201      	movs	r2, #1
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MX_GPIO_Init+0x114>)
 8000784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_GPIO_Init+0x114>)
 8000788:	2102      	movs	r1, #2
 800078a:	430a      	orrs	r2, r1
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_GPIO_Init+0x114>)
 8000790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000792:	2202      	movs	r2, #2
 8000794:	4013      	ands	r3, r2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 800079a:	23a0      	movs	r3, #160	; 0xa0
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2201      	movs	r2, #1
 80007a0:	2120      	movs	r1, #32
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 ffba 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_GPIO_Init+0x118>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	21c0      	movs	r1, #192	; 0xc0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 ffb4 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	0192      	lsls	r2, r2, #6
 80007ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <MX_GPIO_Init+0x11c>)
 80007c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <MX_GPIO_Init+0x120>)
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f001 fe32 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2220      	movs	r2, #32
 80007d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2201      	movs	r2, #1
 80007de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2203      	movs	r2, #3
 80007ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80007ec:	193a      	adds	r2, r7, r4
 80007ee:	23a0      	movs	r3, #160	; 0xa0
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fe1f 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fa:	0021      	movs	r1, r4
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	22c0      	movs	r2, #192	; 0xc0
 8000800:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2201      	movs	r2, #1
 8000806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	187b      	adds	r3, r7, r1
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <MX_GPIO_Init+0x118>)
 8000818:	0019      	movs	r1, r3
 800081a:	0010      	movs	r0, r2
 800081c:	f001 fe0c 	bl	8002438 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2007      	movs	r0, #7
 8000826:	f001 fb81 	bl	8001f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800082a:	2007      	movs	r0, #7
 800082c:	f001 fb93 	bl	8001f56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b00b      	add	sp, #44	; 0x2c
 8000836:	bd90      	pop	{r4, r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	50000400 	.word	0x50000400
 8000840:	10110000 	.word	0x10110000
 8000844:	50000800 	.word	0x50000800

08000848 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d10a      	bne.n	8000870 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		cnt ++;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000862:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2120      	movs	r1, #32
 800086a:	0018      	movs	r0, r3
 800086c:	f001 ff73 	bl	8002756 <HAL_GPIO_TogglePin>
	}
	//ratio = cnt/sec;
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40000400 	.word	0x40000400
 800087c:	20000230 	.word	0x20000230

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x44>)
 8000894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_MspInit+0x44>)
 8000898:	2101      	movs	r1, #1
 800089a:	430a      	orrs	r2, r1
 800089c:	641a      	str	r2, [r3, #64]	; 0x40
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x44>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	2201      	movs	r2, #1
 80008a4:	4013      	ands	r3, r2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x44>)
 80008ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_MspInit+0x44>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0549      	lsls	r1, r1, #21
 80008b4:	430a      	orrs	r2, r1
 80008b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_MspInit+0x44>)
 80008ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	055b      	lsls	r3, r3, #21
 80008c0:	4013      	ands	r3, r2
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b091      	sub	sp, #68	; 0x44
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	232c      	movs	r3, #44	; 0x2c
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	0018      	movs	r0, r3
 80008e2:	2314      	movs	r3, #20
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f004 fa24 	bl	8004d34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	2410      	movs	r4, #16
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	0018      	movs	r0, r3
 80008f2:	231c      	movs	r3, #28
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f004 fa1c 	bl	8004d34 <memset>
  if(hadc->Instance==ADC1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a39      	ldr	r2, [pc, #228]	; (80009e8 <HAL_ADC_MspInit+0x114>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d16c      	bne.n	80009e0 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	01d2      	lsls	r2, r2, #7
 800090c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000914:	193b      	adds	r3, r7, r4
 8000916:	0018      	movs	r0, r3
 8000918:	f002 fc04 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000920:	f7ff ffae 	bl	8000880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000924:	4b31      	ldr	r3, [pc, #196]	; (80009ec <HAL_ADC_MspInit+0x118>)
 8000926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000928:	4b30      	ldr	r3, [pc, #192]	; (80009ec <HAL_ADC_MspInit+0x118>)
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	0349      	lsls	r1, r1, #13
 800092e:	430a      	orrs	r2, r1
 8000930:	641a      	str	r2, [r3, #64]	; 0x40
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <HAL_ADC_MspInit+0x118>)
 8000934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	035b      	lsls	r3, r3, #13
 800093a:	4013      	ands	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <HAL_ADC_MspInit+0x118>)
 8000942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <HAL_ADC_MspInit+0x118>)
 8000946:	2101      	movs	r1, #1
 8000948:	430a      	orrs	r2, r1
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <HAL_ADC_MspInit+0x118>)
 800094e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000950:	2201      	movs	r2, #1
 8000952:	4013      	ands	r3, r2
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000958:	212c      	movs	r1, #44	; 0x2c
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2213      	movs	r2, #19
 800095e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2203      	movs	r2, #3
 8000964:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	187a      	adds	r2, r7, r1
 800096e:	23a0      	movs	r3, #160	; 0xa0
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f001 fd5f 	bl	8002438 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 800097c:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <HAL_ADC_MspInit+0x120>)
 800097e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 8000982:	2205      	movs	r2, #5
 8000984:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	0052      	lsls	r2, r2, #1
 800099e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 80009aa:	2220      	movs	r2, #32
 80009ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 faea 	bl	8001f90 <HAL_DMA_Init>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 80009c0:	f7ff ff5e 	bl	8000880 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 80009c8:	651a      	str	r2, [r3, #80]	; 0x50
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_ADC_MspInit+0x11c>)
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	200c      	movs	r0, #12
 80009d6:	f001 faa9 	bl	8001f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80009da:	200c      	movs	r0, #12
 80009dc:	f001 fabb 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b011      	add	sp, #68	; 0x44
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	40012400 	.word	0x40012400
 80009ec:	40021000 	.word	0x40021000
 80009f0:	200000a0 	.word	0x200000a0
 80009f4:	40020008 	.word	0x40020008

080009f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b091      	sub	sp, #68	; 0x44
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	232c      	movs	r3, #44	; 0x2c
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	0018      	movs	r0, r3
 8000a06:	2314      	movs	r3, #20
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f004 f992 	bl	8004d34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	2410      	movs	r4, #16
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	0018      	movs	r0, r3
 8000a16:	231c      	movs	r3, #28
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f004 f98a 	bl	8004d34 <memset>
  if(hi2c->Instance==I2C1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <HAL_I2C_MspInit+0xb8>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d13e      	bne.n	8000aa8 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2240      	movs	r2, #64	; 0x40
 8000a2e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 fb73 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a42:	f7ff ff1d 	bl	8000880 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	2202      	movs	r2, #2
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a5e:	212c      	movs	r1, #44	; 0x2c
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	22c0      	movs	r2, #192	; 0xc0
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2212      	movs	r2, #18
 8000a6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2206      	movs	r2, #6
 8000a7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_I2C_MspInit+0xc0>)
 8000a84:	0019      	movs	r1, r3
 8000a86:	0010      	movs	r0, r2
 8000a88:	f001 fcd6 	bl	8002438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	0389      	lsls	r1, r1, #14
 8000a96:	430a      	orrs	r2, r1
 8000a98:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	039b      	lsls	r3, r3, #14
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b011      	add	sp, #68	; 0x44
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	50000400 	.word	0x50000400

08000abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_TIM_Base_MspInit+0x44>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d113      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ade:	2202      	movs	r2, #2
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2010      	movs	r0, #16
 8000aec:	f001 fa1e 	bl	8001f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000af0:	2010      	movs	r0, #16
 8000af2:	f001 fa30 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b004      	add	sp, #16
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	40000400 	.word	0x40000400
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b089      	sub	sp, #36	; 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	240c      	movs	r4, #12
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	0018      	movs	r0, r3
 8000b16:	2314      	movs	r3, #20
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f004 f90a 	bl	8004d34 <memset>
  if(htim->Instance==TIM3)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <HAL_TIM_MspPostInit+0x70>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d121      	bne.n	8000b6e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_TIM_MspPostInit+0x74>)
 8000b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_TIM_MspPostInit+0x74>)
 8000b30:	2104      	movs	r1, #4
 8000b32:	430a      	orrs	r2, r1
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_TIM_MspPostInit+0x74>)
 8000b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b42:	0021      	movs	r1, r4
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	22c0      	movs	r2, #192	; 0xc0
 8000b48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_TIM_MspPostInit+0x78>)
 8000b66:	0019      	movs	r1, r3
 8000b68:	0010      	movs	r0, r2
 8000b6a:	f001 fc65 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b009      	add	sp, #36	; 0x24
 8000b74:	bd90      	pop	{r4, r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	40000400 	.word	0x40000400
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	50000800 	.word	0x50000800

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b08b      	sub	sp, #44	; 0x2c
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	2414      	movs	r4, #20
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	0018      	movs	r0, r3
 8000b92:	2314      	movs	r3, #20
 8000b94:	001a      	movs	r2, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	f004 f8cc 	bl	8004d34 <memset>
  if(huart->Instance==USART2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <HAL_UART_MspInit+0x8c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d130      	bne.n	8000c08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	0289      	lsls	r1, r1, #10
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	029b      	lsls	r3, r3, #10
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bda:	0021      	movs	r1, r4
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2202      	movs	r2, #2
 8000be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	187a      	adds	r2, r7, r1
 8000bfc:	23a0      	movs	r3, #160	; 0xa0
 8000bfe:	05db      	lsls	r3, r3, #23
 8000c00:	0011      	movs	r1, r2
 8000c02:	0018      	movs	r0, r3
 8000c04:	f001 fc18 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b00b      	add	sp, #44	; 0x2c
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40021000 	.word	0x40021000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f8c8 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f001 fd9c 	bl	800278c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <DMA1_Channel1_IRQHandler+0x14>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f001 faa6 	bl	80021b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	200000a0 	.word	0x200000a0

08000c74 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <ADC1_IRQHandler+0x14>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fc70 	bl	8001560 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	2000003c 	.word	0x2000003c

08000c8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <TIM3_IRQHandler+0x14>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 fd12 	bl	80036bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	20000150 	.word	0x20000150

08000ca4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <SystemInit+0x14>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	0512      	lsls	r2, r2, #20
 8000cae:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc0:	f7ff fff0 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cc6:	e003      	b.n	8000cd0 <LoopCopyDataInit>

08000cc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000cca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ccc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cce:	3104      	adds	r1, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cd0:	480a      	ldr	r0, [pc, #40]	; (8000cfc <LoopForever+0xa>)
  ldr r3, =_edata
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <LoopForever+0xe>)
  adds r2, r0, r1
 8000cd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cd8:	d3f6      	bcc.n	8000cc8 <CopyDataInit>
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopForever+0x12>)
  b LoopFillZerobss
 8000cdc:	e002      	b.n	8000ce4 <LoopFillZerobss>

08000cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ce0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce2:	3204      	adds	r2, #4

08000ce4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <LoopForever+0x16>)
  cmp r2, r3
 8000ce6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ce8:	d3f9      	bcc.n	8000cde <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000cea:	f004 f82b 	bl	8004d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cee:	f7ff fa97 	bl	8000220 <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000cf8:	08004e78 	.word	0x08004e78
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d00:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8000d04:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8000d08:	20000244 	.word	0x20000244

08000d0c <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <DMA1_Channel2_3_IRQHandler>

08000d0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f000 f80e 	bl	8000d3c <HAL_InitTick>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e001      	b.n	8000d30 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2c:	f7ff fdae 	bl	800088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d44:	230f      	movs	r3, #15
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_InitTick+0x88>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d02b      	beq.n	8000dac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_InitTick+0x8c>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <HAL_InitTick+0x88>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	23fa      	movs	r3, #250	; 0xfa
 8000d60:	0098      	lsls	r0, r3, #2
 8000d62:	f7ff f9d1 	bl	8000108 <__udivsi3>
 8000d66:	0003      	movs	r3, r0
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	f7ff f9cc 	bl	8000108 <__udivsi3>
 8000d70:	0003      	movs	r3, r0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 f8ff 	bl	8001f76 <HAL_SYSTICK_Config>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d112      	bne.n	8000da2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d80a      	bhi.n	8000d98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	2301      	movs	r3, #1
 8000d86:	425b      	negs	r3, r3
 8000d88:	2200      	movs	r2, #0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f001 f8ce 	bl	8001f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_InitTick+0x90>)
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e00d      	b.n	8000db4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d98:	230f      	movs	r3, #15
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e008      	b.n	8000db4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da2:	230f      	movs	r3, #15
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e003      	b.n	8000db4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b005      	add	sp, #20
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	2000001c 	.word	0x2000001c
 8000dc8:	20000014 	.word	0x20000014
 8000dcc:	20000018 	.word	0x20000018

08000dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x1c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	001a      	movs	r2, r3
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x20>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	18d2      	adds	r2, r2, r3
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_IncTick+0x20>)
 8000de2:	601a      	str	r2, [r3, #0]
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	2000001c 	.word	0x2000001c
 8000df0:	20000240 	.word	0x20000240

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <HAL_GetTick+0x10>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	20000240 	.word	0x20000240

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff fff0 	bl	8000df4 <HAL_GetTick>
 8000e14:	0003      	movs	r3, r0
 8000e16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	001a      	movs	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	189b      	adds	r3, r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	f7ff ffe0 	bl	8000df4 <HAL_GetTick>
 8000e34:	0002      	movs	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	2000001c 	.word	0x2000001c

08000e50 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e60:	401a      	ands	r2, r3
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	ff3fffff 	.word	0xff3fffff

08000e78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	23c0      	movs	r3, #192	; 0xc0
 8000e86:	041b      	lsls	r3, r3, #16
 8000e88:	4013      	ands	r3, r2
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b084      	sub	sp, #16
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	400a      	ands	r2, r1
 8000ea8:	2107      	movs	r1, #7
 8000eaa:	4091      	lsls	r1, r2
 8000eac:	000a      	movs	r2, r1
 8000eae:	43d2      	mvns	r2, r2
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	400b      	ands	r3, r1
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4099      	lsls	r1, r3
 8000ebc:	000b      	movs	r3, r1
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b004      	add	sp, #16
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	2104      	movs	r1, #4
 8000ede:	400a      	ands	r2, r1
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	4091      	lsls	r1, r2
 8000ee4:	000a      	movs	r2, r1
 8000ee6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2104      	movs	r1, #4
 8000eec:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000eee:	40da      	lsrs	r2, r3
 8000ef0:	0013      	movs	r3, r2
}
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	23c0      	movs	r3, #192	; 0xc0
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	211f      	movs	r1, #31
 8000f30:	400a      	ands	r2, r1
 8000f32:	210f      	movs	r1, #15
 8000f34:	4091      	lsls	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	43d2      	mvns	r2, r2
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	0e9b      	lsrs	r3, r3, #26
 8000f40:	210f      	movs	r1, #15
 8000f42:	4019      	ands	r1, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	201f      	movs	r0, #31
 8000f48:	4003      	ands	r3, r0
 8000f4a:	4099      	lsls	r1, r3
 8000f4c:	000b      	movs	r3, r1
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b004      	add	sp, #16
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	025b      	lsls	r3, r3, #9
 8000f6e:	0a5b      	lsrs	r3, r3, #9
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	0252      	lsls	r2, r2, #9
 8000f90:	0a52      	lsrs	r2, r2, #9
 8000f92:	43d2      	mvns	r2, r2
 8000f94:	401a      	ands	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2203      	movs	r2, #3
 8000fb0:	4013      	ands	r3, r2
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	0212      	lsls	r2, r2, #8
 8000fd0:	43d2      	mvns	r2, r2
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	400b      	ands	r3, r1
 8000fdc:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000fde:	400b      	ands	r3, r1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b004      	add	sp, #16
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	7fffff00 	.word	0x7fffff00

08000ff4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a05      	ldr	r2, [pc, #20]	; (8001018 <LL_ADC_EnableInternalRegulator+0x24>)
 8001002:	4013      	ands	r3, r2
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	0552      	lsls	r2, r2, #21
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	6fffffe8 	.word	0x6fffffe8

0800101c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	055b      	lsls	r3, r3, #21
 800102c:	401a      	ands	r2, r3
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	055b      	lsls	r3, r3, #21
 8001032:	429a      	cmp	r2, r3
 8001034:	d101      	bne.n	800103a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800103a:	2300      	movs	r3, #0
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}

08001044 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <LL_ADC_Enable+0x20>)
 8001052:	4013      	ands	r3, r2
 8001054:	2201      	movs	r2, #1
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}
 8001064:	7fffffe8 	.word	0x7fffffe8

08001068 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <LL_ADC_Disable+0x20>)
 8001076:	4013      	ands	r3, r2
 8001078:	2202      	movs	r2, #2
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}
 8001088:	7fffffe8 	.word	0x7fffffe8

0800108c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2201      	movs	r2, #1
 800109a:	4013      	ands	r3, r2
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <LL_ADC_IsEnabled+0x18>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <LL_ADC_IsEnabled+0x1a>
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <LL_ADC_REG_StartConversion+0x20>)
 80010be:	4013      	ands	r3, r2
 80010c0:	2204      	movs	r2, #4
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	7fffffe8 	.word	0x7fffffe8

080010d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2204      	movs	r2, #4
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d101      	bne.n	80010ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001100:	231f      	movs	r3, #31
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e17e      	b.n	800141c <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10a      	bne.n	800113c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fbd3 	bl	80008d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2254      	movs	r2, #84	; 0x54
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ff6b 	bl	800101c <LL_ADC_IsInternalRegulatorEnabled>
 8001146:	1e03      	subs	r3, r0, #0
 8001148:	d114      	bne.n	8001174 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff ff50 	bl	8000ff4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001154:	4bb3      	ldr	r3, [pc, #716]	; (8001424 <HAL_ADC_Init+0x32c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	49b3      	ldr	r1, [pc, #716]	; (8001428 <HAL_ADC_Init+0x330>)
 800115a:	0018      	movs	r0, r3
 800115c:	f7fe ffd4 	bl	8000108 <__udivsi3>
 8001160:	0003      	movs	r3, r0
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001166:	e002      	b.n	800116e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3b01      	subs	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f9      	bne.n	8001168 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ff4f 	bl	800101c <LL_ADC_IsInternalRegulatorEnabled>
 800117e:	1e03      	subs	r3, r0, #0
 8001180:	d10f      	bne.n	80011a2 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	2210      	movs	r2, #16
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001192:	2201      	movs	r2, #1
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800119a:	231f      	movs	r3, #31
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff ff94 	bl	80010d4 <LL_ADC_REG_IsConversionOngoing>
 80011ac:	0003      	movs	r3, r0
 80011ae:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	2210      	movs	r2, #16
 80011b6:	4013      	ands	r3, r2
 80011b8:	d000      	beq.n	80011bc <HAL_ADC_Init+0xc4>
 80011ba:	e122      	b.n	8001402 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d000      	beq.n	80011c4 <HAL_ADC_Init+0xcc>
 80011c2:	e11e      	b.n	8001402 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c8:	4a98      	ldr	r2, [pc, #608]	; (800142c <HAL_ADC_Init+0x334>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	2202      	movs	r2, #2
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ff57 	bl	800108c <LL_ADC_IsEnabled>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d000      	beq.n	80011e4 <HAL_ADC_Init+0xec>
 80011e2:	e0ad      	b.n	8001340 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7e1b      	ldrb	r3, [r3, #24]
 80011ec:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7e5b      	ldrb	r3, [r3, #25]
 80011f4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011f6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7e9b      	ldrb	r3, [r3, #26]
 80011fc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011fe:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <HAL_ADC_Init+0x116>
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	015b      	lsls	r3, r3, #5
 800120c:	e000      	b.n	8001210 <HAL_ADC_Init+0x118>
 800120e:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001210:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001216:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	2b00      	cmp	r3, #0
 800121e:	da04      	bge.n	800122a <HAL_ADC_Init+0x132>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	e001      	b.n	800122e <HAL_ADC_Init+0x136>
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800122e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	212c      	movs	r1, #44	; 0x2c
 8001234:	5c5b      	ldrb	r3, [r3, r1]
 8001236:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001238:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2220      	movs	r2, #32
 8001244:	5c9b      	ldrb	r3, [r3, r2]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d115      	bne.n	8001276 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7e9b      	ldrb	r3, [r3, #26]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d105      	bne.n	800125e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	0252      	lsls	r2, r2, #9
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	e00b      	b.n	8001276 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	2220      	movs	r2, #32
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126e:	2201      	movs	r2, #1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00a      	beq.n	8001294 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001282:	23e0      	movs	r3, #224	; 0xe0
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800128c:	4313      	orrs	r3, r2
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	4a65      	ldr	r2, [pc, #404]	; (8001430 <HAL_ADC_Init+0x338>)
 800129c:	4013      	ands	r3, r2
 800129e:	0019      	movs	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	0f9b      	lsrs	r3, r3, #30
 80012b0:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012b6:	4313      	orrs	r3, r2
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	223c      	movs	r2, #60	; 0x3c
 80012c2:	5c9b      	ldrb	r3, [r3, r2]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d111      	bne.n	80012ec <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	0f9b      	lsrs	r3, r3, #30
 80012ce:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012d4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80012da:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80012e0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	2201      	movs	r2, #1
 80012e8:	4313      	orrs	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	4a50      	ldr	r2, [pc, #320]	; (8001434 <HAL_ADC_Init+0x33c>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	0019      	movs	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	430a      	orrs	r2, r1
 8001300:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	23c0      	movs	r3, #192	; 0xc0
 8001308:	061b      	lsls	r3, r3, #24
 800130a:	429a      	cmp	r2, r3
 800130c:	d018      	beq.n	8001340 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	05db      	lsls	r3, r3, #23
 8001316:	429a      	cmp	r2, r3
 8001318:	d012      	beq.n	8001340 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	061b      	lsls	r3, r3, #24
 8001322:	429a      	cmp	r2, r3
 8001324:	d00c      	beq.n	8001340 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001326:	4b44      	ldr	r3, [pc, #272]	; (8001438 <HAL_ADC_Init+0x340>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a44      	ldr	r2, [pc, #272]	; (800143c <HAL_ADC_Init+0x344>)
 800132c:	4013      	ands	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	23f0      	movs	r3, #240	; 0xf0
 8001336:	039b      	lsls	r3, r3, #14
 8001338:	401a      	ands	r2, r3
 800133a:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <HAL_ADC_Init+0x340>)
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001348:	001a      	movs	r2, r3
 800134a:	2100      	movs	r1, #0
 800134c:	f7ff fda1 	bl	8000e92 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001358:	4939      	ldr	r1, [pc, #228]	; (8001440 <HAL_ADC_Init+0x348>)
 800135a:	001a      	movs	r2, r3
 800135c:	f7ff fd99 	bl	8000e92 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d109      	bne.n	800137c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2110      	movs	r1, #16
 8001374:	4249      	negs	r1, r1
 8001376:	430a      	orrs	r2, r1
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
 800137a:	e018      	b.n	80013ae <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	039b      	lsls	r3, r3, #14
 8001384:	429a      	cmp	r2, r3
 8001386:	d112      	bne.n	80013ae <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	3b01      	subs	r3, #1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	221c      	movs	r2, #28
 8001398:	4013      	ands	r3, r2
 800139a:	2210      	movs	r2, #16
 800139c:	4252      	negs	r2, r2
 800139e:	409a      	lsls	r2, r3
 80013a0:	0011      	movs	r1, r2
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2100      	movs	r1, #0
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff fd89 	bl	8000ecc <LL_ADC_GetSamplingTimeCommonChannels>
 80013ba:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d10b      	bne.n	80013dc <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	2203      	movs	r2, #3
 80013d0:	4393      	bics	r3, r2
 80013d2:	2201      	movs	r2, #1
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013da:	e01c      	b.n	8001416 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	2212      	movs	r2, #18
 80013e2:	4393      	bics	r3, r2
 80013e4:	2210      	movs	r2, #16
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f0:	2201      	movs	r2, #1
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80013f8:	231f      	movs	r3, #31
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001400:	e009      	b.n	8001416 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	2210      	movs	r2, #16
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800140e:	231f      	movs	r3, #31
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001416:	231f      	movs	r3, #31
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	781b      	ldrb	r3, [r3, #0]
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b008      	add	sp, #32
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000014 	.word	0x20000014
 8001428:	00030d40 	.word	0x00030d40
 800142c:	fffffefd 	.word	0xfffffefd
 8001430:	ffde0201 	.word	0xffde0201
 8001434:	1ffffc02 	.word	0x1ffffc02
 8001438:	40012708 	.word	0x40012708
 800143c:	ffc3ffff 	.word	0xffc3ffff
 8001440:	7fffff04 	.word	0x7fffff04

08001444 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001444:	b5b0      	push	{r4, r5, r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff fe3d 	bl	80010d4 <LL_ADC_REG_IsConversionOngoing>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d16c      	bne.n	8001538 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2254      	movs	r2, #84	; 0x54
 8001462:	5c9b      	ldrb	r3, [r3, r2]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_ADC_Start_DMA+0x28>
 8001468:	2302      	movs	r3, #2
 800146a:	e06c      	b.n	8001546 <HAL_ADC_Start_DMA+0x102>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2254      	movs	r2, #84	; 0x54
 8001470:	2101      	movs	r1, #1
 8001472:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2201      	movs	r2, #1
 800147c:	4013      	ands	r3, r2
 800147e:	d113      	bne.n	80014a8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff fe01 	bl	800108c <LL_ADC_IsEnabled>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d004      	beq.n	8001498 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff fde8 	bl	8001068 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2101      	movs	r1, #1
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014a8:	2517      	movs	r5, #23
 80014aa:	197c      	adds	r4, r7, r5
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fb64 	bl	8001b7c <ADC_Enable>
 80014b4:	0003      	movs	r3, r0
 80014b6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014b8:	002c      	movs	r4, r5
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d13e      	bne.n	8001540 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	4a22      	ldr	r2, [pc, #136]	; (8001550 <HAL_ADC_Start_DMA+0x10c>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	0052      	lsls	r2, r2, #1
 80014ce:	431a      	orrs	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014de:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_ADC_Start_DMA+0x110>)
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e6:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <HAL_ADC_Start_DMA+0x114>)
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ee:	4a1b      	ldr	r2, [pc, #108]	; (800155c <HAL_ADC_Start_DMA+0x118>)
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	221c      	movs	r2, #28
 80014f8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2254      	movs	r2, #84	; 0x54
 80014fe:	2100      	movs	r1, #0
 8001500:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2110      	movs	r1, #16
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3340      	adds	r3, #64	; 0x40
 800151c:	0019      	movs	r1, r3
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	193c      	adds	r4, r7, r4
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f000 fdbe 	bl	80020a4 <HAL_DMA_Start_IT>
 8001528:	0003      	movs	r3, r0
 800152a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff fdbd 	bl	80010b0 <LL_ADC_REG_StartConversion>
 8001536:	e003      	b.n	8001540 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001538:	2317      	movs	r3, #23
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	2202      	movs	r2, #2
 800153e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001540:	2317      	movs	r3, #23
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	781b      	ldrb	r3, [r3, #0]
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b006      	add	sp, #24
 800154c:	bdb0      	pop	{r4, r5, r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	fffff0fe 	.word	0xfffff0fe
 8001554:	08001c79 	.word	0x08001c79
 8001558:	08001d41 	.word	0x08001d41
 800155c:	08001d5f 	.word	0x08001d5f

08001560 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d017      	beq.n	80015b4 <HAL_ADC_IRQHandler+0x54>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2202      	movs	r2, #2
 8001588:	4013      	ands	r3, r2
 800158a:	d013      	beq.n	80015b4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	2210      	movs	r2, #16
 8001592:	4013      	ands	r3, r2
 8001594:	d106      	bne.n	80015a4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 fc04 	bl	8001db4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2202      	movs	r2, #2
 80015b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2204      	movs	r2, #4
 80015b8:	4013      	ands	r3, r2
 80015ba:	d003      	beq.n	80015c4 <HAL_ADC_IRQHandler+0x64>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2204      	movs	r2, #4
 80015c0:	4013      	ands	r3, r2
 80015c2:	d107      	bne.n	80015d4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2208      	movs	r2, #8
 80015c8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015ca:	d04d      	beq.n	8001668 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2208      	movs	r2, #8
 80015d0:	4013      	ands	r3, r2
 80015d2:	d049      	beq.n	8001668 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	2210      	movs	r2, #16
 80015da:	4013      	ands	r3, r2
 80015dc:	d106      	bne.n	80015ec <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fc82 	bl	8000efa <LL_ADC_REG_IsTriggerSourceSWStart>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d02e      	beq.n	8001658 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7e9b      	ldrb	r3, [r3, #26]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d12a      	bne.n	8001658 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2208      	movs	r2, #8
 800160a:	4013      	ands	r3, r2
 800160c:	2b08      	cmp	r3, #8
 800160e:	d123      	bne.n	8001658 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff fd5d 	bl	80010d4 <LL_ADC_REG_IsConversionOngoing>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d110      	bne.n	8001640 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	210c      	movs	r1, #12
 800162a:	438a      	bics	r2, r1
 800162c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	4a56      	ldr	r2, [pc, #344]	; (800178c <HAL_ADC_IRQHandler+0x22c>)
 8001634:	4013      	ands	r3, r2
 8001636:	2201      	movs	r2, #1
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	; 0x58
 800163e:	e00b      	b.n	8001658 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001644:	2220      	movs	r2, #32
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	2201      	movs	r2, #1
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	0018      	movs	r0, r3
 800165c:	f000 f898 	bl	8001790 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	220c      	movs	r2, #12
 8001666:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	4013      	ands	r3, r2
 800166e:	d012      	beq.n	8001696 <HAL_ADC_IRQHandler+0x136>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	4013      	ands	r3, r2
 8001676:	d00e      	beq.n	8001696 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	0252      	lsls	r2, r2, #9
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	0018      	movs	r0, r3
 800168a:	f000 f891 	bl	80017b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2280      	movs	r2, #128	; 0x80
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4013      	ands	r3, r2
 800169e:	d014      	beq.n	80016ca <HAL_ADC_IRQHandler+0x16a>
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4013      	ands	r3, r2
 80016a8:	d00f      	beq.n	80016ca <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	0292      	lsls	r2, r2, #10
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f000 fb6a 	bl	8001d94 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	0052      	lsls	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	d014      	beq.n	80016fe <HAL_ADC_IRQHandler+0x19e>
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d00f      	beq.n	80016fe <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	02d2      	lsls	r2, r2, #11
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 fb58 	bl	8001da4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2210      	movs	r2, #16
 8001702:	4013      	ands	r3, r2
 8001704:	d02b      	beq.n	800175e <HAL_ADC_IRQHandler+0x1fe>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2210      	movs	r2, #16
 800170a:	4013      	ands	r3, r2
 800170c:	d027      	beq.n	800175e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001716:	2301      	movs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e008      	b.n	800172e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff fc3e 	bl	8000fa2 <LL_ADC_REG_GetDMATransfer>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800172a:	2301      	movs	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d110      	bne.n	8001756 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	00d2      	lsls	r2, r2, #3
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	2202      	movs	r2, #2
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0018      	movs	r0, r3
 8001752:	f000 f835 	bl	80017c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2210      	movs	r2, #16
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	019b      	lsls	r3, r3, #6
 8001764:	4013      	ands	r3, r2
 8001766:	d00d      	beq.n	8001784 <HAL_ADC_IRQHandler+0x224>
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	019b      	lsls	r3, r3, #6
 800176e:	4013      	ands	r3, r2
 8001770:	d008      	beq.n	8001784 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	0018      	movs	r0, r3
 8001776:	f000 fb25 	bl	8001dc4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	0192      	lsls	r2, r2, #6
 8001782:	601a      	str	r2, [r3, #0]
  }
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b006      	add	sp, #24
 800178a:	bd80      	pop	{r7, pc}
 800178c:	fffffefe 	.word	0xfffffefe

08001790 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b002      	add	sp, #8
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b002      	add	sp, #8
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017da:	2317      	movs	r3, #23
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2254      	movs	r2, #84	; 0x54
 80017ea:	5c9b      	ldrb	r3, [r3, r2]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x24>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e1be      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x3a2>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2254      	movs	r2, #84	; 0x54
 80017f8:	2101      	movs	r1, #1
 80017fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff fc67 	bl	80010d4 <LL_ADC_REG_IsConversionOngoing>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d000      	beq.n	800180c <HAL_ADC_ConfigChannel+0x3c>
 800180a:	e1a1      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d100      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x46>
 8001814:	e152      	b.n	8001abc <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	429a      	cmp	r2, r3
 8001820:	d004      	beq.n	800182c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001826:	4ac2      	ldr	r2, [pc, #776]	; (8001b30 <HAL_ADC_ConfigChannel+0x360>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d108      	bne.n	800183e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0019      	movs	r1, r3
 8001836:	0010      	movs	r0, r2
 8001838:	f7ff fb90 	bl	8000f5c <LL_ADC_REG_SetSequencerChAdd>
 800183c:	e0ed      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	211f      	movs	r1, #31
 8001848:	400b      	ands	r3, r1
 800184a:	210f      	movs	r1, #15
 800184c:	4099      	lsls	r1, r3
 800184e:	000b      	movs	r3, r1
 8001850:	43db      	mvns	r3, r3
 8001852:	4013      	ands	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	025b      	lsls	r3, r3, #9
 800185c:	0a5b      	lsrs	r3, r3, #9
 800185e:	d105      	bne.n	800186c <HAL_ADC_ConfigChannel+0x9c>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0e9b      	lsrs	r3, r3, #26
 8001866:	221f      	movs	r2, #31
 8001868:	4013      	ands	r3, r2
 800186a:	e0bc      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	d000      	beq.n	8001878 <HAL_ADC_ConfigChannel+0xa8>
 8001876:	e0b5      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x214>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d000      	beq.n	8001884 <HAL_ADC_ConfigChannel+0xb4>
 8001882:	e0ad      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x210>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2204      	movs	r2, #4
 800188a:	4013      	ands	r3, r2
 800188c:	d000      	beq.n	8001890 <HAL_ADC_ConfigChannel+0xc0>
 800188e:	e0a5      	b.n	80019dc <HAL_ADC_ConfigChannel+0x20c>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2208      	movs	r2, #8
 8001896:	4013      	ands	r3, r2
 8001898:	d000      	beq.n	800189c <HAL_ADC_ConfigChannel+0xcc>
 800189a:	e09d      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x208>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2210      	movs	r2, #16
 80018a2:	4013      	ands	r3, r2
 80018a4:	d000      	beq.n	80018a8 <HAL_ADC_ConfigChannel+0xd8>
 80018a6:	e095      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x204>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2220      	movs	r2, #32
 80018ae:	4013      	ands	r3, r2
 80018b0:	d000      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0xe4>
 80018b2:	e08d      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x200>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2240      	movs	r2, #64	; 0x40
 80018ba:	4013      	ands	r3, r2
 80018bc:	d000      	beq.n	80018c0 <HAL_ADC_ConfigChannel+0xf0>
 80018be:	e085      	b.n	80019cc <HAL_ADC_ConfigChannel+0x1fc>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	4013      	ands	r3, r2
 80018c8:	d000      	beq.n	80018cc <HAL_ADC_ConfigChannel+0xfc>
 80018ca:	e07d      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x1f8>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4013      	ands	r3, r2
 80018d6:	d000      	beq.n	80018da <HAL_ADC_ConfigChannel+0x10a>
 80018d8:	e074      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x1f4>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d000      	beq.n	80018e8 <HAL_ADC_ConfigChannel+0x118>
 80018e6:	e06b      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x1f0>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4013      	ands	r3, r2
 80018f2:	d000      	beq.n	80018f6 <HAL_ADC_ConfigChannel+0x126>
 80018f4:	e062      	b.n	80019bc <HAL_ADC_ConfigChannel+0x1ec>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	4013      	ands	r3, r2
 8001900:	d000      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x134>
 8001902:	e059      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x1e8>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	015b      	lsls	r3, r3, #5
 800190c:	4013      	ands	r3, r2
 800190e:	d151      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1e4>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	019b      	lsls	r3, r3, #6
 8001918:	4013      	ands	r3, r2
 800191a:	d149      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1e0>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	01db      	lsls	r3, r3, #7
 8001924:	4013      	ands	r3, r2
 8001926:	d141      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x1dc>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	4013      	ands	r3, r2
 8001932:	d139      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1d8>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	025b      	lsls	r3, r3, #9
 800193c:	4013      	ands	r3, r2
 800193e:	d131      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x1d4>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	029b      	lsls	r3, r3, #10
 8001948:	4013      	ands	r3, r2
 800194a:	d129      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1d0>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	02db      	lsls	r3, r3, #11
 8001954:	4013      	ands	r3, r2
 8001956:	d121      	bne.n	800199c <HAL_ADC_ConfigChannel+0x1cc>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	4013      	ands	r3, r2
 8001962:	d119      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1c8>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	035b      	lsls	r3, r3, #13
 800196c:	4013      	ands	r3, r2
 800196e:	d111      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x1c4>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	039b      	lsls	r3, r3, #14
 8001978:	4013      	ands	r3, r2
 800197a:	d109      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x1c0>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	03db      	lsls	r3, r3, #15
 8001984:	4013      	ands	r3, r2
 8001986:	d001      	beq.n	800198c <HAL_ADC_ConfigChannel+0x1bc>
 8001988:	2316      	movs	r3, #22
 800198a:	e02c      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 800198c:	2300      	movs	r3, #0
 800198e:	e02a      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 8001990:	2315      	movs	r3, #21
 8001992:	e028      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 8001994:	2314      	movs	r3, #20
 8001996:	e026      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 8001998:	2313      	movs	r3, #19
 800199a:	e024      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 800199c:	2312      	movs	r3, #18
 800199e:	e022      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019a0:	2311      	movs	r3, #17
 80019a2:	e020      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019a4:	2310      	movs	r3, #16
 80019a6:	e01e      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019a8:	230f      	movs	r3, #15
 80019aa:	e01c      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019ac:	230e      	movs	r3, #14
 80019ae:	e01a      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019b0:	230d      	movs	r3, #13
 80019b2:	e018      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019b4:	230c      	movs	r3, #12
 80019b6:	e016      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019b8:	230b      	movs	r3, #11
 80019ba:	e014      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019bc:	230a      	movs	r3, #10
 80019be:	e012      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019c0:	2309      	movs	r3, #9
 80019c2:	e010      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019c4:	2308      	movs	r3, #8
 80019c6:	e00e      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019c8:	2307      	movs	r3, #7
 80019ca:	e00c      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019cc:	2306      	movs	r3, #6
 80019ce:	e00a      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019d0:	2305      	movs	r3, #5
 80019d2:	e008      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019d4:	2304      	movs	r3, #4
 80019d6:	e006      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019d8:	2303      	movs	r3, #3
 80019da:	e004      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019dc:	2302      	movs	r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x216>
 80019e4:	2300      	movs	r3, #0
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	6852      	ldr	r2, [r2, #4]
 80019ea:	201f      	movs	r0, #31
 80019ec:	4002      	ands	r2, r0
 80019ee:	4093      	lsls	r3, r2
 80019f0:	000a      	movs	r2, r1
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d808      	bhi.n	8001a1a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	001a      	movs	r2, r3
 8001a16:	f7ff fa81 	bl	8000f1c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6819      	ldr	r1, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	001a      	movs	r2, r3
 8001a28:	f7ff fac8 	bl	8000fbc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db00      	blt.n	8001a36 <HAL_ADC_ConfigChannel+0x266>
 8001a34:	e096      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_ADC_ConfigChannel+0x364>)
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff fa1d 	bl	8000e78 <LL_ADC_GetCommonPathInternalCh>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a3c      	ldr	r2, [pc, #240]	; (8001b38 <HAL_ADC_ConfigChannel+0x368>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d123      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a54:	d11e      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	0412      	lsls	r2, r2, #16
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	4a35      	ldr	r2, [pc, #212]	; (8001b34 <HAL_ADC_ConfigChannel+0x364>)
 8001a60:	0019      	movs	r1, r3
 8001a62:	0010      	movs	r0, r2
 8001a64:	f7ff f9f4 	bl	8000e50 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_ADC_ConfigChannel+0x36c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4934      	ldr	r1, [pc, #208]	; (8001b40 <HAL_ADC_ConfigChannel+0x370>)
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7fe fb4a 	bl	8000108 <__udivsi3>
 8001a74:	0003      	movs	r3, r0
 8001a76:	001a      	movs	r2, r3
 8001a78:	0013      	movs	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	189b      	adds	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a84:	e002      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a92:	e067      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <HAL_ADC_ConfigChannel+0x374>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d162      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	03db      	lsls	r3, r3, #15
 8001aa4:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001aa6:	d15d      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	03d2      	lsls	r2, r2, #15
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <HAL_ADC_ConfigChannel+0x364>)
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	0010      	movs	r0, r2
 8001ab6:	f7ff f9cb 	bl	8000e50 <LL_ADC_SetCommonPathInternalCh>
 8001aba:	e053      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	061b      	lsls	r3, r3, #24
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d004      	beq.n	8001ad2 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001acc:	4a18      	ldr	r2, [pc, #96]	; (8001b30 <HAL_ADC_ConfigChannel+0x360>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d107      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0019      	movs	r1, r3
 8001adc:	0010      	movs	r0, r2
 8001ade:	f7ff fa4e 	bl	8000f7e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	da3c      	bge.n	8001b64 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_ADC_ConfigChannel+0x364>)
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff f9c3 	bl	8000e78 <LL_ADC_GetCommonPathInternalCh>
 8001af2:	0003      	movs	r3, r0
 8001af4:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_ADC_ConfigChannel+0x368>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d108      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_ADC_ConfigChannel+0x378>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_ADC_ConfigChannel+0x364>)
 8001b08:	0019      	movs	r1, r3
 8001b0a:	0010      	movs	r0, r2
 8001b0c:	f7ff f9a0 	bl	8000e50 <LL_ADC_SetCommonPathInternalCh>
 8001b10:	e028      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_ADC_ConfigChannel+0x374>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d123      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_ADC_ConfigChannel+0x37c>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_ADC_ConfigChannel+0x364>)
 8001b24:	0019      	movs	r1, r3
 8001b26:	0010      	movs	r0, r2
 8001b28:	f7ff f992 	bl	8000e50 <LL_ADC_SetCommonPathInternalCh>
 8001b2c:	e01a      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x394>
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	80000004 	.word	0x80000004
 8001b34:	40012708 	.word	0x40012708
 8001b38:	a4000200 	.word	0xa4000200
 8001b3c:	20000014 	.word	0x20000014
 8001b40:	00030d40 	.word	0x00030d40
 8001b44:	a8000400 	.word	0xa8000400
 8001b48:	ff7fffff 	.word	0xff7fffff
 8001b4c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	2220      	movs	r2, #32
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b5c:	2317      	movs	r3, #23
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2254      	movs	r2, #84	; 0x54
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001b6c:	2317      	movs	r3, #23
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	781b      	ldrb	r3, [r3, #0]
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b006      	add	sp, #24
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)

08001b7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7ff fa7d 	bl	800108c <LL_ADC_IsEnabled>
 8001b92:	1e03      	subs	r3, r0, #0
 8001b94:	d162      	bne.n	8001c5c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <ADC_Enable+0xec>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d00d      	beq.n	8001bbe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e04f      	b.n	8001c5e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f7ff fa3e 	bl	8001044 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <ADC_Enable+0xf0>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7ff f954 	bl	8000e78 <LL_ADC_GetCommonPathInternalCh>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d00f      	beq.n	8001bfa <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <ADC_Enable+0xf4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4925      	ldr	r1, [pc, #148]	; (8001c74 <ADC_Enable+0xf8>)
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7fe fa91 	bl	8000108 <__udivsi3>
 8001be6:	0003      	movs	r3, r0
 8001be8:	3301      	adds	r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bec:	e002      	b.n	8001bf4 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7e5b      	ldrb	r3, [r3, #25]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d02c      	beq.n	8001c5c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001c02:	f7ff f8f7 	bl	8000df4 <HAL_GetTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c0a:	e020      	b.n	8001c4e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff fa3b 	bl	800108c <LL_ADC_IsEnabled>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d104      	bne.n	8001c24 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fa10 	bl	8001044 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c24:	f7ff f8e6 	bl	8000df4 <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d90d      	bls.n	8001c4e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	2210      	movs	r2, #16
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	2201      	movs	r2, #1
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e007      	b.n	8001c5e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d1d7      	bne.n	8001c0c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b004      	add	sp, #16
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	80000017 	.word	0x80000017
 8001c6c:	40012708 	.word	0x40012708
 8001c70:	20000014 	.word	0x20000014
 8001c74:	00030d40 	.word	0x00030d40

08001c78 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	2250      	movs	r2, #80	; 0x50
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d141      	bne.n	8001d14 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	2280      	movs	r2, #128	; 0x80
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7ff f929 	bl	8000efa <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ca8:	1e03      	subs	r3, r0, #0
 8001caa:	d02e      	beq.n	8001d0a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	7e9b      	ldrb	r3, [r3, #26]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d12a      	bne.n	8001d0a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2208      	movs	r2, #8
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d123      	bne.n	8001d0a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7ff fa04 	bl	80010d4 <LL_ADC_REG_IsConversionOngoing>
 8001ccc:	1e03      	subs	r3, r0, #0
 8001cce:	d110      	bne.n	8001cf2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	210c      	movs	r1, #12
 8001cdc:	438a      	bics	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <ADC_DMAConvCplt+0xc4>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2201      	movs	r2, #1
 8001cea:	431a      	orrs	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	659a      	str	r2, [r3, #88]	; 0x58
 8001cf0:	e00b      	b.n	8001d0a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	2201      	movs	r2, #1
 8001d04:	431a      	orrs	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7ff fd3f 	bl	8001790 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d12:	e00f      	b.n	8001d34 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	2210      	movs	r2, #16
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff fd4d 	bl	80017c0 <HAL_ADC_ErrorCallback>
}
 8001d26:	e005      	b.n	8001d34 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	0010      	movs	r0, r2
 8001d32:	4798      	blx	r3
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	fffffefe 	.word	0xfffffefe

08001d40 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff fd25 	bl	80017a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b004      	add	sp, #16
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	2240      	movs	r2, #64	; 0x40
 8001d72:	431a      	orrs	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff fd1a 	bl	80017c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b004      	add	sp, #16
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b002      	add	sp, #8
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	0002      	movs	r2, r0
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	1dfb      	adds	r3, r7, #7
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b7f      	cmp	r3, #127	; 0x7f
 8001de6:	d809      	bhi.n	8001dfc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de8:	1dfb      	adds	r3, r7, #7
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	001a      	movs	r2, r3
 8001dee:	231f      	movs	r3, #31
 8001df0:	401a      	ands	r2, r3
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__NVIC_EnableIRQ+0x30>)
 8001df4:	2101      	movs	r1, #1
 8001df6:	4091      	lsls	r1, r2
 8001df8:	000a      	movs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	e000e100 	.word	0xe000e100

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	0002      	movs	r2, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e1c:	d828      	bhi.n	8001e70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e1e:	4a2f      	ldr	r2, [pc, #188]	; (8001edc <__NVIC_SetPriority+0xd4>)
 8001e20:	1dfb      	adds	r3, r7, #7
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	33c0      	adds	r3, #192	; 0xc0
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	589b      	ldr	r3, [r3, r2]
 8001e2e:	1dfa      	adds	r2, r7, #7
 8001e30:	7812      	ldrb	r2, [r2, #0]
 8001e32:	0011      	movs	r1, r2
 8001e34:	2203      	movs	r2, #3
 8001e36:	400a      	ands	r2, r1
 8001e38:	00d2      	lsls	r2, r2, #3
 8001e3a:	21ff      	movs	r1, #255	; 0xff
 8001e3c:	4091      	lsls	r1, r2
 8001e3e:	000a      	movs	r2, r1
 8001e40:	43d2      	mvns	r2, r2
 8001e42:	401a      	ands	r2, r3
 8001e44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	22ff      	movs	r2, #255	; 0xff
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	1dfb      	adds	r3, r7, #7
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	0018      	movs	r0, r3
 8001e54:	2303      	movs	r3, #3
 8001e56:	4003      	ands	r3, r0
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e5c:	481f      	ldr	r0, [pc, #124]	; (8001edc <__NVIC_SetPriority+0xd4>)
 8001e5e:	1dfb      	adds	r3, r7, #7
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b25b      	sxtb	r3, r3
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	430a      	orrs	r2, r1
 8001e68:	33c0      	adds	r3, #192	; 0xc0
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e6e:	e031      	b.n	8001ed4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e70:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <__NVIC_SetPriority+0xd8>)
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	0019      	movs	r1, r3
 8001e78:	230f      	movs	r3, #15
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	3b08      	subs	r3, #8
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3306      	adds	r3, #6
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	18d3      	adds	r3, r2, r3
 8001e86:	3304      	adds	r3, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	1dfa      	adds	r2, r7, #7
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	0011      	movs	r1, r2
 8001e90:	2203      	movs	r2, #3
 8001e92:	400a      	ands	r2, r1
 8001e94:	00d2      	lsls	r2, r2, #3
 8001e96:	21ff      	movs	r1, #255	; 0xff
 8001e98:	4091      	lsls	r1, r2
 8001e9a:	000a      	movs	r2, r1
 8001e9c:	43d2      	mvns	r2, r2
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	019b      	lsls	r3, r3, #6
 8001ea6:	22ff      	movs	r2, #255	; 0xff
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	1dfb      	adds	r3, r7, #7
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	4003      	ands	r3, r0
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eb8:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <__NVIC_SetPriority+0xd8>)
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	001c      	movs	r4, r3
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	4023      	ands	r3, r4
 8001ec4:	3b08      	subs	r3, #8
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	3306      	adds	r3, #6
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	18c3      	adds	r3, r0, r3
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	601a      	str	r2, [r3, #0]
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b003      	add	sp, #12
 8001eda:	bd90      	pop	{r4, r7, pc}
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	1e5a      	subs	r2, r3, #1
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	045b      	lsls	r3, r3, #17
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d301      	bcc.n	8001efc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e010      	b.n	8001f1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <SysTick_Config+0x44>)
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	3a01      	subs	r2, #1
 8001f02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f04:	2301      	movs	r3, #1
 8001f06:	425b      	negs	r3, r3
 8001f08:	2103      	movs	r1, #3
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f7ff ff7c 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SysTick_Config+0x44>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SysTick_Config+0x44>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b002      	add	sp, #8
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	210f      	movs	r1, #15
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	1c02      	adds	r2, r0, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	0011      	movs	r1, r2
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7ff ff5d 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f62:	1dfb      	adds	r3, r7, #7
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b25b      	sxtb	r3, r3
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7ff ff33 	bl	8001dd4 <__NVIC_EnableIRQ>
}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b002      	add	sp, #8
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff ffaf 	bl	8001ee4 <SysTick_Config>
 8001f86:	0003      	movs	r3, r0
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e077      	b.n	8002092 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <HAL_DMA_Init+0x10c>)
 8001fa8:	4694      	mov	ip, r2
 8001faa:	4463      	add	r3, ip
 8001fac:	2114      	movs	r1, #20
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7fe f8aa 	bl	8000108 <__udivsi3>
 8001fb4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001fb6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2225      	movs	r2, #37	; 0x25
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4934      	ldr	r1, [pc, #208]	; (80020a0 <HAL_DMA_Init+0x110>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 f9c3 	bl	8002398 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	01db      	lsls	r3, r3, #7
 800201a:	429a      	cmp	r2, r3
 800201c:	d102      	bne.n	8002024 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	21ff      	movs	r1, #255	; 0xff
 800202e:	400a      	ands	r2, r1
 8002030:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800203a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d011      	beq.n	8002068 <HAL_DMA_Init+0xd8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d80d      	bhi.n	8002068 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f9ce 	bl	80023f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	e008      	b.n	800207a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2225      	movs	r2, #37	; 0x25
 8002084:	2101      	movs	r1, #1
 8002086:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	2100      	movs	r1, #0
 800208e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	bffdfff8 	.word	0xbffdfff8
 80020a0:	ffff800f 	.word	0xffff800f

080020a4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020b2:	2317      	movs	r3, #23
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2224      	movs	r2, #36	; 0x24
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_DMA_Start_IT+0x24>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e070      	b.n	80021aa <HAL_DMA_Start_IT+0x106>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2224      	movs	r2, #36	; 0x24
 80020cc:	2101      	movs	r1, #1
 80020ce:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2225      	movs	r2, #37	; 0x25
 80020d4:	5c9b      	ldrb	r3, [r3, r2]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d157      	bne.n	800218c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2225      	movs	r2, #37	; 0x25
 80020e0:	2102      	movs	r1, #2
 80020e2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2101      	movs	r1, #1
 80020f6:	438a      	bics	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f909 	bl	8002318 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	210e      	movs	r1, #14
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e00f      	b.n	8002140 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2104      	movs	r1, #4
 800212c:	438a      	bics	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	210a      	movs	r1, #10
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	025b      	lsls	r3, r3, #9
 800214a:	4013      	ands	r3, r2
 800214c:	d008      	beq.n	8002160 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	2180      	movs	r1, #128	; 0x80
 800215a:	0049      	lsls	r1, r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	0049      	lsls	r1, r1, #1
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e007      	b.n	800219c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	2100      	movs	r1, #0
 8002192:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002194:	2317      	movs	r3, #23
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2202      	movs	r2, #2
 800219a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	2100      	movs	r1, #0
 80021a2:	5499      	strb	r1, [r3, r2]

  return status;
 80021a4:	2317      	movs	r3, #23
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	781b      	ldrb	r3, [r3, #0]
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b006      	add	sp, #24
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80021bc:	4b55      	ldr	r3, [pc, #340]	; (8002314 <HAL_DMA_IRQHandler+0x160>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	221c      	movs	r2, #28
 80021d0:	4013      	ands	r3, r2
 80021d2:	2204      	movs	r2, #4
 80021d4:	409a      	lsls	r2, r3
 80021d6:	0013      	movs	r3, r2
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	d027      	beq.n	800222e <HAL_DMA_IRQHandler+0x7a>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2204      	movs	r2, #4
 80021e2:	4013      	ands	r3, r2
 80021e4:	d023      	beq.n	800222e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2220      	movs	r2, #32
 80021ee:	4013      	ands	r3, r2
 80021f0:	d107      	bne.n	8002202 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2104      	movs	r1, #4
 80021fe:	438a      	bics	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002202:	4b44      	ldr	r3, [pc, #272]	; (8002314 <HAL_DMA_IRQHandler+0x160>)
 8002204:	6859      	ldr	r1, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	221c      	movs	r2, #28
 800220c:	4013      	ands	r3, r2
 800220e:	2204      	movs	r2, #4
 8002210:	409a      	lsls	r2, r3
 8002212:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_DMA_IRQHandler+0x160>)
 8002214:	430a      	orrs	r2, r1
 8002216:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	2b00      	cmp	r3, #0
 800221e:	d100      	bne.n	8002222 <HAL_DMA_IRQHandler+0x6e>
 8002220:	e073      	b.n	800230a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	0010      	movs	r0, r2
 800222a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800222c:	e06d      	b.n	800230a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	221c      	movs	r2, #28
 8002234:	4013      	ands	r3, r2
 8002236:	2202      	movs	r2, #2
 8002238:	409a      	lsls	r2, r3
 800223a:	0013      	movs	r3, r2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	d02e      	beq.n	80022a0 <HAL_DMA_IRQHandler+0xec>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2202      	movs	r2, #2
 8002246:	4013      	ands	r3, r2
 8002248:	d02a      	beq.n	80022a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2220      	movs	r2, #32
 8002252:	4013      	ands	r3, r2
 8002254:	d10b      	bne.n	800226e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	210a      	movs	r1, #10
 8002262:	438a      	bics	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2225      	movs	r2, #37	; 0x25
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_DMA_IRQHandler+0x160>)
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	221c      	movs	r2, #28
 8002278:	4013      	ands	r3, r2
 800227a:	2202      	movs	r2, #2
 800227c:	409a      	lsls	r2, r3
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_DMA_IRQHandler+0x160>)
 8002280:	430a      	orrs	r2, r1
 8002282:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	; 0x24
 8002288:	2100      	movs	r1, #0
 800228a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03a      	beq.n	800230a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	0010      	movs	r0, r2
 800229c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800229e:	e034      	b.n	800230a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	221c      	movs	r2, #28
 80022a6:	4013      	ands	r3, r2
 80022a8:	2208      	movs	r2, #8
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	d02b      	beq.n	800230c <HAL_DMA_IRQHandler+0x158>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2208      	movs	r2, #8
 80022b8:	4013      	ands	r3, r2
 80022ba:	d027      	beq.n	800230c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	210e      	movs	r1, #14
 80022c8:	438a      	bics	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_DMA_IRQHandler+0x160>)
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	221c      	movs	r2, #28
 80022d6:	4013      	ands	r3, r2
 80022d8:	2201      	movs	r2, #1
 80022da:	409a      	lsls	r2, r3
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_DMA_IRQHandler+0x160>)
 80022de:	430a      	orrs	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2225      	movs	r2, #37	; 0x25
 80022ec:	2101      	movs	r1, #1
 80022ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	; 0x24
 80022f4:	2100      	movs	r1, #0
 80022f6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	0010      	movs	r0, r2
 8002308:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46c0      	nop			; (mov r8, r8)
}
 800230e:	46bd      	mov	sp, r7
 8002310:	b004      	add	sp, #16
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40020000 	.word	0x40020000

08002318 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800232e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002340:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <DMA_SetConfig+0x7c>)
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	221c      	movs	r2, #28
 800234c:	4013      	ands	r3, r2
 800234e:	2201      	movs	r2, #1
 8002350:	409a      	lsls	r2, r3
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <DMA_SetConfig+0x7c>)
 8002354:	430a      	orrs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b10      	cmp	r3, #16
 8002366:	d108      	bne.n	800237a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002378:	e007      	b.n	800238a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	60da      	str	r2, [r3, #12]
}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	40020000 	.word	0x40020000

08002398 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	001a      	movs	r2, r3
 80023a6:	23ff      	movs	r3, #255	; 0xff
 80023a8:	4013      	ands	r3, r2
 80023aa:	3b08      	subs	r3, #8
 80023ac:	2114      	movs	r1, #20
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7fd feaa 	bl	8000108 <__udivsi3>
 80023b4:	0003      	movs	r3, r0
 80023b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80023c0:	4694      	mov	ip, r2
 80023c2:	4463      	add	r3, ip
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	001a      	movs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80023d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	221c      	movs	r2, #28
 80023d6:	4013      	ands	r3, r2
 80023d8:	2201      	movs	r2, #1
 80023da:	409a      	lsls	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	10008200 	.word	0x10008200
 80023ec:	40020880 	.word	0x40020880

080023f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	22ff      	movs	r2, #255	; 0xff
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002406:	4694      	mov	ip, r2
 8002408:	4463      	add	r3, ip
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	001a      	movs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002416:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3b01      	subs	r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	4013      	ands	r3, r2
 8002420:	2201      	movs	r2, #1
 8002422:	409a      	lsls	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b004      	add	sp, #16
 800242e:	bd80      	pop	{r7, pc}
 8002430:	1000823f 	.word	0x1000823f
 8002434:	40020940 	.word	0x40020940

08002438 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002446:	e153      	b.n	80026f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4091      	lsls	r1, r2
 8002452:	000a      	movs	r2, r1
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d100      	bne.n	8002460 <HAL_GPIO_Init+0x28>
 800245e:	e144      	b.n	80026ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x38>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b12      	cmp	r3, #18
 800246e:	d125      	bne.n	80024bc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	58d3      	ldr	r3, [r2, r3]
 800247c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2207      	movs	r2, #7
 8002482:	4013      	ands	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	409a      	lsls	r2, r3
 800248a:	0013      	movs	r3, r2
 800248c:	43da      	mvns	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	220f      	movs	r2, #15
 800249a:	401a      	ands	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2107      	movs	r1, #7
 80024a0:	400b      	ands	r3, r1
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	409a      	lsls	r2, r3
 80024a6:	0013      	movs	r3, r2
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	08da      	lsrs	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3208      	adds	r2, #8
 80024b6:	0092      	lsls	r2, r2, #2
 80024b8:	6979      	ldr	r1, [r7, #20]
 80024ba:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	409a      	lsls	r2, r3
 80024ca:	0013      	movs	r3, r2
 80024cc:	43da      	mvns	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2203      	movs	r2, #3
 80024da:	401a      	ands	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	409a      	lsls	r2, r3
 80024e2:	0013      	movs	r3, r2
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d00b      	beq.n	8002510 <HAL_GPIO_Init+0xd8>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d007      	beq.n	8002510 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002504:	2b11      	cmp	r3, #17
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b12      	cmp	r3, #18
 800250e:	d130      	bne.n	8002572 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	43da      	mvns	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	4013      	ands	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	409a      	lsls	r2, r3
 8002532:	0013      	movs	r3, r2
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002546:	2201      	movs	r2, #1
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	409a      	lsls	r2, r3
 800254c:	0013      	movs	r3, r2
 800254e:	43da      	mvns	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	4013      	ands	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	2201      	movs	r2, #1
 800255e:	401a      	ands	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d017      	beq.n	80025aa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	409a      	lsls	r2, r3
 8002588:	0013      	movs	r3, r2
 800258a:	43da      	mvns	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	4013      	ands	r3, r2
 8002590:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	409a      	lsls	r2, r3
 800259c:	0013      	movs	r3, r2
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	055b      	lsls	r3, r3, #21
 80025b2:	4013      	ands	r3, r2
 80025b4:	d100      	bne.n	80025b8 <HAL_GPIO_Init+0x180>
 80025b6:	e098      	b.n	80026ea <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80025b8:	4a53      	ldr	r2, [pc, #332]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3318      	adds	r3, #24
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	589b      	ldr	r3, [r3, r2]
 80025c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2203      	movs	r2, #3
 80025ca:	4013      	ands	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	220f      	movs	r2, #15
 80025d0:	409a      	lsls	r2, r3
 80025d2:	0013      	movs	r3, r2
 80025d4:	43da      	mvns	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	4013      	ands	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	23a0      	movs	r3, #160	; 0xa0
 80025e0:	05db      	lsls	r3, r3, #23
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d019      	beq.n	800261a <HAL_GPIO_Init+0x1e2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a48      	ldr	r2, [pc, #288]	; (800270c <HAL_GPIO_Init+0x2d4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0x1de>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a47      	ldr	r2, [pc, #284]	; (8002710 <HAL_GPIO_Init+0x2d8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00d      	beq.n	8002612 <HAL_GPIO_Init+0x1da>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a46      	ldr	r2, [pc, #280]	; (8002714 <HAL_GPIO_Init+0x2dc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x1d6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a45      	ldr	r2, [pc, #276]	; (8002718 <HAL_GPIO_Init+0x2e0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_GPIO_Init+0x1d2>
 8002606:	2305      	movs	r3, #5
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x1e4>
 800260a:	2306      	movs	r3, #6
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x1e4>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x1e4>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x1e4>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x1e4>
 800261a:	2300      	movs	r3, #0
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	2103      	movs	r1, #3
 8002620:	400a      	ands	r2, r1
 8002622:	00d2      	lsls	r2, r2, #3
 8002624:	4093      	lsls	r3, r2
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800262c:	4936      	ldr	r1, [pc, #216]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3318      	adds	r3, #24
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800263a:	4a33      	ldr	r2, [pc, #204]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	58d3      	ldr	r3, [r2, r3]
 8002640:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43da      	mvns	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4013      	ands	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	4013      	ands	r3, r2
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002660:	4929      	ldr	r1, [pc, #164]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 8002662:	2280      	movs	r2, #128	; 0x80
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002668:	4a27      	ldr	r2, [pc, #156]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 800266a:	2384      	movs	r3, #132	; 0x84
 800266c:	58d3      	ldr	r3, [r2, r3]
 800266e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43da      	mvns	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	4013      	ands	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	029b      	lsls	r3, r3, #10
 8002682:	4013      	ands	r3, r2
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800268e:	491e      	ldr	r1, [pc, #120]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 8002690:	2284      	movs	r2, #132	; 0x84
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	43da      	mvns	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4013      	ands	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	035b      	lsls	r3, r3, #13
 80026ae:	4013      	ands	r3, r2
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43da      	mvns	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	4013      	ands	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	039b      	lsls	r3, r3, #14
 80026d8:	4013      	ands	r3, r2
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	3301      	adds	r3, #1
 80026ee:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	40da      	lsrs	r2, r3
 80026f8:	1e13      	subs	r3, r2, #0
 80026fa:	d000      	beq.n	80026fe <HAL_GPIO_Init+0x2c6>
 80026fc:	e6a4      	b.n	8002448 <HAL_GPIO_Init+0x10>
  }
}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b006      	add	sp, #24
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021800 	.word	0x40021800
 800270c:	50000400 	.word	0x50000400
 8002710:	50000800 	.word	0x50000800
 8002714:	50000c00 	.word	0x50000c00
 8002718:	50001400 	.word	0x50001400

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	0008      	movs	r0, r1
 8002726:	0011      	movs	r1, r2
 8002728:	1cbb      	adds	r3, r7, #2
 800272a:	1c02      	adds	r2, r0, #0
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	1c7b      	adds	r3, r7, #1
 8002730:	1c0a      	adds	r2, r1, #0
 8002732:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002734:	1c7b      	adds	r3, r7, #1
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800273c:	1cbb      	adds	r3, r7, #2
 800273e:	881a      	ldrh	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002744:	e003      	b.n	800274e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002746:	1cbb      	adds	r3, r7, #2
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b002      	add	sp, #8
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	000a      	movs	r2, r1
 8002760:	1cbb      	adds	r3, r7, #2
 8002762:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800276a:	1cbb      	adds	r3, r7, #2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4013      	ands	r3, r2
 8002772:	041a      	lsls	r2, r3, #16
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	43db      	mvns	r3, r3
 8002778:	1cb9      	adds	r1, r7, #2
 800277a:	8809      	ldrh	r1, [r1, #0]
 800277c:	400b      	ands	r3, r1
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	0002      	movs	r2, r0
 8002794:	1dbb      	adds	r3, r7, #6
 8002796:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	1dba      	adds	r2, r7, #6
 800279e:	8812      	ldrh	r2, [r2, #0]
 80027a0:	4013      	ands	r3, r2
 80027a2:	d008      	beq.n	80027b6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027a6:	1dba      	adds	r2, r7, #6
 80027a8:	8812      	ldrh	r2, [r2, #0]
 80027aa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80027ac:	1dbb      	adds	r3, r7, #6
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 f815 	bl	80027e0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	1dba      	adds	r2, r7, #6
 80027bc:	8812      	ldrh	r2, [r2, #0]
 80027be:	4013      	ands	r3, r2
 80027c0:	d008      	beq.n	80027d4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027c4:	1dba      	adds	r2, r7, #6
 80027c6:	8812      	ldrh	r2, [r2, #0]
 80027c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80027ca:	1dbb      	adds	r3, r7, #6
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 f810 	bl	80027f4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b002      	add	sp, #8
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021800 	.word	0x40021800

080027e0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	0002      	movs	r2, r0
 80027e8:	1dbb      	adds	r3, r7, #6
 80027ea:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	0002      	movs	r2, r0
 80027fc:	1dbb      	adds	r3, r7, #6
 80027fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e08f      	b.n	800293a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2241      	movs	r2, #65	; 0x41
 800281e:	5c9b      	ldrb	r3, [r3, r2]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d107      	bne.n	8002836 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2240      	movs	r2, #64	; 0x40
 800282a:	2100      	movs	r1, #0
 800282c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f7fe f8e1 	bl	80009f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2241      	movs	r2, #65	; 0x41
 800283a:	2124      	movs	r1, #36	; 0x24
 800283c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	438a      	bics	r2, r1
 800284c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	493b      	ldr	r1, [pc, #236]	; (8002944 <HAL_I2C_Init+0x13c>)
 8002858:	400a      	ands	r2, r1
 800285a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4938      	ldr	r1, [pc, #224]	; (8002948 <HAL_I2C_Init+0x140>)
 8002868:	400a      	ands	r2, r1
 800286a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d108      	bne.n	8002886 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	0209      	lsls	r1, r1, #8
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e007      	b.n	8002896 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2184      	movs	r1, #132	; 0x84
 8002890:	0209      	lsls	r1, r1, #8
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d109      	bne.n	80028b2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	0109      	lsls	r1, r1, #4
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	e007      	b.n	80028c2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4923      	ldr	r1, [pc, #140]	; (800294c <HAL_I2C_Init+0x144>)
 80028be:	400a      	ands	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4920      	ldr	r1, [pc, #128]	; (8002950 <HAL_I2C_Init+0x148>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	491a      	ldr	r1, [pc, #104]	; (8002948 <HAL_I2C_Init+0x140>)
 80028de:	400a      	ands	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69d9      	ldr	r1, [r3, #28]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2101      	movs	r1, #1
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2241      	movs	r2, #65	; 0x41
 8002926:	2120      	movs	r1, #32
 8002928:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2242      	movs	r2, #66	; 0x42
 8002934:	2100      	movs	r1, #0
 8002936:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b002      	add	sp, #8
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	f0ffffff 	.word	0xf0ffffff
 8002948:	ffff7fff 	.word	0xffff7fff
 800294c:	fffff7ff 	.word	0xfffff7ff
 8002950:	02008000 	.word	0x02008000

08002954 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2241      	movs	r2, #65	; 0x41
 8002962:	5c9b      	ldrb	r3, [r3, r2]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b20      	cmp	r3, #32
 8002968:	d138      	bne.n	80029dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2240      	movs	r2, #64	; 0x40
 800296e:	5c9b      	ldrb	r3, [r3, r2]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002974:	2302      	movs	r3, #2
 8002976:	e032      	b.n	80029de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2240      	movs	r2, #64	; 0x40
 800297c:	2101      	movs	r1, #1
 800297e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2241      	movs	r2, #65	; 0x41
 8002984:	2124      	movs	r1, #36	; 0x24
 8002986:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2101      	movs	r1, #1
 8002994:	438a      	bics	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4911      	ldr	r1, [pc, #68]	; (80029e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029a4:	400a      	ands	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2241      	movs	r2, #65	; 0x41
 80029cc:	2120      	movs	r1, #32
 80029ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b002      	add	sp, #8
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	ffffefff 	.word	0xffffefff

080029ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2241      	movs	r2, #65	; 0x41
 80029fa:	5c9b      	ldrb	r3, [r3, r2]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d139      	bne.n	8002a76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	5c9b      	ldrb	r3, [r3, r2]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e033      	b.n	8002a78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	2101      	movs	r1, #1
 8002a16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2241      	movs	r2, #65	; 0x41
 8002a1c:	2124      	movs	r1, #36	; 0x24
 8002a1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	438a      	bics	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2241      	movs	r2, #65	; 0x41
 8002a66:	2120      	movs	r1, #32
 8002a68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2240      	movs	r2, #64	; 0x40
 8002a6e:	2100      	movs	r1, #0
 8002a70:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
  }
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b004      	add	sp, #16
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	fffff0ff 	.word	0xfffff0ff

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e1d0      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d100      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x1e>
 8002aa0:	e069      	b.n	8002b76 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa2:	4bc8      	ldr	r3, [pc, #800]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2238      	movs	r2, #56	; 0x38
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d15d      	bne.n	8002b76 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1bc      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	025b      	lsls	r3, r3, #9
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_OscConfig+0x56>
 8002aca:	4bbe      	ldr	r3, [pc, #760]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4bbd      	ldr	r3, [pc, #756]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002ad0:	2180      	movs	r1, #128	; 0x80
 8002ad2:	0249      	lsls	r1, r1, #9
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e020      	b.n	8002b1c <HAL_RCC_OscConfig+0x98>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	23a0      	movs	r3, #160	; 0xa0
 8002ae0:	02db      	lsls	r3, r3, #11
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10e      	bne.n	8002b04 <HAL_RCC_OscConfig+0x80>
 8002ae6:	4bb7      	ldr	r3, [pc, #732]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4bb6      	ldr	r3, [pc, #728]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	02c9      	lsls	r1, r1, #11
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	4bb3      	ldr	r3, [pc, #716]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4bb2      	ldr	r3, [pc, #712]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	0249      	lsls	r1, r1, #9
 8002afe:	430a      	orrs	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0x98>
 8002b04:	4baf      	ldr	r3, [pc, #700]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4bae      	ldr	r3, [pc, #696]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002b0a:	49af      	ldr	r1, [pc, #700]	; (8002dc8 <HAL_RCC_OscConfig+0x344>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	4bac      	ldr	r3, [pc, #688]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4bab      	ldr	r3, [pc, #684]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002b16:	49ad      	ldr	r1, [pc, #692]	; (8002dcc <HAL_RCC_OscConfig+0x348>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d014      	beq.n	8002b4e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe f966 	bl	8000df4 <HAL_GetTick>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002b2e:	f7fe f961 	bl	8000df4 <HAL_GetTick>
 8002b32:	0002      	movs	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b64      	cmp	r3, #100	; 0x64
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e17b      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b40:	4ba0      	ldr	r3, [pc, #640]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	029b      	lsls	r3, r3, #10
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0xaa>
 8002b4c:	e013      	b.n	8002b76 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe f951 	bl	8000df4 <HAL_GetTick>
 8002b52:	0003      	movs	r3, r0
 8002b54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002b58:	f7fe f94c 	bl	8000df4 <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e166      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b6a:	4b96      	ldr	r3, [pc, #600]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	4013      	ands	r3, r2
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d100      	bne.n	8002b82 <HAL_RCC_OscConfig+0xfe>
 8002b80:	e086      	b.n	8002c90 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b82:	4b90      	ldr	r3, [pc, #576]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2238      	movs	r2, #56	; 0x38
 8002b88:	4013      	ands	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d12f      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e14c      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b89      	ldr	r3, [pc, #548]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4a8b      	ldr	r2, [pc, #556]	; (8002dd0 <HAL_RCC_OscConfig+0x34c>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	021a      	lsls	r2, r3, #8
 8002bae:	4b85      	ldr	r3, [pc, #532]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d112      	bne.n	8002be0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bba:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a85      	ldr	r2, [pc, #532]	; (8002dd4 <HAL_RCC_OscConfig+0x350>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	4b7e      	ldr	r3, [pc, #504]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002bce:	4b7d      	ldr	r3, [pc, #500]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0adb      	lsrs	r3, r3, #11
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	4a7f      	ldr	r2, [pc, #508]	; (8002dd8 <HAL_RCC_OscConfig+0x354>)
 8002bda:	40da      	lsrs	r2, r3
 8002bdc:	4b7f      	ldr	r3, [pc, #508]	; (8002ddc <HAL_RCC_OscConfig+0x358>)
 8002bde:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002be0:	4b7f      	ldr	r3, [pc, #508]	; (8002de0 <HAL_RCC_OscConfig+0x35c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7fe f8a9 	bl	8000d3c <HAL_InitTick>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d050      	beq.n	8002c90 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e122      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d030      	beq.n	8002c5c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bfa:	4b72      	ldr	r3, [pc, #456]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a75      	ldr	r2, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x350>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	4b6e      	ldr	r3, [pc, #440]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002c0e:	4b6d      	ldr	r3, [pc, #436]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b6c      	ldr	r3, [pc, #432]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	0049      	lsls	r1, r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f8ea 	bl	8000df4 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002c26:	f7fe f8e5 	bl	8000df4 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e0ff      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	4b62      	ldr	r3, [pc, #392]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4013      	ands	r3, r2
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a61      	ldr	r2, [pc, #388]	; (8002dd0 <HAL_RCC_OscConfig+0x34c>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	e019      	b.n	8002c90 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002c5c:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b58      	ldr	r3, [pc, #352]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002c62:	4960      	ldr	r1, [pc, #384]	; (8002de4 <HAL_RCC_OscConfig+0x360>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f8c4 	bl	8000df4 <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002c72:	f7fe f8bf 	bl	8000df4 <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0d9      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c84:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2208      	movs	r2, #8
 8002c96:	4013      	ands	r3, r2
 8002c98:	d042      	beq.n	8002d20 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2238      	movs	r2, #56	; 0x38
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b18      	cmp	r3, #24
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d138      	bne.n	8002d20 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0c2      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d019      	beq.n	8002cee <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002cba:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002cbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe f895 	bl	8000df4 <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002cd0:	f7fe f890 	bl	8000df4 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0aa      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d0f1      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x24c>
 8002cec:	e018      	b.n	8002d20 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002cee:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002cf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe f87b 	bl	8000df4 <HAL_GetTick>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002d04:	f7fe f876 	bl	8000df4 <HAL_GetTick>
 8002d08:	0002      	movs	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e090      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d1f1      	bne.n	8002d04 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2204      	movs	r2, #4
 8002d26:	4013      	ands	r3, r2
 8002d28:	d100      	bne.n	8002d2c <HAL_RCC_OscConfig+0x2a8>
 8002d2a:	e084      	b.n	8002e36 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2c:	230f      	movs	r3, #15
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2238      	movs	r2, #56	; 0x38
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d000      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2c6>
 8002d48:	e075      	b.n	8002e36 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e074      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x2e0>
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d62:	e01c      	b.n	8002d9e <HAL_RCC_OscConfig+0x31a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCC_OscConfig+0x302>
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d72:	2104      	movs	r1, #4
 8002d74:	430a      	orrs	r2, r1
 8002d76:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	430a      	orrs	r2, r1
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d84:	e00b      	b.n	8002d9e <HAL_RCC_OscConfig+0x31a>
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	438a      	bics	r2, r1
 8002d90:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x340>)
 8002d98:	2104      	movs	r1, #4
 8002d9a:	438a      	bics	r2, r1
 8002d9c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d028      	beq.n	8002df8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe f825 	bl	8000df4 <HAL_GetTick>
 8002daa:	0003      	movs	r3, r0
 8002dac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002dae:	e01d      	b.n	8002dec <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe f820 	bl	8000df4 <HAL_GetTick>
 8002db4:	0002      	movs	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x364>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d915      	bls.n	8002dec <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e039      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	fffeffff 	.word	0xfffeffff
 8002dcc:	fffbffff 	.word	0xfffbffff
 8002dd0:	ffff80ff 	.word	0xffff80ff
 8002dd4:	ffffc7ff 	.word	0xffffc7ff
 8002dd8:	02dc6c00 	.word	0x02dc6c00
 8002ddc:	20000014 	.word	0x20000014
 8002de0:	20000018 	.word	0x20000018
 8002de4:	fffffeff 	.word	0xfffffeff
 8002de8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <HAL_RCC_OscConfig+0x3bc>)
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	2202      	movs	r2, #2
 8002df2:	4013      	ands	r3, r2
 8002df4:	d0dc      	beq.n	8002db0 <HAL_RCC_OscConfig+0x32c>
 8002df6:	e013      	b.n	8002e20 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fd fffc 	bl	8000df4 <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002e00:	e009      	b.n	8002e16 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7fd fff7 	bl	8000df4 <HAL_GetTick>
 8002e06:	0002      	movs	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <HAL_RCC_OscConfig+0x3c0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e010      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_RCC_OscConfig+0x3bc>)
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e20:	230f      	movs	r3, #15
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_OscConfig+0x3bc>)
 8002e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <HAL_RCC_OscConfig+0x3bc>)
 8002e30:	4905      	ldr	r1, [pc, #20]	; (8002e48 <HAL_RCC_OscConfig+0x3c4>)
 8002e32:	400a      	ands	r2, r1
 8002e34:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b006      	add	sp, #24
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	00001388 	.word	0x00001388
 8002e48:	efffffff 	.word	0xefffffff

08002e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0e9      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e60:	4b76      	ldr	r3, [pc, #472]	; (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2207      	movs	r2, #7
 8002e66:	4013      	ands	r3, r2
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d91e      	bls.n	8002eac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b73      	ldr	r3, [pc, #460]	; (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2207      	movs	r2, #7
 8002e74:	4393      	bics	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	4b70      	ldr	r3, [pc, #448]	; (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e80:	f7fd ffb8 	bl	8000df4 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e88:	e009      	b.n	8002e9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8a:	f7fd ffb3 	bl	8000df4 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	4a6a      	ldr	r2, [pc, #424]	; (8003040 <HAL_RCC_ClockConfig+0x1f4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0ca      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d1ee      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d017      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ec0:	4b60      	ldr	r3, [pc, #384]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a60      	ldr	r2, [pc, #384]	; (8003048 <HAL_RCC_ClockConfig+0x1fc>)
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	4b5e      	ldr	r3, [pc, #376]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002eca:	21b0      	movs	r1, #176	; 0xb0
 8002ecc:	0109      	lsls	r1, r1, #4
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4a5d      	ldr	r2, [pc, #372]	; (800304c <HAL_RCC_ClockConfig+0x200>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2201      	movs	r2, #1
 8002eec:	4013      	ands	r3, r2
 8002eee:	d055      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002ef0:	4b54      	ldr	r3, [pc, #336]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	221c      	movs	r2, #28
 8002ef6:	4393      	bics	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	4b51      	ldr	r3, [pc, #324]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	029b      	lsls	r3, r3, #10
 8002f14:	4013      	ands	r3, r2
 8002f16:	d11f      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e08b      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f24:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d113      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e07f      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002f3c:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f40:	2202      	movs	r2, #2
 8002f42:	4013      	ands	r3, r2
 8002f44:	d108      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e074      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4013      	ands	r3, r2
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e06d      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f58:	4b3a      	ldr	r3, [pc, #232]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	4393      	bics	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4b37      	ldr	r3, [pc, #220]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fd ff42 	bl	8000df4 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002f76:	f7fd ff3d 	bl	8000df4 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	4a2f      	ldr	r2, [pc, #188]	; (8003040 <HAL_RCC_ClockConfig+0x1f4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e054      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2238      	movs	r2, #56	; 0x38
 8002f90:	401a      	ands	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1ec      	bne.n	8002f76 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d21e      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2207      	movs	r2, #7
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fbc:	f7fd ff1a 	bl	8000df4 <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fc4:	e009      	b.n	8002fda <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc6:	f7fd ff15 	bl	8000df4 <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_RCC_ClockConfig+0x1f4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e02c      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fda:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2207      	movs	r2, #7
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2204      	movs	r2, #4
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4a16      	ldr	r2, [pc, #88]	; (8003050 <HAL_RCC_ClockConfig+0x204>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003006:	f000 f82b 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800300a:	0001      	movs	r1, r0
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	220f      	movs	r2, #15
 8003014:	401a      	ands	r2, r3
 8003016:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <HAL_RCC_ClockConfig+0x208>)
 8003018:	0092      	lsls	r2, r2, #2
 800301a:	58d3      	ldr	r3, [r2, r3]
 800301c:	221f      	movs	r2, #31
 800301e:	4013      	ands	r3, r2
 8003020:	000a      	movs	r2, r1
 8003022:	40da      	lsrs	r2, r3
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <HAL_RCC_ClockConfig+0x20c>)
 8003026:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_RCC_ClockConfig+0x210>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0018      	movs	r0, r3
 800302e:	f7fd fe85 	bl	8000d3c <HAL_InitTick>
 8003032:	0003      	movs	r3, r0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b004      	add	sp, #16
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40022000 	.word	0x40022000
 8003040:	00001388 	.word	0x00001388
 8003044:	40021000 	.word	0x40021000
 8003048:	ffff84ff 	.word	0xffff84ff
 800304c:	fffff0ff 	.word	0xfffff0ff
 8003050:	ffff8fff 	.word	0xffff8fff
 8003054:	08004da4 	.word	0x08004da4
 8003058:	20000014 	.word	0x20000014
 800305c:	20000018 	.word	0x20000018

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003066:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2238      	movs	r2, #56	; 0x38
 800306c:	4013      	ands	r3, r2
 800306e:	d10f      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0adb      	lsrs	r3, r3, #11
 8003076:	2207      	movs	r2, #7
 8003078:	4013      	ands	r3, r2
 800307a:	2201      	movs	r2, #1
 800307c:	409a      	lsls	r2, r3
 800307e:	0013      	movs	r3, r2
 8003080:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003082:	6839      	ldr	r1, [r7, #0]
 8003084:	4815      	ldr	r0, [pc, #84]	; (80030dc <HAL_RCC_GetSysClockFreq+0x7c>)
 8003086:	f7fd f83f 	bl	8000108 <__udivsi3>
 800308a:	0003      	movs	r3, r0
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	e01e      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2238      	movs	r2, #56	; 0x38
 8003096:	4013      	ands	r3, r2
 8003098:	2b08      	cmp	r3, #8
 800309a:	d102      	bne.n	80030a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <HAL_RCC_GetSysClockFreq+0x7c>)
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	e015      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x78>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2238      	movs	r2, #56	; 0x38
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	d103      	bne.n	80030b6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	e00b      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x78>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2238      	movs	r2, #56	; 0x38
 80030bc:	4013      	ands	r3, r2
 80030be:	2b18      	cmp	r3, #24
 80030c0:	d103      	bne.n	80030ca <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80030c2:	23fa      	movs	r3, #250	; 0xfa
 80030c4:	01db      	lsls	r3, r3, #7
 80030c6:	607b      	str	r3, [r7, #4]
 80030c8:	e001      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80030ce:	687b      	ldr	r3, [r7, #4]
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	02dc6c00 	.word	0x02dc6c00

080030e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e4:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	0018      	movs	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	20000014 	.word	0x20000014

080030f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80030f8:	f7ff fff2 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 80030fc:	0001      	movs	r1, r0
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	0b1b      	lsrs	r3, r3, #12
 8003104:	2207      	movs	r2, #7
 8003106:	401a      	ands	r2, r3
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800310a:	0092      	lsls	r2, r2, #2
 800310c:	58d3      	ldr	r3, [r2, r3]
 800310e:	221f      	movs	r2, #31
 8003110:	4013      	ands	r3, r2
 8003112:	40d9      	lsrs	r1, r3
 8003114:	000b      	movs	r3, r1
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	08004de4 	.word	0x08004de4

08003124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800312c:	2313      	movs	r3, #19
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003134:	2312      	movs	r3, #18
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	029b      	lsls	r3, r3, #10
 8003144:	4013      	ands	r3, r2
 8003146:	d100      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003148:	e079      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2011      	movs	r0, #17
 800314c:	183b      	adds	r3, r7, r0
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003152:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	055b      	lsls	r3, r3, #21
 800315a:	4013      	ands	r3, r2
 800315c:	d110      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003162:	4b60      	ldr	r3, [pc, #384]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	0549      	lsls	r1, r1, #21
 8003168:	430a      	orrs	r2, r1
 800316a:	63da      	str	r2, [r3, #60]	; 0x3c
 800316c:	4b5d      	ldr	r3, [pc, #372]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800316e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	055b      	lsls	r3, r3, #21
 8003174:	4013      	ands	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317a:	183b      	adds	r3, r7, r0
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003180:	4b58      	ldr	r3, [pc, #352]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003182:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003184:	23c0      	movs	r3, #192	; 0xc0
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4013      	ands	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d019      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d014      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800319c:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	4a51      	ldr	r2, [pc, #324]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031a6:	4b4f      	ldr	r3, [pc, #316]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031aa:	4b4e      	ldr	r3, [pc, #312]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031ac:	2180      	movs	r1, #128	; 0x80
 80031ae:	0249      	lsls	r1, r1, #9
 80031b0:	430a      	orrs	r2, r1
 80031b2:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b4:	4b4b      	ldr	r3, [pc, #300]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031b8:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031ba:	494c      	ldr	r1, [pc, #304]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80031bc:	400a      	ands	r2, r1
 80031be:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2201      	movs	r2, #1
 80031ca:	4013      	ands	r3, r2
 80031cc:	d016      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fd fe11 	bl	8000df4 <HAL_GetTick>
 80031d2:	0003      	movs	r3, r0
 80031d4:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80031d6:	e00c      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7fd fe0c 	bl	8000df4 <HAL_GetTick>
 80031dc:	0002      	movs	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	4a43      	ldr	r2, [pc, #268]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d904      	bls.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80031e8:	2313      	movs	r3, #19
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	2203      	movs	r2, #3
 80031ee:	701a      	strb	r2, [r3, #0]
          break;
 80031f0:	e004      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80031f2:	4b3c      	ldr	r3, [pc, #240]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	2202      	movs	r2, #2
 80031f8:	4013      	ands	r3, r2
 80031fa:	d0ed      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80031fc:	2313      	movs	r3, #19
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003206:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	4a37      	ldr	r2, [pc, #220]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800320c:	4013      	ands	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003216:	430a      	orrs	r2, r1
 8003218:	65da      	str	r2, [r3, #92]	; 0x5c
 800321a:	e005      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	2312      	movs	r3, #18
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2213      	movs	r2, #19
 8003222:	18ba      	adds	r2, r7, r2
 8003224:	7812      	ldrb	r2, [r2, #0]
 8003226:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003228:	2311      	movs	r3, #17
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003236:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003238:	492e      	ldr	r1, [pc, #184]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323a:	400a      	ands	r2, r1
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2201      	movs	r2, #1
 8003244:	4013      	ands	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	2203      	movs	r2, #3
 800324e:	4393      	bics	r3, r2
 8003250:	0019      	movs	r1, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003258:	430a      	orrs	r2, r1
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2240      	movs	r2, #64	; 0x40
 8003262:	4013      	ands	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003266:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	4a23      	ldr	r2, [pc, #140]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800326c:	4013      	ands	r3, r2
 800326e:	0019      	movs	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003276:	430a      	orrs	r2, r1
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	01db      	lsls	r3, r3, #7
 8003282:	4013      	ands	r3, r2
 8003284:	d008      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	0899      	lsrs	r1, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003294:	430a      	orrs	r2, r1
 8003296:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	4013      	ands	r3, r2
 80032a2:	d009      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	4a14      	ldr	r2, [pc, #80]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	0019      	movs	r1, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032b4:	430a      	orrs	r2, r1
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da09      	bge.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	22e0      	movs	r2, #224	; 0xe0
 80032c6:	4393      	bics	r3, r2
 80032c8:	0019      	movs	r1, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
  }
  return status;
 80032d4:	2312      	movs	r3, #18
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	781b      	ldrb	r3, [r3, #0]
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b006      	add	sp, #24
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	40021000 	.word	0x40021000
 80032e8:	fffffcff 	.word	0xfffffcff
 80032ec:	fffeffff 	.word	0xfffeffff
 80032f0:	00001388 	.word	0x00001388
 80032f4:	efffffff 	.word	0xefffffff
 80032f8:	ffffcfff 	.word	0xffffcfff
 80032fc:	ffff3fff 	.word	0xffff3fff

08003300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e04a      	b.n	80033a8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	223d      	movs	r2, #61	; 0x3d
 8003316:	5c9b      	ldrb	r3, [r3, r2]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d107      	bne.n	800332e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	223c      	movs	r2, #60	; 0x3c
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f7fd fbc7 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	223d      	movs	r2, #61	; 0x3d
 8003332:	2102      	movs	r1, #2
 8003334:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	0019      	movs	r1, r3
 8003340:	0010      	movs	r0, r2
 8003342:	f000 fcb3 	bl	8003cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2248      	movs	r2, #72	; 0x48
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	223e      	movs	r2, #62	; 0x3e
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223f      	movs	r2, #63	; 0x3f
 800335a:	2101      	movs	r1, #1
 800335c:	5499      	strb	r1, [r3, r2]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2240      	movs	r2, #64	; 0x40
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2241      	movs	r2, #65	; 0x41
 800336a:	2101      	movs	r1, #1
 800336c:	5499      	strb	r1, [r3, r2]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2242      	movs	r2, #66	; 0x42
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2243      	movs	r2, #67	; 0x43
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2244      	movs	r2, #68	; 0x44
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2245      	movs	r2, #69	; 0x45
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2246      	movs	r2, #70	; 0x46
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2247      	movs	r2, #71	; 0x47
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	223d      	movs	r2, #61	; 0x3d
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	223d      	movs	r2, #61	; 0x3d
 80033bc:	5c9b      	ldrb	r3, [r3, r2]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d001      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e037      	b.n	8003438 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	223d      	movs	r2, #61	; 0x3d
 80033cc:	2102      	movs	r1, #2
 80033ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2101      	movs	r1, #1
 80033dc:	430a      	orrs	r2, r1
 80033de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_TIM_Base_Start_IT+0x90>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x44>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <HAL_TIM_Base_Start_IT+0x94>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d116      	bne.n	8003422 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4a13      	ldr	r2, [pc, #76]	; (8003448 <HAL_TIM_Base_Start_IT+0x98>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b06      	cmp	r3, #6
 8003404:	d016      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x84>
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	025b      	lsls	r3, r3, #9
 800340c:	429a      	cmp	r2, r3
 800340e:	d011      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2101      	movs	r1, #1
 800341c:	430a      	orrs	r2, r1
 800341e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003420:	e008      	b.n	8003434 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e000      	b.n	8003436 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003434:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b004      	add	sp, #16
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40000400 	.word	0x40000400
 8003448:	00010007 	.word	0x00010007

0800344c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e04a      	b.n	80034f4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	223d      	movs	r2, #61	; 0x3d
 8003462:	5c9b      	ldrb	r3, [r3, r2]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d107      	bne.n	800347a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	223c      	movs	r2, #60	; 0x3c
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 f841 	bl	80034fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223d      	movs	r2, #61	; 0x3d
 800347e:	2102      	movs	r1, #2
 8003480:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	0019      	movs	r1, r3
 800348c:	0010      	movs	r0, r2
 800348e:	f000 fc0d 	bl	8003cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2248      	movs	r2, #72	; 0x48
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	223e      	movs	r2, #62	; 0x3e
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223f      	movs	r2, #63	; 0x3f
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2240      	movs	r2, #64	; 0x40
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2241      	movs	r2, #65	; 0x41
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2242      	movs	r2, #66	; 0x42
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2243      	movs	r2, #67	; 0x43
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2244      	movs	r2, #68	; 0x44
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2245      	movs	r2, #69	; 0x45
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2246      	movs	r2, #70	; 0x46
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2247      	movs	r2, #71	; 0x47
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	223d      	movs	r2, #61	; 0x3d
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d108      	bne.n	800352e <HAL_TIM_PWM_Start+0x22>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	223e      	movs	r2, #62	; 0x3e
 8003520:	5c9b      	ldrb	r3, [r3, r2]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	1e5a      	subs	r2, r3, #1
 8003528:	4193      	sbcs	r3, r2
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e037      	b.n	800359e <HAL_TIM_PWM_Start+0x92>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d108      	bne.n	8003546 <HAL_TIM_PWM_Start+0x3a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	223f      	movs	r2, #63	; 0x3f
 8003538:	5c9b      	ldrb	r3, [r3, r2]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	4193      	sbcs	r3, r2
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e02b      	b.n	800359e <HAL_TIM_PWM_Start+0x92>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d108      	bne.n	800355e <HAL_TIM_PWM_Start+0x52>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2240      	movs	r2, #64	; 0x40
 8003550:	5c9b      	ldrb	r3, [r3, r2]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	1e5a      	subs	r2, r3, #1
 8003558:	4193      	sbcs	r3, r2
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e01f      	b.n	800359e <HAL_TIM_PWM_Start+0x92>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d108      	bne.n	8003576 <HAL_TIM_PWM_Start+0x6a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2241      	movs	r2, #65	; 0x41
 8003568:	5c9b      	ldrb	r3, [r3, r2]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	1e5a      	subs	r2, r3, #1
 8003570:	4193      	sbcs	r3, r2
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e013      	b.n	800359e <HAL_TIM_PWM_Start+0x92>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b10      	cmp	r3, #16
 800357a:	d108      	bne.n	800358e <HAL_TIM_PWM_Start+0x82>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2242      	movs	r2, #66	; 0x42
 8003580:	5c9b      	ldrb	r3, [r3, r2]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	1e5a      	subs	r2, r3, #1
 8003588:	4193      	sbcs	r3, r2
 800358a:	b2db      	uxtb	r3, r3
 800358c:	e007      	b.n	800359e <HAL_TIM_PWM_Start+0x92>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2243      	movs	r2, #67	; 0x43
 8003592:	5c9b      	ldrb	r3, [r3, r2]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	1e5a      	subs	r2, r3, #1
 800359a:	4193      	sbcs	r3, r2
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07b      	b.n	800369e <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_PWM_Start+0xaa>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	223e      	movs	r2, #62	; 0x3e
 80035b0:	2102      	movs	r1, #2
 80035b2:	5499      	strb	r1, [r3, r2]
 80035b4:	e023      	b.n	80035fe <HAL_TIM_PWM_Start+0xf2>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_PWM_Start+0xba>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	223f      	movs	r2, #63	; 0x3f
 80035c0:	2102      	movs	r1, #2
 80035c2:	5499      	strb	r1, [r3, r2]
 80035c4:	e01b      	b.n	80035fe <HAL_TIM_PWM_Start+0xf2>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d104      	bne.n	80035d6 <HAL_TIM_PWM_Start+0xca>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2240      	movs	r2, #64	; 0x40
 80035d0:	2102      	movs	r1, #2
 80035d2:	5499      	strb	r1, [r3, r2]
 80035d4:	e013      	b.n	80035fe <HAL_TIM_PWM_Start+0xf2>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b0c      	cmp	r3, #12
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_PWM_Start+0xda>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2241      	movs	r2, #65	; 0x41
 80035e0:	2102      	movs	r1, #2
 80035e2:	5499      	strb	r1, [r3, r2]
 80035e4:	e00b      	b.n	80035fe <HAL_TIM_PWM_Start+0xf2>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d104      	bne.n	80035f6 <HAL_TIM_PWM_Start+0xea>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2242      	movs	r2, #66	; 0x42
 80035f0:	2102      	movs	r1, #2
 80035f2:	5499      	strb	r1, [r3, r2]
 80035f4:	e003      	b.n	80035fe <HAL_TIM_PWM_Start+0xf2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2243      	movs	r2, #67	; 0x43
 80035fa:	2102      	movs	r1, #2
 80035fc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	2201      	movs	r2, #1
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fef4 	bl	80043f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <HAL_TIM_PWM_Start+0x19c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_TIM_PWM_Start+0x11e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a24      	ldr	r2, [pc, #144]	; (80036ac <HAL_TIM_PWM_Start+0x1a0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_TIM_PWM_Start+0x11e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <HAL_TIM_PWM_Start+0x1a4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_TIM_PWM_Start+0x122>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_TIM_PWM_Start+0x124>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	0209      	lsls	r1, r1, #8
 8003642:	430a      	orrs	r2, r1
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <HAL_TIM_PWM_Start+0x19c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d004      	beq.n	800365a <HAL_TIM_PWM_Start+0x14e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_TIM_PWM_Start+0x1a8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d116      	bne.n	8003688 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a15      	ldr	r2, [pc, #84]	; (80036b8 <HAL_TIM_PWM_Start+0x1ac>)
 8003662:	4013      	ands	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b06      	cmp	r3, #6
 800366a:	d016      	beq.n	800369a <HAL_TIM_PWM_Start+0x18e>
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	025b      	lsls	r3, r3, #9
 8003672:	429a      	cmp	r2, r3
 8003674:	d011      	beq.n	800369a <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	e008      	b.n	800369a <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2101      	movs	r1, #1
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e000      	b.n	800369c <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b004      	add	sp, #16
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40014400 	.word	0x40014400
 80036b0:	40014800 	.word	0x40014800
 80036b4:	40000400 	.word	0x40000400
 80036b8:	00010007 	.word	0x00010007

080036bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2202      	movs	r2, #2
 80036d8:	4013      	ands	r3, r2
 80036da:	d021      	beq.n	8003720 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2202      	movs	r2, #2
 80036e0:	4013      	ands	r3, r2
 80036e2:	d01d      	beq.n	8003720 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2203      	movs	r2, #3
 80036ea:	4252      	negs	r2, r2
 80036ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2203      	movs	r2, #3
 80036fc:	4013      	ands	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	0018      	movs	r0, r3
 8003704:	f000 faba 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 8003708:	e007      	b.n	800371a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f000 faad 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	0018      	movs	r0, r3
 8003716:	f000 fab9 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2204      	movs	r2, #4
 8003724:	4013      	ands	r3, r2
 8003726:	d022      	beq.n	800376e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2204      	movs	r2, #4
 800372c:	4013      	ands	r3, r2
 800372e:	d01e      	beq.n	800376e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2205      	movs	r2, #5
 8003736:	4252      	negs	r2, r2
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	23c0      	movs	r3, #192	; 0xc0
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4013      	ands	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0018      	movs	r0, r3
 8003752:	f000 fa93 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 8003756:	e007      	b.n	8003768 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	0018      	movs	r0, r3
 800375c:	f000 fa86 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	0018      	movs	r0, r3
 8003764:	f000 fa92 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2208      	movs	r2, #8
 8003772:	4013      	ands	r3, r2
 8003774:	d021      	beq.n	80037ba <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2208      	movs	r2, #8
 800377a:	4013      	ands	r3, r2
 800377c:	d01d      	beq.n	80037ba <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2209      	movs	r2, #9
 8003784:	4252      	negs	r2, r2
 8003786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2204      	movs	r2, #4
 800378c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	2203      	movs	r2, #3
 8003796:	4013      	ands	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 fa6d 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 80037a2:	e007      	b.n	80037b4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f000 fa60 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 fa6c 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2210      	movs	r2, #16
 80037be:	4013      	ands	r3, r2
 80037c0:	d022      	beq.n	8003808 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2210      	movs	r2, #16
 80037c6:	4013      	ands	r3, r2
 80037c8:	d01e      	beq.n	8003808 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2211      	movs	r2, #17
 80037d0:	4252      	negs	r2, r2
 80037d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2208      	movs	r2, #8
 80037d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	23c0      	movs	r3, #192	; 0xc0
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4013      	ands	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 fa46 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 80037f0:	e007      	b.n	8003802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 fa39 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 fa45 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	d00c      	beq.n	800382a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	4013      	ands	r3, r2
 8003816:	d008      	beq.n	800382a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2202      	movs	r2, #2
 800381e:	4252      	negs	r2, r2
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f7fd f80f 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2280      	movs	r2, #128	; 0x80
 800382e:	4013      	ands	r3, r2
 8003830:	d00c      	beq.n	800384c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	4013      	ands	r3, r2
 8003838:	d008      	beq.n	800384c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2281      	movs	r2, #129	; 0x81
 8003840:	4252      	negs	r2, r2
 8003842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fe62 	bl	8004510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4013      	ands	r3, r2
 8003854:	d00b      	beq.n	800386e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	4013      	ands	r3, r2
 800385c:	d007      	beq.n	800386e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <HAL_TIM_IRQHandler+0x200>)
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0018      	movs	r0, r3
 800386a:	f000 fe59 	bl	8004520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2240      	movs	r2, #64	; 0x40
 8003872:	4013      	ands	r3, r2
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2240      	movs	r2, #64	; 0x40
 800387a:	4013      	ands	r3, r2
 800387c:	d008      	beq.n	8003890 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2241      	movs	r2, #65	; 0x41
 8003884:	4252      	negs	r2, r2
 8003886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f000 fa06 	bl	8003c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2220      	movs	r2, #32
 8003894:	4013      	ands	r3, r2
 8003896:	d00c      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	4013      	ands	r3, r2
 800389e:	d008      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2221      	movs	r2, #33	; 0x21
 80038a6:	4252      	negs	r2, r2
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f000 fe27 	bl	8004500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b004      	add	sp, #16
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	fffffeff 	.word	0xfffffeff

080038c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2317      	movs	r3, #23
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	223c      	movs	r2, #60	; 0x3c
 80038d8:	5c9b      	ldrb	r3, [r3, r2]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80038de:	2302      	movs	r3, #2
 80038e0:	e0e5      	b.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	223c      	movs	r2, #60	; 0x3c
 80038e6:	2101      	movs	r1, #1
 80038e8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b14      	cmp	r3, #20
 80038ee:	d900      	bls.n	80038f2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80038f0:	e0d1      	b.n	8003a96 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	009a      	lsls	r2, r3, #2
 80038f6:	4b70      	ldr	r3, [pc, #448]	; (8003ab8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80038f8:	18d3      	adds	r3, r2, r3
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f000 fa3c 	bl	8003d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2108      	movs	r1, #8
 8003918:	430a      	orrs	r2, r1
 800391a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2104      	movs	r1, #4
 8003928:	438a      	bics	r2, r1
 800392a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6999      	ldr	r1, [r3, #24]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	619a      	str	r2, [r3, #24]
      break;
 800393e:	e0af      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	0011      	movs	r1, r2
 8003948:	0018      	movs	r0, r3
 800394a:	f000 fa9b 	bl	8003e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699a      	ldr	r2, [r3, #24]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	0109      	lsls	r1, r1, #4
 800395c:	430a      	orrs	r2, r1
 800395e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4954      	ldr	r1, [pc, #336]	; (8003abc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800396c:	400a      	ands	r2, r1
 800396e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6999      	ldr	r1, [r3, #24]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	021a      	lsls	r2, r3, #8
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	619a      	str	r2, [r3, #24]
      break;
 8003984:	e08c      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	0011      	movs	r1, r2
 800398e:	0018      	movs	r0, r3
 8003990:	f000 faf6 	bl	8003f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2108      	movs	r1, #8
 80039a0:	430a      	orrs	r2, r1
 80039a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69da      	ldr	r2, [r3, #28]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2104      	movs	r1, #4
 80039b0:	438a      	bics	r2, r1
 80039b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69d9      	ldr	r1, [r3, #28]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	61da      	str	r2, [r3, #28]
      break;
 80039c6:	e06b      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	0011      	movs	r1, r2
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 fb57 	bl	8004084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2180      	movs	r1, #128	; 0x80
 80039e2:	0109      	lsls	r1, r1, #4
 80039e4:	430a      	orrs	r2, r1
 80039e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4932      	ldr	r1, [pc, #200]	; (8003abc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69d9      	ldr	r1, [r3, #28]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	021a      	lsls	r2, r3, #8
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	61da      	str	r2, [r3, #28]
      break;
 8003a0c:	e048      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	0011      	movs	r1, r2
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 fb98 	bl	800414c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2108      	movs	r1, #8
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2104      	movs	r1, #4
 8003a38:	438a      	bics	r2, r1
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a4e:	e027      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	0011      	movs	r1, r2
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f000 fbd1 	bl	8004200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2180      	movs	r1, #128	; 0x80
 8003a6a:	0109      	lsls	r1, r1, #4
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4910      	ldr	r1, [pc, #64]	; (8003abc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a7c:	400a      	ands	r2, r1
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	021a      	lsls	r2, r3, #8
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a94:	e004      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003a96:	2317      	movs	r3, #23
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
      break;
 8003a9e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	223c      	movs	r2, #60	; 0x3c
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	5499      	strb	r1, [r3, r2]

  return status;
 8003aa8:	2317      	movs	r3, #23
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	781b      	ldrb	r3, [r3, #0]
}
 8003aae:	0018      	movs	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b006      	add	sp, #24
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	08004e04 	.word	0x08004e04
 8003abc:	fffffbff 	.word	0xfffffbff

08003ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aca:	230f      	movs	r3, #15
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	223c      	movs	r2, #60	; 0x3c
 8003ad6:	5c9b      	ldrb	r3, [r3, r2]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_TIM_ConfigClockSource+0x20>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e0bc      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x19a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	223c      	movs	r2, #60	; 0x3c
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	223d      	movs	r2, #61	; 0x3d
 8003aec:	2102      	movs	r1, #2
 8003aee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4a5a      	ldr	r2, [pc, #360]	; (8003c64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4a59      	ldr	r2, [pc, #356]	; (8003c68 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	0192      	lsls	r2, r2, #6
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d040      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0xde>
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	0192      	lsls	r2, r2, #6
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d900      	bls.n	8003b26 <HAL_TIM_ConfigClockSource+0x66>
 8003b24:	e088      	b.n	8003c38 <HAL_TIM_ConfigClockSource+0x178>
 8003b26:	2280      	movs	r2, #128	; 0x80
 8003b28:	0152      	lsls	r2, r2, #5
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d100      	bne.n	8003b30 <HAL_TIM_ConfigClockSource+0x70>
 8003b2e:	e088      	b.n	8003c42 <HAL_TIM_ConfigClockSource+0x182>
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	0152      	lsls	r2, r2, #5
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d900      	bls.n	8003b3a <HAL_TIM_ConfigClockSource+0x7a>
 8003b38:	e07e      	b.n	8003c38 <HAL_TIM_ConfigClockSource+0x178>
 8003b3a:	2b70      	cmp	r3, #112	; 0x70
 8003b3c:	d018      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0xb0>
 8003b3e:	d900      	bls.n	8003b42 <HAL_TIM_ConfigClockSource+0x82>
 8003b40:	e07a      	b.n	8003c38 <HAL_TIM_ConfigClockSource+0x178>
 8003b42:	2b60      	cmp	r3, #96	; 0x60
 8003b44:	d04f      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x126>
 8003b46:	d900      	bls.n	8003b4a <HAL_TIM_ConfigClockSource+0x8a>
 8003b48:	e076      	b.n	8003c38 <HAL_TIM_ConfigClockSource+0x178>
 8003b4a:	2b50      	cmp	r3, #80	; 0x50
 8003b4c:	d03b      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x106>
 8003b4e:	d900      	bls.n	8003b52 <HAL_TIM_ConfigClockSource+0x92>
 8003b50:	e072      	b.n	8003c38 <HAL_TIM_ConfigClockSource+0x178>
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d057      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x146>
 8003b56:	d900      	bls.n	8003b5a <HAL_TIM_ConfigClockSource+0x9a>
 8003b58:	e06e      	b.n	8003c38 <HAL_TIM_ConfigClockSource+0x178>
 8003b5a:	2b30      	cmp	r3, #48	; 0x30
 8003b5c:	d063      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x166>
 8003b5e:	d86b      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x178>
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d060      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x166>
 8003b64:	d868      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x178>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d05d      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x166>
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d05b      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x166>
 8003b6e:	e063      	b.n	8003c38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b80:	f000 fc18 	bl	80043b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2277      	movs	r2, #119	; 0x77
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]
      break;
 8003b9c:	e052      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bae:	f000 fc01 	bl	80043b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	01c9      	lsls	r1, r1, #7
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]
      break;
 8003bc4:	e03e      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	f000 fb72 	bl	80042bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2150      	movs	r1, #80	; 0x50
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 fbcc 	bl	800437c <TIM_ITRx_SetConfig>
      break;
 8003be4:	e02e      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf2:	001a      	movs	r2, r3
 8003bf4:	f000 fb90 	bl	8004318 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2160      	movs	r1, #96	; 0x60
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 fbbc 	bl	800437c <TIM_ITRx_SetConfig>
      break;
 8003c04:	e01e      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c12:	001a      	movs	r2, r3
 8003c14:	f000 fb52 	bl	80042bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2140      	movs	r1, #64	; 0x40
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 fbac 	bl	800437c <TIM_ITRx_SetConfig>
      break;
 8003c24:	e00e      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0019      	movs	r1, r3
 8003c30:	0010      	movs	r0, r2
 8003c32:	f000 fba3 	bl	800437c <TIM_ITRx_SetConfig>
      break;
 8003c36:	e005      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003c38:	230f      	movs	r3, #15
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
      break;
 8003c40:	e000      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003c42:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	223d      	movs	r2, #61	; 0x3d
 8003c48:	2101      	movs	r1, #1
 8003c4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	223c      	movs	r2, #60	; 0x3c
 8003c50:	2100      	movs	r1, #0
 8003c52:	5499      	strb	r1, [r3, r2]

  return status;
 8003c54:	230f      	movs	r3, #15
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	781b      	ldrb	r3, [r3, #0]
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b004      	add	sp, #16
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	ffceff88 	.word	0xffceff88
 8003c68:	ffff00ff 	.word	0xffff00ff

08003c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c94:	46c0      	nop			; (mov r8, r8)
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd80      	pop	{r7, pc}

08003cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a2b      	ldr	r2, [pc, #172]	; (8003d6c <TIM_Base_SetConfig+0xc0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_Base_SetConfig+0x20>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a2a      	ldr	r2, [pc, #168]	; (8003d70 <TIM_Base_SetConfig+0xc4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d108      	bne.n	8003cde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2270      	movs	r2, #112	; 0x70
 8003cd0:	4393      	bics	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <TIM_Base_SetConfig+0xc0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00f      	beq.n	8003d06 <TIM_Base_SetConfig+0x5a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <TIM_Base_SetConfig+0xc4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00b      	beq.n	8003d06 <TIM_Base_SetConfig+0x5a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <TIM_Base_SetConfig+0xc8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d007      	beq.n	8003d06 <TIM_Base_SetConfig+0x5a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <TIM_Base_SetConfig+0xcc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d003      	beq.n	8003d06 <TIM_Base_SetConfig+0x5a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <TIM_Base_SetConfig+0xd0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d108      	bne.n	8003d18 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a1d      	ldr	r2, [pc, #116]	; (8003d80 <TIM_Base_SetConfig+0xd4>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2280      	movs	r2, #128	; 0x80
 8003d1c:	4393      	bics	r3, r2
 8003d1e:	001a      	movs	r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <TIM_Base_SetConfig+0xc0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <TIM_Base_SetConfig+0xaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a0b      	ldr	r2, [pc, #44]	; (8003d78 <TIM_Base_SetConfig+0xcc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_Base_SetConfig+0xaa>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <TIM_Base_SetConfig+0xd0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d103      	bne.n	8003d5e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	615a      	str	r2, [r3, #20]
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b004      	add	sp, #16
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	40000400 	.word	0x40000400
 8003d74:	40002000 	.word	0x40002000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800
 8003d80:	fffffcff 	.word	0xfffffcff

08003d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4393      	bics	r3, r2
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4a2e      	ldr	r2, [pc, #184]	; (8003e6c <TIM_OC1_SetConfig+0xe8>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2203      	movs	r2, #3
 8003dba:	4393      	bics	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	4393      	bics	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <TIM_OC1_SetConfig+0xec>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <TIM_OC1_SetConfig+0x6e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a23      	ldr	r2, [pc, #140]	; (8003e74 <TIM_OC1_SetConfig+0xf0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_OC1_SetConfig+0x6e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <TIM_OC1_SetConfig+0xf4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10c      	bne.n	8003e0c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2208      	movs	r2, #8
 8003df6:	4393      	bics	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2204      	movs	r2, #4
 8003e08:	4393      	bics	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <TIM_OC1_SetConfig+0xec>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <TIM_OC1_SetConfig+0xa0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a17      	ldr	r2, [pc, #92]	; (8003e74 <TIM_OC1_SetConfig+0xf0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_OC1_SetConfig+0xa0>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a16      	ldr	r2, [pc, #88]	; (8003e78 <TIM_OC1_SetConfig+0xf4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d111      	bne.n	8003e48 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <TIM_OC1_SetConfig+0xf8>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <TIM_OC1_SetConfig+0xfc>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b006      	add	sp, #24
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	fffeff8f 	.word	0xfffeff8f
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40014400 	.word	0x40014400
 8003e78:	40014800 	.word	0x40014800
 8003e7c:	fffffeff 	.word	0xfffffeff
 8003e80:	fffffdff 	.word	0xfffffdff

08003e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	4393      	bics	r3, r2
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a2c      	ldr	r2, [pc, #176]	; (8003f64 <TIM_OC2_SetConfig+0xe0>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	; (8003f68 <TIM_OC2_SetConfig+0xe4>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	4393      	bics	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a22      	ldr	r2, [pc, #136]	; (8003f6c <TIM_OC2_SetConfig+0xe8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10d      	bne.n	8003f02 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2280      	movs	r2, #128	; 0x80
 8003eea:	4393      	bics	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2240      	movs	r2, #64	; 0x40
 8003efe:	4393      	bics	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <TIM_OC2_SetConfig+0xe8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <TIM_OC2_SetConfig+0x96>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <TIM_OC2_SetConfig+0xec>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_OC2_SetConfig+0x96>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <TIM_OC2_SetConfig+0xf0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d113      	bne.n	8003f42 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <TIM_OC2_SetConfig+0xf4>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <TIM_OC2_SetConfig+0xf8>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	621a      	str	r2, [r3, #32]
}
 8003f5c:	46c0      	nop			; (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b006      	add	sp, #24
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	feff8fff 	.word	0xfeff8fff
 8003f68:	fffffcff 	.word	0xfffffcff
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800
 8003f78:	fffffbff 	.word	0xfffffbff
 8003f7c:	fffff7ff 	.word	0xfffff7ff

08003f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4a31      	ldr	r2, [pc, #196]	; (800405c <TIM_OC3_SetConfig+0xdc>)
 8003f96:	401a      	ands	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <TIM_OC3_SetConfig+0xe0>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	4393      	bics	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	; (8004064 <TIM_OC3_SetConfig+0xe4>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	; (8004068 <TIM_OC3_SetConfig+0xe8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10d      	bne.n	8003ffa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <TIM_OC3_SetConfig+0xec>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <TIM_OC3_SetConfig+0xf0>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <TIM_OC3_SetConfig+0xe8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d007      	beq.n	8004012 <TIM_OC3_SetConfig+0x92>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <TIM_OC3_SetConfig+0xf4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_OC3_SetConfig+0x92>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1a      	ldr	r2, [pc, #104]	; (8004078 <TIM_OC3_SetConfig+0xf8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d113      	bne.n	800403a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <TIM_OC3_SetConfig+0xfc>)
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4a18      	ldr	r2, [pc, #96]	; (8004080 <TIM_OC3_SetConfig+0x100>)
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	b006      	add	sp, #24
 800405a:	bd80      	pop	{r7, pc}
 800405c:	fffffeff 	.word	0xfffffeff
 8004060:	fffeff8f 	.word	0xfffeff8f
 8004064:	fffffdff 	.word	0xfffffdff
 8004068:	40012c00 	.word	0x40012c00
 800406c:	fffff7ff 	.word	0xfffff7ff
 8004070:	fffffbff 	.word	0xfffffbff
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800
 800407c:	ffffefff 	.word	0xffffefff
 8004080:	ffffdfff 	.word	0xffffdfff

08004084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <TIM_OC4_SetConfig+0xa8>)
 800409a:	401a      	ands	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC4_SetConfig+0xac>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC4_SetConfig+0xb0>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <TIM_OC4_SetConfig+0xb4>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	031b      	lsls	r3, r3, #12
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <TIM_OC4_SetConfig+0xb8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d007      	beq.n	80040f4 <TIM_OC4_SetConfig+0x70>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a16      	ldr	r2, [pc, #88]	; (8004140 <TIM_OC4_SetConfig+0xbc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_OC4_SetConfig+0x70>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a15      	ldr	r2, [pc, #84]	; (8004144 <TIM_OC4_SetConfig+0xc0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d109      	bne.n	8004108 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4a14      	ldr	r2, [pc, #80]	; (8004148 <TIM_OC4_SetConfig+0xc4>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	46bd      	mov	sp, r7
 8004126:	b006      	add	sp, #24
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	ffffefff 	.word	0xffffefff
 8004130:	feff8fff 	.word	0xfeff8fff
 8004134:	fffffcff 	.word	0xfffffcff
 8004138:	ffffdfff 	.word	0xffffdfff
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800
 8004148:	ffffbfff 	.word	0xffffbfff

0800414c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <TIM_OC5_SetConfig+0x9c>)
 8004162:	401a      	ands	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <TIM_OC5_SetConfig+0xa0>)
 8004178:	4013      	ands	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <TIM_OC5_SetConfig+0xa4>)
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <TIM_OC5_SetConfig+0xa8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <TIM_OC5_SetConfig+0x66>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <TIM_OC5_SetConfig+0xac>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_OC5_SetConfig+0x66>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a13      	ldr	r2, [pc, #76]	; (80041fc <TIM_OC5_SetConfig+0xb0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d109      	bne.n	80041c6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <TIM_OC5_SetConfig+0x9c>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	621a      	str	r2, [r3, #32]
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b006      	add	sp, #24
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	fffeffff 	.word	0xfffeffff
 80041ec:	fffeff8f 	.word	0xfffeff8f
 80041f0:	fffdffff 	.word	0xfffdffff
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800

08004200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <TIM_OC6_SetConfig+0xa0>)
 8004216:	401a      	ands	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <TIM_OC6_SetConfig+0xa4>)
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4a1a      	ldr	r2, [pc, #104]	; (80042a8 <TIM_OC6_SetConfig+0xa8>)
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	051b      	lsls	r3, r3, #20
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a16      	ldr	r2, [pc, #88]	; (80042ac <TIM_OC6_SetConfig+0xac>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d007      	beq.n	8004268 <TIM_OC6_SetConfig+0x68>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <TIM_OC6_SetConfig+0xb0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_OC6_SetConfig+0x68>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <TIM_OC6_SetConfig+0xb4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d109      	bne.n	800427c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <TIM_OC6_SetConfig+0xb8>)
 800426c:	4013      	ands	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	029b      	lsls	r3, r3, #10
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	b006      	add	sp, #24
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	ffefffff 	.word	0xffefffff
 80042a4:	feff8fff 	.word	0xfeff8fff
 80042a8:	ffdfffff 	.word	0xffdfffff
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40014400 	.word	0x40014400
 80042b4:	40014800 	.word	0x40014800
 80042b8:	fffbffff 	.word	0xfffbffff

080042bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	2201      	movs	r2, #1
 80042d4:	4393      	bics	r3, r2
 80042d6:	001a      	movs	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	22f0      	movs	r2, #240	; 0xf0
 80042e6:	4393      	bics	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	220a      	movs	r2, #10
 80042f8:	4393      	bics	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	621a      	str	r2, [r3, #32]
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b006      	add	sp, #24
 8004316:	bd80      	pop	{r7, pc}

08004318 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	2210      	movs	r2, #16
 8004330:	4393      	bics	r3, r2
 8004332:	001a      	movs	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4a0d      	ldr	r2, [pc, #52]	; (8004378 <TIM_TI2_ConfigInputStage+0x60>)
 8004342:	4013      	ands	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	031b      	lsls	r3, r3, #12
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	22a0      	movs	r2, #160	; 0xa0
 8004354:	4393      	bics	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	46bd      	mov	sp, r7
 8004372:	b006      	add	sp, #24
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	ffff0fff 	.word	0xffff0fff

0800437c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <TIM_ITRx_SetConfig+0x34>)
 8004390:	4013      	ands	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	2207      	movs	r2, #7
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	609a      	str	r2, [r3, #8]
}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b004      	add	sp, #16
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	ffcfff8f 	.word	0xffcfff8f

080043b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <TIM_ETR_SetConfig+0x3c>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	021a      	lsls	r2, r3, #8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4313      	orrs	r3, r2
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	609a      	str	r2, [r3, #8]
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b006      	add	sp, #24
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	ffff00ff 	.word	0xffff00ff

080043f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	221f      	movs	r2, #31
 8004404:	4013      	ands	r3, r2
 8004406:	2201      	movs	r2, #1
 8004408:	409a      	lsls	r2, r3
 800440a:	0013      	movs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	43d2      	mvns	r2, r2
 8004416:	401a      	ands	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	211f      	movs	r1, #31
 8004424:	400b      	ands	r3, r1
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4099      	lsls	r1, r3
 800442a:	000b      	movs	r3, r1
 800442c:	431a      	orrs	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	b006      	add	sp, #24
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	223c      	movs	r2, #60	; 0x3c
 800444a:	5c9b      	ldrb	r3, [r3, r2]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004450:	2302      	movs	r3, #2
 8004452:	e04a      	b.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	223c      	movs	r2, #60	; 0x3c
 8004458:	2101      	movs	r1, #1
 800445a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	223d      	movs	r2, #61	; 0x3d
 8004460:	2102      	movs	r1, #2
 8004462:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d108      	bne.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004482:	4013      	ands	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2270      	movs	r2, #112	; 0x70
 8004494:	4393      	bics	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a11      	ldr	r2, [pc, #68]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a10      	ldr	r2, [pc, #64]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10c      	bne.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2280      	movs	r2, #128	; 0x80
 80044c2:	4393      	bics	r3, r2
 80044c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	223d      	movs	r2, #61	; 0x3d
 80044dc:	2101      	movs	r1, #1
 80044de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	223c      	movs	r2, #60	; 0x3c
 80044e4:	2100      	movs	r1, #0
 80044e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b004      	add	sp, #16
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	ff0fffff 	.word	0xff0fffff
 80044fc:	40000400 	.word	0x40000400

08004500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	b002      	add	sp, #8
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b002      	add	sp, #8
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b002      	add	sp, #8
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e046      	b.n	80045d0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2288      	movs	r2, #136	; 0x88
 8004546:	589b      	ldr	r3, [r3, r2]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2284      	movs	r2, #132	; 0x84
 8004550:	2100      	movs	r1, #0
 8004552:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	0018      	movs	r0, r3
 8004558:	f7fc fb14 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2288      	movs	r2, #136	; 0x88
 8004560:	2124      	movs	r1, #36	; 0x24
 8004562:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2101      	movs	r1, #1
 8004570:	438a      	bics	r2, r1
 8004572:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	0018      	movs	r0, r3
 8004580:	f000 f9aa 	bl	80048d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0018      	movs	r0, r3
 8004588:	f000 f828 	bl	80045dc <UART_SetConfig>
 800458c:	0003      	movs	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e01c      	b.n	80045d0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	490d      	ldr	r1, [pc, #52]	; (80045d8 <HAL_UART_Init+0xa8>)
 80045a2:	400a      	ands	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	212a      	movs	r1, #42	; 0x2a
 80045b2:	438a      	bics	r2, r1
 80045b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2101      	movs	r1, #1
 80045c2:	430a      	orrs	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0018      	movs	r0, r3
 80045ca:	f000 fa39 	bl	8004a40 <UART_CheckIdleState>
 80045ce:	0003      	movs	r3, r0
}
 80045d0:	0018      	movs	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b002      	add	sp, #8
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	ffffb7ff 	.word	0xffffb7ff

080045dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045e4:	231e      	movs	r3, #30
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4aab      	ldr	r2, [pc, #684]	; (80048b8 <UART_SetConfig+0x2dc>)
 800460c:	4013      	ands	r3, r2
 800460e:	0019      	movs	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	430a      	orrs	r2, r1
 8004618:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4aa6      	ldr	r2, [pc, #664]	; (80048bc <UART_SetConfig+0x2e0>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4a9d      	ldr	r2, [pc, #628]	; (80048c0 <UART_SetConfig+0x2e4>)
 800464a:	4013      	ands	r3, r2
 800464c:	0019      	movs	r1, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	220f      	movs	r2, #15
 8004660:	4393      	bics	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a93      	ldr	r2, [pc, #588]	; (80048c4 <UART_SetConfig+0x2e8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d127      	bne.n	80046ca <UART_SetConfig+0xee>
 800467a:	4b93      	ldr	r3, [pc, #588]	; (80048c8 <UART_SetConfig+0x2ec>)
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	2203      	movs	r2, #3
 8004680:	4013      	ands	r3, r2
 8004682:	2b03      	cmp	r3, #3
 8004684:	d017      	beq.n	80046b6 <UART_SetConfig+0xda>
 8004686:	d81b      	bhi.n	80046c0 <UART_SetConfig+0xe4>
 8004688:	2b02      	cmp	r3, #2
 800468a:	d00a      	beq.n	80046a2 <UART_SetConfig+0xc6>
 800468c:	d818      	bhi.n	80046c0 <UART_SetConfig+0xe4>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <UART_SetConfig+0xbc>
 8004692:	2b01      	cmp	r3, #1
 8004694:	d00a      	beq.n	80046ac <UART_SetConfig+0xd0>
 8004696:	e013      	b.n	80046c0 <UART_SetConfig+0xe4>
 8004698:	231f      	movs	r3, #31
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	e021      	b.n	80046e6 <UART_SetConfig+0x10a>
 80046a2:	231f      	movs	r3, #31
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	2202      	movs	r2, #2
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e01c      	b.n	80046e6 <UART_SetConfig+0x10a>
 80046ac:	231f      	movs	r3, #31
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	2204      	movs	r2, #4
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	e017      	b.n	80046e6 <UART_SetConfig+0x10a>
 80046b6:	231f      	movs	r3, #31
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	2208      	movs	r2, #8
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e012      	b.n	80046e6 <UART_SetConfig+0x10a>
 80046c0:	231f      	movs	r3, #31
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	2210      	movs	r2, #16
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e00d      	b.n	80046e6 <UART_SetConfig+0x10a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a7f      	ldr	r2, [pc, #508]	; (80048cc <UART_SetConfig+0x2f0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d104      	bne.n	80046de <UART_SetConfig+0x102>
 80046d4:	231f      	movs	r3, #31
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e003      	b.n	80046e6 <UART_SetConfig+0x10a>
 80046de:	231f      	movs	r3, #31
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	2210      	movs	r2, #16
 80046e4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d000      	beq.n	80046f4 <UART_SetConfig+0x118>
 80046f2:	e06f      	b.n	80047d4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80046f4:	231f      	movs	r3, #31
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d01f      	beq.n	800473e <UART_SetConfig+0x162>
 80046fe:	dc22      	bgt.n	8004746 <UART_SetConfig+0x16a>
 8004700:	2b04      	cmp	r3, #4
 8004702:	d017      	beq.n	8004734 <UART_SetConfig+0x158>
 8004704:	dc1f      	bgt.n	8004746 <UART_SetConfig+0x16a>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <UART_SetConfig+0x134>
 800470a:	2b02      	cmp	r3, #2
 800470c:	d005      	beq.n	800471a <UART_SetConfig+0x13e>
 800470e:	e01a      	b.n	8004746 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004710:	f7fe fcf0 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8004714:	0003      	movs	r3, r0
 8004716:	61bb      	str	r3, [r7, #24]
        break;
 8004718:	e01c      	b.n	8004754 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800471a:	4b6b      	ldr	r3, [pc, #428]	; (80048c8 <UART_SetConfig+0x2ec>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	2207      	movs	r2, #7
 8004722:	4013      	ands	r3, r2
 8004724:	3301      	adds	r3, #1
 8004726:	0019      	movs	r1, r3
 8004728:	4869      	ldr	r0, [pc, #420]	; (80048d0 <UART_SetConfig+0x2f4>)
 800472a:	f7fb fced 	bl	8000108 <__udivsi3>
 800472e:	0003      	movs	r3, r0
 8004730:	61bb      	str	r3, [r7, #24]
        break;
 8004732:	e00f      	b.n	8004754 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004734:	f7fe fc94 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8004738:	0003      	movs	r3, r0
 800473a:	61bb      	str	r3, [r7, #24]
        break;
 800473c:	e00a      	b.n	8004754 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	61bb      	str	r3, [r7, #24]
        break;
 8004744:	e006      	b.n	8004754 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800474a:	231e      	movs	r3, #30
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	2201      	movs	r2, #1
 8004750:	701a      	strb	r2, [r3, #0]
        break;
 8004752:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d100      	bne.n	800475c <UART_SetConfig+0x180>
 800475a:	e097      	b.n	800488c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004760:	4b5c      	ldr	r3, [pc, #368]	; (80048d4 <UART_SetConfig+0x2f8>)
 8004762:	0052      	lsls	r2, r2, #1
 8004764:	5ad3      	ldrh	r3, [r2, r3]
 8004766:	0019      	movs	r1, r3
 8004768:	69b8      	ldr	r0, [r7, #24]
 800476a:	f7fb fccd 	bl	8000108 <__udivsi3>
 800476e:	0003      	movs	r3, r0
 8004770:	005a      	lsls	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	18d2      	adds	r2, r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	0019      	movs	r1, r3
 8004780:	0010      	movs	r0, r2
 8004782:	f7fb fcc1 	bl	8000108 <__udivsi3>
 8004786:	0003      	movs	r3, r0
 8004788:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b0f      	cmp	r3, #15
 800478e:	d91c      	bls.n	80047ca <UART_SetConfig+0x1ee>
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	025b      	lsls	r3, r3, #9
 8004796:	429a      	cmp	r2, r3
 8004798:	d217      	bcs.n	80047ca <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	b29a      	uxth	r2, r3
 800479e:	200e      	movs	r0, #14
 80047a0:	183b      	adds	r3, r7, r0
 80047a2:	210f      	movs	r1, #15
 80047a4:	438a      	bics	r2, r1
 80047a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2207      	movs	r2, #7
 80047b0:	4013      	ands	r3, r2
 80047b2:	b299      	uxth	r1, r3
 80047b4:	183b      	adds	r3, r7, r0
 80047b6:	183a      	adds	r2, r7, r0
 80047b8:	8812      	ldrh	r2, [r2, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	183a      	adds	r2, r7, r0
 80047c4:	8812      	ldrh	r2, [r2, #0]
 80047c6:	60da      	str	r2, [r3, #12]
 80047c8:	e060      	b.n	800488c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80047ca:	231e      	movs	r3, #30
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	2201      	movs	r2, #1
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	e05b      	b.n	800488c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047d4:	231f      	movs	r3, #31
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d01f      	beq.n	800481e <UART_SetConfig+0x242>
 80047de:	dc22      	bgt.n	8004826 <UART_SetConfig+0x24a>
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d017      	beq.n	8004814 <UART_SetConfig+0x238>
 80047e4:	dc1f      	bgt.n	8004826 <UART_SetConfig+0x24a>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <UART_SetConfig+0x214>
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d005      	beq.n	80047fa <UART_SetConfig+0x21e>
 80047ee:	e01a      	b.n	8004826 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f0:	f7fe fc80 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 80047f4:	0003      	movs	r3, r0
 80047f6:	61bb      	str	r3, [r7, #24]
        break;
 80047f8:	e01c      	b.n	8004834 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80047fa:	4b33      	ldr	r3, [pc, #204]	; (80048c8 <UART_SetConfig+0x2ec>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2207      	movs	r2, #7
 8004802:	4013      	ands	r3, r2
 8004804:	3301      	adds	r3, #1
 8004806:	0019      	movs	r1, r3
 8004808:	4831      	ldr	r0, [pc, #196]	; (80048d0 <UART_SetConfig+0x2f4>)
 800480a:	f7fb fc7d 	bl	8000108 <__udivsi3>
 800480e:	0003      	movs	r3, r0
 8004810:	61bb      	str	r3, [r7, #24]
        break;
 8004812:	e00f      	b.n	8004834 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004814:	f7fe fc24 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8004818:	0003      	movs	r3, r0
 800481a:	61bb      	str	r3, [r7, #24]
        break;
 800481c:	e00a      	b.n	8004834 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	61bb      	str	r3, [r7, #24]
        break;
 8004824:	e006      	b.n	8004834 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800482a:	231e      	movs	r3, #30
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]
        break;
 8004832:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d028      	beq.n	800488c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483e:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <UART_SetConfig+0x2f8>)
 8004840:	0052      	lsls	r2, r2, #1
 8004842:	5ad3      	ldrh	r3, [r2, r3]
 8004844:	0019      	movs	r1, r3
 8004846:	69b8      	ldr	r0, [r7, #24]
 8004848:	f7fb fc5e 	bl	8000108 <__udivsi3>
 800484c:	0003      	movs	r3, r0
 800484e:	001a      	movs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	18d2      	adds	r2, r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	0019      	movs	r1, r3
 800485e:	0010      	movs	r0, r2
 8004860:	f7fb fc52 	bl	8000108 <__udivsi3>
 8004864:	0003      	movs	r3, r0
 8004866:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b0f      	cmp	r3, #15
 800486c:	d90a      	bls.n	8004884 <UART_SetConfig+0x2a8>
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	025b      	lsls	r3, r3, #9
 8004874:	429a      	cmp	r2, r3
 8004876:	d205      	bcs.n	8004884 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	b29a      	uxth	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	e003      	b.n	800488c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004884:	231e      	movs	r3, #30
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	2201      	movs	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	226a      	movs	r2, #106	; 0x6a
 8004890:	2101      	movs	r1, #1
 8004892:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2268      	movs	r2, #104	; 0x68
 8004898:	2101      	movs	r1, #1
 800489a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80048a8:	231e      	movs	r3, #30
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	781b      	ldrb	r3, [r3, #0]
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b008      	add	sp, #32
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	cfff69f3 	.word	0xcfff69f3
 80048bc:	ffffcfff 	.word	0xffffcfff
 80048c0:	11fff4ff 	.word	0x11fff4ff
 80048c4:	40013800 	.word	0x40013800
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40004400 	.word	0x40004400
 80048d0:	02dc6c00 	.word	0x02dc6c00
 80048d4:	08004e58 	.word	0x08004e58

080048d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	2208      	movs	r2, #8
 80048e6:	4013      	ands	r3, r2
 80048e8:	d00b      	beq.n	8004902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <UART_AdvFeatureConfig+0x144>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	0019      	movs	r1, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	2201      	movs	r2, #1
 8004908:	4013      	ands	r3, r2
 800490a:	d00b      	beq.n	8004924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4a43      	ldr	r2, [pc, #268]	; (8004a20 <UART_AdvFeatureConfig+0x148>)
 8004914:	4013      	ands	r3, r2
 8004916:	0019      	movs	r1, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	2202      	movs	r2, #2
 800492a:	4013      	ands	r3, r2
 800492c:	d00b      	beq.n	8004946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4a3b      	ldr	r2, [pc, #236]	; (8004a24 <UART_AdvFeatureConfig+0x14c>)
 8004936:	4013      	ands	r3, r2
 8004938:	0019      	movs	r1, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	2204      	movs	r2, #4
 800494c:	4013      	ands	r3, r2
 800494e:	d00b      	beq.n	8004968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <UART_AdvFeatureConfig+0x150>)
 8004958:	4013      	ands	r3, r2
 800495a:	0019      	movs	r1, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	2210      	movs	r2, #16
 800496e:	4013      	ands	r3, r2
 8004970:	d00b      	beq.n	800498a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <UART_AdvFeatureConfig+0x154>)
 800497a:	4013      	ands	r3, r2
 800497c:	0019      	movs	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	2220      	movs	r2, #32
 8004990:	4013      	ands	r3, r2
 8004992:	d00b      	beq.n	80049ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <UART_AdvFeatureConfig+0x158>)
 800499c:	4013      	ands	r3, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	2240      	movs	r2, #64	; 0x40
 80049b2:	4013      	ands	r3, r2
 80049b4:	d01d      	beq.n	80049f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <UART_AdvFeatureConfig+0x15c>)
 80049be:	4013      	ands	r3, r2
 80049c0:	0019      	movs	r1, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	035b      	lsls	r3, r3, #13
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d10b      	bne.n	80049f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <UART_AdvFeatureConfig+0x160>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	0019      	movs	r1, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	2280      	movs	r2, #128	; 0x80
 80049f8:	4013      	ands	r3, r2
 80049fa:	d00b      	beq.n	8004a14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <UART_AdvFeatureConfig+0x164>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	0019      	movs	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }
}
 8004a14:	46c0      	nop			; (mov r8, r8)
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b002      	add	sp, #8
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	ffff7fff 	.word	0xffff7fff
 8004a20:	fffdffff 	.word	0xfffdffff
 8004a24:	fffeffff 	.word	0xfffeffff
 8004a28:	fffbffff 	.word	0xfffbffff
 8004a2c:	ffffefff 	.word	0xffffefff
 8004a30:	ffffdfff 	.word	0xffffdfff
 8004a34:	ffefffff 	.word	0xffefffff
 8004a38:	ff9fffff 	.word	0xff9fffff
 8004a3c:	fff7ffff 	.word	0xfff7ffff

08004a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b092      	sub	sp, #72	; 0x48
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2290      	movs	r2, #144	; 0x90
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a50:	f7fc f9d0 	bl	8000df4 <HAL_GetTick>
 8004a54:	0003      	movs	r3, r0
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2208      	movs	r2, #8
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d12d      	bne.n	8004ac2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a68:	2280      	movs	r2, #128	; 0x80
 8004a6a:	0391      	lsls	r1, r2, #14
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4a47      	ldr	r2, [pc, #284]	; (8004b8c <UART_CheckIdleState+0x14c>)
 8004a70:	9200      	str	r2, [sp, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f000 f88e 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 8004a78:	1e03      	subs	r3, r0, #0
 8004a7a:	d022      	beq.n	8004ac2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a84:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a86:	2301      	movs	r3, #1
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	f383 8810 	msr	PRIMASK, r3
}
 8004a90:	46c0      	nop			; (mov r8, r8)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2180      	movs	r1, #128	; 0x80
 8004a9e:	438a      	bics	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa8:	f383 8810 	msr	PRIMASK, r3
}
 8004aac:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2288      	movs	r2, #136	; 0x88
 8004ab2:	2120      	movs	r1, #32
 8004ab4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2284      	movs	r2, #132	; 0x84
 8004aba:	2100      	movs	r1, #0
 8004abc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e060      	b.n	8004b84 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d146      	bne.n	8004b5e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad2:	2280      	movs	r2, #128	; 0x80
 8004ad4:	03d1      	lsls	r1, r2, #15
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	; (8004b8c <UART_CheckIdleState+0x14c>)
 8004ada:	9200      	str	r2, [sp, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f000 f859 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 8004ae2:	1e03      	subs	r3, r0, #0
 8004ae4:	d03b      	beq.n	8004b5e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aea:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
 8004af0:	2301      	movs	r3, #1
 8004af2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f383 8810 	msr	PRIMASK, r3
}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4922      	ldr	r1, [pc, #136]	; (8004b90 <UART_CheckIdleState+0x150>)
 8004b08:	400a      	ands	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f383 8810 	msr	PRIMASK, r3
}
 8004b16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b18:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b20:	633b      	str	r3, [r7, #48]	; 0x30
 8004b22:	2301      	movs	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f383 8810 	msr	PRIMASK, r3
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	438a      	bics	r2, r1
 8004b3c:	609a      	str	r2, [r3, #8]
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f383 8810 	msr	PRIMASK, r3
}
 8004b48:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	228c      	movs	r2, #140	; 0x8c
 8004b4e:	2120      	movs	r1, #32
 8004b50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2284      	movs	r2, #132	; 0x84
 8004b56:	2100      	movs	r1, #0
 8004b58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e012      	b.n	8004b84 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2288      	movs	r2, #136	; 0x88
 8004b62:	2120      	movs	r1, #32
 8004b64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	228c      	movs	r2, #140	; 0x8c
 8004b6a:	2120      	movs	r1, #32
 8004b6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2284      	movs	r2, #132	; 0x84
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b010      	add	sp, #64	; 0x40
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	01ffffff 	.word	0x01ffffff
 8004b90:	fffffedf 	.word	0xfffffedf

08004b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	1dfb      	adds	r3, r7, #7
 8004ba2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba4:	e04b      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	d048      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7fc f922 	bl	8000df4 <HAL_GetTick>
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e04b      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d035      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	2208      	movs	r2, #8
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d111      	bne.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2208      	movs	r2, #8
 8004be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 f83c 	bl	8004c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2290      	movs	r2, #144	; 0x90
 8004bf4:	2108      	movs	r1, #8
 8004bf6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2284      	movs	r2, #132	; 0x84
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e02c      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69da      	ldr	r2, [r3, #28]
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	401a      	ands	r2, r3
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d112      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2280      	movs	r2, #128	; 0x80
 8004c1e:	0112      	lsls	r2, r2, #4
 8004c20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 f81f 	bl	8004c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2290      	movs	r2, #144	; 0x90
 8004c2e:	2120      	movs	r1, #32
 8004c30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2284      	movs	r2, #132	; 0x84
 8004c36:	2100      	movs	r1, #0
 8004c38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e00f      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	425a      	negs	r2, r3
 8004c4e:	4153      	adcs	r3, r2
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	001a      	movs	r2, r3
 8004c54:	1dfb      	adds	r3, r7, #7
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d0a4      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	0018      	movs	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b004      	add	sp, #16
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08e      	sub	sp, #56	; 0x38
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c70:	f3ef 8310 	mrs	r3, PRIMASK
 8004c74:	617b      	str	r3, [r7, #20]
  return(result);
 8004c76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f383 8810 	msr	PRIMASK, r3
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4926      	ldr	r1, [pc, #152]	; (8004d2c <UART_EndRxTransfer+0xc4>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca6:	623b      	str	r3, [r7, #32]
  return(result);
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
 8004cac:	2301      	movs	r3, #1
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	f383 8810 	msr	PRIMASK, r3
}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	491b      	ldr	r1, [pc, #108]	; (8004d30 <UART_EndRxTransfer+0xc8>)
 8004cc4:	400a      	ands	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	f383 8810 	msr	PRIMASK, r3
}
 8004cd2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d118      	bne.n	8004d0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f383 8810 	msr	PRIMASK, r3
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2110      	movs	r1, #16
 8004cfe:	438a      	bics	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f383 8810 	msr	PRIMASK, r3
}
 8004d0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	228c      	movs	r2, #140	; 0x8c
 8004d12:	2120      	movs	r1, #32
 8004d14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b00e      	add	sp, #56	; 0x38
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	fffffedf 	.word	0xfffffedf
 8004d30:	effffffe 	.word	0xeffffffe

08004d34 <memset>:
 8004d34:	0003      	movs	r3, r0
 8004d36:	1882      	adds	r2, r0, r2
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d100      	bne.n	8004d3e <memset+0xa>
 8004d3c:	4770      	bx	lr
 8004d3e:	7019      	strb	r1, [r3, #0]
 8004d40:	3301      	adds	r3, #1
 8004d42:	e7f9      	b.n	8004d38 <memset+0x4>

08004d44 <__libc_init_array>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	2600      	movs	r6, #0
 8004d48:	4c0c      	ldr	r4, [pc, #48]	; (8004d7c <__libc_init_array+0x38>)
 8004d4a:	4d0d      	ldr	r5, [pc, #52]	; (8004d80 <__libc_init_array+0x3c>)
 8004d4c:	1b64      	subs	r4, r4, r5
 8004d4e:	10a4      	asrs	r4, r4, #2
 8004d50:	42a6      	cmp	r6, r4
 8004d52:	d109      	bne.n	8004d68 <__libc_init_array+0x24>
 8004d54:	2600      	movs	r6, #0
 8004d56:	f000 f819 	bl	8004d8c <_init>
 8004d5a:	4c0a      	ldr	r4, [pc, #40]	; (8004d84 <__libc_init_array+0x40>)
 8004d5c:	4d0a      	ldr	r5, [pc, #40]	; (8004d88 <__libc_init_array+0x44>)
 8004d5e:	1b64      	subs	r4, r4, r5
 8004d60:	10a4      	asrs	r4, r4, #2
 8004d62:	42a6      	cmp	r6, r4
 8004d64:	d105      	bne.n	8004d72 <__libc_init_array+0x2e>
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
 8004d68:	00b3      	lsls	r3, r6, #2
 8004d6a:	58eb      	ldr	r3, [r5, r3]
 8004d6c:	4798      	blx	r3
 8004d6e:	3601      	adds	r6, #1
 8004d70:	e7ee      	b.n	8004d50 <__libc_init_array+0xc>
 8004d72:	00b3      	lsls	r3, r6, #2
 8004d74:	58eb      	ldr	r3, [r5, r3]
 8004d76:	4798      	blx	r3
 8004d78:	3601      	adds	r6, #1
 8004d7a:	e7f2      	b.n	8004d62 <__libc_init_array+0x1e>
 8004d7c:	08004e70 	.word	0x08004e70
 8004d80:	08004e70 	.word	0x08004e70
 8004d84:	08004e74 	.word	0x08004e74
 8004d88:	08004e70 	.word	0x08004e70

08004d8c <_init>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr

08004d98 <_fini>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9e:	bc08      	pop	{r3}
 8004da0:	469e      	mov	lr, r3
 8004da2:	4770      	bx	lr
