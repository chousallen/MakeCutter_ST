
saad_course.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005050  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080051dc  080051dc  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051dc  080051dc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080051e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000020  08005204  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005204  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146d4  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002775  00000000  00000000  0003475f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00036ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ebd  00000000  00000000  00038178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001533d  00000000  00000000  00039035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016790  00000000  00000000  0004e372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008969f  00000000  00000000  00064b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044ac  00000000  00000000  000ee1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f2650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080050f8 	.word	0x080050f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	080050f8 	.word	0x080050f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fe21 	bl	8000e6a <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, dir_state);
 8000228:	4b41      	ldr	r3, [pc, #260]	; (8000330 <main+0x110>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	4841      	ldr	r0, [pc, #260]	; (8000334 <main+0x114>)
 800022e:	001a      	movs	r2, r3
 8000230:	2140      	movs	r1, #64	; 0x40
 8000232:	f002 fb21 	bl	8002878 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000236:	f000 f899 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023a:	f000 fabd 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800023e:	f000 fa95 	bl	800076c <MX_DMA_Init>
  MX_ADC1_Init();
 8000242:	f000 f8d7 	bl	80003f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000246:	f000 f961 	bl	800050c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800024a:	f000 fa5b 	bl	8000704 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800024e:	f000 f99d 	bl	800058c <MX_TIM3_Init>
  MX_TIM16_Init();
 8000252:	f000 fa2d 	bl	80006b0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 3);
 8000256:	4938      	ldr	r1, [pc, #224]	; (8000338 <main+0x118>)
 8000258:	4b38      	ldr	r3, [pc, #224]	; (800033c <main+0x11c>)
 800025a:	2203      	movs	r2, #3
 800025c:	0018      	movs	r0, r3
 800025e:	f001 f99f 	bl	80015a0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000262:	4b37      	ldr	r3, [pc, #220]	; (8000340 <main+0x120>)
 8000264:	0018      	movs	r0, r3
 8000266:	f003 f951 	bl	800350c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800026a:	4b35      	ldr	r3, [pc, #212]	; (8000340 <main+0x120>)
 800026c:	2100      	movs	r1, #0
 800026e:	0018      	movs	r0, r3
 8000270:	f003 fa80 	bl	8003774 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000274:	4b32      	ldr	r3, [pc, #200]	; (8000340 <main+0x120>)
 8000276:	2104      	movs	r1, #4
 8000278:	0018      	movs	r0, r3
 800027a:	f003 fa7b 	bl	8003774 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 800027e:	4b31      	ldr	r3, [pc, #196]	; (8000344 <main+0x124>)
 8000280:	0018      	movs	r0, r3
 8000282:	f003 f943 	bl	800350c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_DMA(&htim16, (uint32_t*)tim16_dma, 1);
 8000286:	4b30      	ldr	r3, [pc, #192]	; (8000348 <main+0x128>)
 8000288:	6819      	ldr	r1, [r3, #0]
 800028a:	4b2e      	ldr	r3, [pc, #184]	; (8000344 <main+0x124>)
 800028c:	2201      	movs	r2, #1
 800028e:	0018      	movs	r0, r3
 8000290:	f003 f98a 	bl	80035a8 <HAL_TIM_Base_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(duty1 != duty1_last && duty1 <10000)
 8000294:	4b2d      	ldr	r3, [pc, #180]	; (800034c <main+0x12c>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	4b2d      	ldr	r3, [pc, #180]	; (8000350 <main+0x130>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	429a      	cmp	r2, r3
 800029e:	d00d      	beq.n	80002bc <main+0x9c>
 80002a0:	4b2a      	ldr	r3, [pc, #168]	; (800034c <main+0x12c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a2b      	ldr	r2, [pc, #172]	; (8000354 <main+0x134>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	dc08      	bgt.n	80002bc <main+0x9c>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty1);
 80002aa:	4b28      	ldr	r3, [pc, #160]	; (800034c <main+0x12c>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b24      	ldr	r3, [pc, #144]	; (8000340 <main+0x120>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	635a      	str	r2, [r3, #52]	; 0x34
		  duty1_last = duty1;
 80002b4:	4b25      	ldr	r3, [pc, #148]	; (800034c <main+0x12c>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b25      	ldr	r3, [pc, #148]	; (8000350 <main+0x130>)
 80002ba:	601a      	str	r2, [r3, #0]
	  }
	  if(duty2 != duty2_last && duty2 <10000)
 80002bc:	4b26      	ldr	r3, [pc, #152]	; (8000358 <main+0x138>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b26      	ldr	r3, [pc, #152]	; (800035c <main+0x13c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d00d      	beq.n	80002e4 <main+0xc4>
 80002c8:	4b23      	ldr	r3, [pc, #140]	; (8000358 <main+0x138>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a21      	ldr	r2, [pc, #132]	; (8000354 <main+0x134>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	dc08      	bgt.n	80002e4 <main+0xc4>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty2);
 80002d2:	4b21      	ldr	r3, [pc, #132]	; (8000358 <main+0x138>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <main+0x120>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	639a      	str	r2, [r3, #56]	; 0x38
		  duty2_last = duty2;
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <main+0x138>)
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <main+0x13c>)
 80002e2:	601a      	str	r2, [r3, #0]
	  }
	  if(step > 0)
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <main+0x140>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	dd1a      	ble.n	8000322 <main+0x102>
	  {
		  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, SET);
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <main+0x114>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	0018      	movs	r0, r3
 80002f4:	f002 fac0 	bl	8002878 <HAL_GPIO_WritePin>
		  HAL_Delay(step_interval);
 80002f8:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <main+0x144>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fe31 	bl	8000f64 <HAL_Delay>
		  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, RESET);
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <main+0x114>)
 8000304:	2200      	movs	r2, #0
 8000306:	2180      	movs	r1, #128	; 0x80
 8000308:	0018      	movs	r0, r3
 800030a:	f002 fab5 	bl	8002878 <HAL_GPIO_WritePin>
		  HAL_Delay(step_interval);
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <main+0x144>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	0018      	movs	r0, r3
 8000314:	f000 fe26 	bl	8000f64 <HAL_Delay>
		  step--;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <main+0x140>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <main+0x140>)
 8000320:	601a      	str	r2, [r3, #0]
	  }
	  tim16_cnt = __HAL_TIM_GET_COUNTER(&htim16);
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <main+0x124>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000328:	001a      	movs	r2, r3
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <main+0x148>)
 800032c:	601a      	str	r2, [r3, #0]
	  if(duty1 != duty1_last && duty1 <10000)
 800032e:	e7b1      	b.n	8000294 <main+0x74>
 8000330:	200002ec 	.word	0x200002ec
 8000334:	50000400 	.word	0x50000400
 8000338:	200002dc 	.word	0x200002dc
 800033c:	2000003c 	.word	0x2000003c
 8000340:	20000150 	.word	0x20000150
 8000344:	2000019c 	.word	0x2000019c
 8000348:	200002e4 	.word	0x200002e4
 800034c:	20000000 	.word	0x20000000
 8000350:	20000008 	.word	0x20000008
 8000354:	0000270f 	.word	0x0000270f
 8000358:	20000004 	.word	0x20000004
 800035c:	2000000c 	.word	0x2000000c
 8000360:	200002f0 	.word	0x200002f0
 8000364:	20000010 	.word	0x20000010
 8000368:	200002e8 	.word	0x200002e8

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b08d      	sub	sp, #52	; 0x34
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	2414      	movs	r4, #20
 8000374:	193b      	adds	r3, r7, r4
 8000376:	0018      	movs	r0, r3
 8000378:	231c      	movs	r3, #28
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f004 fe8f 	bl	80050a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	2314      	movs	r3, #20
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f004 fe88 	bl	80050a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2202      	movs	r2, #2
 8000394:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000396:	193b      	adds	r3, r7, r4
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800039e:	193b      	adds	r3, r7, r4
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	2240      	movs	r2, #64	; 0x40
 80003a8:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	0018      	movs	r0, r3
 80003ae:	f002 fc17 	bl	8002be0 <HAL_RCC_OscConfig>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80003b6:	f000 faad 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	003b      	movs	r3, r7
 80003bc:	2207      	movs	r2, #7
 80003be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c0:	003b      	movs	r3, r7
 80003c2:	2200      	movs	r2, #0
 80003c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	003b      	movs	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003cc:	003b      	movs	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003d2:	003b      	movs	r3, r7
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d8:	003b      	movs	r3, r7
 80003da:	2101      	movs	r1, #1
 80003dc:	0018      	movs	r0, r3
 80003de:	f002 fde3 	bl	8002fa8 <HAL_RCC_ClockConfig>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003e6:	f000 fa95 	bl	8000914 <Error_Handler>
  }
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b00d      	add	sp, #52	; 0x34
 80003f0:	bd90      	pop	{r4, r7, pc}
	...

080003f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	230c      	movs	r3, #12
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f004 fe4c 	bl	80050a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000408:	4b3c      	ldr	r3, [pc, #240]	; (80004fc <MX_ADC1_Init+0x108>)
 800040a:	4a3d      	ldr	r2, [pc, #244]	; (8000500 <MX_ADC1_Init+0x10c>)
 800040c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800040e:	4b3b      	ldr	r3, [pc, #236]	; (80004fc <MX_ADC1_Init+0x108>)
 8000410:	2280      	movs	r2, #128	; 0x80
 8000412:	05d2      	lsls	r2, r2, #23
 8000414:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000416:	4b39      	ldr	r3, [pc, #228]	; (80004fc <MX_ADC1_Init+0x108>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041c:	4b37      	ldr	r3, [pc, #220]	; (80004fc <MX_ADC1_Init+0x108>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000422:	4b36      	ldr	r3, [pc, #216]	; (80004fc <MX_ADC1_Init+0x108>)
 8000424:	2280      	movs	r2, #128	; 0x80
 8000426:	0392      	lsls	r2, r2, #14
 8000428:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800042a:	4b34      	ldr	r3, [pc, #208]	; (80004fc <MX_ADC1_Init+0x108>)
 800042c:	2204      	movs	r2, #4
 800042e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000430:	4b32      	ldr	r3, [pc, #200]	; (80004fc <MX_ADC1_Init+0x108>)
 8000432:	2200      	movs	r2, #0
 8000434:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000436:	4b31      	ldr	r3, [pc, #196]	; (80004fc <MX_ADC1_Init+0x108>)
 8000438:	2200      	movs	r2, #0
 800043a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800043c:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <MX_ADC1_Init+0x108>)
 800043e:	2201      	movs	r2, #1
 8000440:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000442:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <MX_ADC1_Init+0x108>)
 8000444:	2203      	movs	r2, #3
 8000446:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000448:	4b2c      	ldr	r3, [pc, #176]	; (80004fc <MX_ADC1_Init+0x108>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044e:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <MX_ADC1_Init+0x108>)
 8000450:	2200      	movs	r2, #0
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <MX_ADC1_Init+0x108>)
 8000456:	222c      	movs	r2, #44	; 0x2c
 8000458:	2101      	movs	r1, #1
 800045a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800045c:	4b27      	ldr	r3, [pc, #156]	; (80004fc <MX_ADC1_Init+0x108>)
 800045e:	2200      	movs	r2, #0
 8000460:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000462:	4b26      	ldr	r3, [pc, #152]	; (80004fc <MX_ADC1_Init+0x108>)
 8000464:	2207      	movs	r2, #7
 8000466:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000468:	4b24      	ldr	r3, [pc, #144]	; (80004fc <MX_ADC1_Init+0x108>)
 800046a:	2200      	movs	r2, #0
 800046c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <MX_ADC1_Init+0x108>)
 8000470:	223c      	movs	r2, #60	; 0x3c
 8000472:	2100      	movs	r1, #0
 8000474:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000476:	4b21      	ldr	r3, [pc, #132]	; (80004fc <MX_ADC1_Init+0x108>)
 8000478:	2200      	movs	r2, #0
 800047a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047c:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <MX_ADC1_Init+0x108>)
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fee8 	bl	8001254 <HAL_ADC_Init>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000488:	f000 fa44 	bl	8000914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2201      	movs	r2, #1
 8000490:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049e:	1d3a      	adds	r2, r7, #4
 80004a0:	4b16      	ldr	r3, [pc, #88]	; (80004fc <MX_ADC1_Init+0x108>)
 80004a2:	0011      	movs	r1, r2
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 fa41 	bl	800192c <HAL_ADC_ConfigChannel>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80004ae:	f000 fa31 	bl	8000914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4a13      	ldr	r2, [pc, #76]	; (8000504 <MX_ADC1_Init+0x110>)
 80004b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2204      	movs	r2, #4
 80004bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004be:	1d3a      	adds	r2, r7, #4
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_ADC1_Init+0x108>)
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fa31 	bl	800192c <HAL_ADC_ConfigChannel>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80004ce:	f000 fa21 	bl	8000914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <MX_ADC1_Init+0x114>)
 80004d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2208      	movs	r2, #8
 80004dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004de:	1d3a      	adds	r2, r7, #4
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_ADC1_Init+0x108>)
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fa21 	bl	800192c <HAL_ADC_ConfigChannel>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80004ee:	f000 fa11 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b004      	add	sp, #16
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	2000003c 	.word	0x2000003c
 8000500:	40012400 	.word	0x40012400
 8000504:	04000002 	.word	0x04000002
 8000508:	10000010 	.word	0x10000010

0800050c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_I2C1_Init+0x74>)
 8000512:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <MX_I2C1_Init+0x78>)
 8000514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_I2C1_Init+0x74>)
 8000518:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <MX_I2C1_Init+0x7c>)
 800051a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_I2C1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MX_I2C1_Init+0x74>)
 8000524:	2201      	movs	r2, #1
 8000526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_I2C1_Init+0x74>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_I2C1_Init+0x74>)
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <MX_I2C1_Init+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_I2C1_Init+0x74>)
 800053c:	2200      	movs	r2, #0
 800053e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_I2C1_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_I2C1_Init+0x74>)
 8000548:	0018      	movs	r0, r3
 800054a:	f002 fa0b 	bl	8002964 <HAL_I2C_Init>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000552:	f000 f9df 	bl	8000914 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <MX_I2C1_Init+0x74>)
 8000558:	2100      	movs	r1, #0
 800055a:	0018      	movs	r0, r3
 800055c:	f002 faa8 	bl	8002ab0 <HAL_I2CEx_ConfigAnalogFilter>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000564:	f000 f9d6 	bl	8000914 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <MX_I2C1_Init+0x74>)
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f002 faeb 	bl	8002b48 <HAL_I2CEx_ConfigDigitalFilter>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000576:	f000 f9cd 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000fc 	.word	0x200000fc
 8000584:	40005400 	.word	0x40005400
 8000588:	20303e5d 	.word	0x20303e5d

0800058c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08e      	sub	sp, #56	; 0x38
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	2328      	movs	r3, #40	; 0x28
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	0018      	movs	r0, r3
 8000598:	2310      	movs	r3, #16
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f004 fd7f 	bl	80050a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a2:	231c      	movs	r3, #28
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	0018      	movs	r0, r3
 80005a8:	230c      	movs	r3, #12
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f004 fd77 	bl	80050a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	231c      	movs	r3, #28
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f004 fd70 	bl	80050a0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <MX_TIM3_Init+0x110>)
 80005c2:	4a37      	ldr	r2, [pc, #220]	; (80006a0 <MX_TIM3_Init+0x114>)
 80005c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <MX_TIM3_Init+0x110>)
 80005c8:	222f      	movs	r2, #47	; 0x2f
 80005ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005cc:	4b33      	ldr	r3, [pc, #204]	; (800069c <MX_TIM3_Init+0x110>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <MX_TIM3_Init+0x110>)
 80005d4:	4a33      	ldr	r2, [pc, #204]	; (80006a4 <MX_TIM3_Init+0x118>)
 80005d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d8:	4b30      	ldr	r3, [pc, #192]	; (800069c <MX_TIM3_Init+0x110>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005de:	4b2f      	ldr	r3, [pc, #188]	; (800069c <MX_TIM3_Init+0x110>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005e4:	4b2d      	ldr	r3, [pc, #180]	; (800069c <MX_TIM3_Init+0x110>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f002 ff38 	bl	800345c <HAL_TIM_Base_Init>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005f0:	f000 f990 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f4:	2128      	movs	r1, #40	; 0x28
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	0152      	lsls	r2, r2, #5
 80005fc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005fe:	187a      	adds	r2, r7, r1
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <MX_TIM3_Init+0x110>)
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f003 fb8f 	bl	8003d28 <HAL_TIM_ConfigClockSource>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800060e:	f000 f981 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <MX_TIM3_Init+0x110>)
 8000614:	0018      	movs	r0, r3
 8000616:	f003 f84d 	bl	80036b4 <HAL_TIM_PWM_Init>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800061e:	f000 f979 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000622:	211c      	movs	r1, #28
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000630:	187a      	adds	r2, r7, r1
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_TIM3_Init+0x110>)
 8000634:	0011      	movs	r1, r2
 8000636:	0018      	movs	r0, r3
 8000638:	f004 f8b6 	bl	80047a8 <HAL_TIMEx_MasterConfigSynchronization>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000640:	f000 f968 	bl	8000914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000644:	003b      	movs	r3, r7
 8000646:	2260      	movs	r2, #96	; 0x60
 8000648:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2500;
 800064a:	003b      	movs	r3, r7
 800064c:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <MX_TIM3_Init+0x11c>)
 800064e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000650:	003b      	movs	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000656:	003b      	movs	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065c:	0039      	movs	r1, r7
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_TIM3_Init+0x110>)
 8000660:	2200      	movs	r2, #0
 8000662:	0018      	movs	r0, r3
 8000664:	f003 fa60 	bl	8003b28 <HAL_TIM_PWM_ConfigChannel>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800066c:	f000 f952 	bl	8000914 <Error_Handler>
  }
  sConfigOC.Pulse = 7500;
 8000670:	003b      	movs	r3, r7
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <MX_TIM3_Init+0x120>)
 8000674:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000676:	0039      	movs	r1, r7
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_TIM3_Init+0x110>)
 800067a:	2204      	movs	r2, #4
 800067c:	0018      	movs	r0, r3
 800067e:	f003 fa53 	bl	8003b28 <HAL_TIM_PWM_ConfigChannel>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8000686:	f000 f945 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <MX_TIM3_Init+0x110>)
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fad1 	bl	8000c34 <HAL_TIM_MspPostInit>

}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b00e      	add	sp, #56	; 0x38
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	20000150 	.word	0x20000150
 80006a0:	40000400 	.word	0x40000400
 80006a4:	00002710 	.word	0x00002710
 80006a8:	000009c4 	.word	0x000009c4
 80006ac:	00001d4c 	.word	0x00001d4c

080006b0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006b6:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <MX_TIM16_Init+0x48>)
 80006b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4799;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006bc:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <MX_TIM16_Init+0x4c>)
 80006be:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <MX_TIM16_Init+0x50>)
 80006ca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f002 febb 	bl	800345c <HAL_TIM_Base_Init>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80006ea:	f000 f913 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000019c 	.word	0x2000019c
 80006f8:	40014400 	.word	0x40014400
 80006fc:	000012bf 	.word	0x000012bf
 8000700:	0000ea60 	.word	0x0000ea60

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_USART2_UART_Init+0x60>)
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_USART2_UART_Init+0x64>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_USART2_UART_Init+0x60>)
 8000710:	22e1      	movs	r2, #225	; 0xe1
 8000712:	0252      	lsls	r2, r2, #9
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART2_UART_Init+0x60>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x60>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART2_UART_Init+0x60>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x60>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <MX_USART2_UART_Init+0x60>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x60>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_USART2_UART_Init+0x60>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_USART2_UART_Init+0x60>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x60>)
 800074e:	0018      	movs	r0, r3
 8000750:	f004 f8a4 	bl	800489c <HAL_UART_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000758:	f000 f8dc 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	20000244 	.word	0x20000244
 8000768:	40004400 	.word	0x40004400

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_DMA_Init+0x48>)
 8000774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_DMA_Init+0x48>)
 8000778:	2101      	movs	r1, #1
 800077a:	430a      	orrs	r2, r1
 800077c:	639a      	str	r2, [r3, #56]	; 0x38
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_DMA_Init+0x48>)
 8000780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2009      	movs	r0, #9
 8000790:	f001 fc7a 	bl	8002088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000794:	2009      	movs	r0, #9
 8000796:	f001 fc8c 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200a      	movs	r0, #10
 80007a0:	f001 fc72 	bl	8002088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007a4:	200a      	movs	r0, #10
 80007a6:	f001 fc84 	bl	80020b2 <HAL_NVIC_EnableIRQ>

}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	40021000 	.word	0x40021000

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b08b      	sub	sp, #44	; 0x2c
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	2414      	movs	r4, #20
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	0018      	movs	r0, r3
 80007c4:	2314      	movs	r3, #20
 80007c6:	001a      	movs	r2, r3
 80007c8:	2100      	movs	r1, #0
 80007ca:	f004 fc69 	bl	80050a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <MX_GPIO_Init+0x114>)
 80007d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d2:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <MX_GPIO_Init+0x114>)
 80007d4:	2104      	movs	r1, #4
 80007d6:	430a      	orrs	r2, r1
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
 80007da:	4b3c      	ldr	r3, [pc, #240]	; (80008cc <MX_GPIO_Init+0x114>)
 80007dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007de:	2204      	movs	r2, #4
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	4b39      	ldr	r3, [pc, #228]	; (80008cc <MX_GPIO_Init+0x114>)
 80007e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ea:	4b38      	ldr	r3, [pc, #224]	; (80008cc <MX_GPIO_Init+0x114>)
 80007ec:	2120      	movs	r1, #32
 80007ee:	430a      	orrs	r2, r1
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
 80007f2:	4b36      	ldr	r3, [pc, #216]	; (80008cc <MX_GPIO_Init+0x114>)
 80007f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f6:	2220      	movs	r2, #32
 80007f8:	4013      	ands	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b33      	ldr	r3, [pc, #204]	; (80008cc <MX_GPIO_Init+0x114>)
 8000800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <MX_GPIO_Init+0x114>)
 8000804:	2101      	movs	r1, #1
 8000806:	430a      	orrs	r2, r1
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
 800080a:	4b30      	ldr	r3, [pc, #192]	; (80008cc <MX_GPIO_Init+0x114>)
 800080c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080e:	2201      	movs	r2, #1
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_GPIO_Init+0x114>)
 8000818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_GPIO_Init+0x114>)
 800081c:	2102      	movs	r1, #2
 800081e:	430a      	orrs	r2, r1
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_GPIO_Init+0x114>)
 8000824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000826:	2202      	movs	r2, #2
 8000828:	4013      	ands	r3, r2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	0018      	movs	r0, r3
 8000838:	f002 f81e 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_GPIO_Init+0x118>)
 800083e:	2200      	movs	r2, #0
 8000840:	21c0      	movs	r1, #192	; 0xc0
 8000842:	0018      	movs	r0, r3
 8000844:	f002 f818 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	0192      	lsls	r2, r2, #6
 800084e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <MX_GPIO_Init+0x11c>)
 8000854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800085c:	193b      	adds	r3, r7, r4
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000860:	0019      	movs	r1, r3
 8000862:	0010      	movs	r0, r2
 8000864:	f001 fe96 	bl	8002594 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2220      	movs	r2, #32
 800086c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2201      	movs	r2, #1
 8000872:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2203      	movs	r2, #3
 800087e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000880:	193a      	adds	r2, r7, r4
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fe83 	bl	8002594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800088e:	0021      	movs	r1, r4
 8000890:	187b      	adds	r3, r7, r1
 8000892:	22c0      	movs	r2, #192	; 0xc0
 8000894:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2201      	movs	r2, #1
 800089a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <MX_GPIO_Init+0x118>)
 80008ac:	0019      	movs	r1, r3
 80008ae:	0010      	movs	r0, r2
 80008b0:	f001 fe70 	bl	8002594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2007      	movs	r0, #7
 80008ba:	f001 fbe5 	bl	8002088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008be:	2007      	movs	r0, #7
 80008c0:	f001 fbf7 	bl	80020b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b00b      	add	sp, #44	; 0x2c
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	50000400 	.word	0x50000400
 80008d4:	10110000 	.word	0x10110000
 80008d8:	50000800 	.word	0x50000800

080008dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d10a      	bne.n	8000904 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		cnt ++;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008f6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2120      	movs	r1, #32
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 ffd7 	bl	80028b2 <HAL_GPIO_TogglePin>
	}
	//ratio = cnt/sec;
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40000400 	.word	0x40000400
 8000910:	200002d8 	.word	0x200002d8

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x44>)
 8000928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_MspInit+0x44>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	641a      	str	r2, [r3, #64]	; 0x40
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x44>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x44>)
 8000940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_MspInit+0x44>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	0549      	lsls	r1, r1, #21
 8000948:	430a      	orrs	r2, r1
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_MspInit+0x44>)
 800094e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	055b      	lsls	r3, r3, #21
 8000954:	4013      	ands	r3, r2
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b091      	sub	sp, #68	; 0x44
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	232c      	movs	r3, #44	; 0x2c
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	0018      	movs	r0, r3
 8000976:	2314      	movs	r3, #20
 8000978:	001a      	movs	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f004 fb90 	bl	80050a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	2410      	movs	r4, #16
 8000982:	193b      	adds	r3, r7, r4
 8000984:	0018      	movs	r0, r3
 8000986:	231c      	movs	r3, #28
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f004 fb88 	bl	80050a0 <memset>
  if(hadc->Instance==ADC1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a39      	ldr	r2, [pc, #228]	; (8000a7c <HAL_ADC_MspInit+0x114>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d16c      	bne.n	8000a74 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	01d2      	lsls	r2, r2, #7
 80009a0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	f002 fc68 	bl	8003280 <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009b4:	f7ff ffae 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009b8:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <HAL_ADC_MspInit+0x118>)
 80009ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_ADC_MspInit+0x118>)
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	0349      	lsls	r1, r1, #13
 80009c2:	430a      	orrs	r2, r1
 80009c4:	641a      	str	r2, [r3, #64]	; 0x40
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <HAL_ADC_MspInit+0x118>)
 80009c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	035b      	lsls	r3, r3, #13
 80009ce:	4013      	ands	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <HAL_ADC_MspInit+0x118>)
 80009d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d8:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <HAL_ADC_MspInit+0x118>)
 80009da:	2101      	movs	r1, #1
 80009dc:	430a      	orrs	r2, r1
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <HAL_ADC_MspInit+0x118>)
 80009e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e4:	2201      	movs	r2, #1
 80009e6:	4013      	ands	r3, r2
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80009ec:	212c      	movs	r1, #44	; 0x2c
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2213      	movs	r2, #19
 80009f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2203      	movs	r2, #3
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	187a      	adds	r2, r7, r1
 8000a02:	23a0      	movs	r3, #160	; 0xa0
 8000a04:	05db      	lsls	r3, r3, #23
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 fdc3 	bl	8002594 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a10:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <HAL_ADC_MspInit+0x120>)
 8000a12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a16:	2205      	movs	r2, #5
 8000a18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	00d2      	lsls	r2, r2, #3
 8000a3a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a3e:	2220      	movs	r2, #32
 8000a40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fb4e 	bl	80020ec <HAL_DMA_Init>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8000a54:	f7ff ff5e 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a5c:	651a      	str	r2, [r3, #80]	; 0x50
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_ADC_MspInit+0x11c>)
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	200c      	movs	r0, #12
 8000a6a:	f001 fb0d 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000a6e:	200c      	movs	r0, #12
 8000a70:	f001 fb1f 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b011      	add	sp, #68	; 0x44
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	40012400 	.word	0x40012400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	200000a0 	.word	0x200000a0
 8000a88:	40020008 	.word	0x40020008

08000a8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b091      	sub	sp, #68	; 0x44
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	232c      	movs	r3, #44	; 0x2c
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f004 fafe 	bl	80050a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	2410      	movs	r4, #16
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	231c      	movs	r3, #28
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f004 faf6 	bl	80050a0 <memset>
  if(hi2c->Instance==I2C1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <HAL_I2C_MspInit+0xb8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d13e      	bne.n	8000b3c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2240      	movs	r2, #64	; 0x40
 8000ac2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 fbd7 	bl	8003280 <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ad6:	f7ff ff1d 	bl	8000914 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_I2C_MspInit+0xbc>)
 8000adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_I2C_MspInit+0xbc>)
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_I2C_MspInit+0xbc>)
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aea:	2202      	movs	r2, #2
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af2:	212c      	movs	r1, #44	; 0x2c
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	22c0      	movs	r2, #192	; 0xc0
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2212      	movs	r2, #18
 8000b00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2206      	movs	r2, #6
 8000b12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_I2C_MspInit+0xc0>)
 8000b18:	0019      	movs	r1, r3
 8000b1a:	0010      	movs	r0, r2
 8000b1c:	f001 fd3a 	bl	8002594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_I2C_MspInit+0xbc>)
 8000b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_I2C_MspInit+0xbc>)
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	0389      	lsls	r1, r1, #14
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_I2C_MspInit+0xbc>)
 8000b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	039b      	lsls	r3, r3, #14
 8000b36:	4013      	ands	r3, r2
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b011      	add	sp, #68	; 0x44
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	50000400 	.word	0x50000400

08000b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a30      	ldr	r2, [pc, #192]	; (8000c20 <HAL_TIM_Base_MspInit+0xd0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d114      	bne.n	8000b8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b62:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <HAL_TIM_Base_MspInit+0xd4>)
 8000b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <HAL_TIM_Base_MspInit+0xd4>)
 8000b68:	2102      	movs	r1, #2
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <HAL_TIM_Base_MspInit+0xd4>)
 8000b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b72:	2202      	movs	r2, #2
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2010      	movs	r0, #16
 8000b80:	f001 fa82 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b84:	2010      	movs	r0, #16
 8000b86:	f001 fa94 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b8a:	e045      	b.n	8000c18 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM16)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a25      	ldr	r2, [pc, #148]	; (8000c28 <HAL_TIM_Base_MspInit+0xd8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d140      	bne.n	8000c18 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <HAL_TIM_Base_MspInit+0xd4>)
 8000b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <HAL_TIM_Base_MspInit+0xd4>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	0289      	lsls	r1, r1, #10
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <HAL_TIM_Base_MspInit+0xd4>)
 8000ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	029b      	lsls	r3, r3, #10
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim16_up.Instance = DMA1_Channel2;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000bb4:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <HAL_TIM_Base_MspInit+0xe0>)
 8000bb6:	601a      	str	r2, [r3, #0]
    hdma_tim16_up.Init.Request = DMA_REQUEST_TIM16_UP;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000bba:	222e      	movs	r2, #46	; 0x2e
 8000bbc:	605a      	str	r2, [r3, #4]
    hdma_tim16_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    hdma_tim16_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
    hdma_tim16_up.Init.MemInc = DMA_MINC_ENABLE;
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	611a      	str	r2, [r3, #16]
    hdma_tim16_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	0052      	lsls	r2, r2, #1
 8000bd6:	615a      	str	r2, [r3, #20]
    hdma_tim16_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	00d2      	lsls	r2, r2, #3
 8000bde:	619a      	str	r2, [r3, #24]
    hdma_tim16_up.Init.Mode = DMA_CIRCULAR;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000be2:	2220      	movs	r2, #32
 8000be4:	61da      	str	r2, [r3, #28]
    hdma_tim16_up.Init.Priority = DMA_PRIORITY_LOW;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_up) != HAL_OK)
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 fa7c 	bl	80020ec <HAL_DMA_Init>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_TIM_Base_MspInit+0xac>
      Error_Handler();
 8000bf8:	f7ff fe8c 	bl	8000914 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_up);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000c00:	621a      	str	r2, [r3, #32]
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_TIM_Base_MspInit+0xdc>)
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2015      	movs	r0, #21
 8000c0e:	f001 fa3b 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000c12:	2015      	movs	r0, #21
 8000c14:	f001 fa4d 	bl	80020b2 <HAL_NVIC_EnableIRQ>
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b004      	add	sp, #16
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40000400 	.word	0x40000400
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40014400 	.word	0x40014400
 8000c2c:	200001e8 	.word	0x200001e8
 8000c30:	4002001c 	.word	0x4002001c

08000c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	240c      	movs	r4, #12
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	0018      	movs	r0, r3
 8000c42:	2314      	movs	r3, #20
 8000c44:	001a      	movs	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	f004 fa2a 	bl	80050a0 <memset>
  if(htim->Instance==TIM3)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <HAL_TIM_MspPostInit+0x70>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d121      	bne.n	8000c9a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_TIM_MspPostInit+0x74>)
 8000c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <HAL_TIM_MspPostInit+0x74>)
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_TIM_MspPostInit+0x74>)
 8000c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c66:	2204      	movs	r2, #4
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6e:	0021      	movs	r1, r4
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	22c0      	movs	r2, #192	; 0xc0
 8000c74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2202      	movs	r2, #2
 8000c7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_TIM_MspPostInit+0x78>)
 8000c92:	0019      	movs	r1, r3
 8000c94:	0010      	movs	r0, r2
 8000c96:	f001 fc7d 	bl	8002594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b009      	add	sp, #36	; 0x24
 8000ca0:	bd90      	pop	{r4, r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	40000400 	.word	0x40000400
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	50000800 	.word	0x50000800

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b08b      	sub	sp, #44	; 0x2c
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	2414      	movs	r4, #20
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2314      	movs	r3, #20
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f004 f9ec 	bl	80050a0 <memset>
  if(huart->Instance==USART2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <HAL_UART_MspInit+0x8c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d130      	bne.n	8000d34 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	0289      	lsls	r1, r1, #10
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d06:	0021      	movs	r1, r4
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2202      	movs	r2, #2
 8000d12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2201      	movs	r2, #1
 8000d24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	187a      	adds	r2, r7, r1
 8000d28:	23a0      	movs	r3, #160	; 0xa0
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f001 fc30 	bl	8002594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b00b      	add	sp, #44	; 0x2c
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	40021000 	.word	0x40021000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d68:	f000 f8e0 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	019b      	lsls	r3, r3, #6
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f001 fdb4 	bl	80028e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <DMA1_Channel1_IRQHandler+0x14>)
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f001 fabe 	bl	8002310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	200000a0 	.word	0x200000a0

08000da0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_up);
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000da6:	0018      	movs	r0, r3
 8000da8:	f001 fab2 	bl	8002310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	200001e8 	.word	0x200001e8

08000db8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <ADC1_IRQHandler+0x14>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fc7c 	bl	80016bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	2000003c 	.word	0x2000003c

08000dd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <TIM3_IRQHandler+0x14>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f002 fda4 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	20000150 	.word	0x20000150

08000de8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <TIM16_IRQHandler+0x14>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f002 fd98 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	2000019c 	.word	0x2000019c

08000e00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <SystemInit+0x14>)
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	0512      	lsls	r2, r2, #20
 8000e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e1c:	f7ff fff0 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e20:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e22:	e003      	b.n	8000e2c <LoopCopyDataInit>

08000e24 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000e26:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e28:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e2a:	3104      	adds	r1, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <LoopForever+0xa>)
  ldr r3, =_edata
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <LoopForever+0xe>)
  adds r2, r0, r1
 8000e30:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e32:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e34:	d3f6      	bcc.n	8000e24 <CopyDataInit>
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopForever+0x12>)
  b LoopFillZerobss
 8000e38:	e002      	b.n	8000e40 <LoopFillZerobss>

08000e3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000e3c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3e:	3204      	adds	r2, #4

08000e40 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <LoopForever+0x16>)
  cmp r2, r3
 8000e42:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e44:	d3f9      	bcc.n	8000e3a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000e46:	f004 f933 	bl	80050b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4a:	f7ff f9e9 	bl	8000220 <main>

08000e4e <LoopForever>:

LoopForever:
    b LoopForever
 8000e4e:	e7fe      	b.n	8000e4e <LoopForever>
  ldr   r0, =_estack
 8000e50:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000e54:	080051e4 	.word	0x080051e4
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e5c:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8000e60:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8000e64:	200002f8 	.word	0x200002f8

08000e68 <DMAMUX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <DMAMUX1_IRQHandler>

08000e6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	2003      	movs	r0, #3
 8000e78:	f000 f80e 	bl	8000e98 <HAL_InitTick>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e001      	b.n	8000e8c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e88:	f7ff fd4a 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_InitTick+0x88>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d02b      	beq.n	8000f08 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_InitTick+0x8c>)
 8000eb2:	681c      	ldr	r4, [r3, #0]
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_InitTick+0x88>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	0019      	movs	r1, r3
 8000eba:	23fa      	movs	r3, #250	; 0xfa
 8000ebc:	0098      	lsls	r0, r3, #2
 8000ebe:	f7ff f923 	bl	8000108 <__udivsi3>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	f7ff f91e 	bl	8000108 <__udivsi3>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 f8ff 	bl	80020d2 <HAL_SYSTICK_Config>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d112      	bne.n	8000efe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d80a      	bhi.n	8000ef4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f001 f8ce 	bl	8002088 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_InitTick+0x90>)
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e00d      	b.n	8000f10 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e008      	b.n	8000f10 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000efe:	230f      	movs	r3, #15
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e003      	b.n	8000f10 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f08:	230f      	movs	r3, #15
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	781b      	ldrb	r3, [r3, #0]
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b005      	add	sp, #20
 8000f1c:	bd90      	pop	{r4, r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	2000001c 	.word	0x2000001c
 8000f24:	20000014 	.word	0x20000014
 8000f28:	20000018 	.word	0x20000018

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x1c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	001a      	movs	r2, r3
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x20>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	18d2      	adds	r2, r2, r3
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_IncTick+0x20>)
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	2000001c 	.word	0x2000001c
 8000f4c:	200002f4 	.word	0x200002f4

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <HAL_GetTick+0x10>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	200002f4 	.word	0x200002f4

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff fff0 	bl	8000f50 <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	001a      	movs	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	189b      	adds	r3, r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	f7ff ffe0 	bl	8000f50 <HAL_GetTick>
 8000f90:	0002      	movs	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b004      	add	sp, #16
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	2000001c 	.word	0x2000001c

08000fac <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	601a      	str	r2, [r3, #0]
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	ff3fffff 	.word	0xff3fffff

08000fd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	23c0      	movs	r3, #192	; 0xc0
 8000fe2:	041b      	lsls	r3, r3, #16
 8000fe4:	4013      	ands	r3, r2
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}

08000fee <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	2104      	movs	r1, #4
 8001002:	400a      	ands	r2, r1
 8001004:	2107      	movs	r1, #7
 8001006:	4091      	lsls	r1, r2
 8001008:	000a      	movs	r2, r1
 800100a:	43d2      	mvns	r2, r2
 800100c:	401a      	ands	r2, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2104      	movs	r1, #4
 8001012:	400b      	ands	r3, r1
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4099      	lsls	r1, r3
 8001018:	000b      	movs	r3, r1
 800101a:	431a      	orrs	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b004      	add	sp, #16
 8001026:	bd80      	pop	{r7, pc}

08001028 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	2104      	movs	r1, #4
 800103a:	400a      	ands	r2, r1
 800103c:	2107      	movs	r1, #7
 800103e:	4091      	lsls	r1, r2
 8001040:	000a      	movs	r2, r1
 8001042:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2104      	movs	r1, #4
 8001048:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800104a:	40da      	lsrs	r2, r3
 800104c:	0013      	movs	r3, r2
}
 800104e:	0018      	movs	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}

08001056 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	23c0      	movs	r3, #192	; 0xc0
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	4013      	ands	r3, r2
 8001068:	d101      	bne.n	800106e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800106e:	2300      	movs	r3, #0
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}

08001078 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	211f      	movs	r1, #31
 800108c:	400a      	ands	r2, r1
 800108e:	210f      	movs	r1, #15
 8001090:	4091      	lsls	r1, r2
 8001092:	000a      	movs	r2, r1
 8001094:	43d2      	mvns	r2, r2
 8001096:	401a      	ands	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	0e9b      	lsrs	r3, r3, #26
 800109c:	210f      	movs	r1, #15
 800109e:	4019      	ands	r1, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	201f      	movs	r0, #31
 80010a4:	4003      	ands	r3, r0
 80010a6:	4099      	lsls	r1, r3
 80010a8:	000b      	movs	r3, r1
 80010aa:	431a      	orrs	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b004      	add	sp, #16
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	025b      	lsls	r3, r3, #9
 80010ca:	0a5b      	lsrs	r3, r3, #9
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}

080010da <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	0252      	lsls	r2, r2, #9
 80010ec:	0a52      	lsrs	r2, r2, #9
 80010ee:	43d2      	mvns	r2, r2
 80010f0:	401a      	ands	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}

080010fe <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2203      	movs	r2, #3
 800110c:	4013      	ands	r3, r2
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	0212      	lsls	r2, r2, #8
 800112c:	43d2      	mvns	r2, r2
 800112e:	401a      	ands	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	400b      	ands	r3, r1
 8001138:	4904      	ldr	r1, [pc, #16]	; (800114c <LL_ADC_SetChannelSamplingTime+0x34>)
 800113a:	400b      	ands	r3, r1
 800113c:	431a      	orrs	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b004      	add	sp, #16
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	7fffff00 	.word	0x7fffff00

08001150 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <LL_ADC_EnableInternalRegulator+0x24>)
 800115e:	4013      	ands	r3, r2
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0552      	lsls	r2, r2, #21
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	6fffffe8 	.word	0x6fffffe8

08001178 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	055b      	lsls	r3, r3, #21
 8001188:	401a      	ands	r2, r3
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	055b      	lsls	r3, r3, #21
 800118e:	429a      	cmp	r2, r3
 8001190:	d101      	bne.n	8001196 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001196:	2300      	movs	r3, #0
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}

080011a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <LL_ADC_Enable+0x20>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	2201      	movs	r2, #1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	7fffffe8 	.word	0x7fffffe8

080011c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <LL_ADC_Disable+0x20>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	2202      	movs	r2, #2
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	7fffffe8 	.word	0x7fffffe8

080011e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <LL_ADC_IsEnabled+0x18>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <LL_ADC_IsEnabled+0x1a>
 8001200:	2300      	movs	r3, #0
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <LL_ADC_REG_StartConversion+0x20>)
 800121a:	4013      	ands	r3, r2
 800121c:	2204      	movs	r2, #4
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b002      	add	sp, #8
 800122a:	bd80      	pop	{r7, pc}
 800122c:	7fffffe8 	.word	0x7fffffe8

08001230 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2204      	movs	r2, #4
 800123e:	4013      	ands	r3, r2
 8001240:	2b04      	cmp	r3, #4
 8001242:	d101      	bne.n	8001248 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001248:	2300      	movs	r3, #0
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125c:	231f      	movs	r3, #31
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e17e      	b.n	8001578 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10a      	bne.n	8001298 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff fb6f 	bl	8000968 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2254      	movs	r2, #84	; 0x54
 8001294:	2100      	movs	r1, #0
 8001296:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff ff6b 	bl	8001178 <LL_ADC_IsInternalRegulatorEnabled>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d114      	bne.n	80012d0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7ff ff50 	bl	8001150 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012b0:	4bb3      	ldr	r3, [pc, #716]	; (8001580 <HAL_ADC_Init+0x32c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	49b3      	ldr	r1, [pc, #716]	; (8001584 <HAL_ADC_Init+0x330>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7fe ff26 	bl	8000108 <__udivsi3>
 80012bc:	0003      	movs	r3, r0
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012c2:	e002      	b.n	80012ca <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f9      	bne.n	80012c4 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff ff4f 	bl	8001178 <LL_ADC_IsInternalRegulatorEnabled>
 80012da:	1e03      	subs	r3, r0, #0
 80012dc:	d10f      	bne.n	80012fe <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	2210      	movs	r2, #16
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ee:	2201      	movs	r2, #1
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012f6:	231f      	movs	r3, #31
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0018      	movs	r0, r3
 8001304:	f7ff ff94 	bl	8001230 <LL_ADC_REG_IsConversionOngoing>
 8001308:	0003      	movs	r3, r0
 800130a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	2210      	movs	r2, #16
 8001312:	4013      	ands	r3, r2
 8001314:	d000      	beq.n	8001318 <HAL_ADC_Init+0xc4>
 8001316:	e122      	b.n	800155e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d000      	beq.n	8001320 <HAL_ADC_Init+0xcc>
 800131e:	e11e      	b.n	800155e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	4a98      	ldr	r2, [pc, #608]	; (8001588 <HAL_ADC_Init+0x334>)
 8001326:	4013      	ands	r3, r2
 8001328:	2202      	movs	r2, #2
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff ff57 	bl	80011e8 <LL_ADC_IsEnabled>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d000      	beq.n	8001340 <HAL_ADC_Init+0xec>
 800133e:	e0ad      	b.n	800149c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7e1b      	ldrb	r3, [r3, #24]
 8001348:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800134a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7e5b      	ldrb	r3, [r3, #25]
 8001350:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001352:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7e9b      	ldrb	r3, [r3, #26]
 8001358:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800135a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HAL_ADC_Init+0x116>
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	015b      	lsls	r3, r3, #5
 8001368:	e000      	b.n	800136c <HAL_ADC_Init+0x118>
 800136a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800136c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001372:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	da04      	bge.n	8001386 <HAL_ADC_Init+0x132>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	e001      	b.n	800138a <HAL_ADC_Init+0x136>
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800138a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	212c      	movs	r1, #44	; 0x2c
 8001390:	5c5b      	ldrb	r3, [r3, r1]
 8001392:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001394:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2220      	movs	r2, #32
 80013a0:	5c9b      	ldrb	r3, [r3, r2]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d115      	bne.n	80013d2 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7e9b      	ldrb	r3, [r3, #26]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	0252      	lsls	r2, r2, #9
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	e00b      	b.n	80013d2 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	2220      	movs	r2, #32
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ca:	2201      	movs	r2, #1
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00a      	beq.n	80013f0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013de:	23e0      	movs	r3, #224	; 0xe0
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013e8:	4313      	orrs	r3, r2
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	4a65      	ldr	r2, [pc, #404]	; (800158c <HAL_ADC_Init+0x338>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	0019      	movs	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	430a      	orrs	r2, r1
 8001404:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	0f9b      	lsrs	r3, r3, #30
 800140c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001412:	4313      	orrs	r3, r2
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	4313      	orrs	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	223c      	movs	r2, #60	; 0x3c
 800141e:	5c9b      	ldrb	r3, [r3, r2]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d111      	bne.n	8001448 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	0f9b      	lsrs	r3, r3, #30
 800142a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001430:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001436:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800143c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	4313      	orrs	r3, r2
 8001442:	2201      	movs	r2, #1
 8001444:	4313      	orrs	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	4a50      	ldr	r2, [pc, #320]	; (8001590 <HAL_ADC_Init+0x33c>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	430a      	orrs	r2, r1
 800145c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	23c0      	movs	r3, #192	; 0xc0
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	429a      	cmp	r2, r3
 8001468:	d018      	beq.n	800149c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	429a      	cmp	r2, r3
 8001474:	d012      	beq.n	800149c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	061b      	lsls	r3, r3, #24
 800147e:	429a      	cmp	r2, r3
 8001480:	d00c      	beq.n	800149c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <HAL_ADC_Init+0x340>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a44      	ldr	r2, [pc, #272]	; (8001598 <HAL_ADC_Init+0x344>)
 8001488:	4013      	ands	r3, r2
 800148a:	0019      	movs	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	23f0      	movs	r3, #240	; 0xf0
 8001492:	039b      	lsls	r3, r3, #14
 8001494:	401a      	ands	r2, r3
 8001496:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <HAL_ADC_Init+0x340>)
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	001a      	movs	r2, r3
 80014a6:	2100      	movs	r1, #0
 80014a8:	f7ff fda1 	bl	8000fee <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b4:	4939      	ldr	r1, [pc, #228]	; (800159c <HAL_ADC_Init+0x348>)
 80014b6:	001a      	movs	r2, r3
 80014b8:	f7ff fd99 	bl	8000fee <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2110      	movs	r1, #16
 80014d0:	4249      	negs	r1, r1
 80014d2:	430a      	orrs	r2, r1
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
 80014d6:	e018      	b.n	800150a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	039b      	lsls	r3, r3, #14
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d112      	bne.n	800150a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	221c      	movs	r2, #28
 80014f4:	4013      	ands	r3, r2
 80014f6:	2210      	movs	r2, #16
 80014f8:	4252      	negs	r2, r2
 80014fa:	409a      	lsls	r2, r3
 80014fc:	0011      	movs	r1, r2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2100      	movs	r1, #0
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fd89 	bl	8001028 <LL_ADC_GetSamplingTimeCommonChannels>
 8001516:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800151c:	429a      	cmp	r2, r3
 800151e:	d10b      	bne.n	8001538 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	2203      	movs	r2, #3
 800152c:	4393      	bics	r3, r2
 800152e:	2201      	movs	r2, #1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001536:	e01c      	b.n	8001572 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	2212      	movs	r2, #18
 800153e:	4393      	bics	r3, r2
 8001540:	2210      	movs	r2, #16
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	2201      	movs	r2, #1
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001554:	231f      	movs	r3, #31
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800155c:	e009      	b.n	8001572 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	2210      	movs	r2, #16
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800156a:	231f      	movs	r3, #31
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001572:	231f      	movs	r3, #31
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	781b      	ldrb	r3, [r3, #0]
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b008      	add	sp, #32
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000014 	.word	0x20000014
 8001584:	00030d40 	.word	0x00030d40
 8001588:	fffffefd 	.word	0xfffffefd
 800158c:	ffde0201 	.word	0xffde0201
 8001590:	1ffffc02 	.word	0x1ffffc02
 8001594:	40012708 	.word	0x40012708
 8001598:	ffc3ffff 	.word	0xffc3ffff
 800159c:	7fffff04 	.word	0x7fffff04

080015a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff fe3d 	bl	8001230 <LL_ADC_REG_IsConversionOngoing>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d16c      	bne.n	8001694 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2254      	movs	r2, #84	; 0x54
 80015be:	5c9b      	ldrb	r3, [r3, r2]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_Start_DMA+0x28>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e06c      	b.n	80016a2 <HAL_ADC_Start_DMA+0x102>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2254      	movs	r2, #84	; 0x54
 80015cc:	2101      	movs	r1, #1
 80015ce:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2201      	movs	r2, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	d113      	bne.n	8001604 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff fe01 	bl	80011e8 <LL_ADC_IsEnabled>
 80015e6:	1e03      	subs	r3, r0, #0
 80015e8:	d004      	beq.n	80015f4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff fde8 	bl	80011c4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2101      	movs	r1, #1
 8001600:	430a      	orrs	r2, r1
 8001602:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001604:	2517      	movs	r5, #23
 8001606:	197c      	adds	r4, r7, r5
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	0018      	movs	r0, r3
 800160c:	f000 fb64 	bl	8001cd8 <ADC_Enable>
 8001610:	0003      	movs	r3, r0
 8001612:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001614:	002c      	movs	r4, r5
 8001616:	193b      	adds	r3, r7, r4
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d13e      	bne.n	800169c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <HAL_ADC_Start_DMA+0x10c>)
 8001624:	4013      	ands	r3, r2
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	0052      	lsls	r2, r2, #1
 800162a:	431a      	orrs	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163a:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_ADC_Start_DMA+0x110>)
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <HAL_ADC_Start_DMA+0x114>)
 8001644:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164a:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <HAL_ADC_Start_DMA+0x118>)
 800164c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	221c      	movs	r2, #28
 8001654:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2254      	movs	r2, #84	; 0x54
 800165a:	2100      	movs	r1, #0
 800165c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2110      	movs	r1, #16
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3340      	adds	r3, #64	; 0x40
 8001678:	0019      	movs	r1, r3
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	193c      	adds	r4, r7, r4
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f000 fdbe 	bl	8002200 <HAL_DMA_Start_IT>
 8001684:	0003      	movs	r3, r0
 8001686:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff fdbd 	bl	800120c <LL_ADC_REG_StartConversion>
 8001692:	e003      	b.n	800169c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001694:	2317      	movs	r3, #23
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	2202      	movs	r2, #2
 800169a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800169c:	2317      	movs	r3, #23
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	781b      	ldrb	r3, [r3, #0]
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b006      	add	sp, #24
 80016a8:	bdb0      	pop	{r4, r5, r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	fffff0fe 	.word	0xfffff0fe
 80016b0:	08001dd5 	.word	0x08001dd5
 80016b4:	08001e9d 	.word	0x08001e9d
 80016b8:	08001ebb 	.word	0x08001ebb

080016bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d017      	beq.n	8001710 <HAL_ADC_IRQHandler+0x54>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2202      	movs	r2, #2
 80016e4:	4013      	ands	r3, r2
 80016e6:	d013      	beq.n	8001710 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	2210      	movs	r2, #16
 80016ee:	4013      	ands	r3, r2
 80016f0:	d106      	bne.n	8001700 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	0018      	movs	r0, r3
 8001704:	f000 fc04 	bl	8001f10 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2202      	movs	r2, #2
 800170e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	2204      	movs	r2, #4
 8001714:	4013      	ands	r3, r2
 8001716:	d003      	beq.n	8001720 <HAL_ADC_IRQHandler+0x64>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2204      	movs	r2, #4
 800171c:	4013      	ands	r3, r2
 800171e:	d107      	bne.n	8001730 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	2208      	movs	r2, #8
 8001724:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001726:	d04d      	beq.n	80017c4 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2208      	movs	r2, #8
 800172c:	4013      	ands	r3, r2
 800172e:	d049      	beq.n	80017c4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	2210      	movs	r2, #16
 8001736:	4013      	ands	r3, r2
 8001738:	d106      	bne.n	8001748 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff fc82 	bl	8001056 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001752:	1e03      	subs	r3, r0, #0
 8001754:	d02e      	beq.n	80017b4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7e9b      	ldrb	r3, [r3, #26]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d12a      	bne.n	80017b4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2208      	movs	r2, #8
 8001766:	4013      	ands	r3, r2
 8001768:	2b08      	cmp	r3, #8
 800176a:	d123      	bne.n	80017b4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff fd5d 	bl	8001230 <LL_ADC_REG_IsConversionOngoing>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d110      	bne.n	800179c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	210c      	movs	r1, #12
 8001786:	438a      	bics	r2, r1
 8001788:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	4a56      	ldr	r2, [pc, #344]	; (80018e8 <HAL_ADC_IRQHandler+0x22c>)
 8001790:	4013      	ands	r3, r2
 8001792:	2201      	movs	r2, #1
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	659a      	str	r2, [r3, #88]	; 0x58
 800179a:	e00b      	b.n	80017b4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	2220      	movs	r2, #32
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	2201      	movs	r2, #1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 f898 	bl	80018ec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	220c      	movs	r2, #12
 80017c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	4013      	ands	r3, r2
 80017ca:	d012      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x136>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	4013      	ands	r3, r2
 80017d2:	d00e      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	0252      	lsls	r2, r2, #9
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 f891 	bl	800190c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4013      	ands	r3, r2
 80017fa:	d014      	beq.n	8001826 <HAL_ADC_IRQHandler+0x16a>
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4013      	ands	r3, r2
 8001804:	d00f      	beq.n	8001826 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	0292      	lsls	r2, r2, #10
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fb6a 	bl	8001ef0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	0052      	lsls	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4013      	ands	r3, r2
 800182e:	d014      	beq.n	800185a <HAL_ADC_IRQHandler+0x19e>
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4013      	ands	r3, r2
 8001838:	d00f      	beq.n	800185a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	02d2      	lsls	r2, r2, #11
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fb58 	bl	8001f00 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2210      	movs	r2, #16
 800185e:	4013      	ands	r3, r2
 8001860:	d02b      	beq.n	80018ba <HAL_ADC_IRQHandler+0x1fe>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2210      	movs	r2, #16
 8001866:	4013      	ands	r3, r2
 8001868:	d027      	beq.n	80018ba <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001872:	2301      	movs	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e008      	b.n	800188a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff fc3e 	bl	80010fe <LL_ADC_REG_GetDMATransfer>
 8001882:	1e03      	subs	r3, r0, #0
 8001884:	d001      	beq.n	800188a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001886:	2301      	movs	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d110      	bne.n	80018b2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2202      	movs	r2, #2
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f000 f835 	bl	800191c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2210      	movs	r2, #16
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	019b      	lsls	r3, r3, #6
 80018c0:	4013      	ands	r3, r2
 80018c2:	d00d      	beq.n	80018e0 <HAL_ADC_IRQHandler+0x224>
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	019b      	lsls	r3, r3, #6
 80018ca:	4013      	ands	r3, r2
 80018cc:	d008      	beq.n	80018e0 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 fb25 	bl	8001f20 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	0192      	lsls	r2, r2, #6
 80018de:	601a      	str	r2, [r3, #0]
  }
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b006      	add	sp, #24
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	fffffefe 	.word	0xfffffefe

080018ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001904:	46c0      	nop			; (mov r8, r8)
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b002      	add	sp, #8
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001936:	2317      	movs	r3, #23
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2254      	movs	r2, #84	; 0x54
 8001946:	5c9b      	ldrb	r3, [r3, r2]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x24>
 800194c:	2302      	movs	r3, #2
 800194e:	e1be      	b.n	8001cce <HAL_ADC_ConfigChannel+0x3a2>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2254      	movs	r2, #84	; 0x54
 8001954:	2101      	movs	r1, #1
 8001956:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff fc67 	bl	8001230 <LL_ADC_REG_IsConversionOngoing>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d000      	beq.n	8001968 <HAL_ADC_ConfigChannel+0x3c>
 8001966:	e1a1      	b.n	8001cac <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d100      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x46>
 8001970:	e152      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	429a      	cmp	r2, r3
 800197c:	d004      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001982:	4ac2      	ldr	r2, [pc, #776]	; (8001c8c <HAL_ADC_ConfigChannel+0x360>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d108      	bne.n	800199a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0019      	movs	r1, r3
 8001992:	0010      	movs	r0, r2
 8001994:	f7ff fb90 	bl	80010b8 <LL_ADC_REG_SetSequencerChAdd>
 8001998:	e0ed      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	211f      	movs	r1, #31
 80019a4:	400b      	ands	r3, r1
 80019a6:	210f      	movs	r1, #15
 80019a8:	4099      	lsls	r1, r3
 80019aa:	000b      	movs	r3, r1
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4013      	ands	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	025b      	lsls	r3, r3, #9
 80019b8:	0a5b      	lsrs	r3, r3, #9
 80019ba:	d105      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x9c>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	221f      	movs	r2, #31
 80019c4:	4013      	ands	r3, r2
 80019c6:	e0bc      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d000      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0xa8>
 80019d2:	e0b5      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x214>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d000      	beq.n	80019e0 <HAL_ADC_ConfigChannel+0xb4>
 80019de:	e0ad      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x210>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2204      	movs	r2, #4
 80019e6:	4013      	ands	r3, r2
 80019e8:	d000      	beq.n	80019ec <HAL_ADC_ConfigChannel+0xc0>
 80019ea:	e0a5      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x20c>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2208      	movs	r2, #8
 80019f2:	4013      	ands	r3, r2
 80019f4:	d000      	beq.n	80019f8 <HAL_ADC_ConfigChannel+0xcc>
 80019f6:	e09d      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x208>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2210      	movs	r2, #16
 80019fe:	4013      	ands	r3, r2
 8001a00:	d000      	beq.n	8001a04 <HAL_ADC_ConfigChannel+0xd8>
 8001a02:	e095      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x204>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d000      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0xe4>
 8001a0e:	e08d      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x200>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2240      	movs	r2, #64	; 0x40
 8001a16:	4013      	ands	r3, r2
 8001a18:	d000      	beq.n	8001a1c <HAL_ADC_ConfigChannel+0xf0>
 8001a1a:	e085      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1fc>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	4013      	ands	r3, r2
 8001a24:	d000      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0xfc>
 8001a26:	e07d      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x1f8>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4013      	ands	r3, r2
 8001a32:	d000      	beq.n	8001a36 <HAL_ADC_ConfigChannel+0x10a>
 8001a34:	e074      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x1f4>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d000      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x118>
 8001a42:	e06b      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x1f0>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d000      	beq.n	8001a52 <HAL_ADC_ConfigChannel+0x126>
 8001a50:	e062      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x1ec>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d000      	beq.n	8001a60 <HAL_ADC_ConfigChannel+0x134>
 8001a5e:	e059      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x1e8>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	015b      	lsls	r3, r3, #5
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d151      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x1e4>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	019b      	lsls	r3, r3, #6
 8001a74:	4013      	ands	r3, r2
 8001a76:	d149      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1e0>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	01db      	lsls	r3, r3, #7
 8001a80:	4013      	ands	r3, r2
 8001a82:	d141      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x1dc>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d139      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1d8>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d131      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x1d4>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d129      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1d0>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	02db      	lsls	r3, r3, #11
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d121      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	031b      	lsls	r3, r3, #12
 8001abc:	4013      	ands	r3, r2
 8001abe:	d119      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x1c8>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	035b      	lsls	r3, r3, #13
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1c4>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	039b      	lsls	r3, r3, #14
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d109      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x1c0>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	03db      	lsls	r3, r3, #15
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d001      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0x1bc>
 8001ae4:	2316      	movs	r3, #22
 8001ae6:	e02c      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e02a      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001aec:	2315      	movs	r3, #21
 8001aee:	e028      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001af0:	2314      	movs	r3, #20
 8001af2:	e026      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001af4:	2313      	movs	r3, #19
 8001af6:	e024      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001af8:	2312      	movs	r3, #18
 8001afa:	e022      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001afc:	2311      	movs	r3, #17
 8001afe:	e020      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b00:	2310      	movs	r3, #16
 8001b02:	e01e      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b04:	230f      	movs	r3, #15
 8001b06:	e01c      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b08:	230e      	movs	r3, #14
 8001b0a:	e01a      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b0c:	230d      	movs	r3, #13
 8001b0e:	e018      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b10:	230c      	movs	r3, #12
 8001b12:	e016      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b14:	230b      	movs	r3, #11
 8001b16:	e014      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b18:	230a      	movs	r3, #10
 8001b1a:	e012      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b1c:	2309      	movs	r3, #9
 8001b1e:	e010      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b20:	2308      	movs	r3, #8
 8001b22:	e00e      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b24:	2307      	movs	r3, #7
 8001b26:	e00c      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b28:	2306      	movs	r3, #6
 8001b2a:	e00a      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	e008      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e006      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b34:	2303      	movs	r3, #3
 8001b36:	e004      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x216>
 8001b40:	2300      	movs	r3, #0
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	6852      	ldr	r2, [r2, #4]
 8001b46:	201f      	movs	r0, #31
 8001b48:	4002      	ands	r2, r0
 8001b4a:	4093      	lsls	r3, r2
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d808      	bhi.n	8001b76 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	001a      	movs	r2, r3
 8001b72:	f7ff fa81 	bl	8001078 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	001a      	movs	r2, r3
 8001b84:	f7ff fac8 	bl	8001118 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db00      	blt.n	8001b92 <HAL_ADC_ConfigChannel+0x266>
 8001b90:	e096      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b92:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <HAL_ADC_ConfigChannel+0x364>)
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff fa1d 	bl	8000fd4 <LL_ADC_GetCommonPathInternalCh>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a3c      	ldr	r2, [pc, #240]	; (8001c94 <HAL_ADC_ConfigChannel+0x368>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d123      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bb0:	d11e      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	0412      	lsls	r2, r2, #16
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	4a35      	ldr	r2, [pc, #212]	; (8001c90 <HAL_ADC_ConfigChannel+0x364>)
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	0010      	movs	r0, r2
 8001bc0:	f7ff f9f4 	bl	8000fac <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001bc4:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_ADC_ConfigChannel+0x36c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4934      	ldr	r1, [pc, #208]	; (8001c9c <HAL_ADC_ConfigChannel+0x370>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7fe fa9c 	bl	8000108 <__udivsi3>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	0013      	movs	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	189b      	adds	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	3301      	adds	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001be0:	e002      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f9      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bee:	e067      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2a      	ldr	r2, [pc, #168]	; (8001ca0 <HAL_ADC_ConfigChannel+0x374>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d162      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	03db      	lsls	r3, r3, #15
 8001c00:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c02:	d15d      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	03d2      	lsls	r2, r2, #15
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4a20      	ldr	r2, [pc, #128]	; (8001c90 <HAL_ADC_ConfigChannel+0x364>)
 8001c0e:	0019      	movs	r1, r3
 8001c10:	0010      	movs	r0, r2
 8001c12:	f7ff f9cb 	bl	8000fac <LL_ADC_SetCommonPathInternalCh>
 8001c16:	e053      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	061b      	lsls	r3, r3, #24
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d004      	beq.n	8001c2e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c28:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <HAL_ADC_ConfigChannel+0x360>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d107      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	0019      	movs	r1, r3
 8001c38:	0010      	movs	r0, r2
 8001c3a:	f7ff fa4e 	bl	80010da <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	da3c      	bge.n	8001cc0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_ADC_ConfigChannel+0x364>)
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff f9c3 	bl	8000fd4 <LL_ADC_GetCommonPathInternalCh>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_ADC_ConfigChannel+0x368>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d108      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <HAL_ADC_ConfigChannel+0x378>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_ADC_ConfigChannel+0x364>)
 8001c64:	0019      	movs	r1, r3
 8001c66:	0010      	movs	r0, r2
 8001c68:	f7ff f9a0 	bl	8000fac <LL_ADC_SetCommonPathInternalCh>
 8001c6c:	e028      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <HAL_ADC_ConfigChannel+0x374>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d123      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_ADC_ConfigChannel+0x37c>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_ADC_ConfigChannel+0x364>)
 8001c80:	0019      	movs	r1, r3
 8001c82:	0010      	movs	r0, r2
 8001c84:	f7ff f992 	bl	8000fac <LL_ADC_SetCommonPathInternalCh>
 8001c88:	e01a      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x394>
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	80000004 	.word	0x80000004
 8001c90:	40012708 	.word	0x40012708
 8001c94:	a4000200 	.word	0xa4000200
 8001c98:	20000014 	.word	0x20000014
 8001c9c:	00030d40 	.word	0x00030d40
 8001ca0:	a8000400 	.word	0xa8000400
 8001ca4:	ff7fffff 	.word	0xff7fffff
 8001ca8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cb8:	2317      	movs	r3, #23
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2254      	movs	r2, #84	; 0x54
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001cc8:	2317      	movs	r3, #23
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b006      	add	sp, #24
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)

08001cd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff fa7d 	bl	80011e8 <LL_ADC_IsEnabled>
 8001cee:	1e03      	subs	r3, r0, #0
 8001cf0:	d162      	bne.n	8001db8 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4a32      	ldr	r2, [pc, #200]	; (8001dc4 <ADC_Enable+0xec>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d00d      	beq.n	8001d1a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	2210      	movs	r2, #16
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	2201      	movs	r2, #1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e04f      	b.n	8001dba <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff fa3e 	bl	80011a0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <ADC_Enable+0xf0>)
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff f954 	bl	8000fd4 <LL_ADC_GetCommonPathInternalCh>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	4013      	ands	r3, r2
 8001d34:	d00f      	beq.n	8001d56 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <ADC_Enable+0xf4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4925      	ldr	r1, [pc, #148]	; (8001dd0 <ADC_Enable+0xf8>)
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7fe f9e3 	bl	8000108 <__udivsi3>
 8001d42:	0003      	movs	r3, r0
 8001d44:	3301      	adds	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d48:	e002      	b.n	8001d50 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f9      	bne.n	8001d4a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7e5b      	ldrb	r3, [r3, #25]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d02c      	beq.n	8001db8 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f8f7 	bl	8000f50 <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d66:	e020      	b.n	8001daa <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff fa3b 	bl	80011e8 <LL_ADC_IsEnabled>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d104      	bne.n	8001d80 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff fa10 	bl	80011a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d80:	f7ff f8e6 	bl	8000f50 <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d90d      	bls.n	8001daa <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	2210      	movs	r2, #16
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	2201      	movs	r2, #1
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e007      	b.n	8001dba <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2201      	movs	r2, #1
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d1d7      	bne.n	8001d68 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b004      	add	sp, #16
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	80000017 	.word	0x80000017
 8001dc8:	40012708 	.word	0x40012708
 8001dcc:	20000014 	.word	0x20000014
 8001dd0:	00030d40 	.word	0x00030d40

08001dd4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	2250      	movs	r2, #80	; 0x50
 8001de8:	4013      	ands	r3, r2
 8001dea:	d141      	bne.n	8001e70 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	0092      	lsls	r2, r2, #2
 8001df4:	431a      	orrs	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7ff f929 	bl	8001056 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e04:	1e03      	subs	r3, r0, #0
 8001e06:	d02e      	beq.n	8001e66 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	7e9b      	ldrb	r3, [r3, #26]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d12a      	bne.n	8001e66 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2208      	movs	r2, #8
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d123      	bne.n	8001e66 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7ff fa04 	bl	8001230 <LL_ADC_REG_IsConversionOngoing>
 8001e28:	1e03      	subs	r3, r0, #0
 8001e2a:	d110      	bne.n	8001e4e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	210c      	movs	r1, #12
 8001e38:	438a      	bics	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <ADC_DMAConvCplt+0xc4>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	2201      	movs	r2, #1
 8001e46:	431a      	orrs	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001e4c:	e00b      	b.n	8001e66 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	2220      	movs	r2, #32
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	2201      	movs	r2, #1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff fd3f 	bl	80018ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e6e:	e00f      	b.n	8001e90 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	2210      	movs	r2, #16
 8001e76:	4013      	ands	r3, r2
 8001e78:	d004      	beq.n	8001e84 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff fd4d 	bl	800191c <HAL_ADC_ErrorCallback>
}
 8001e82:	e005      	b.n	8001e90 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	0010      	movs	r0, r2
 8001e8e:	4798      	blx	r3
}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b004      	add	sp, #16
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	fffffefe 	.word	0xfffffefe

08001e9c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff fd25 	bl	80018fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b004      	add	sp, #16
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	2240      	movs	r2, #64	; 0x40
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2204      	movs	r2, #4
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff fd1a 	bl	800191c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b004      	add	sp, #16
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b002      	add	sp, #8
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001f08:	46c0      	nop			; (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b002      	add	sp, #8
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	0002      	movs	r2, r0
 8001f38:	1dfb      	adds	r3, r7, #7
 8001f3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	1dfb      	adds	r3, r7, #7
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b7f      	cmp	r3, #127	; 0x7f
 8001f42:	d809      	bhi.n	8001f58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f44:	1dfb      	adds	r3, r7, #7
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	001a      	movs	r2, r3
 8001f4a:	231f      	movs	r3, #31
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <__NVIC_EnableIRQ+0x30>)
 8001f50:	2101      	movs	r1, #1
 8001f52:	4091      	lsls	r1, r2
 8001f54:	000a      	movs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b7f      	cmp	r3, #127	; 0x7f
 8001f78:	d828      	bhi.n	8001fcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7a:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <__NVIC_SetPriority+0xd4>)
 8001f7c:	1dfb      	adds	r3, r7, #7
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	33c0      	adds	r3, #192	; 0xc0
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	589b      	ldr	r3, [r3, r2]
 8001f8a:	1dfa      	adds	r2, r7, #7
 8001f8c:	7812      	ldrb	r2, [r2, #0]
 8001f8e:	0011      	movs	r1, r2
 8001f90:	2203      	movs	r2, #3
 8001f92:	400a      	ands	r2, r1
 8001f94:	00d2      	lsls	r2, r2, #3
 8001f96:	21ff      	movs	r1, #255	; 0xff
 8001f98:	4091      	lsls	r1, r2
 8001f9a:	000a      	movs	r2, r1
 8001f9c:	43d2      	mvns	r2, r2
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	019b      	lsls	r3, r3, #6
 8001fa6:	22ff      	movs	r2, #255	; 0xff
 8001fa8:	401a      	ands	r2, r3
 8001faa:	1dfb      	adds	r3, r7, #7
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	4003      	ands	r3, r0
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fb8:	481f      	ldr	r0, [pc, #124]	; (8002038 <__NVIC_SetPriority+0xd4>)
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	33c0      	adds	r3, #192	; 0xc0
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fca:	e031      	b.n	8002030 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <__NVIC_SetPriority+0xd8>)
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	3b08      	subs	r3, #8
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3306      	adds	r3, #6
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	18d3      	adds	r3, r2, r3
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	1dfa      	adds	r2, r7, #7
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	0011      	movs	r1, r2
 8001fec:	2203      	movs	r2, #3
 8001fee:	400a      	ands	r2, r1
 8001ff0:	00d2      	lsls	r2, r2, #3
 8001ff2:	21ff      	movs	r1, #255	; 0xff
 8001ff4:	4091      	lsls	r1, r2
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	43d2      	mvns	r2, r2
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	22ff      	movs	r2, #255	; 0xff
 8002004:	401a      	ands	r2, r3
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	0018      	movs	r0, r3
 800200c:	2303      	movs	r3, #3
 800200e:	4003      	ands	r3, r0
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <__NVIC_SetPriority+0xd8>)
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	001c      	movs	r4, r3
 800201c:	230f      	movs	r3, #15
 800201e:	4023      	ands	r3, r4
 8002020:	3b08      	subs	r3, #8
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	430a      	orrs	r2, r1
 8002026:	3306      	adds	r3, #6
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	18c3      	adds	r3, r0, r3
 800202c:	3304      	adds	r3, #4
 800202e:	601a      	str	r2, [r3, #0]
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b003      	add	sp, #12
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	e000e100 	.word	0xe000e100
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	045b      	lsls	r3, r3, #17
 8002050:	429a      	cmp	r2, r3
 8002052:	d301      	bcc.n	8002058 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002054:	2301      	movs	r3, #1
 8002056:	e010      	b.n	800207a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <SysTick_Config+0x44>)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	3a01      	subs	r2, #1
 800205e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002060:	2301      	movs	r3, #1
 8002062:	425b      	negs	r3, r3
 8002064:	2103      	movs	r1, #3
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff ff7c 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SysTick_Config+0x44>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <SysTick_Config+0x44>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b002      	add	sp, #8
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	210f      	movs	r1, #15
 8002094:	187b      	adds	r3, r7, r1
 8002096:	1c02      	adds	r2, r0, #0
 8002098:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	187b      	adds	r3, r7, r1
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	0011      	movs	r1, r2
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff ff5d 	bl	8001f64 <__NVIC_SetPriority>
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b004      	add	sp, #16
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	0002      	movs	r2, r0
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b25b      	sxtb	r3, r3
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff ff33 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b002      	add	sp, #8
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff ffaf 	bl	8002040 <SysTick_Config>
 80020e2:	0003      	movs	r3, r0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e077      	b.n	80021ee <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a3d      	ldr	r2, [pc, #244]	; (80021f8 <HAL_DMA_Init+0x10c>)
 8002104:	4694      	mov	ip, r2
 8002106:	4463      	add	r3, ip
 8002108:	2114      	movs	r1, #20
 800210a:	0018      	movs	r0, r3
 800210c:	f7fd fffc 	bl	8000108 <__udivsi3>
 8002110:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002112:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2225      	movs	r2, #37	; 0x25
 800211c:	2102      	movs	r1, #2
 800211e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4934      	ldr	r1, [pc, #208]	; (80021fc <HAL_DMA_Init+0x110>)
 800212c:	400a      	ands	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6819      	ldr	r1, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 f9c3 	bl	80024f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	01db      	lsls	r3, r3, #7
 8002176:	429a      	cmp	r2, r3
 8002178:	d102      	bne.n	8002180 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	21ff      	movs	r1, #255	; 0xff
 800218a:	400a      	ands	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002196:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d011      	beq.n	80021c4 <HAL_DMA_Init+0xd8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d80d      	bhi.n	80021c4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f9ce 	bl	800254c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	e008      	b.n	80021d6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2225      	movs	r2, #37	; 0x25
 80021e0:	2101      	movs	r1, #1
 80021e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	2100      	movs	r1, #0
 80021ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	bffdfff8 	.word	0xbffdfff8
 80021fc:	ffff800f 	.word	0xffff800f

08002200 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800220e:	2317      	movs	r3, #23
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2224      	movs	r2, #36	; 0x24
 800221a:	5c9b      	ldrb	r3, [r3, r2]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_DMA_Start_IT+0x24>
 8002220:	2302      	movs	r3, #2
 8002222:	e070      	b.n	8002306 <HAL_DMA_Start_IT+0x106>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2224      	movs	r2, #36	; 0x24
 8002228:	2101      	movs	r1, #1
 800222a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2225      	movs	r2, #37	; 0x25
 8002230:	5c9b      	ldrb	r3, [r3, r2]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d157      	bne.n	80022e8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2225      	movs	r2, #37	; 0x25
 800223c:	2102      	movs	r1, #2
 800223e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2101      	movs	r1, #1
 8002252:	438a      	bics	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f909 	bl	8002474 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	210e      	movs	r1, #14
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e00f      	b.n	800229c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2104      	movs	r1, #4
 8002288:	438a      	bics	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	210a      	movs	r1, #10
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	025b      	lsls	r3, r3, #9
 80022a6:	4013      	ands	r3, r2
 80022a8:	d008      	beq.n	80022bc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0049      	lsls	r1, r1, #1
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	0049      	lsls	r1, r1, #1
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2101      	movs	r1, #1
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e007      	b.n	80022f8 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2224      	movs	r2, #36	; 0x24
 80022ec:	2100      	movs	r1, #0
 80022ee:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022f0:	2317      	movs	r3, #23
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2224      	movs	r2, #36	; 0x24
 80022fc:	2100      	movs	r1, #0
 80022fe:	5499      	strb	r1, [r3, r2]

  return status;
 8002300:	2317      	movs	r3, #23
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	781b      	ldrb	r3, [r3, #0]
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b006      	add	sp, #24
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002318:	4b55      	ldr	r3, [pc, #340]	; (8002470 <HAL_DMA_IRQHandler+0x160>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	221c      	movs	r2, #28
 800232c:	4013      	ands	r3, r2
 800232e:	2204      	movs	r2, #4
 8002330:	409a      	lsls	r2, r3
 8002332:	0013      	movs	r3, r2
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	d027      	beq.n	800238a <HAL_DMA_IRQHandler+0x7a>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2204      	movs	r2, #4
 800233e:	4013      	ands	r3, r2
 8002340:	d023      	beq.n	800238a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2220      	movs	r2, #32
 800234a:	4013      	ands	r3, r2
 800234c:	d107      	bne.n	800235e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2104      	movs	r1, #4
 800235a:	438a      	bics	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800235e:	4b44      	ldr	r3, [pc, #272]	; (8002470 <HAL_DMA_IRQHandler+0x160>)
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	221c      	movs	r2, #28
 8002368:	4013      	ands	r3, r2
 800236a:	2204      	movs	r2, #4
 800236c:	409a      	lsls	r2, r3
 800236e:	4b40      	ldr	r3, [pc, #256]	; (8002470 <HAL_DMA_IRQHandler+0x160>)
 8002370:	430a      	orrs	r2, r1
 8002372:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	2b00      	cmp	r3, #0
 800237a:	d100      	bne.n	800237e <HAL_DMA_IRQHandler+0x6e>
 800237c:	e073      	b.n	8002466 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	0010      	movs	r0, r2
 8002386:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002388:	e06d      	b.n	8002466 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	221c      	movs	r2, #28
 8002390:	4013      	ands	r3, r2
 8002392:	2202      	movs	r2, #2
 8002394:	409a      	lsls	r2, r3
 8002396:	0013      	movs	r3, r2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4013      	ands	r3, r2
 800239c:	d02e      	beq.n	80023fc <HAL_DMA_IRQHandler+0xec>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2202      	movs	r2, #2
 80023a2:	4013      	ands	r3, r2
 80023a4:	d02a      	beq.n	80023fc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2220      	movs	r2, #32
 80023ae:	4013      	ands	r3, r2
 80023b0:	d10b      	bne.n	80023ca <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	210a      	movs	r1, #10
 80023be:	438a      	bics	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2225      	movs	r2, #37	; 0x25
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_DMA_IRQHandler+0x160>)
 80023cc:	6859      	ldr	r1, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	221c      	movs	r2, #28
 80023d4:	4013      	ands	r3, r2
 80023d6:	2202      	movs	r2, #2
 80023d8:	409a      	lsls	r2, r3
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_DMA_IRQHandler+0x160>)
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2224      	movs	r2, #36	; 0x24
 80023e4:	2100      	movs	r1, #0
 80023e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03a      	beq.n	8002466 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	0010      	movs	r0, r2
 80023f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80023fa:	e034      	b.n	8002466 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	221c      	movs	r2, #28
 8002402:	4013      	ands	r3, r2
 8002404:	2208      	movs	r2, #8
 8002406:	409a      	lsls	r2, r3
 8002408:	0013      	movs	r3, r2
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	d02b      	beq.n	8002468 <HAL_DMA_IRQHandler+0x158>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2208      	movs	r2, #8
 8002414:	4013      	ands	r3, r2
 8002416:	d027      	beq.n	8002468 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	210e      	movs	r1, #14
 8002424:	438a      	bics	r2, r1
 8002426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_DMA_IRQHandler+0x160>)
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	221c      	movs	r2, #28
 8002432:	4013      	ands	r3, r2
 8002434:	2201      	movs	r2, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_DMA_IRQHandler+0x160>)
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2225      	movs	r2, #37	; 0x25
 8002448:	2101      	movs	r1, #1
 800244a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2224      	movs	r2, #36	; 0x24
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	0010      	movs	r0, r2
 8002464:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46c0      	nop			; (mov r8, r8)
}
 800246a:	46bd      	mov	sp, r7
 800246c:	b004      	add	sp, #16
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40020000 	.word	0x40020000

08002474 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800248a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002490:	2b00      	cmp	r3, #0
 8002492:	d004      	beq.n	800249e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800249c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <DMA_SetConfig+0x7c>)
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	221c      	movs	r2, #28
 80024a8:	4013      	ands	r3, r2
 80024aa:	2201      	movs	r2, #1
 80024ac:	409a      	lsls	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <DMA_SetConfig+0x7c>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d108      	bne.n	80024d6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024d4:	e007      	b.n	80024e6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	60da      	str	r2, [r3, #12]
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b004      	add	sp, #16
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	40020000 	.word	0x40020000

080024f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	001a      	movs	r2, r3
 8002502:	23ff      	movs	r3, #255	; 0xff
 8002504:	4013      	ands	r3, r2
 8002506:	3b08      	subs	r3, #8
 8002508:	2114      	movs	r1, #20
 800250a:	0018      	movs	r0, r3
 800250c:	f7fd fdfc 	bl	8000108 <__udivsi3>
 8002510:	0003      	movs	r3, r0
 8002512:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800251c:	4694      	mov	ip, r2
 800251e:	4463      	add	r3, ip
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	001a      	movs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a07      	ldr	r2, [pc, #28]	; (8002548 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800252c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	221c      	movs	r2, #28
 8002532:	4013      	ands	r3, r2
 8002534:	2201      	movs	r2, #1
 8002536:	409a      	lsls	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bd80      	pop	{r7, pc}
 8002544:	10008200 	.word	0x10008200
 8002548:	40020880 	.word	0x40020880

0800254c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	4013      	ands	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002562:	4694      	mov	ip, r2
 8002564:	4463      	add	r3, ip
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	001a      	movs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002572:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3b01      	subs	r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	4013      	ands	r3, r2
 800257c:	2201      	movs	r2, #1
 800257e:	409a      	lsls	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b004      	add	sp, #16
 800258a:	bd80      	pop	{r7, pc}
 800258c:	1000823f 	.word	0x1000823f
 8002590:	40020940 	.word	0x40020940

08002594 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025a2:	e153      	b.n	800284c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2101      	movs	r1, #1
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4091      	lsls	r1, r2
 80025ae:	000a      	movs	r2, r1
 80025b0:	4013      	ands	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d100      	bne.n	80025bc <HAL_GPIO_Init+0x28>
 80025ba:	e144      	b.n	8002846 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x38>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b12      	cmp	r3, #18
 80025ca:	d125      	bne.n	8002618 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	0092      	lsls	r2, r2, #2
 80025d6:	58d3      	ldr	r3, [r2, r3]
 80025d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2207      	movs	r2, #7
 80025de:	4013      	ands	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	409a      	lsls	r2, r3
 80025e6:	0013      	movs	r3, r2
 80025e8:	43da      	mvns	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	4013      	ands	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	220f      	movs	r2, #15
 80025f6:	401a      	ands	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2107      	movs	r1, #7
 80025fc:	400b      	ands	r3, r1
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	409a      	lsls	r2, r3
 8002602:	0013      	movs	r3, r2
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	08da      	lsrs	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3208      	adds	r2, #8
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	6979      	ldr	r1, [r7, #20]
 8002616:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	409a      	lsls	r2, r3
 8002626:	0013      	movs	r3, r2
 8002628:	43da      	mvns	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2203      	movs	r2, #3
 8002636:	401a      	ands	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	409a      	lsls	r2, r3
 800263e:	0013      	movs	r3, r2
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d00b      	beq.n	800266c <HAL_GPIO_Init+0xd8>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d007      	beq.n	800266c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002660:	2b11      	cmp	r3, #17
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b12      	cmp	r3, #18
 800266a:	d130      	bne.n	80026ce <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	409a      	lsls	r2, r3
 800267a:	0013      	movs	r3, r2
 800267c:	43da      	mvns	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	409a      	lsls	r2, r3
 800268e:	0013      	movs	r3, r2
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026a2:	2201      	movs	r2, #1
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	43da      	mvns	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	4013      	ands	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	2201      	movs	r2, #1
 80026ba:	401a      	ands	r2, r3
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d017      	beq.n	8002706 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	409a      	lsls	r2, r3
 80026e4:	0013      	movs	r3, r2
 80026e6:	43da      	mvns	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	4013      	ands	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	409a      	lsls	r2, r3
 80026f8:	0013      	movs	r3, r2
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	055b      	lsls	r3, r3, #21
 800270e:	4013      	ands	r3, r2
 8002710:	d100      	bne.n	8002714 <HAL_GPIO_Init+0x180>
 8002712:	e098      	b.n	8002846 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002714:	4a53      	ldr	r2, [pc, #332]	; (8002864 <HAL_GPIO_Init+0x2d0>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3318      	adds	r3, #24
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	589b      	ldr	r3, [r3, r2]
 8002720:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2203      	movs	r2, #3
 8002726:	4013      	ands	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	220f      	movs	r2, #15
 800272c:	409a      	lsls	r2, r3
 800272e:	0013      	movs	r3, r2
 8002730:	43da      	mvns	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	4013      	ands	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	23a0      	movs	r3, #160	; 0xa0
 800273c:	05db      	lsls	r3, r3, #23
 800273e:	429a      	cmp	r2, r3
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x1e2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a48      	ldr	r2, [pc, #288]	; (8002868 <HAL_GPIO_Init+0x2d4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x1de>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a47      	ldr	r2, [pc, #284]	; (800286c <HAL_GPIO_Init+0x2d8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x1da>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a46      	ldr	r2, [pc, #280]	; (8002870 <HAL_GPIO_Init+0x2dc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x1d6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a45      	ldr	r2, [pc, #276]	; (8002874 <HAL_GPIO_Init+0x2e0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x1d2>
 8002762:	2305      	movs	r3, #5
 8002764:	e008      	b.n	8002778 <HAL_GPIO_Init+0x1e4>
 8002766:	2306      	movs	r3, #6
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x1e4>
 800276a:	2303      	movs	r3, #3
 800276c:	e004      	b.n	8002778 <HAL_GPIO_Init+0x1e4>
 800276e:	2302      	movs	r3, #2
 8002770:	e002      	b.n	8002778 <HAL_GPIO_Init+0x1e4>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_GPIO_Init+0x1e4>
 8002776:	2300      	movs	r3, #0
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	2103      	movs	r1, #3
 800277c:	400a      	ands	r2, r1
 800277e:	00d2      	lsls	r2, r2, #3
 8002780:	4093      	lsls	r3, r2
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002788:	4936      	ldr	r1, [pc, #216]	; (8002864 <HAL_GPIO_Init+0x2d0>)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	3318      	adds	r3, #24
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002796:	4a33      	ldr	r2, [pc, #204]	; (8002864 <HAL_GPIO_Init+0x2d0>)
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	58d3      	ldr	r3, [r2, r3]
 800279c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	4013      	ands	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	025b      	lsls	r3, r3, #9
 80027b0:	4013      	ands	r3, r2
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80027bc:	4929      	ldr	r1, [pc, #164]	; (8002864 <HAL_GPIO_Init+0x2d0>)
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80027c4:	4a27      	ldr	r2, [pc, #156]	; (8002864 <HAL_GPIO_Init+0x2d0>)
 80027c6:	2384      	movs	r3, #132	; 0x84
 80027c8:	58d3      	ldr	r3, [r2, r3]
 80027ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43da      	mvns	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	4013      	ands	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	029b      	lsls	r3, r3, #10
 80027de:	4013      	ands	r3, r2
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80027ea:	491e      	ldr	r1, [pc, #120]	; (8002864 <HAL_GPIO_Init+0x2d0>)
 80027ec:	2284      	movs	r2, #132	; 0x84
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_GPIO_Init+0x2d0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	43da      	mvns	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	4013      	ands	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	035b      	lsls	r3, r3, #13
 800280a:	4013      	ands	r3, r2
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_GPIO_Init+0x2d0>)
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_GPIO_Init+0x2d0>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43da      	mvns	r2, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	4013      	ands	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	039b      	lsls	r3, r3, #14
 8002834:	4013      	ands	r3, r2
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_GPIO_Init+0x2d0>)
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	3301      	adds	r3, #1
 800284a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	40da      	lsrs	r2, r3
 8002854:	1e13      	subs	r3, r2, #0
 8002856:	d000      	beq.n	800285a <HAL_GPIO_Init+0x2c6>
 8002858:	e6a4      	b.n	80025a4 <HAL_GPIO_Init+0x10>
  }
}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b006      	add	sp, #24
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021800 	.word	0x40021800
 8002868:	50000400 	.word	0x50000400
 800286c:	50000800 	.word	0x50000800
 8002870:	50000c00 	.word	0x50000c00
 8002874:	50001400 	.word	0x50001400

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	0008      	movs	r0, r1
 8002882:	0011      	movs	r1, r2
 8002884:	1cbb      	adds	r3, r7, #2
 8002886:	1c02      	adds	r2, r0, #0
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	1c7b      	adds	r3, r7, #1
 800288c:	1c0a      	adds	r2, r1, #0
 800288e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002890:	1c7b      	adds	r3, r7, #1
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002898:	1cbb      	adds	r3, r7, #2
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028a0:	e003      	b.n	80028aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028a2:	1cbb      	adds	r3, r7, #2
 80028a4:	881a      	ldrh	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b002      	add	sp, #8
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	000a      	movs	r2, r1
 80028bc:	1cbb      	adds	r3, r7, #2
 80028be:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028c6:	1cbb      	adds	r3, r7, #2
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4013      	ands	r3, r2
 80028ce:	041a      	lsls	r2, r3, #16
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	1cb9      	adds	r1, r7, #2
 80028d6:	8809      	ldrh	r1, [r1, #0]
 80028d8:	400b      	ands	r3, r1
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b004      	add	sp, #16
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	0002      	movs	r2, r0
 80028f0:	1dbb      	adds	r3, r7, #6
 80028f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	1dba      	adds	r2, r7, #6
 80028fa:	8812      	ldrh	r2, [r2, #0]
 80028fc:	4013      	ands	r3, r2
 80028fe:	d008      	beq.n	8002912 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002902:	1dba      	adds	r2, r7, #6
 8002904:	8812      	ldrh	r2, [r2, #0]
 8002906:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002908:	1dbb      	adds	r3, r7, #6
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 f815 	bl	800293c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	1dba      	adds	r2, r7, #6
 8002918:	8812      	ldrh	r2, [r2, #0]
 800291a:	4013      	ands	r3, r2
 800291c:	d008      	beq.n	8002930 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002920:	1dba      	adds	r2, r7, #6
 8002922:	8812      	ldrh	r2, [r2, #0]
 8002924:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002926:	1dbb      	adds	r3, r7, #6
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 f810 	bl	8002950 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	46bd      	mov	sp, r7
 8002934:	b002      	add	sp, #8
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021800 	.word	0x40021800

0800293c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	0002      	movs	r2, r0
 8002944:	1dbb      	adds	r3, r7, #6
 8002946:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	0002      	movs	r2, r0
 8002958:	1dbb      	adds	r3, r7, #6
 800295a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800295c:	46c0      	nop			; (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e08f      	b.n	8002a96 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2241      	movs	r2, #65	; 0x41
 800297a:	5c9b      	ldrb	r3, [r3, r2]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d107      	bne.n	8002992 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2240      	movs	r2, #64	; 0x40
 8002986:	2100      	movs	r1, #0
 8002988:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f7fe f87d 	bl	8000a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2241      	movs	r2, #65	; 0x41
 8002996:	2124      	movs	r1, #36	; 0x24
 8002998:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	438a      	bics	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	493b      	ldr	r1, [pc, #236]	; (8002aa0 <HAL_I2C_Init+0x13c>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4938      	ldr	r1, [pc, #224]	; (8002aa4 <HAL_I2C_Init+0x140>)
 80029c4:	400a      	ands	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d108      	bne.n	80029e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	0209      	lsls	r1, r1, #8
 80029dc:	430a      	orrs	r2, r1
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	e007      	b.n	80029f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2184      	movs	r1, #132	; 0x84
 80029ec:	0209      	lsls	r1, r1, #8
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d109      	bne.n	8002a0e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	0109      	lsls	r1, r1, #4
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	e007      	b.n	8002a1e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4923      	ldr	r1, [pc, #140]	; (8002aa8 <HAL_I2C_Init+0x144>)
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4920      	ldr	r1, [pc, #128]	; (8002aac <HAL_I2C_Init+0x148>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	491a      	ldr	r1, [pc, #104]	; (8002aa4 <HAL_I2C_Init+0x140>)
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69d9      	ldr	r1, [r3, #28]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1a      	ldr	r2, [r3, #32]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2101      	movs	r1, #1
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2241      	movs	r2, #65	; 0x41
 8002a82:	2120      	movs	r1, #32
 8002a84:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2242      	movs	r2, #66	; 0x42
 8002a90:	2100      	movs	r1, #0
 8002a92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b002      	add	sp, #8
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	f0ffffff 	.word	0xf0ffffff
 8002aa4:	ffff7fff 	.word	0xffff7fff
 8002aa8:	fffff7ff 	.word	0xfffff7ff
 8002aac:	02008000 	.word	0x02008000

08002ab0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2241      	movs	r2, #65	; 0x41
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d138      	bne.n	8002b38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2240      	movs	r2, #64	; 0x40
 8002aca:	5c9b      	ldrb	r3, [r3, r2]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e032      	b.n	8002b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	2101      	movs	r1, #1
 8002ada:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2241      	movs	r2, #65	; 0x41
 8002ae0:	2124      	movs	r1, #36	; 0x24
 8002ae2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2101      	movs	r1, #1
 8002af0:	438a      	bics	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4911      	ldr	r1, [pc, #68]	; (8002b44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002b00:	400a      	ands	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2241      	movs	r2, #65	; 0x41
 8002b28:	2120      	movs	r1, #32
 8002b2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e000      	b.n	8002b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b38:	2302      	movs	r3, #2
  }
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	ffffefff 	.word	0xffffefff

08002b48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2241      	movs	r2, #65	; 0x41
 8002b56:	5c9b      	ldrb	r3, [r3, r2]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d139      	bne.n	8002bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2240      	movs	r2, #64	; 0x40
 8002b62:	5c9b      	ldrb	r3, [r3, r2]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e033      	b.n	8002bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2240      	movs	r2, #64	; 0x40
 8002b70:	2101      	movs	r1, #1
 8002b72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2241      	movs	r2, #65	; 0x41
 8002b78:	2124      	movs	r1, #36	; 0x24
 8002b7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	438a      	bics	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2241      	movs	r2, #65	; 0x41
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2240      	movs	r2, #64	; 0x40
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
  }
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b004      	add	sp, #16
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	fffff0ff 	.word	0xfffff0ff

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e1d0      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d100      	bne.n	8002bfe <HAL_RCC_OscConfig+0x1e>
 8002bfc:	e069      	b.n	8002cd2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfe:	4bc8      	ldr	r3, [pc, #800]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2238      	movs	r2, #56	; 0x38
 8002c04:	4013      	ands	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d15d      	bne.n	8002cd2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e1bc      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	025b      	lsls	r3, r3, #9
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_OscConfig+0x56>
 8002c26:	4bbe      	ldr	r3, [pc, #760]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4bbd      	ldr	r3, [pc, #756]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c2c:	2180      	movs	r1, #128	; 0x80
 8002c2e:	0249      	lsls	r1, r1, #9
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e020      	b.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	23a0      	movs	r3, #160	; 0xa0
 8002c3c:	02db      	lsls	r3, r3, #11
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d10e      	bne.n	8002c60 <HAL_RCC_OscConfig+0x80>
 8002c42:	4bb7      	ldr	r3, [pc, #732]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4bb6      	ldr	r3, [pc, #728]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	02c9      	lsls	r1, r1, #11
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	4bb3      	ldr	r3, [pc, #716]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4bb2      	ldr	r3, [pc, #712]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	0249      	lsls	r1, r1, #9
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c60:	4baf      	ldr	r3, [pc, #700]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4bae      	ldr	r3, [pc, #696]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c66:	49af      	ldr	r1, [pc, #700]	; (8002f24 <HAL_RCC_OscConfig+0x344>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	4bac      	ldr	r3, [pc, #688]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4bab      	ldr	r3, [pc, #684]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c72:	49ad      	ldr	r1, [pc, #692]	; (8002f28 <HAL_RCC_OscConfig+0x348>)
 8002c74:	400a      	ands	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d014      	beq.n	8002caa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe f966 	bl	8000f50 <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c8a:	f7fe f961 	bl	8000f50 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b64      	cmp	r3, #100	; 0x64
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e17b      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9c:	4ba0      	ldr	r3, [pc, #640]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	029b      	lsls	r3, r3, #10
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0xaa>
 8002ca8:	e013      	b.n	8002cd2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe f951 	bl	8000f50 <HAL_GetTick>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe f94c 	bl	8000f50 <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e166      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc6:	4b96      	ldr	r3, [pc, #600]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	029b      	lsls	r3, r3, #10
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d100      	bne.n	8002cde <HAL_RCC_OscConfig+0xfe>
 8002cdc:	e086      	b.n	8002dec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cde:	4b90      	ldr	r3, [pc, #576]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2238      	movs	r2, #56	; 0x38
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d12f      	bne.n	8002d4e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e14c      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b89      	ldr	r3, [pc, #548]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a8b      	ldr	r2, [pc, #556]	; (8002f2c <HAL_RCC_OscConfig+0x34c>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	021a      	lsls	r2, r3, #8
 8002d0a:	4b85      	ldr	r3, [pc, #532]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d112      	bne.n	8002d3c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d16:	4b82      	ldr	r3, [pc, #520]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a85      	ldr	r2, [pc, #532]	; (8002f30 <HAL_RCC_OscConfig+0x350>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	4b7e      	ldr	r3, [pc, #504]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002d2a:	4b7d      	ldr	r3, [pc, #500]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0adb      	lsrs	r3, r3, #11
 8002d30:	2207      	movs	r2, #7
 8002d32:	4013      	ands	r3, r2
 8002d34:	4a7f      	ldr	r2, [pc, #508]	; (8002f34 <HAL_RCC_OscConfig+0x354>)
 8002d36:	40da      	lsrs	r2, r3
 8002d38:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x358>)
 8002d3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d3c:	4b7f      	ldr	r3, [pc, #508]	; (8002f3c <HAL_RCC_OscConfig+0x35c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7fe f8a9 	bl	8000e98 <HAL_InitTick>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d050      	beq.n	8002dec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e122      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d030      	beq.n	8002db8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d56:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a75      	ldr	r2, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x350>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002d6a:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b6c      	ldr	r3, [pc, #432]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	0049      	lsls	r1, r1, #1
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f8ea 	bl	8000f50 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d82:	f7fe f8e5 	bl	8000f50 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e0ff      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d94:	4b62      	ldr	r3, [pc, #392]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da0:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a61      	ldr	r2, [pc, #388]	; (8002f2c <HAL_RCC_OscConfig+0x34c>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	021a      	lsls	r2, r3, #8
 8002db0:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e019      	b.n	8002dec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b58      	ldr	r3, [pc, #352]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002dbe:	4960      	ldr	r1, [pc, #384]	; (8002f40 <HAL_RCC_OscConfig+0x360>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f8c4 	bl	8000f50 <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002dce:	f7fe f8bf 	bl	8000f50 <HAL_GetTick>
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0d9      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de0:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4013      	ands	r3, r2
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2208      	movs	r2, #8
 8002df2:	4013      	ands	r3, r2
 8002df4:	d042      	beq.n	8002e7c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002df6:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2238      	movs	r2, #56	; 0x38
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b18      	cmp	r3, #24
 8002e00:	d105      	bne.n	8002e0e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d138      	bne.n	8002e7c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0c2      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d019      	beq.n	8002e4a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002e16:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002e18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe f895 	bl	8000f50 <HAL_GetTick>
 8002e26:	0003      	movs	r3, r0
 8002e28:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe f890 	bl	8000f50 <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e0aa      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002e3e:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	2202      	movs	r2, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	d0f1      	beq.n	8002e2c <HAL_RCC_OscConfig+0x24c>
 8002e48:	e018      	b.n	8002e7c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e4a:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e4e:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	438a      	bics	r2, r1
 8002e54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7fe f87b 	bl	8000f50 <HAL_GetTick>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e60:	f7fe f876 	bl	8000f50 <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e090      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e72:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e76:	2202      	movs	r2, #2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d1f1      	bne.n	8002e60 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2204      	movs	r2, #4
 8002e82:	4013      	ands	r3, r2
 8002e84:	d100      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2a8>
 8002e86:	e084      	b.n	8002f92 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e88:	230f      	movs	r3, #15
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002e90:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2238      	movs	r2, #56	; 0x38
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d000      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x2c6>
 8002ea4:	e075      	b.n	8002f92 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e074      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2e0>
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002eb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002eb8:	2101      	movs	r1, #1
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ebe:	e01c      	b.n	8002efa <HAL_RCC_OscConfig+0x31a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x302>
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002eca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002ece:	2104      	movs	r1, #4
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002ed6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002eda:	2101      	movs	r1, #1
 8002edc:	430a      	orrs	r2, r1
 8002ede:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ee0:	e00b      	b.n	8002efa <HAL_RCC_OscConfig+0x31a>
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	438a      	bics	r2, r1
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002ef0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x340>)
 8002ef4:	2104      	movs	r1, #4
 8002ef6:	438a      	bics	r2, r1
 8002ef8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d028      	beq.n	8002f54 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f02:	f7fe f825 	bl	8000f50 <HAL_GetTick>
 8002f06:	0003      	movs	r3, r0
 8002f08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f0a:	e01d      	b.n	8002f48 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe f820 	bl	8000f50 <HAL_GetTick>
 8002f10:	0002      	movs	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	4a0b      	ldr	r2, [pc, #44]	; (8002f44 <HAL_RCC_OscConfig+0x364>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d915      	bls.n	8002f48 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e039      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	fffeffff 	.word	0xfffeffff
 8002f28:	fffbffff 	.word	0xfffbffff
 8002f2c:	ffff80ff 	.word	0xffff80ff
 8002f30:	ffffc7ff 	.word	0xffffc7ff
 8002f34:	02dc6c00 	.word	0x02dc6c00
 8002f38:	20000014 	.word	0x20000014
 8002f3c:	20000018 	.word	0x20000018
 8002f40:	fffffeff 	.word	0xfffffeff
 8002f44:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f48:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_RCC_OscConfig+0x3bc>)
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d0dc      	beq.n	8002f0c <HAL_RCC_OscConfig+0x32c>
 8002f52:	e013      	b.n	8002f7c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fd fffc 	bl	8000f50 <HAL_GetTick>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f5c:	e009      	b.n	8002f72 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fd fff7 	bl	8000f50 <HAL_GetTick>
 8002f62:	0002      	movs	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <HAL_RCC_OscConfig+0x3c0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e010      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_RCC_OscConfig+0x3bc>)
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCC_OscConfig+0x3bc>)
 8002f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f8a:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <HAL_RCC_OscConfig+0x3bc>)
 8002f8c:	4905      	ldr	r1, [pc, #20]	; (8002fa4 <HAL_RCC_OscConfig+0x3c4>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b006      	add	sp, #24
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	00001388 	.word	0x00001388
 8002fa4:	efffffff 	.word	0xefffffff

08002fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0e9      	b.n	8003190 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b76      	ldr	r3, [pc, #472]	; (8003198 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d91e      	bls.n	8003008 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b73      	ldr	r3, [pc, #460]	; (8003198 <HAL_RCC_ClockConfig+0x1f0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2207      	movs	r2, #7
 8002fd0:	4393      	bics	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	4b70      	ldr	r3, [pc, #448]	; (8003198 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fdc:	f7fd ffb8 	bl	8000f50 <HAL_GetTick>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fe4:	e009      	b.n	8002ffa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe6:	f7fd ffb3 	bl	8000f50 <HAL_GetTick>
 8002fea:	0002      	movs	r2, r0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	4a6a      	ldr	r2, [pc, #424]	; (800319c <HAL_RCC_ClockConfig+0x1f4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e0ca      	b.n	8003190 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ffa:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2207      	movs	r2, #7
 8003000:	4013      	ands	r3, r2
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d1ee      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2202      	movs	r2, #2
 800300e:	4013      	ands	r3, r2
 8003010:	d017      	beq.n	8003042 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2204      	movs	r2, #4
 8003018:	4013      	ands	r3, r2
 800301a:	d008      	beq.n	800302e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800301c:	4b60      	ldr	r3, [pc, #384]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a60      	ldr	r2, [pc, #384]	; (80031a4 <HAL_RCC_ClockConfig+0x1fc>)
 8003022:	401a      	ands	r2, r3
 8003024:	4b5e      	ldr	r3, [pc, #376]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003026:	21b0      	movs	r1, #176	; 0xb0
 8003028:	0109      	lsls	r1, r1, #4
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302e:	4b5c      	ldr	r3, [pc, #368]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4a5d      	ldr	r2, [pc, #372]	; (80031a8 <HAL_RCC_ClockConfig+0x200>)
 8003034:	4013      	ands	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 800303e:	430a      	orrs	r2, r1
 8003040:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2201      	movs	r2, #1
 8003048:	4013      	ands	r3, r2
 800304a:	d055      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800304c:	4b54      	ldr	r3, [pc, #336]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	221c      	movs	r2, #28
 8003052:	4393      	bics	r3, r2
 8003054:	0019      	movs	r1, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d107      	bne.n	8003078 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003068:	4b4d      	ldr	r3, [pc, #308]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	029b      	lsls	r3, r3, #10
 8003070:	4013      	ands	r3, r2
 8003072:	d11f      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e08b      	b.n	8003190 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003080:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4013      	ands	r3, r2
 800308a:	d113      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e07f      	b.n	8003190 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003098:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 800309a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309c:	2202      	movs	r2, #2
 800309e:	4013      	ands	r3, r2
 80030a0:	d108      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e074      	b.n	8003190 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80030a6:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	2202      	movs	r2, #2
 80030ac:	4013      	ands	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e06d      	b.n	8003190 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030b4:	4b3a      	ldr	r3, [pc, #232]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2207      	movs	r2, #7
 80030ba:	4393      	bics	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 80030c4:	430a      	orrs	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c8:	f7fd ff42 	bl	8000f50 <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d0:	e009      	b.n	80030e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030d2:	f7fd ff3d 	bl	8000f50 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	4a2f      	ldr	r2, [pc, #188]	; (800319c <HAL_RCC_ClockConfig+0x1f4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e054      	b.n	8003190 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2238      	movs	r2, #56	; 0x38
 80030ec:	401a      	ands	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d1ec      	bne.n	80030d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <HAL_RCC_ClockConfig+0x1f0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2207      	movs	r2, #7
 80030fe:	4013      	ands	r3, r2
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d21e      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <HAL_RCC_ClockConfig+0x1f0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2207      	movs	r2, #7
 800310c:	4393      	bics	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_RCC_ClockConfig+0x1f0>)
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003118:	f7fd ff1a 	bl	8000f50 <HAL_GetTick>
 800311c:	0003      	movs	r3, r0
 800311e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003120:	e009      	b.n	8003136 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003122:	f7fd ff15 	bl	8000f50 <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	4a1b      	ldr	r2, [pc, #108]	; (800319c <HAL_RCC_ClockConfig+0x1f4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e02c      	b.n	8003190 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003136:	4b18      	ldr	r3, [pc, #96]	; (8003198 <HAL_RCC_ClockConfig+0x1f0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2207      	movs	r2, #7
 800313c:	4013      	ands	r3, r2
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d1ee      	bne.n	8003122 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2204      	movs	r2, #4
 800314a:	4013      	ands	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800314e:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_RCC_ClockConfig+0x204>)
 8003154:	4013      	ands	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 800315e:	430a      	orrs	r2, r1
 8003160:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003162:	f000 f82b 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8003166:	0001      	movs	r1, r0
 8003168:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <HAL_RCC_ClockConfig+0x1f8>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	220f      	movs	r2, #15
 8003170:	401a      	ands	r2, r3
 8003172:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_RCC_ClockConfig+0x208>)
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	58d3      	ldr	r3, [r2, r3]
 8003178:	221f      	movs	r2, #31
 800317a:	4013      	ands	r3, r2
 800317c:	000a      	movs	r2, r1
 800317e:	40da      	lsrs	r2, r3
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_RCC_ClockConfig+0x20c>)
 8003182:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <HAL_RCC_ClockConfig+0x210>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	0018      	movs	r0, r3
 800318a:	f7fd fe85 	bl	8000e98 <HAL_InitTick>
 800318e:	0003      	movs	r3, r0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b004      	add	sp, #16
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40022000 	.word	0x40022000
 800319c:	00001388 	.word	0x00001388
 80031a0:	40021000 	.word	0x40021000
 80031a4:	ffff84ff 	.word	0xffff84ff
 80031a8:	fffff0ff 	.word	0xfffff0ff
 80031ac:	ffff8fff 	.word	0xffff8fff
 80031b0:	08005110 	.word	0x08005110
 80031b4:	20000014 	.word	0x20000014
 80031b8:	20000018 	.word	0x20000018

080031bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_RCC_GetSysClockFreq+0x78>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2238      	movs	r2, #56	; 0x38
 80031c8:	4013      	ands	r3, r2
 80031ca:	d10f      	bne.n	80031ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_GetSysClockFreq+0x78>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0adb      	lsrs	r3, r3, #11
 80031d2:	2207      	movs	r2, #7
 80031d4:	4013      	ands	r3, r2
 80031d6:	2201      	movs	r2, #1
 80031d8:	409a      	lsls	r2, r3
 80031da:	0013      	movs	r3, r2
 80031dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80031de:	6839      	ldr	r1, [r7, #0]
 80031e0:	4815      	ldr	r0, [pc, #84]	; (8003238 <HAL_RCC_GetSysClockFreq+0x7c>)
 80031e2:	f7fc ff91 	bl	8000108 <__udivsi3>
 80031e6:	0003      	movs	r3, r0
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	e01e      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_RCC_GetSysClockFreq+0x78>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2238      	movs	r2, #56	; 0x38
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d102      	bne.n	80031fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_GetSysClockFreq+0x7c>)
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	e015      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_RCC_GetSysClockFreq+0x78>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2238      	movs	r2, #56	; 0x38
 8003204:	4013      	ands	r3, r2
 8003206:	2b20      	cmp	r3, #32
 8003208:	d103      	bne.n	8003212 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	607b      	str	r3, [r7, #4]
 8003210:	e00b      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_RCC_GetSysClockFreq+0x78>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2238      	movs	r2, #56	; 0x38
 8003218:	4013      	ands	r3, r2
 800321a:	2b18      	cmp	r3, #24
 800321c:	d103      	bne.n	8003226 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800321e:	23fa      	movs	r3, #250	; 0xfa
 8003220:	01db      	lsls	r3, r3, #7
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	e001      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800322a:	687b      	ldr	r3, [r7, #4]
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b002      	add	sp, #8
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	02dc6c00 	.word	0x02dc6c00

0800323c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003240:	4b02      	ldr	r3, [pc, #8]	; (800324c <HAL_RCC_GetHCLKFreq+0x10>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	0018      	movs	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	20000014 	.word	0x20000014

08003250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003254:	f7ff fff2 	bl	800323c <HAL_RCC_GetHCLKFreq>
 8003258:	0001      	movs	r1, r0
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x28>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0b1b      	lsrs	r3, r3, #12
 8003260:	2207      	movs	r2, #7
 8003262:	401a      	ands	r2, r3
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003266:	0092      	lsls	r2, r2, #2
 8003268:	58d3      	ldr	r3, [r2, r3]
 800326a:	221f      	movs	r2, #31
 800326c:	4013      	ands	r3, r2
 800326e:	40d9      	lsrs	r1, r3
 8003270:	000b      	movs	r3, r1
}
 8003272:	0018      	movs	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	08005150 	.word	0x08005150

08003280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003288:	2313      	movs	r3, #19
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003290:	2312      	movs	r3, #18
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	029b      	lsls	r3, r3, #10
 80032a0:	4013      	ands	r3, r2
 80032a2:	d100      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80032a4:	e079      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2011      	movs	r0, #17
 80032a8:	183b      	adds	r3, r7, r0
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ae:	4b64      	ldr	r3, [pc, #400]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	055b      	lsls	r3, r3, #21
 80032b6:	4013      	ands	r3, r2
 80032b8:	d110      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	4b61      	ldr	r3, [pc, #388]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032be:	4b60      	ldr	r3, [pc, #384]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	0549      	lsls	r1, r1, #21
 80032c4:	430a      	orrs	r2, r1
 80032c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80032c8:	4b5d      	ldr	r3, [pc, #372]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	055b      	lsls	r3, r3, #21
 80032d0:	4013      	ands	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80032dc:	4b58      	ldr	r3, [pc, #352]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032e0:	23c0      	movs	r3, #192	; 0xc0
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4013      	ands	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d014      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80032f8:	4b51      	ldr	r3, [pc, #324]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	4a51      	ldr	r2, [pc, #324]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032fe:	4013      	ands	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003302:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003304:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003306:	4b4e      	ldr	r3, [pc, #312]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	0249      	lsls	r1, r1, #9
 800330c:	430a      	orrs	r2, r1
 800330e:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003310:	4b4b      	ldr	r3, [pc, #300]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003312:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003314:	4b4a      	ldr	r3, [pc, #296]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003316:	494c      	ldr	r1, [pc, #304]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003318:	400a      	ands	r2, r1
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800331c:	4b48      	ldr	r3, [pc, #288]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2201      	movs	r2, #1
 8003326:	4013      	ands	r3, r2
 8003328:	d016      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fd fe11 	bl	8000f50 <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003332:	e00c      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fd fe0c 	bl	8000f50 <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	4a43      	ldr	r2, [pc, #268]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d904      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8003344:	2313      	movs	r3, #19
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	2203      	movs	r2, #3
 800334a:	701a      	strb	r2, [r3, #0]
          break;
 800334c:	e004      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800334e:	4b3c      	ldr	r3, [pc, #240]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	2202      	movs	r2, #2
 8003354:	4013      	ands	r3, r2
 8003356:	d0ed      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8003358:	2313      	movs	r3, #19
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	4a37      	ldr	r2, [pc, #220]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003368:	4013      	ands	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	4b33      	ldr	r3, [pc, #204]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003372:	430a      	orrs	r2, r1
 8003374:	65da      	str	r2, [r3, #92]	; 0x5c
 8003376:	e005      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	2312      	movs	r3, #18
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	2213      	movs	r2, #19
 800337e:	18ba      	adds	r2, r7, r2
 8003380:	7812      	ldrb	r2, [r2, #0]
 8003382:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003384:	2311      	movs	r3, #17
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d105      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003392:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003394:	492e      	ldr	r1, [pc, #184]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	400a      	ands	r2, r1
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2201      	movs	r2, #1
 80033a0:	4013      	ands	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033a4:	4b26      	ldr	r3, [pc, #152]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	2203      	movs	r2, #3
 80033aa:	4393      	bics	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	4b23      	ldr	r3, [pc, #140]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2240      	movs	r2, #64	; 0x40
 80033be:	4013      	ands	r3, r2
 80033c0:	d009      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033c2:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	4a23      	ldr	r2, [pc, #140]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033d2:	430a      	orrs	r2, r1
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	01db      	lsls	r3, r3, #7
 80033de:	4013      	ands	r3, r2
 80033e0:	d008      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e2:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	0899      	lsrs	r1, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033f0:	430a      	orrs	r2, r1
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	4013      	ands	r3, r2
 80033fe:	d009      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	4a14      	ldr	r2, [pc, #80]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003406:	4013      	ands	r3, r2
 8003408:	0019      	movs	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003410:	430a      	orrs	r2, r1
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	da09      	bge.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800341c:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	22e0      	movs	r2, #224	; 0xe0
 8003422:	4393      	bics	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003430:	2312      	movs	r3, #18
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	781b      	ldrb	r3, [r3, #0]
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b006      	add	sp, #24
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	40021000 	.word	0x40021000
 8003444:	fffffcff 	.word	0xfffffcff
 8003448:	fffeffff 	.word	0xfffeffff
 800344c:	00001388 	.word	0x00001388
 8003450:	efffffff 	.word	0xefffffff
 8003454:	ffffcfff 	.word	0xffffcfff
 8003458:	ffff3fff 	.word	0xffff3fff

0800345c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e04a      	b.n	8003504 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	223d      	movs	r2, #61	; 0x3d
 8003472:	5c9b      	ldrb	r3, [r3, r2]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d107      	bne.n	800348a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223c      	movs	r2, #60	; 0x3c
 800347e:	2100      	movs	r1, #0
 8003480:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f7fd fb63 	bl	8000b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223d      	movs	r2, #61	; 0x3d
 800348e:	2102      	movs	r1, #2
 8003490:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3304      	adds	r3, #4
 800349a:	0019      	movs	r1, r3
 800349c:	0010      	movs	r0, r2
 800349e:	f000 fdbb 	bl	8004018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2248      	movs	r2, #72	; 0x48
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	223e      	movs	r2, #62	; 0x3e
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	223f      	movs	r2, #63	; 0x3f
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2240      	movs	r2, #64	; 0x40
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2241      	movs	r2, #65	; 0x41
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2242      	movs	r2, #66	; 0x42
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2243      	movs	r2, #67	; 0x43
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2244      	movs	r2, #68	; 0x44
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2245      	movs	r2, #69	; 0x45
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2246      	movs	r2, #70	; 0x46
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2247      	movs	r2, #71	; 0x47
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	223d      	movs	r2, #61	; 0x3d
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	223d      	movs	r2, #61	; 0x3d
 8003518:	5c9b      	ldrb	r3, [r3, r2]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d001      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e037      	b.n	8003594 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	223d      	movs	r2, #61	; 0x3d
 8003528:	2102      	movs	r1, #2
 800352a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2101      	movs	r1, #1
 8003538:	430a      	orrs	r2, r1
 800353a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a16      	ldr	r2, [pc, #88]	; (800359c <HAL_TIM_Base_Start_IT+0x90>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x44>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <HAL_TIM_Base_Start_IT+0x94>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d116      	bne.n	800357e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <HAL_TIM_Base_Start_IT+0x98>)
 8003558:	4013      	ands	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b06      	cmp	r3, #6
 8003560:	d016      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x84>
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	025b      	lsls	r3, r3, #9
 8003568:	429a      	cmp	r2, r3
 800356a:	d011      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2101      	movs	r1, #1
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357c:	e008      	b.n	8003590 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	430a      	orrs	r2, r1
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e000      	b.n	8003592 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003590:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b004      	add	sp, #16
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40000400 	.word	0x40000400
 80035a4:	00010007 	.word	0x00010007

080035a8 <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, const uint32_t *pData, uint16_t Length)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	1dbb      	adds	r3, r7, #6
 80035b4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	223d      	movs	r2, #61	; 0x3d
 80035ba:	5c9b      	ldrb	r3, [r3, r2]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d101      	bne.n	80035c6 <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
 80035c4:	e065      	b.n	8003692 <HAL_TIM_Base_Start_DMA+0xea>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	223d      	movs	r2, #61	; 0x3d
 80035ca:	5c9b      	ldrb	r3, [r3, r2]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d126      	bne.n	8003620 <HAL_TIM_Base_Start_DMA+0x78>
  {
    if ((pData == NULL) || (Length == 0U))
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_TIM_Base_Start_DMA+0x38>
 80035d8:	1dbb      	adds	r3, r7, #6
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_TIM_Base_Start_DMA+0x3c>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e056      	b.n	8003692 <HAL_TIM_Base_Start_DMA+0xea>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	223d      	movs	r2, #61	; 0x3d
 80035e8:	2102      	movs	r1, #2
 80035ea:	5499      	strb	r1, [r3, r2]
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4a2a      	ldr	r2, [pc, #168]	; (800369c <HAL_TIM_Base_Start_DMA+0xf4>)
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <HAL_TIM_Base_Start_DMA+0xf8>)
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <HAL_TIM_Base_Start_DMA+0xfc>)
 8003602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a18      	ldr	r0, [r3, #32]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	332c      	adds	r3, #44	; 0x2c
 8003610:	001a      	movs	r2, r3
 8003612:	1dbb      	adds	r3, r7, #6
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	f7fe fdf3 	bl	8002200 <HAL_DMA_Start_IT>
 800361a:	1e03      	subs	r3, r0, #0
 800361c:	d004      	beq.n	8003628 <HAL_TIM_Base_Start_DMA+0x80>
 800361e:	e001      	b.n	8003624 <HAL_TIM_Base_Start_DMA+0x7c>
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e036      	b.n	8003692 <HAL_TIM_Base_Start_DMA+0xea>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e034      	b.n	8003692 <HAL_TIM_Base_Start_DMA+0xea>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2180      	movs	r1, #128	; 0x80
 8003634:	0049      	lsls	r1, r1, #1
 8003636:	430a      	orrs	r2, r1
 8003638:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <HAL_TIM_Base_Start_DMA+0x100>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_TIM_Base_Start_DMA+0xa6>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_TIM_Base_Start_DMA+0x104>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d116      	bne.n	800367c <HAL_TIM_Base_Start_DMA+0xd4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_TIM_Base_Start_DMA+0x108>)
 8003656:	4013      	ands	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b06      	cmp	r3, #6
 800365e:	d016      	beq.n	800368e <HAL_TIM_Base_Start_DMA+0xe6>
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	025b      	lsls	r3, r3, #9
 8003666:	429a      	cmp	r2, r3
 8003668:	d011      	beq.n	800368e <HAL_TIM_Base_Start_DMA+0xe6>
    {
      __HAL_TIM_ENABLE(htim);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2101      	movs	r1, #1
 8003676:	430a      	orrs	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367a:	e008      	b.n	800368e <HAL_TIM_Base_Start_DMA+0xe6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2101      	movs	r1, #1
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e000      	b.n	8003690 <HAL_TIM_Base_Start_DMA+0xe8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b006      	add	sp, #24
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	08003fc9 	.word	0x08003fc9
 80036a0:	08003ff9 	.word	0x08003ff9
 80036a4:	08003f35 	.word	0x08003f35
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40000400 	.word	0x40000400
 80036b0:	00010007 	.word	0x00010007

080036b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e04a      	b.n	800375c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	223d      	movs	r2, #61	; 0x3d
 80036ca:	5c9b      	ldrb	r3, [r3, r2]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	223c      	movs	r2, #60	; 0x3c
 80036d6:	2100      	movs	r1, #0
 80036d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f841 	bl	8003764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	223d      	movs	r2, #61	; 0x3d
 80036e6:	2102      	movs	r1, #2
 80036e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	0019      	movs	r1, r3
 80036f4:	0010      	movs	r0, r2
 80036f6:	f000 fc8f 	bl	8004018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2248      	movs	r2, #72	; 0x48
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	223e      	movs	r2, #62	; 0x3e
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	223f      	movs	r2, #63	; 0x3f
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2240      	movs	r2, #64	; 0x40
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2241      	movs	r2, #65	; 0x41
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2242      	movs	r2, #66	; 0x42
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2243      	movs	r2, #67	; 0x43
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2244      	movs	r2, #68	; 0x44
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2245      	movs	r2, #69	; 0x45
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2246      	movs	r2, #70	; 0x46
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2247      	movs	r2, #71	; 0x47
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	223d      	movs	r2, #61	; 0x3d
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b002      	add	sp, #8
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d108      	bne.n	8003796 <HAL_TIM_PWM_Start+0x22>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	223e      	movs	r2, #62	; 0x3e
 8003788:	5c9b      	ldrb	r3, [r3, r2]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	1e5a      	subs	r2, r3, #1
 8003790:	4193      	sbcs	r3, r2
 8003792:	b2db      	uxtb	r3, r3
 8003794:	e037      	b.n	8003806 <HAL_TIM_PWM_Start+0x92>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d108      	bne.n	80037ae <HAL_TIM_PWM_Start+0x3a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	223f      	movs	r2, #63	; 0x3f
 80037a0:	5c9b      	ldrb	r3, [r3, r2]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	1e5a      	subs	r2, r3, #1
 80037a8:	4193      	sbcs	r3, r2
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	e02b      	b.n	8003806 <HAL_TIM_PWM_Start+0x92>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d108      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x52>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	5c9b      	ldrb	r3, [r3, r2]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	4193      	sbcs	r3, r2
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e01f      	b.n	8003806 <HAL_TIM_PWM_Start+0x92>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b0c      	cmp	r3, #12
 80037ca:	d108      	bne.n	80037de <HAL_TIM_PWM_Start+0x6a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2241      	movs	r2, #65	; 0x41
 80037d0:	5c9b      	ldrb	r3, [r3, r2]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	1e5a      	subs	r2, r3, #1
 80037d8:	4193      	sbcs	r3, r2
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e013      	b.n	8003806 <HAL_TIM_PWM_Start+0x92>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d108      	bne.n	80037f6 <HAL_TIM_PWM_Start+0x82>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2242      	movs	r2, #66	; 0x42
 80037e8:	5c9b      	ldrb	r3, [r3, r2]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	1e5a      	subs	r2, r3, #1
 80037f0:	4193      	sbcs	r3, r2
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e007      	b.n	8003806 <HAL_TIM_PWM_Start+0x92>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2243      	movs	r2, #67	; 0x43
 80037fa:	5c9b      	ldrb	r3, [r3, r2]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	1e5a      	subs	r2, r3, #1
 8003802:	4193      	sbcs	r3, r2
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e07b      	b.n	8003906 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d104      	bne.n	800381e <HAL_TIM_PWM_Start+0xaa>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	223e      	movs	r2, #62	; 0x3e
 8003818:	2102      	movs	r1, #2
 800381a:	5499      	strb	r1, [r3, r2]
 800381c:	e023      	b.n	8003866 <HAL_TIM_PWM_Start+0xf2>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d104      	bne.n	800382e <HAL_TIM_PWM_Start+0xba>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	223f      	movs	r2, #63	; 0x3f
 8003828:	2102      	movs	r1, #2
 800382a:	5499      	strb	r1, [r3, r2]
 800382c:	e01b      	b.n	8003866 <HAL_TIM_PWM_Start+0xf2>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d104      	bne.n	800383e <HAL_TIM_PWM_Start+0xca>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	2102      	movs	r1, #2
 800383a:	5499      	strb	r1, [r3, r2]
 800383c:	e013      	b.n	8003866 <HAL_TIM_PWM_Start+0xf2>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b0c      	cmp	r3, #12
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start+0xda>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2241      	movs	r2, #65	; 0x41
 8003848:	2102      	movs	r1, #2
 800384a:	5499      	strb	r1, [r3, r2]
 800384c:	e00b      	b.n	8003866 <HAL_TIM_PWM_Start+0xf2>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b10      	cmp	r3, #16
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0xea>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2242      	movs	r2, #66	; 0x42
 8003858:	2102      	movs	r1, #2
 800385a:	5499      	strb	r1, [r3, r2]
 800385c:	e003      	b.n	8003866 <HAL_TIM_PWM_Start+0xf2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2243      	movs	r2, #67	; 0x43
 8003862:	2102      	movs	r1, #2
 8003864:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6839      	ldr	r1, [r7, #0]
 800386c:	2201      	movs	r2, #1
 800386e:	0018      	movs	r0, r3
 8003870:	f000 ff76 	bl	8004760 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a25      	ldr	r2, [pc, #148]	; (8003910 <HAL_TIM_PWM_Start+0x19c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_TIM_PWM_Start+0x11e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a24      	ldr	r2, [pc, #144]	; (8003914 <HAL_TIM_PWM_Start+0x1a0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_TIM_PWM_Start+0x11e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a22      	ldr	r2, [pc, #136]	; (8003918 <HAL_TIM_PWM_Start+0x1a4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_TIM_PWM_Start+0x122>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_TIM_PWM_Start+0x124>
 8003896:	2300      	movs	r3, #0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	0209      	lsls	r1, r1, #8
 80038aa:	430a      	orrs	r2, r1
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a17      	ldr	r2, [pc, #92]	; (8003910 <HAL_TIM_PWM_Start+0x19c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x14e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <HAL_TIM_PWM_Start+0x1a8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d116      	bne.n	80038f0 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <HAL_TIM_PWM_Start+0x1ac>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d016      	beq.n	8003902 <HAL_TIM_PWM_Start+0x18e>
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	025b      	lsls	r3, r3, #9
 80038da:	429a      	cmp	r2, r3
 80038dc:	d011      	beq.n	8003902 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2101      	movs	r1, #1
 80038ea:	430a      	orrs	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ee:	e008      	b.n	8003902 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	e000      	b.n	8003904 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003902:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	0018      	movs	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	b004      	add	sp, #16
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40014400 	.word	0x40014400
 8003918:	40014800 	.word	0x40014800
 800391c:	40000400 	.word	0x40000400
 8003920:	00010007 	.word	0x00010007

08003924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2202      	movs	r2, #2
 8003940:	4013      	ands	r3, r2
 8003942:	d021      	beq.n	8003988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2202      	movs	r2, #2
 8003948:	4013      	ands	r3, r2
 800394a:	d01d      	beq.n	8003988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2203      	movs	r2, #3
 8003952:	4252      	negs	r2, r2
 8003954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2203      	movs	r2, #3
 8003964:	4013      	ands	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	0018      	movs	r0, r3
 800396c:	f000 fac2 	bl	8003ef4 <HAL_TIM_IC_CaptureCallback>
 8003970:	e007      	b.n	8003982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	0018      	movs	r0, r3
 8003976:	f000 fab5 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0018      	movs	r0, r3
 800397e:	f000 fac1 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2204      	movs	r2, #4
 800398c:	4013      	ands	r3, r2
 800398e:	d022      	beq.n	80039d6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2204      	movs	r2, #4
 8003994:	4013      	ands	r3, r2
 8003996:	d01e      	beq.n	80039d6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2205      	movs	r2, #5
 800399e:	4252      	negs	r2, r2
 80039a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	23c0      	movs	r3, #192	; 0xc0
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4013      	ands	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 fa9b 	bl	8003ef4 <HAL_TIM_IC_CaptureCallback>
 80039be:	e007      	b.n	80039d0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 fa8e 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 fa9a 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2208      	movs	r2, #8
 80039da:	4013      	ands	r3, r2
 80039dc:	d021      	beq.n	8003a22 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2208      	movs	r2, #8
 80039e2:	4013      	ands	r3, r2
 80039e4:	d01d      	beq.n	8003a22 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2209      	movs	r2, #9
 80039ec:	4252      	negs	r2, r2
 80039ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2204      	movs	r2, #4
 80039f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	2203      	movs	r2, #3
 80039fe:	4013      	ands	r3, r2
 8003a00:	d004      	beq.n	8003a0c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 fa75 	bl	8003ef4 <HAL_TIM_IC_CaptureCallback>
 8003a0a:	e007      	b.n	8003a1c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f000 fa68 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 fa74 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2210      	movs	r2, #16
 8003a26:	4013      	ands	r3, r2
 8003a28:	d022      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d01e      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2211      	movs	r2, #17
 8003a38:	4252      	negs	r2, r2
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2208      	movs	r2, #8
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	23c0      	movs	r3, #192	; 0xc0
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 fa4e 	bl	8003ef4 <HAL_TIM_IC_CaptureCallback>
 8003a58:	e007      	b.n	8003a6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 fa41 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 fa4d 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2201      	movs	r2, #1
 8003a74:	4013      	ands	r3, r2
 8003a76:	d00c      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d008      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2202      	movs	r2, #2
 8003a86:	4252      	negs	r2, r2
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7fc ff25 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	4013      	ands	r3, r2
 8003a98:	d00c      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2280      	movs	r2, #128	; 0x80
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d008      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2281      	movs	r2, #129	; 0x81
 8003aa8:	4252      	negs	r2, r2
 8003aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 fee4 	bl	800487c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4013      	ands	r3, r2
 8003abc:	d00b      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2280      	movs	r2, #128	; 0x80
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d007      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a16      	ldr	r2, [pc, #88]	; (8003b24 <HAL_TIM_IRQHandler+0x200>)
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 fedb 	bl	800488c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2240      	movs	r2, #64	; 0x40
 8003ada:	4013      	ands	r3, r2
 8003adc:	d00c      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2240      	movs	r2, #64	; 0x40
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d008      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2241      	movs	r2, #65	; 0x41
 8003aec:	4252      	negs	r2, r2
 8003aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 fa0e 	bl	8003f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2220      	movs	r2, #32
 8003afc:	4013      	ands	r3, r2
 8003afe:	d00c      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	4013      	ands	r3, r2
 8003b06:	d008      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	4252      	negs	r2, r2
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 fea9 	bl	800486c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b004      	add	sp, #16
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	fffffeff 	.word	0xfffffeff

08003b28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b34:	2317      	movs	r3, #23
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	223c      	movs	r2, #60	; 0x3c
 8003b40:	5c9b      	ldrb	r3, [r3, r2]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0e5      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	223c      	movs	r2, #60	; 0x3c
 8003b4e:	2101      	movs	r1, #1
 8003b50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b14      	cmp	r3, #20
 8003b56:	d900      	bls.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003b58:	e0d1      	b.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	009a      	lsls	r2, r3, #2
 8003b5e:	4b70      	ldr	r3, [pc, #448]	; (8003d20 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003b60:	18d3      	adds	r3, r2, r3
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	0011      	movs	r1, r2
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 fabe 	bl	80040f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2108      	movs	r1, #8
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2104      	movs	r1, #4
 8003b90:	438a      	bics	r2, r1
 8003b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	619a      	str	r2, [r3, #24]
      break;
 8003ba6:	e0af      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	0011      	movs	r1, r2
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 fb1d 	bl	80041f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2180      	movs	r1, #128	; 0x80
 8003bc2:	0109      	lsls	r1, r1, #4
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4954      	ldr	r1, [pc, #336]	; (8003d24 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6999      	ldr	r1, [r3, #24]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	021a      	lsls	r2, r3, #8
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	619a      	str	r2, [r3, #24]
      break;
 8003bec:	e08c      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 fb78 	bl	80042ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2108      	movs	r1, #8
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2104      	movs	r1, #4
 8003c18:	438a      	bics	r2, r1
 8003c1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69d9      	ldr	r1, [r3, #28]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	61da      	str	r2, [r3, #28]
      break;
 8003c2e:	e06b      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	0011      	movs	r1, r2
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 fbd9 	bl	80043f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	0109      	lsls	r1, r1, #4
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4932      	ldr	r1, [pc, #200]	; (8003d24 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69d9      	ldr	r1, [r3, #28]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	021a      	lsls	r2, r3, #8
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	61da      	str	r2, [r3, #28]
      break;
 8003c74:	e048      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	0011      	movs	r1, r2
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 fc1a 	bl	80044b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2108      	movs	r1, #8
 8003c90:	430a      	orrs	r2, r1
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2104      	movs	r1, #4
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cb6:	e027      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 fc53 	bl	800456c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	0109      	lsls	r1, r1, #4
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4910      	ldr	r1, [pc, #64]	; (8003d24 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	021a      	lsls	r2, r3, #8
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cfc:	e004      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003cfe:	2317      	movs	r3, #23
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]
      break;
 8003d06:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	223c      	movs	r2, #60	; 0x3c
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]

  return status;
 8003d10:	2317      	movs	r3, #23
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	781b      	ldrb	r3, [r3, #0]
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b006      	add	sp, #24
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	08005170 	.word	0x08005170
 8003d24:	fffffbff 	.word	0xfffffbff

08003d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d32:	230f      	movs	r3, #15
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	223c      	movs	r2, #60	; 0x3c
 8003d3e:	5c9b      	ldrb	r3, [r3, r2]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_TIM_ConfigClockSource+0x20>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e0bc      	b.n	8003ec2 <HAL_TIM_ConfigClockSource+0x19a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	223c      	movs	r2, #60	; 0x3c
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223d      	movs	r2, #61	; 0x3d
 8003d54:	2102      	movs	r1, #2
 8003d56:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4a5a      	ldr	r2, [pc, #360]	; (8003ecc <HAL_TIM_ConfigClockSource+0x1a4>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4a59      	ldr	r2, [pc, #356]	; (8003ed0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	0192      	lsls	r2, r2, #6
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d040      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0xde>
 8003d84:	2280      	movs	r2, #128	; 0x80
 8003d86:	0192      	lsls	r2, r2, #6
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d900      	bls.n	8003d8e <HAL_TIM_ConfigClockSource+0x66>
 8003d8c:	e088      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x178>
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	0152      	lsls	r2, r2, #5
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d100      	bne.n	8003d98 <HAL_TIM_ConfigClockSource+0x70>
 8003d96:	e088      	b.n	8003eaa <HAL_TIM_ConfigClockSource+0x182>
 8003d98:	2280      	movs	r2, #128	; 0x80
 8003d9a:	0152      	lsls	r2, r2, #5
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d900      	bls.n	8003da2 <HAL_TIM_ConfigClockSource+0x7a>
 8003da0:	e07e      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x178>
 8003da2:	2b70      	cmp	r3, #112	; 0x70
 8003da4:	d018      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0xb0>
 8003da6:	d900      	bls.n	8003daa <HAL_TIM_ConfigClockSource+0x82>
 8003da8:	e07a      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x178>
 8003daa:	2b60      	cmp	r3, #96	; 0x60
 8003dac:	d04f      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x126>
 8003dae:	d900      	bls.n	8003db2 <HAL_TIM_ConfigClockSource+0x8a>
 8003db0:	e076      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x178>
 8003db2:	2b50      	cmp	r3, #80	; 0x50
 8003db4:	d03b      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x106>
 8003db6:	d900      	bls.n	8003dba <HAL_TIM_ConfigClockSource+0x92>
 8003db8:	e072      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x178>
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d057      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x146>
 8003dbe:	d900      	bls.n	8003dc2 <HAL_TIM_ConfigClockSource+0x9a>
 8003dc0:	e06e      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x178>
 8003dc2:	2b30      	cmp	r3, #48	; 0x30
 8003dc4:	d063      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x166>
 8003dc6:	d86b      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x178>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d060      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x166>
 8003dcc:	d868      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x178>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d05d      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x166>
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d05b      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x166>
 8003dd6:	e063      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de8:	f000 fc9a 	bl	8004720 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2277      	movs	r2, #119	; 0x77
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	609a      	str	r2, [r3, #8]
      break;
 8003e04:	e052      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e16:	f000 fc83 	bl	8004720 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2180      	movs	r1, #128	; 0x80
 8003e26:	01c9      	lsls	r1, r1, #7
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	609a      	str	r2, [r3, #8]
      break;
 8003e2c:	e03e      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	f000 fbf4 	bl	8004628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2150      	movs	r1, #80	; 0x50
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 fc4e 	bl	80046e8 <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e02e      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	f000 fc12 	bl	8004684 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2160      	movs	r1, #96	; 0x60
 8003e66:	0018      	movs	r0, r3
 8003e68:	f000 fc3e 	bl	80046e8 <TIM_ITRx_SetConfig>
      break;
 8003e6c:	e01e      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	f000 fbd4 	bl	8004628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2140      	movs	r1, #64	; 0x40
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 fc2e 	bl	80046e8 <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e00e      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	0019      	movs	r1, r3
 8003e98:	0010      	movs	r0, r2
 8003e9a:	f000 fc25 	bl	80046e8 <TIM_ITRx_SetConfig>
      break;
 8003e9e:	e005      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ea0:	230f      	movs	r3, #15
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003eaa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	223d      	movs	r2, #61	; 0x3d
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	223c      	movs	r2, #60	; 0x3c
 8003eb8:	2100      	movs	r1, #0
 8003eba:	5499      	strb	r1, [r3, r2]

  return status;
 8003ebc:	230f      	movs	r3, #15
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	781b      	ldrb	r3, [r3, #0]
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b004      	add	sp, #16
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	ffceff88 	.word	0xffceff88
 8003ed0:	ffff00ff 	.word	0xffff00ff

08003ed4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b002      	add	sp, #8
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b002      	add	sp, #8
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b002      	add	sp, #8
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d107      	bne.n	8003f5c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	223e      	movs	r2, #62	; 0x3e
 8003f56:	2101      	movs	r1, #1
 8003f58:	5499      	strb	r1, [r3, r2]
 8003f5a:	e02a      	b.n	8003fb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d107      	bne.n	8003f76 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	223f      	movs	r2, #63	; 0x3f
 8003f70:	2101      	movs	r1, #1
 8003f72:	5499      	strb	r1, [r3, r2]
 8003f74:	e01d      	b.n	8003fb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d107      	bne.n	8003f90 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2204      	movs	r2, #4
 8003f84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2240      	movs	r2, #64	; 0x40
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	5499      	strb	r1, [r3, r2]
 8003f8e:	e010      	b.n	8003fb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d107      	bne.n	8003faa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2241      	movs	r2, #65	; 0x41
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	5499      	strb	r1, [r3, r2]
 8003fa8:	e003      	b.n	8003fb2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	223d      	movs	r2, #61	; 0x3d
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7ff ffb5 	bl	8003f24 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b004      	add	sp, #16
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d103      	bne.n	8003fe8 <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	223d      	movs	r2, #61	; 0x3d
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7fc fc76 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b004      	add	sp, #16
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff ff63 	bl	8003ed4 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	b004      	add	sp, #16
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a2b      	ldr	r2, [pc, #172]	; (80040d8 <TIM_Base_SetConfig+0xc0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_Base_SetConfig+0x20>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <TIM_Base_SetConfig+0xc4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d108      	bne.n	800404a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2270      	movs	r2, #112	; 0x70
 800403c:	4393      	bics	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <TIM_Base_SetConfig+0xc0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00f      	beq.n	8004072 <TIM_Base_SetConfig+0x5a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a21      	ldr	r2, [pc, #132]	; (80040dc <TIM_Base_SetConfig+0xc4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <TIM_Base_SetConfig+0x5a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <TIM_Base_SetConfig+0xc8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_Base_SetConfig+0x5a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <TIM_Base_SetConfig+0xcc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_Base_SetConfig+0x5a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <TIM_Base_SetConfig+0xd0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <TIM_Base_SetConfig+0xd4>)
 8004076:	4013      	ands	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	4393      	bics	r3, r2
 800408a:	001a      	movs	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <TIM_Base_SetConfig+0xc0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <TIM_Base_SetConfig+0xaa>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <TIM_Base_SetConfig+0xcc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_Base_SetConfig+0xaa>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <TIM_Base_SetConfig+0xd0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d103      	bne.n	80040ca <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	615a      	str	r2, [r3, #20]
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b004      	add	sp, #16
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40012c00 	.word	0x40012c00
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40002000 	.word	0x40002000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800
 80040ec:	fffffcff 	.word	0xfffffcff

080040f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	2201      	movs	r2, #1
 8004106:	4393      	bics	r3, r2
 8004108:	001a      	movs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a2e      	ldr	r2, [pc, #184]	; (80041d8 <TIM_OC1_SetConfig+0xe8>)
 800411e:	4013      	ands	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2203      	movs	r2, #3
 8004126:	4393      	bics	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2202      	movs	r2, #2
 8004138:	4393      	bics	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a24      	ldr	r2, [pc, #144]	; (80041dc <TIM_OC1_SetConfig+0xec>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <TIM_OC1_SetConfig+0x6e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a23      	ldr	r2, [pc, #140]	; (80041e0 <TIM_OC1_SetConfig+0xf0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_OC1_SetConfig+0x6e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <TIM_OC1_SetConfig+0xf4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10c      	bne.n	8004178 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2208      	movs	r2, #8
 8004162:	4393      	bics	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2204      	movs	r2, #4
 8004174:	4393      	bics	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a18      	ldr	r2, [pc, #96]	; (80041dc <TIM_OC1_SetConfig+0xec>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <TIM_OC1_SetConfig+0xa0>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <TIM_OC1_SetConfig+0xf0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC1_SetConfig+0xa0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a16      	ldr	r2, [pc, #88]	; (80041e4 <TIM_OC1_SetConfig+0xf4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d111      	bne.n	80041b4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <TIM_OC1_SetConfig+0xf8>)
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4a14      	ldr	r2, [pc, #80]	; (80041ec <TIM_OC1_SetConfig+0xfc>)
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	621a      	str	r2, [r3, #32]
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b006      	add	sp, #24
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	fffeff8f 	.word	0xfffeff8f
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800
 80041e8:	fffffeff 	.word	0xfffffeff
 80041ec:	fffffdff 	.word	0xfffffdff

080041f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	2210      	movs	r2, #16
 8004206:	4393      	bics	r3, r2
 8004208:	001a      	movs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <TIM_OC2_SetConfig+0xe0>)
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a2b      	ldr	r2, [pc, #172]	; (80042d4 <TIM_OC2_SetConfig+0xe4>)
 8004226:	4013      	ands	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2220      	movs	r2, #32
 800423a:	4393      	bics	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a22      	ldr	r2, [pc, #136]	; (80042d8 <TIM_OC2_SetConfig+0xe8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d10d      	bne.n	800426e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2280      	movs	r2, #128	; 0x80
 8004256:	4393      	bics	r3, r2
 8004258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2240      	movs	r2, #64	; 0x40
 800426a:	4393      	bics	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a19      	ldr	r2, [pc, #100]	; (80042d8 <TIM_OC2_SetConfig+0xe8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <TIM_OC2_SetConfig+0x96>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a18      	ldr	r2, [pc, #96]	; (80042dc <TIM_OC2_SetConfig+0xec>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d003      	beq.n	8004286 <TIM_OC2_SetConfig+0x96>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <TIM_OC2_SetConfig+0xf0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d113      	bne.n	80042ae <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <TIM_OC2_SetConfig+0xf4>)
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <TIM_OC2_SetConfig+0xf8>)
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	621a      	str	r2, [r3, #32]
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b006      	add	sp, #24
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	feff8fff 	.word	0xfeff8fff
 80042d4:	fffffcff 	.word	0xfffffcff
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	40014400 	.word	0x40014400
 80042e0:	40014800 	.word	0x40014800
 80042e4:	fffffbff 	.word	0xfffffbff
 80042e8:	fffff7ff 	.word	0xfffff7ff

080042ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	4a31      	ldr	r2, [pc, #196]	; (80043c8 <TIM_OC3_SetConfig+0xdc>)
 8004302:	401a      	ands	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a2d      	ldr	r2, [pc, #180]	; (80043cc <TIM_OC3_SetConfig+0xe0>)
 8004318:	4013      	ands	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2203      	movs	r2, #3
 8004320:	4393      	bics	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <TIM_OC3_SetConfig+0xe4>)
 8004332:	4013      	ands	r3, r2
 8004334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <TIM_OC3_SetConfig+0xe8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10d      	bne.n	8004366 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <TIM_OC3_SetConfig+0xec>)
 800434e:	4013      	ands	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <TIM_OC3_SetConfig+0xf0>)
 8004362:	4013      	ands	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a1a      	ldr	r2, [pc, #104]	; (80043d4 <TIM_OC3_SetConfig+0xe8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_OC3_SetConfig+0x92>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1b      	ldr	r2, [pc, #108]	; (80043e0 <TIM_OC3_SetConfig+0xf4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_OC3_SetConfig+0x92>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <TIM_OC3_SetConfig+0xf8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d113      	bne.n	80043a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <TIM_OC3_SetConfig+0xfc>)
 8004382:	4013      	ands	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4a18      	ldr	r2, [pc, #96]	; (80043ec <TIM_OC3_SetConfig+0x100>)
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b006      	add	sp, #24
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	fffffeff 	.word	0xfffffeff
 80043cc:	fffeff8f 	.word	0xfffeff8f
 80043d0:	fffffdff 	.word	0xfffffdff
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	fffff7ff 	.word	0xfffff7ff
 80043dc:	fffffbff 	.word	0xfffffbff
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800
 80043e8:	ffffefff 	.word	0xffffefff
 80043ec:	ffffdfff 	.word	0xffffdfff

080043f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4a24      	ldr	r2, [pc, #144]	; (8004498 <TIM_OC4_SetConfig+0xa8>)
 8004406:	401a      	ands	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a20      	ldr	r2, [pc, #128]	; (800449c <TIM_OC4_SetConfig+0xac>)
 800441c:	4013      	ands	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <TIM_OC4_SetConfig+0xb0>)
 8004424:	4013      	ands	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <TIM_OC4_SetConfig+0xb4>)
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	031b      	lsls	r3, r3, #12
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <TIM_OC4_SetConfig+0xb8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d007      	beq.n	8004460 <TIM_OC4_SetConfig+0x70>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <TIM_OC4_SetConfig+0xbc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_OC4_SetConfig+0x70>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <TIM_OC4_SetConfig+0xc0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d109      	bne.n	8004474 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <TIM_OC4_SetConfig+0xc4>)
 8004464:	4013      	ands	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	46bd      	mov	sp, r7
 8004492:	b006      	add	sp, #24
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	ffffefff 	.word	0xffffefff
 800449c:	feff8fff 	.word	0xfeff8fff
 80044a0:	fffffcff 	.word	0xfffffcff
 80044a4:	ffffdfff 	.word	0xffffdfff
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800
 80044b4:	ffffbfff 	.word	0xffffbfff

080044b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	4a21      	ldr	r2, [pc, #132]	; (8004554 <TIM_OC5_SetConfig+0x9c>)
 80044ce:	401a      	ands	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <TIM_OC5_SetConfig+0xa0>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4a19      	ldr	r2, [pc, #100]	; (800455c <TIM_OC5_SetConfig+0xa4>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a15      	ldr	r2, [pc, #84]	; (8004560 <TIM_OC5_SetConfig+0xa8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_OC5_SetConfig+0x66>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <TIM_OC5_SetConfig+0xac>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_OC5_SetConfig+0x66>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a13      	ldr	r2, [pc, #76]	; (8004568 <TIM_OC5_SetConfig+0xb0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d109      	bne.n	8004532 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <TIM_OC5_SetConfig+0x9c>)
 8004522:	4013      	ands	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	621a      	str	r2, [r3, #32]
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b006      	add	sp, #24
 8004552:	bd80      	pop	{r7, pc}
 8004554:	fffeffff 	.word	0xfffeffff
 8004558:	fffeff8f 	.word	0xfffeff8f
 800455c:	fffdffff 	.word	0xfffdffff
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800

0800456c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4a22      	ldr	r2, [pc, #136]	; (800460c <TIM_OC6_SetConfig+0xa0>)
 8004582:	401a      	ands	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <TIM_OC6_SetConfig+0xa4>)
 8004598:	4013      	ands	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4a1a      	ldr	r2, [pc, #104]	; (8004614 <TIM_OC6_SetConfig+0xa8>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	051b      	lsls	r3, r3, #20
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a16      	ldr	r2, [pc, #88]	; (8004618 <TIM_OC6_SetConfig+0xac>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_OC6_SetConfig+0x68>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <TIM_OC6_SetConfig+0xb0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_OC6_SetConfig+0x68>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a14      	ldr	r2, [pc, #80]	; (8004620 <TIM_OC6_SetConfig+0xb4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d109      	bne.n	80045e8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	4a13      	ldr	r2, [pc, #76]	; (8004624 <TIM_OC6_SetConfig+0xb8>)
 80045d8:	4013      	ands	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	029b      	lsls	r3, r3, #10
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	46bd      	mov	sp, r7
 8004606:	b006      	add	sp, #24
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	ffefffff 	.word	0xffefffff
 8004610:	feff8fff 	.word	0xfeff8fff
 8004614:	ffdfffff 	.word	0xffdfffff
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40014400 	.word	0x40014400
 8004620:	40014800 	.word	0x40014800
 8004624:	fffbffff 	.word	0xfffbffff

08004628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	2201      	movs	r2, #1
 8004640:	4393      	bics	r3, r2
 8004642:	001a      	movs	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	22f0      	movs	r2, #240	; 0xf0
 8004652:	4393      	bics	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	220a      	movs	r2, #10
 8004664:	4393      	bics	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	621a      	str	r2, [r3, #32]
}
 800467c:	46c0      	nop			; (mov r8, r8)
 800467e:	46bd      	mov	sp, r7
 8004680:	b006      	add	sp, #24
 8004682:	bd80      	pop	{r7, pc}

08004684 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	2210      	movs	r2, #16
 800469c:	4393      	bics	r3, r2
 800469e:	001a      	movs	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4a0d      	ldr	r2, [pc, #52]	; (80046e4 <TIM_TI2_ConfigInputStage+0x60>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	031b      	lsls	r3, r3, #12
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	22a0      	movs	r2, #160	; 0xa0
 80046c0:	4393      	bics	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	46bd      	mov	sp, r7
 80046de:	b006      	add	sp, #24
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	ffff0fff 	.word	0xffff0fff

080046e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <TIM_ITRx_SetConfig+0x34>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	2207      	movs	r2, #7
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	609a      	str	r2, [r3, #8]
}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	46bd      	mov	sp, r7
 8004716:	b004      	add	sp, #16
 8004718:	bd80      	pop	{r7, pc}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	ffcfff8f 	.word	0xffcfff8f

08004720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	4a09      	ldr	r2, [pc, #36]	; (800475c <TIM_ETR_SetConfig+0x3c>)
 8004738:	4013      	ands	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	021a      	lsls	r2, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	431a      	orrs	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4313      	orrs	r3, r2
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	609a      	str	r2, [r3, #8]
}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b006      	add	sp, #24
 800475a:	bd80      	pop	{r7, pc}
 800475c:	ffff00ff 	.word	0xffff00ff

08004760 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	221f      	movs	r2, #31
 8004770:	4013      	ands	r3, r2
 8004772:	2201      	movs	r2, #1
 8004774:	409a      	lsls	r2, r3
 8004776:	0013      	movs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	43d2      	mvns	r2, r2
 8004782:	401a      	ands	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	211f      	movs	r1, #31
 8004790:	400b      	ands	r3, r1
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4099      	lsls	r1, r3
 8004796:	000b      	movs	r3, r1
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b006      	add	sp, #24
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	223c      	movs	r2, #60	; 0x3c
 80047b6:	5c9b      	ldrb	r3, [r3, r2]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047bc:	2302      	movs	r3, #2
 80047be:	e04a      	b.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	223c      	movs	r2, #60	; 0x3c
 80047c4:	2101      	movs	r1, #1
 80047c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	223d      	movs	r2, #61	; 0x3d
 80047cc:	2102      	movs	r1, #2
 80047ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1e      	ldr	r2, [pc, #120]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d108      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2270      	movs	r2, #112	; 0x70
 8004800:	4393      	bics	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a11      	ldr	r2, [pc, #68]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a10      	ldr	r2, [pc, #64]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10c      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	4393      	bics	r3, r2
 8004830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4313      	orrs	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	223d      	movs	r2, #61	; 0x3d
 8004848:	2101      	movs	r1, #1
 800484a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	223c      	movs	r2, #60	; 0x3c
 8004850:	2100      	movs	r1, #0
 8004852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b004      	add	sp, #16
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	40012c00 	.word	0x40012c00
 8004864:	ff0fffff 	.word	0xff0fffff
 8004868:	40000400 	.word	0x40000400

0800486c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b002      	add	sp, #8
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004894:	46c0      	nop			; (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b002      	add	sp, #8
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e046      	b.n	800493c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2288      	movs	r2, #136	; 0x88
 80048b2:	589b      	ldr	r3, [r3, r2]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2284      	movs	r2, #132	; 0x84
 80048bc:	2100      	movs	r1, #0
 80048be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	0018      	movs	r0, r3
 80048c4:	f7fc f9f4 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2288      	movs	r2, #136	; 0x88
 80048cc:	2124      	movs	r1, #36	; 0x24
 80048ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2101      	movs	r1, #1
 80048dc:	438a      	bics	r2, r1
 80048de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	0018      	movs	r0, r3
 80048ec:	f000 f9aa 	bl	8004c44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	0018      	movs	r0, r3
 80048f4:	f000 f828 	bl	8004948 <UART_SetConfig>
 80048f8:	0003      	movs	r3, r0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e01c      	b.n	800493c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	490d      	ldr	r1, [pc, #52]	; (8004944 <HAL_UART_Init+0xa8>)
 800490e:	400a      	ands	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	212a      	movs	r1, #42	; 0x2a
 800491e:	438a      	bics	r2, r1
 8004920:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2101      	movs	r1, #1
 800492e:	430a      	orrs	r2, r1
 8004930:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	0018      	movs	r0, r3
 8004936:	f000 fa39 	bl	8004dac <UART_CheckIdleState>
 800493a:	0003      	movs	r3, r0
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	b002      	add	sp, #8
 8004942:	bd80      	pop	{r7, pc}
 8004944:	ffffb7ff 	.word	0xffffb7ff

08004948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004950:	231e      	movs	r3, #30
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	2200      	movs	r2, #0
 8004956:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4aab      	ldr	r2, [pc, #684]	; (8004c24 <UART_SetConfig+0x2dc>)
 8004978:	4013      	ands	r3, r2
 800497a:	0019      	movs	r1, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	430a      	orrs	r2, r1
 8004984:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4aa6      	ldr	r2, [pc, #664]	; (8004c28 <UART_SetConfig+0x2e0>)
 800498e:	4013      	ands	r3, r2
 8004990:	0019      	movs	r1, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a9d      	ldr	r2, [pc, #628]	; (8004c2c <UART_SetConfig+0x2e4>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	0019      	movs	r1, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	220f      	movs	r2, #15
 80049cc:	4393      	bics	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a93      	ldr	r2, [pc, #588]	; (8004c30 <UART_SetConfig+0x2e8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d127      	bne.n	8004a36 <UART_SetConfig+0xee>
 80049e6:	4b93      	ldr	r3, [pc, #588]	; (8004c34 <UART_SetConfig+0x2ec>)
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	2203      	movs	r2, #3
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d017      	beq.n	8004a22 <UART_SetConfig+0xda>
 80049f2:	d81b      	bhi.n	8004a2c <UART_SetConfig+0xe4>
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d00a      	beq.n	8004a0e <UART_SetConfig+0xc6>
 80049f8:	d818      	bhi.n	8004a2c <UART_SetConfig+0xe4>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <UART_SetConfig+0xbc>
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d00a      	beq.n	8004a18 <UART_SetConfig+0xd0>
 8004a02:	e013      	b.n	8004a2c <UART_SetConfig+0xe4>
 8004a04:	231f      	movs	r3, #31
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e021      	b.n	8004a52 <UART_SetConfig+0x10a>
 8004a0e:	231f      	movs	r3, #31
 8004a10:	18fb      	adds	r3, r7, r3
 8004a12:	2202      	movs	r2, #2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	e01c      	b.n	8004a52 <UART_SetConfig+0x10a>
 8004a18:	231f      	movs	r3, #31
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	e017      	b.n	8004a52 <UART_SetConfig+0x10a>
 8004a22:	231f      	movs	r3, #31
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	2208      	movs	r2, #8
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e012      	b.n	8004a52 <UART_SetConfig+0x10a>
 8004a2c:	231f      	movs	r3, #31
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	2210      	movs	r2, #16
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e00d      	b.n	8004a52 <UART_SetConfig+0x10a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7f      	ldr	r2, [pc, #508]	; (8004c38 <UART_SetConfig+0x2f0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d104      	bne.n	8004a4a <UART_SetConfig+0x102>
 8004a40:	231f      	movs	r3, #31
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	2200      	movs	r2, #0
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	e003      	b.n	8004a52 <UART_SetConfig+0x10a>
 8004a4a:	231f      	movs	r3, #31
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	2210      	movs	r2, #16
 8004a50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d000      	beq.n	8004a60 <UART_SetConfig+0x118>
 8004a5e:	e06f      	b.n	8004b40 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004a60:	231f      	movs	r3, #31
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d01f      	beq.n	8004aaa <UART_SetConfig+0x162>
 8004a6a:	dc22      	bgt.n	8004ab2 <UART_SetConfig+0x16a>
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d017      	beq.n	8004aa0 <UART_SetConfig+0x158>
 8004a70:	dc1f      	bgt.n	8004ab2 <UART_SetConfig+0x16a>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <UART_SetConfig+0x134>
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d005      	beq.n	8004a86 <UART_SetConfig+0x13e>
 8004a7a:	e01a      	b.n	8004ab2 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f7fe fbe8 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8004a80:	0003      	movs	r3, r0
 8004a82:	61bb      	str	r3, [r7, #24]
        break;
 8004a84:	e01c      	b.n	8004ac0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004a86:	4b6b      	ldr	r3, [pc, #428]	; (8004c34 <UART_SetConfig+0x2ec>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	2207      	movs	r2, #7
 8004a8e:	4013      	ands	r3, r2
 8004a90:	3301      	adds	r3, #1
 8004a92:	0019      	movs	r1, r3
 8004a94:	4869      	ldr	r0, [pc, #420]	; (8004c3c <UART_SetConfig+0x2f4>)
 8004a96:	f7fb fb37 	bl	8000108 <__udivsi3>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	61bb      	str	r3, [r7, #24]
        break;
 8004a9e:	e00f      	b.n	8004ac0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa0:	f7fe fb8c 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	61bb      	str	r3, [r7, #24]
        break;
 8004aa8:	e00a      	b.n	8004ac0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	61bb      	str	r3, [r7, #24]
        break;
 8004ab0:	e006      	b.n	8004ac0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ab6:	231e      	movs	r3, #30
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
        break;
 8004abe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d100      	bne.n	8004ac8 <UART_SetConfig+0x180>
 8004ac6:	e097      	b.n	8004bf8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004acc:	4b5c      	ldr	r3, [pc, #368]	; (8004c40 <UART_SetConfig+0x2f8>)
 8004ace:	0052      	lsls	r2, r2, #1
 8004ad0:	5ad3      	ldrh	r3, [r2, r3]
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	69b8      	ldr	r0, [r7, #24]
 8004ad6:	f7fb fb17 	bl	8000108 <__udivsi3>
 8004ada:	0003      	movs	r3, r0
 8004adc:	005a      	lsls	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	18d2      	adds	r2, r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	0019      	movs	r1, r3
 8004aec:	0010      	movs	r0, r2
 8004aee:	f7fb fb0b 	bl	8000108 <__udivsi3>
 8004af2:	0003      	movs	r3, r0
 8004af4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b0f      	cmp	r3, #15
 8004afa:	d91c      	bls.n	8004b36 <UART_SetConfig+0x1ee>
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	025b      	lsls	r3, r3, #9
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d217      	bcs.n	8004b36 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	200e      	movs	r0, #14
 8004b0c:	183b      	adds	r3, r7, r0
 8004b0e:	210f      	movs	r1, #15
 8004b10:	438a      	bics	r2, r1
 8004b12:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2207      	movs	r2, #7
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	b299      	uxth	r1, r3
 8004b20:	183b      	adds	r3, r7, r0
 8004b22:	183a      	adds	r2, r7, r0
 8004b24:	8812      	ldrh	r2, [r2, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	183a      	adds	r2, r7, r0
 8004b30:	8812      	ldrh	r2, [r2, #0]
 8004b32:	60da      	str	r2, [r3, #12]
 8004b34:	e060      	b.n	8004bf8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b36:	231e      	movs	r3, #30
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e05b      	b.n	8004bf8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b40:	231f      	movs	r3, #31
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d01f      	beq.n	8004b8a <UART_SetConfig+0x242>
 8004b4a:	dc22      	bgt.n	8004b92 <UART_SetConfig+0x24a>
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d017      	beq.n	8004b80 <UART_SetConfig+0x238>
 8004b50:	dc1f      	bgt.n	8004b92 <UART_SetConfig+0x24a>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <UART_SetConfig+0x214>
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d005      	beq.n	8004b66 <UART_SetConfig+0x21e>
 8004b5a:	e01a      	b.n	8004b92 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5c:	f7fe fb78 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8004b60:	0003      	movs	r3, r0
 8004b62:	61bb      	str	r3, [r7, #24]
        break;
 8004b64:	e01c      	b.n	8004ba0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004b66:	4b33      	ldr	r3, [pc, #204]	; (8004c34 <UART_SetConfig+0x2ec>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2207      	movs	r2, #7
 8004b6e:	4013      	ands	r3, r2
 8004b70:	3301      	adds	r3, #1
 8004b72:	0019      	movs	r1, r3
 8004b74:	4831      	ldr	r0, [pc, #196]	; (8004c3c <UART_SetConfig+0x2f4>)
 8004b76:	f7fb fac7 	bl	8000108 <__udivsi3>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	61bb      	str	r3, [r7, #24]
        break;
 8004b7e:	e00f      	b.n	8004ba0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b80:	f7fe fb1c 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8004b84:	0003      	movs	r3, r0
 8004b86:	61bb      	str	r3, [r7, #24]
        break;
 8004b88:	e00a      	b.n	8004ba0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	61bb      	str	r3, [r7, #24]
        break;
 8004b90:	e006      	b.n	8004ba0 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b96:	231e      	movs	r3, #30
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
        break;
 8004b9e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d028      	beq.n	8004bf8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004baa:	4b25      	ldr	r3, [pc, #148]	; (8004c40 <UART_SetConfig+0x2f8>)
 8004bac:	0052      	lsls	r2, r2, #1
 8004bae:	5ad3      	ldrh	r3, [r2, r3]
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	69b8      	ldr	r0, [r7, #24]
 8004bb4:	f7fb faa8 	bl	8000108 <__udivsi3>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	001a      	movs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	18d2      	adds	r2, r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	0019      	movs	r1, r3
 8004bca:	0010      	movs	r0, r2
 8004bcc:	f7fb fa9c 	bl	8000108 <__udivsi3>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b0f      	cmp	r3, #15
 8004bd8:	d90a      	bls.n	8004bf0 <UART_SetConfig+0x2a8>
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	025b      	lsls	r3, r3, #9
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d205      	bcs.n	8004bf0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60da      	str	r2, [r3, #12]
 8004bee:	e003      	b.n	8004bf8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004bf0:	231e      	movs	r3, #30
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	226a      	movs	r2, #106	; 0x6a
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2268      	movs	r2, #104	; 0x68
 8004c04:	2101      	movs	r1, #1
 8004c06:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c14:	231e      	movs	r3, #30
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	781b      	ldrb	r3, [r3, #0]
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b008      	add	sp, #32
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	cfff69f3 	.word	0xcfff69f3
 8004c28:	ffffcfff 	.word	0xffffcfff
 8004c2c:	11fff4ff 	.word	0x11fff4ff
 8004c30:	40013800 	.word	0x40013800
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40004400 	.word	0x40004400
 8004c3c:	02dc6c00 	.word	0x02dc6c00
 8004c40:	080051c4 	.word	0x080051c4

08004c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	2208      	movs	r2, #8
 8004c52:	4013      	ands	r3, r2
 8004c54:	d00b      	beq.n	8004c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <UART_AdvFeatureConfig+0x144>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	0019      	movs	r1, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	2201      	movs	r2, #1
 8004c74:	4013      	ands	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4a43      	ldr	r2, [pc, #268]	; (8004d8c <UART_AdvFeatureConfig+0x148>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	0019      	movs	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	2202      	movs	r2, #2
 8004c96:	4013      	ands	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a3b      	ldr	r2, [pc, #236]	; (8004d90 <UART_AdvFeatureConfig+0x14c>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4a34      	ldr	r2, [pc, #208]	; (8004d94 <UART_AdvFeatureConfig+0x150>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	2210      	movs	r2, #16
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a2c      	ldr	r2, [pc, #176]	; (8004d98 <UART_AdvFeatureConfig+0x154>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	0019      	movs	r1, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d00b      	beq.n	8004d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	4a25      	ldr	r2, [pc, #148]	; (8004d9c <UART_AdvFeatureConfig+0x158>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	0019      	movs	r1, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	2240      	movs	r2, #64	; 0x40
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d01d      	beq.n	8004d5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a1d      	ldr	r2, [pc, #116]	; (8004da0 <UART_AdvFeatureConfig+0x15c>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3e:	2380      	movs	r3, #128	; 0x80
 8004d40:	035b      	lsls	r3, r3, #13
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d10b      	bne.n	8004d5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <UART_AdvFeatureConfig+0x160>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	0019      	movs	r1, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	2280      	movs	r2, #128	; 0x80
 8004d64:	4013      	ands	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	; (8004da8 <UART_AdvFeatureConfig+0x164>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	0019      	movs	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
  }
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	ffff7fff 	.word	0xffff7fff
 8004d8c:	fffdffff 	.word	0xfffdffff
 8004d90:	fffeffff 	.word	0xfffeffff
 8004d94:	fffbffff 	.word	0xfffbffff
 8004d98:	ffffefff 	.word	0xffffefff
 8004d9c:	ffffdfff 	.word	0xffffdfff
 8004da0:	ffefffff 	.word	0xffefffff
 8004da4:	ff9fffff 	.word	0xff9fffff
 8004da8:	fff7ffff 	.word	0xfff7ffff

08004dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b092      	sub	sp, #72	; 0x48
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2290      	movs	r2, #144	; 0x90
 8004db8:	2100      	movs	r1, #0
 8004dba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dbc:	f7fc f8c8 	bl	8000f50 <HAL_GetTick>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2208      	movs	r2, #8
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d12d      	bne.n	8004e2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd4:	2280      	movs	r2, #128	; 0x80
 8004dd6:	0391      	lsls	r1, r2, #14
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4a47      	ldr	r2, [pc, #284]	; (8004ef8 <UART_CheckIdleState+0x14c>)
 8004ddc:	9200      	str	r2, [sp, #0]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f000 f88e 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004de4:	1e03      	subs	r3, r0, #0
 8004de6:	d022      	beq.n	8004e2e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004de8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df2:	2301      	movs	r3, #1
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	f383 8810 	msr	PRIMASK, r3
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2180      	movs	r1, #128	; 0x80
 8004e0a:	438a      	bics	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	f383 8810 	msr	PRIMASK, r3
}
 8004e18:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2288      	movs	r2, #136	; 0x88
 8004e1e:	2120      	movs	r1, #32
 8004e20:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2284      	movs	r2, #132	; 0x84
 8004e26:	2100      	movs	r1, #0
 8004e28:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e060      	b.n	8004ef0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2204      	movs	r2, #4
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d146      	bne.n	8004eca <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	03d1      	lsls	r1, r2, #15
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <UART_CheckIdleState+0x14c>)
 8004e46:	9200      	str	r2, [sp, #0]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f000 f859 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004e4e:	1e03      	subs	r3, r0, #0
 8004e50:	d03b      	beq.n	8004eca <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e52:	f3ef 8310 	mrs	r3, PRIMASK
 8004e56:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e58:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4922      	ldr	r1, [pc, #136]	; (8004efc <UART_CheckIdleState+0x150>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f383 8810 	msr	PRIMASK, r3
}
 8004e82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e84:	f3ef 8310 	mrs	r3, PRIMASK
 8004e88:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f383 8810 	msr	PRIMASK, r3
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	438a      	bics	r2, r1
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	f383 8810 	msr	PRIMASK, r3
}
 8004eb4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	228c      	movs	r2, #140	; 0x8c
 8004eba:	2120      	movs	r1, #32
 8004ebc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2284      	movs	r2, #132	; 0x84
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e012      	b.n	8004ef0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2288      	movs	r2, #136	; 0x88
 8004ece:	2120      	movs	r1, #32
 8004ed0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	228c      	movs	r2, #140	; 0x8c
 8004ed6:	2120      	movs	r1, #32
 8004ed8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2284      	movs	r2, #132	; 0x84
 8004eea:	2100      	movs	r1, #0
 8004eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b010      	add	sp, #64	; 0x40
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	01ffffff 	.word	0x01ffffff
 8004efc:	fffffedf 	.word	0xfffffedf

08004f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	1dfb      	adds	r3, r7, #7
 8004f0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f10:	e04b      	b.n	8004faa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	3301      	adds	r3, #1
 8004f16:	d048      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f18:	f7fc f81a 	bl	8000f50 <HAL_GetTick>
 8004f1c:	0002      	movs	r2, r0
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e04b      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2204      	movs	r2, #4
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d035      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	2208      	movs	r2, #8
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d111      	bne.n	8004f70 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2208      	movs	r2, #8
 8004f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	0018      	movs	r0, r3
 8004f58:	f000 f83c 	bl	8004fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2290      	movs	r2, #144	; 0x90
 8004f60:	2108      	movs	r1, #8
 8004f62:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2284      	movs	r2, #132	; 0x84
 8004f68:	2100      	movs	r1, #0
 8004f6a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e02c      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69da      	ldr	r2, [r3, #28]
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d112      	bne.n	8004faa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2280      	movs	r2, #128	; 0x80
 8004f8a:	0112      	lsls	r2, r2, #4
 8004f8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 f81f 	bl	8004fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2290      	movs	r2, #144	; 0x90
 8004f9a:	2120      	movs	r1, #32
 8004f9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2284      	movs	r2, #132	; 0x84
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e00f      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	425a      	negs	r2, r3
 8004fba:	4153      	adcs	r3, r2
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	001a      	movs	r2, r3
 8004fc0:	1dfb      	adds	r3, r7, #7
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d0a4      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	0018      	movs	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b004      	add	sp, #16
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08e      	sub	sp, #56	; 0x38
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe0:	617b      	str	r3, [r7, #20]
  return(result);
 8004fe2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f383 8810 	msr	PRIMASK, r3
}
 8004ff0:	46c0      	nop			; (mov r8, r8)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4926      	ldr	r1, [pc, #152]	; (8005098 <UART_EndRxTransfer+0xc4>)
 8004ffe:	400a      	ands	r2, r1
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005004:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f383 8810 	msr	PRIMASK, r3
}
 800500c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800500e:	f3ef 8310 	mrs	r3, PRIMASK
 8005012:	623b      	str	r3, [r7, #32]
  return(result);
 8005014:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
 8005018:	2301      	movs	r3, #1
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	f383 8810 	msr	PRIMASK, r3
}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	491b      	ldr	r1, [pc, #108]	; (800509c <UART_EndRxTransfer+0xc8>)
 8005030:	400a      	ands	r2, r1
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	f383 8810 	msr	PRIMASK, r3
}
 800503e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d118      	bne.n	800507a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005048:	f3ef 8310 	mrs	r3, PRIMASK
 800504c:	60bb      	str	r3, [r7, #8]
  return(result);
 800504e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	2301      	movs	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f383 8810 	msr	PRIMASK, r3
}
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2110      	movs	r1, #16
 800506a:	438a      	bics	r2, r1
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f383 8810 	msr	PRIMASK, r3
}
 8005078:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	228c      	movs	r2, #140	; 0x8c
 800507e:	2120      	movs	r1, #32
 8005080:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	46bd      	mov	sp, r7
 8005092:	b00e      	add	sp, #56	; 0x38
 8005094:	bd80      	pop	{r7, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	fffffedf 	.word	0xfffffedf
 800509c:	effffffe 	.word	0xeffffffe

080050a0 <memset>:
 80050a0:	0003      	movs	r3, r0
 80050a2:	1882      	adds	r2, r0, r2
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d100      	bne.n	80050aa <memset+0xa>
 80050a8:	4770      	bx	lr
 80050aa:	7019      	strb	r1, [r3, #0]
 80050ac:	3301      	adds	r3, #1
 80050ae:	e7f9      	b.n	80050a4 <memset+0x4>

080050b0 <__libc_init_array>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	2600      	movs	r6, #0
 80050b4:	4c0c      	ldr	r4, [pc, #48]	; (80050e8 <__libc_init_array+0x38>)
 80050b6:	4d0d      	ldr	r5, [pc, #52]	; (80050ec <__libc_init_array+0x3c>)
 80050b8:	1b64      	subs	r4, r4, r5
 80050ba:	10a4      	asrs	r4, r4, #2
 80050bc:	42a6      	cmp	r6, r4
 80050be:	d109      	bne.n	80050d4 <__libc_init_array+0x24>
 80050c0:	2600      	movs	r6, #0
 80050c2:	f000 f819 	bl	80050f8 <_init>
 80050c6:	4c0a      	ldr	r4, [pc, #40]	; (80050f0 <__libc_init_array+0x40>)
 80050c8:	4d0a      	ldr	r5, [pc, #40]	; (80050f4 <__libc_init_array+0x44>)
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	42a6      	cmp	r6, r4
 80050d0:	d105      	bne.n	80050de <__libc_init_array+0x2e>
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	00b3      	lsls	r3, r6, #2
 80050d6:	58eb      	ldr	r3, [r5, r3]
 80050d8:	4798      	blx	r3
 80050da:	3601      	adds	r6, #1
 80050dc:	e7ee      	b.n	80050bc <__libc_init_array+0xc>
 80050de:	00b3      	lsls	r3, r6, #2
 80050e0:	58eb      	ldr	r3, [r5, r3]
 80050e2:	4798      	blx	r3
 80050e4:	3601      	adds	r6, #1
 80050e6:	e7f2      	b.n	80050ce <__libc_init_array+0x1e>
 80050e8:	080051dc 	.word	0x080051dc
 80050ec:	080051dc 	.word	0x080051dc
 80050f0:	080051e0 	.word	0x080051e0
 80050f4:	080051dc 	.word	0x080051dc

080050f8 <_init>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fe:	bc08      	pop	{r3}
 8005100:	469e      	mov	lr, r3
 8005102:	4770      	bx	lr

08005104 <_fini>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510a:	bc08      	pop	{r3}
 800510c:	469e      	mov	lr, r3
 800510e:	4770      	bx	lr
