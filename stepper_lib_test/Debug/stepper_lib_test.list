
stepper_lib_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cdc  08002cdc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002cdc  08002cdc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cdc  08002cdc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ce0  08002ce0  00012ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000014  08002cf8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08002cf8  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113a4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002127  00000000  00000000  00031423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00033550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4c  00000000  00000000  000344c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013ba2  00000000  00000000  0003510c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130cf  00000000  00000000  00048cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f0b2  00000000  00000000  0005bd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038d4  00000000  00000000  000dae30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000de704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c24 	.word	0x08002c24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002c24 	.word	0x08002c24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Stepper_Init>:
int checkpoint;
Stepper_Motor stepper;

void Stepper_Init(Stepper_Motor* motor, GPIO_TypeDef* step_port, uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin,
					GPIO_TypeDef* *ms_port, uint16_t *ms_pin, Microstep step_reso)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	801a      	strh	r2, [r3, #0]
	motor->STEP_PORT = step_port;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	68ba      	ldr	r2, [r7, #8]
 8000234:	601a      	str	r2, [r3, #0]
	motor->STEP_PIN = step_pin;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	1dba      	adds	r2, r7, #6
 800023a:	8812      	ldrh	r2, [r2, #0]
 800023c:	809a      	strh	r2, [r3, #4]
	motor->DIR_PORT = dir_port;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	motor->DIR_PIN = dir_pin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2320      	movs	r3, #32
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]
	for(int i=0; i<3; i++)
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]
 8000252:	e019      	b.n	8000288 <Stepper_Init+0x68>
	{
		motor->MS_PORT[i] = ms_port[i];
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800025a:	18d3      	adds	r3, r2, r3
 800025c:	6819      	ldr	r1, [r3, #0]
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	697a      	ldr	r2, [r7, #20]
 8000262:	3204      	adds	r2, #4
 8000264:	0092      	lsls	r2, r2, #2
 8000266:	50d1      	str	r1, [r2, r3]
		motor->MS_PIN[i] = ms_pin[i];
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800026e:	18d3      	adds	r3, r2, r3
 8000270:	8819      	ldrh	r1, [r3, #0]
 8000272:	68fa      	ldr	r2, [r7, #12]
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	330c      	adds	r3, #12
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	18d3      	adds	r3, r2, r3
 800027c:	3304      	adds	r3, #4
 800027e:	1c0a      	adds	r2, r1, #0
 8000280:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<3; i++)
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	3301      	adds	r3, #1
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	2b02      	cmp	r3, #2
 800028c:	dde2      	ble.n	8000254 <Stepper_Init+0x34>
	}
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, RESET);
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	6818      	ldr	r0, [r3, #0]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	889b      	ldrh	r3, [r3, #4]
 8000296:	2200      	movs	r2, #0
 8000298:	0019      	movs	r1, r3
 800029a:	f001 f87b 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, SET);
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	6898      	ldr	r0, [r3, #8]
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	899b      	ldrh	r3, [r3, #12]
 80002a6:	2201      	movs	r2, #1
 80002a8:	0019      	movs	r1, r3
 80002aa:	f001 f873 	bl	8001394 <HAL_GPIO_WritePin>
	switch(step_reso)
 80002ae:	232c      	movs	r3, #44	; 0x2c
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d900      	bls.n	80002ba <Stepper_Init+0x9a>
 80002b8:	e081      	b.n	80003be <Stepper_Init+0x19e>
 80002ba:	009a      	lsls	r2, r3, #2
 80002bc:	4b56      	ldr	r3, [pc, #344]	; (8000418 <Stepper_Init+0x1f8>)
 80002be:	18d3      	adds	r3, r2, r3
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	469f      	mov	pc, r3
	{
		case FULL:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	6918      	ldr	r0, [r3, #16]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	8b9b      	ldrh	r3, [r3, #28]
 80002cc:	2200      	movs	r2, #0
 80002ce:	0019      	movs	r1, r3
 80002d0:	f001 f860 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	6958      	ldr	r0, [r3, #20]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	8bdb      	ldrh	r3, [r3, #30]
 80002dc:	2200      	movs	r2, #0
 80002de:	0019      	movs	r1, r3
 80002e0:	f001 f858 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	6998      	ldr	r0, [r3, #24]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	8c1b      	ldrh	r3, [r3, #32]
 80002ec:	2200      	movs	r2, #0
 80002ee:	0019      	movs	r1, r3
 80002f0:	f001 f850 	bl	8001394 <HAL_GPIO_WritePin>
			break;
 80002f4:	e07c      	b.n	80003f0 <Stepper_Init+0x1d0>
		case HALF:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	6918      	ldr	r0, [r3, #16]
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	8b9b      	ldrh	r3, [r3, #28]
 80002fe:	2201      	movs	r2, #1
 8000300:	0019      	movs	r1, r3
 8000302:	f001 f847 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	6958      	ldr	r0, [r3, #20]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	8bdb      	ldrh	r3, [r3, #30]
 800030e:	2200      	movs	r2, #0
 8000310:	0019      	movs	r1, r3
 8000312:	f001 f83f 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	6998      	ldr	r0, [r3, #24]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	8c1b      	ldrh	r3, [r3, #32]
 800031e:	2200      	movs	r2, #0
 8000320:	0019      	movs	r1, r3
 8000322:	f001 f837 	bl	8001394 <HAL_GPIO_WritePin>
			break;
 8000326:	e063      	b.n	80003f0 <Stepper_Init+0x1d0>
		case QUARTER:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	6918      	ldr	r0, [r3, #16]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	8b9b      	ldrh	r3, [r3, #28]
 8000330:	2200      	movs	r2, #0
 8000332:	0019      	movs	r1, r3
 8000334:	f001 f82e 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	6958      	ldr	r0, [r3, #20]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	8bdb      	ldrh	r3, [r3, #30]
 8000340:	2201      	movs	r2, #1
 8000342:	0019      	movs	r1, r3
 8000344:	f001 f826 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	6998      	ldr	r0, [r3, #24]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	8c1b      	ldrh	r3, [r3, #32]
 8000350:	2200      	movs	r2, #0
 8000352:	0019      	movs	r1, r3
 8000354:	f001 f81e 	bl	8001394 <HAL_GPIO_WritePin>
			break;
 8000358:	e04a      	b.n	80003f0 <Stepper_Init+0x1d0>
		case EIGHTH:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	6918      	ldr	r0, [r3, #16]
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	8b9b      	ldrh	r3, [r3, #28]
 8000362:	2201      	movs	r2, #1
 8000364:	0019      	movs	r1, r3
 8000366:	f001 f815 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	6958      	ldr	r0, [r3, #20]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	8bdb      	ldrh	r3, [r3, #30]
 8000372:	2201      	movs	r2, #1
 8000374:	0019      	movs	r1, r3
 8000376:	f001 f80d 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	6998      	ldr	r0, [r3, #24]
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	8c1b      	ldrh	r3, [r3, #32]
 8000382:	2200      	movs	r2, #0
 8000384:	0019      	movs	r1, r3
 8000386:	f001 f805 	bl	8001394 <HAL_GPIO_WritePin>
			break;
 800038a:	e031      	b.n	80003f0 <Stepper_Init+0x1d0>
		case SIXTEENTH:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6918      	ldr	r0, [r3, #16]
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	8b9b      	ldrh	r3, [r3, #28]
 8000394:	2201      	movs	r2, #1
 8000396:	0019      	movs	r1, r3
 8000398:	f000 fffc 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	6958      	ldr	r0, [r3, #20]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	8bdb      	ldrh	r3, [r3, #30]
 80003a4:	2201      	movs	r2, #1
 80003a6:	0019      	movs	r1, r3
 80003a8:	f000 fff4 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], SET);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	6998      	ldr	r0, [r3, #24]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	8c1b      	ldrh	r3, [r3, #32]
 80003b4:	2201      	movs	r2, #1
 80003b6:	0019      	movs	r1, r3
 80003b8:	f000 ffec 	bl	8001394 <HAL_GPIO_WritePin>
			break;
 80003bc:	e018      	b.n	80003f0 <Stepper_Init+0x1d0>
		default:
			HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	6918      	ldr	r0, [r3, #16]
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	8b9b      	ldrh	r3, [r3, #28]
 80003c6:	2200      	movs	r2, #0
 80003c8:	0019      	movs	r1, r3
 80003ca:	f000 ffe3 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	6958      	ldr	r0, [r3, #20]
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	8bdb      	ldrh	r3, [r3, #30]
 80003d6:	2200      	movs	r2, #0
 80003d8:	0019      	movs	r1, r3
 80003da:	f000 ffdb 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6998      	ldr	r0, [r3, #24]
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	8c1b      	ldrh	r3, [r3, #32]
 80003e6:	2200      	movs	r2, #0
 80003e8:	0019      	movs	r1, r3
 80003ea:	f000 ffd3 	bl	8001394 <HAL_GPIO_WritePin>
			break;
 80003ee:	46c0      	nop			; (mov r8, r8)
	}
	motor->index_shift = 0;
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	2392      	movs	r3, #146	; 0x92
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	2100      	movs	r1, #0
 80003f8:	52d1      	strh	r1, [r2, r3]
	motor->size = 0;
 80003fa:	68fa      	ldr	r2, [r7, #12]
 80003fc:	2393      	movs	r3, #147	; 0x93
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	2100      	movs	r1, #0
 8000402:	52d1      	strh	r1, [r2, r3]
	motor->time = 1000000; //1 second
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	2394      	movs	r3, #148	; 0x94
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	4904      	ldr	r1, [pc, #16]	; (800041c <Stepper_Init+0x1fc>)
 800040c:	50d1      	str	r1, [r2, r3]
	//motor->status = 0;
}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b006      	add	sp, #24
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	08002c50 	.word	0x08002c50
 800041c:	000f4240 	.word	0x000f4240

08000420 <Stepper_Add_Task>:

bool Stepper_Add_Task(Stepper_Motor* motor, Step_Task insert)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	6019      	str	r1, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
	if(motor->size >= QUEUE_SIZE)
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	2393      	movs	r3, #147	; 0x93
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	5ad3      	ldrh	r3, [r2, r3]
 8000436:	2b1f      	cmp	r3, #31
 8000438:	d901      	bls.n	800043e <Stepper_Add_Task+0x1e>
	{
		return false;
 800043a:	2300      	movs	r3, #0
 800043c:	e025      	b.n	800048a <Stepper_Add_Task+0x6a>
	}
	motor->size++;
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	2393      	movs	r3, #147	; 0x93
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	5ad3      	ldrh	r3, [r2, r3]
 8000446:	3301      	adds	r3, #1
 8000448:	b299      	uxth	r1, r3
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	2393      	movs	r3, #147	; 0x93
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	52d1      	strh	r1, [r2, r3]
	motor->Task_Queue[(motor->size -1 +motor->index_shift)%QUEUE_SIZE] = insert;
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	2393      	movs	r3, #147	; 0x93
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	5ad3      	ldrh	r3, [r2, r3]
 800045a:	3b01      	subs	r3, #1
 800045c:	68f9      	ldr	r1, [r7, #12]
 800045e:	2292      	movs	r2, #146	; 0x92
 8000460:	0052      	lsls	r2, r2, #1
 8000462:	5a8a      	ldrh	r2, [r1, r2]
 8000464:	189b      	adds	r3, r3, r2
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <Stepper_Add_Task+0x74>)
 8000468:	4013      	ands	r3, r2
 800046a:	d504      	bpl.n	8000476 <Stepper_Add_Task+0x56>
 800046c:	3b01      	subs	r3, #1
 800046e:	2220      	movs	r2, #32
 8000470:	4252      	negs	r2, r2
 8000472:	4313      	orrs	r3, r2
 8000474:	3301      	adds	r3, #1
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	3304      	adds	r3, #4
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	2104      	movs	r1, #4
 800047e:	18d3      	adds	r3, r2, r3
 8000480:	185b      	adds	r3, r3, r1
 8000482:	1d3a      	adds	r2, r7, #4
 8000484:	ca03      	ldmia	r2!, {r0, r1}
 8000486:	c303      	stmia	r3!, {r0, r1}
	return true;
 8000488:	2301      	movs	r3, #1
}
 800048a:	0018      	movs	r0, r3
 800048c:	46bd      	mov	sp, r7
 800048e:	b004      	add	sp, #16
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	8000001f 	.word	0x8000001f

08000498 <Stepper_Empty>:
	Stepper_Add_Task(motor, tmp);
	return true;
}

bool Stepper_Empty(Stepper_Motor* motor)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	return motor->size <= 0;
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	2393      	movs	r3, #147	; 0x93
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	5ad3      	ldrh	r3, [r2, r3]
 80004a8:	425a      	negs	r2, r3
 80004aa:	4153      	adcs	r3, r2
 80004ac:	b2db      	uxtb	r3, r3
}
 80004ae:	0018      	movs	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <Stepper_Pop_Task>:
	}
	return motor->Task_Queue[motor->index_shift];
}

void Stepper_Pop_Task(Stepper_Motor* motor) //delete a task
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
	if(motor->size <= 0)
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	2393      	movs	r3, #147	; 0x93
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	5ad3      	ldrh	r3, [r2, r3]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d01f      	beq.n	800050a <Stepper_Pop_Task+0x54>
		return;
	motor->size --;
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	2393      	movs	r3, #147	; 0x93
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	5ad3      	ldrh	r3, [r2, r3]
 80004d2:	3b01      	subs	r3, #1
 80004d4:	b299      	uxth	r1, r3
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	2393      	movs	r3, #147	; 0x93
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	52d1      	strh	r1, [r2, r3]
	motor->index_shift ++;
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	2392      	movs	r3, #146	; 0x92
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	5ad3      	ldrh	r3, [r2, r3]
 80004e6:	3301      	adds	r3, #1
 80004e8:	b299      	uxth	r1, r3
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	2392      	movs	r3, #146	; 0x92
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	52d1      	strh	r1, [r2, r3]
	motor->index_shift %= QUEUE_SIZE;
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	2392      	movs	r3, #146	; 0x92
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	5ad3      	ldrh	r3, [r2, r3]
 80004fa:	221f      	movs	r2, #31
 80004fc:	4013      	ands	r3, r2
 80004fe:	b299      	uxth	r1, r3
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	2392      	movs	r3, #146	; 0x92
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	52d1      	strh	r1, [r2, r3]
 8000508:	e000      	b.n	800050c <Stepper_Pop_Task+0x56>
		return;
 800050a:	46c0      	nop			; (mov r8, r8)
}
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}

08000512 <Stepper_Current_Interval>:

unsigned int Stepper_Current_Interval(Stepper_Motor* motor)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
	if(motor->size <= 0)
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	2393      	movs	r3, #147	; 0x93
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	5ad3      	ldrh	r3, [r2, r3]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d101      	bne.n	800052a <Stepper_Current_Interval+0x18>
		return 0;
 8000526:	2300      	movs	r3, #0
 8000528:	e009      	b.n	800053e <Stepper_Current_Interval+0x2c>
	return motor->Task_Queue[motor->index_shift].interval;
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	2392      	movs	r3, #146	; 0x92
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	5ad3      	ldrh	r3, [r2, r3]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	3304      	adds	r3, #4
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	18d3      	adds	r3, r2, r3
 800053a:	3308      	adds	r3, #8
 800053c:	681b      	ldr	r3, [r3, #0]
}
 800053e:	0018      	movs	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <Stepper_Go_One_Step>:

bool Stepper_Go_One_Step(Stepper_Motor* motor)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if(motor->size <= 0)
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	2393      	movs	r3, #147	; 0x93
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	5ad3      	ldrh	r3, [r2, r3]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <Stepper_Go_One_Step+0x18>
		return false;
 800055c:	2300      	movs	r3, #0
 800055e:	e087      	b.n	8000670 <Stepper_Go_One_Step+0x128>
	if(motor->Task_Queue[motor->index_shift].steps > 0)
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	2392      	movs	r3, #146	; 0x92
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	5ad3      	ldrh	r3, [r2, r3]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	3304      	adds	r3, #4
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	18d3      	adds	r3, r2, r3
 8000570:	3304      	adds	r3, #4
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	dd19      	ble.n	80005ac <Stepper_Go_One_Step+0x64>
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, SET);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6898      	ldr	r0, [r3, #8]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	899b      	ldrh	r3, [r3, #12]
 8000580:	2201      	movs	r2, #1
 8000582:	0019      	movs	r1, r3
 8000584:	f000 ff06 	bl	8001394 <HAL_GPIO_WritePin>
		motor->Task_Queue[motor->index_shift].steps --;
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	2392      	movs	r3, #146	; 0x92
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	5ad3      	ldrh	r3, [r2, r3]
 8000590:	001a      	movs	r2, r3
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	1d13      	adds	r3, r2, #4
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	18cb      	adds	r3, r1, r3
 800059a:	3304      	adds	r3, #4
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	1e59      	subs	r1, r3, #1
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	1d13      	adds	r3, r2, #4
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	18c3      	adds	r3, r0, r3
 80005a8:	3304      	adds	r3, #4
 80005aa:	6019      	str	r1, [r3, #0]
	}
	if(motor->Task_Queue[motor->index_shift].steps < 0)
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	2392      	movs	r3, #146	; 0x92
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	5ad3      	ldrh	r3, [r2, r3]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	3304      	adds	r3, #4
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	18d3      	adds	r3, r2, r3
 80005bc:	3304      	adds	r3, #4
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	da19      	bge.n	80005f8 <Stepper_Go_One_Step+0xb0>
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, RESET);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6898      	ldr	r0, [r3, #8]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	899b      	ldrh	r3, [r3, #12]
 80005cc:	2200      	movs	r2, #0
 80005ce:	0019      	movs	r1, r3
 80005d0:	f000 fee0 	bl	8001394 <HAL_GPIO_WritePin>
		motor->Task_Queue[motor->index_shift].steps ++;
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	2392      	movs	r3, #146	; 0x92
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	5ad3      	ldrh	r3, [r2, r3]
 80005dc:	001a      	movs	r2, r3
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	1d13      	adds	r3, r2, #4
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	18cb      	adds	r3, r1, r3
 80005e6:	3304      	adds	r3, #4
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	1c59      	adds	r1, r3, #1
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	1d13      	adds	r3, r2, #4
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	18c3      	adds	r3, r0, r3
 80005f4:	3304      	adds	r3, #4
 80005f6:	6019      	str	r1, [r3, #0]
	}
	unsigned short t = __HAL_TIM_GET_COUNTER(&htim14);
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <Stepper_Go_One_Step+0x130>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005fe:	230e      	movs	r3, #14
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, SET);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6818      	ldr	r0, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	889b      	ldrh	r3, [r3, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	0019      	movs	r1, r3
 8000610:	f000 fec0 	bl	8001394 <HAL_GPIO_WritePin>
	if(motor->Task_Queue[motor->index_shift].steps == 0)
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	2392      	movs	r3, #146	; 0x92
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	5ad3      	ldrh	r3, [r2, r3]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	3304      	adds	r3, #4
 8000620:	00db      	lsls	r3, r3, #3
 8000622:	18d3      	adds	r3, r2, r3
 8000624:	3304      	adds	r3, #4
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d103      	bne.n	8000634 <Stepper_Go_One_Step+0xec>
	{
		Stepper_Pop_Task(motor);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0018      	movs	r0, r3
 8000630:	f7ff ff41 	bl	80004b6 <Stepper_Pop_Task>
	}
	while(__HAL_TIM_GET_COUNTER(&htim14)-t <= 1 || t+__HAL_TIM_GET_COUNTER(&htim14) <= __HAL_TIM_GET_AUTORELOAD(&htim14))
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <Stepper_Go_One_Step+0x130>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800063c:	210e      	movs	r1, #14
 800063e:	187b      	adds	r3, r7, r1
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	2b01      	cmp	r3, #1
 8000646:	d9f6      	bls.n	8000636 <Stepper_Go_One_Step+0xee>
 8000648:	187b      	adds	r3, r7, r1
 800064a:	881a      	ldrh	r2, [r3, #0]
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <Stepper_Go_One_Step+0x130>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000652:	18d2      	adds	r2, r2, r3
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <Stepper_Go_One_Step+0x130>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065a:	429a      	cmp	r2, r3
 800065c:	d9eb      	bls.n	8000636 <Stepper_Go_One_Step+0xee>
	{}
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, RESET);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	889b      	ldrh	r3, [r3, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	0019      	movs	r1, r3
 800066a:	f000 fe93 	bl	8001394 <HAL_GPIO_WritePin>

	return true;
 800066e:	2301      	movs	r3, #1
}
 8000670:	0018      	movs	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	b004      	add	sp, #16
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000084 	.word	0x20000084

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b08c      	sub	sp, #48	; 0x30
 8000680:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fbba 	bl	8000dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f851 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 f92b 	bl	80008e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800068e:	f000 f891 	bl	80007b4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000692:	f000 f8f3 	bl	800087c <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000696:	f000 f8cd 	bl	8000834 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <main+0x98>)
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fc9f 	bl	8001fe0 <HAL_TIM_Base_Start_IT>

	GPIO_TypeDef* ms_port[3] = {GPIOB, GPIOB, GPIOA};
 80006a2:	2510      	movs	r5, #16
 80006a4:	197b      	adds	r3, r7, r5
 80006a6:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <main+0x9c>)
 80006a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006aa:	c313      	stmia	r3!, {r0, r1, r4}
	uint16_t ms_pin[3] = {GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_15};
 80006ac:	2408      	movs	r4, #8
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	4a1a      	ldr	r2, [pc, #104]	; (800071c <main+0xa0>)
 80006b2:	6811      	ldr	r1, [r2, #0]
 80006b4:	6019      	str	r1, [r3, #0]
 80006b6:	8892      	ldrh	r2, [r2, #4]
 80006b8:	809a      	strh	r2, [r3, #4]
	Stepper_Init(&stepper, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0, ms_port, ms_pin, FULL);
 80006ba:	23a0      	movs	r3, #160	; 0xa0
 80006bc:	05da      	lsls	r2, r3, #23
 80006be:	23a0      	movs	r3, #160	; 0xa0
 80006c0:	05d9      	lsls	r1, r3, #23
 80006c2:	4817      	ldr	r0, [pc, #92]	; (8000720 <main+0xa4>)
 80006c4:	2300      	movs	r3, #0
 80006c6:	9303      	str	r3, [sp, #12]
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	197b      	adds	r3, r7, r5
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	2301      	movs	r3, #1
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	0013      	movs	r3, r2
 80006d6:	2202      	movs	r2, #2
 80006d8:	f7ff fda2 	bl	8000220 <Stepper_Init>
	Step_Task tmp;
	for(int inter=10000; inter>=1000; inter-=1000)
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <main+0xa8>)
 80006de:	61fb      	str	r3, [r7, #28]
 80006e0:	e011      	b.n	8000706 <main+0x8a>
	{
		tmp.steps = 1000;
 80006e2:	003b      	movs	r3, r7
 80006e4:	22fa      	movs	r2, #250	; 0xfa
 80006e6:	0092      	lsls	r2, r2, #2
 80006e8:	601a      	str	r2, [r3, #0]
		tmp.interval = inter;
 80006ea:	69fa      	ldr	r2, [r7, #28]
 80006ec:	003b      	movs	r3, r7
 80006ee:	605a      	str	r2, [r3, #4]
		Stepper_Add_Task(&stepper, tmp);
 80006f0:	003b      	movs	r3, r7
 80006f2:	480b      	ldr	r0, [pc, #44]	; (8000720 <main+0xa4>)
 80006f4:	6819      	ldr	r1, [r3, #0]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	f7ff fe92 	bl	8000420 <Stepper_Add_Task>
	for(int inter=10000; inter>=1000; inter-=1000)
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <main+0xac>)
 8000700:	4694      	mov	ip, r2
 8000702:	4463      	add	r3, ip
 8000704:	61fb      	str	r3, [r7, #28]
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	23fa      	movs	r3, #250	; 0xfa
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	429a      	cmp	r2, r3
 800070e:	dae8      	bge.n	80006e2 <main+0x66>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000710:	e7fe      	b.n	8000710 <main+0x94>
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	20000084 	.word	0x20000084
 8000718:	08002c3c 	.word	0x08002c3c
 800071c:	08002c48 	.word	0x08002c48
 8000720:	2000016c 	.word	0x2000016c
 8000724:	00002710 	.word	0x00002710
 8000728:	fffffc18 	.word	0xfffffc18

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b08d      	sub	sp, #52	; 0x34
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	2414      	movs	r4, #20
 8000734:	193b      	adds	r3, r7, r4
 8000736:	0018      	movs	r0, r3
 8000738:	231c      	movs	r3, #28
 800073a:	001a      	movs	r2, r3
 800073c:	2100      	movs	r1, #0
 800073e:	f002 fa45 	bl	8002bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000742:	003b      	movs	r3, r7
 8000744:	0018      	movs	r0, r3
 8000746:	2314      	movs	r3, #20
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f002 fa3e 	bl	8002bcc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2202      	movs	r2, #2
 8000754:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0052      	lsls	r2, r2, #1
 800075c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2240      	movs	r2, #64	; 0x40
 8000768:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	193b      	adds	r3, r7, r4
 800076c:	0018      	movs	r0, r3
 800076e:	f000 ffa1 	bl	80016b4 <HAL_RCC_OscConfig>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000776:	f000 f9df 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	003b      	movs	r3, r7
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000780:	003b      	movs	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	003b      	movs	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800078c:	003b      	movs	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000792:	003b      	movs	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000798:	003b      	movs	r3, r7
 800079a:	2101      	movs	r1, #1
 800079c:	0018      	movs	r0, r3
 800079e:	f001 f96d 	bl	8001a7c <HAL_RCC_ClockConfig>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007a6:	f000 f9c7 	bl	8000b38 <Error_Handler>
  }
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b00d      	add	sp, #52	; 0x34
 80007b0:	bd90      	pop	{r4, r7, pc}
	...

080007b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_I2C1_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_I2C1_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MX_I2C1_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C1_Init+0x74>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2C1_Init+0x74>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fe21 	bl	8001438 <HAL_I2C_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007fa:	f000 f99d 	bl	8000b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_I2C1_Init+0x74>)
 8000800:	2100      	movs	r1, #0
 8000802:	0018      	movs	r0, r3
 8000804:	f000 febe 	bl	8001584 <HAL_I2CEx_ConfigAnalogFilter>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 f994 	bl	8000b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <MX_I2C1_Init+0x74>)
 8000812:	2100      	movs	r1, #0
 8000814:	0018      	movs	r0, r3
 8000816:	f000 ff01 	bl	800161c <HAL_I2CEx_ConfigDigitalFilter>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 f98b 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000030 	.word	0x20000030
 800082c:	40005400 	.word	0x40005400
 8000830:	20303e5d 	.word	0x20303e5d

08000834 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_TIM14_Init+0x40>)
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <MX_TIM14_Init+0x44>)
 800083c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_TIM14_Init+0x40>)
 8000840:	222f      	movs	r2, #47	; 0x2f
 8000842:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_TIM14_Init+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_TIM14_Init+0x40>)
 800084c:	2264      	movs	r2, #100	; 0x64
 800084e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_TIM14_Init+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_TIM14_Init+0x40>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_TIM14_Init+0x40>)
 800085e:	0018      	movs	r0, r3
 8000860:	f001 fb66 	bl	8001f30 <HAL_TIM_Base_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000868:	f000 f966 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000084 	.word	0x20000084
 8000878:	40002000 	.word	0x40002000

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_USART2_UART_Init+0x60>)
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <MX_USART2_UART_Init+0x64>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_USART2_UART_Init+0x60>)
 8000888:	22e1      	movs	r2, #225	; 0xe1
 800088a:	0252      	lsls	r2, r2, #9
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART2_UART_Init+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART2_UART_Init+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_USART2_UART_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART2_UART_Init+0x60>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_USART2_UART_Init+0x60>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART2_UART_Init+0x60>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_USART2_UART_Init+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART2_UART_Init+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_USART2_UART_Init+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <MX_USART2_UART_Init+0x60>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f001 fd7e 	bl	80023c8 <HAL_UART_Init>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f932 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200000d0 	.word	0x200000d0
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b08b      	sub	sp, #44	; 0x2c
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	2414      	movs	r4, #20
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	0018      	movs	r0, r3
 80008f0:	2314      	movs	r3, #20
 80008f2:	001a      	movs	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	f002 f969 	bl	8002bcc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <MX_GPIO_Init+0x148>)
 80008fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fe:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000900:	2104      	movs	r1, #4
 8000902:	430a      	orrs	r2, r1
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
 8000906:	4b49      	ldr	r3, [pc, #292]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090a:	2204      	movs	r2, #4
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b46      	ldr	r3, [pc, #280]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000916:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000918:	2120      	movs	r1, #32
 800091a:	430a      	orrs	r2, r1
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
 800091e:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000922:	2220      	movs	r2, #32
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b40      	ldr	r3, [pc, #256]	; (8000a2c <MX_GPIO_Init+0x148>)
 800092c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092e:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000930:	2101      	movs	r1, #1
 8000932:	430a      	orrs	r2, r1
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
 8000936:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093a:	2201      	movs	r2, #1
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000946:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000948:	2102      	movs	r1, #2
 800094a:	430a      	orrs	r2, r1
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
 800094e:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000952:	2202      	movs	r2, #2
 8000954:	4013      	ands	r3, r2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 800095a:	4935      	ldr	r1, [pc, #212]	; (8000a30 <MX_GPIO_Init+0x14c>)
 800095c:	23a0      	movs	r3, #160	; 0xa0
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	2200      	movs	r2, #0
 8000962:	0018      	movs	r0, r3
 8000964:	f000 fd16 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8000968:	23a0      	movs	r3, #160	; 0xa0
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	2201      	movs	r2, #1
 800096e:	2120      	movs	r1, #32
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fd0f 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000976:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MX_GPIO_Init+0x150>)
 8000978:	2200      	movs	r2, #0
 800097a:	2130      	movs	r1, #48	; 0x30
 800097c:	0018      	movs	r0, r3
 800097e:	f000 fd09 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	0192      	lsls	r2, r2, #6
 8000988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <MX_GPIO_Init+0x154>)
 800098e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	193b      	adds	r3, r7, r4
 8000998:	4a28      	ldr	r2, [pc, #160]	; (8000a3c <MX_GPIO_Init+0x158>)
 800099a:	0019      	movs	r1, r3
 800099c:	0010      	movs	r0, r2
 800099e:	f000 fb87 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <MX_GPIO_Init+0x14c>)
 80009a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2201      	movs	r2, #1
 80009ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	193a      	adds	r2, r7, r4
 80009bc:	23a0      	movs	r3, #160	; 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fb74 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2220      	movs	r2, #32
 80009cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	2201      	movs	r2, #1
 80009d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2203      	movs	r2, #3
 80009de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80009e0:	193a      	adds	r2, r7, r4
 80009e2:	23a0      	movs	r3, #160	; 0xa0
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 fb61 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009ee:	0021      	movs	r1, r4
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2230      	movs	r2, #48	; 0x30
 80009f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2201      	movs	r2, #1
 80009fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <MX_GPIO_Init+0x150>)
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	0010      	movs	r0, r2
 8000a10:	f000 fb4e 	bl	80010b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2007      	movs	r0, #7
 8000a1a:	f000 fb17 	bl	800104c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a1e:	2007      	movs	r0, #7
 8000a20:	f000 fb29 	bl	8001076 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b00b      	add	sp, #44	; 0x2c
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	00008003 	.word	0x00008003
 8000a34:	50000400 	.word	0x50000400
 8000a38:	10110000 	.word	0x10110000
 8000a3c:	50000800 	.word	0x50000800

08000a40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM14)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a22      	ldr	r2, [pc, #136]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d13d      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		if(cnt14 < 10000000)
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d805      	bhi.n	8000a68 <HAL_TIM_PeriodElapsedCallback+0x28>
			cnt14 ++;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	e002      	b.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x2e>
		else
			cnt14 = 0;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]

		if(!Stepper_Empty(&stepper))
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff fd11 	bl	8000498 <Stepper_Empty>
 8000a76:	0003      	movs	r3, r0
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	4053      	eors	r3, r2
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d024      	beq.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			if(stepper.time >= Stepper_Current_Interval(&stepper))
 8000a84:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a86:	2394      	movs	r3, #148	; 0x94
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	58d4      	ldr	r4, [r2, r3]
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fd3f 	bl	8000512 <Stepper_Current_Interval>
 8000a94:	0003      	movs	r3, r0
 8000a96:	429c      	cmp	r4, r3
 8000a98:	d30f      	bcc.n	8000aba <HAL_TIM_PeriodElapsedCallback+0x7a>
			{
				checkpoint = 10-checkpoint;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	220a      	movs	r2, #10
 8000aa0:	1ad2      	subs	r2, r2, r3
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000aa4:	601a      	str	r2, [r3, #0]
				Stepper_Go_One_Step(&stepper);
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff fd4d 	bl	8000548 <Stepper_Go_One_Step>
				stepper.time = 0;
 8000aae:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ab0:	2394      	movs	r3, #148	; 0x94
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	50d1      	str	r1, [r2, r3]
				stepper.time += 100;
			}
		}
	}

}
 8000ab8:	e009      	b.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x8e>
				stepper.time += 100;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000abc:	2394      	movs	r3, #148	; 0x94
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	58d3      	ldr	r3, [r2, r3]
 8000ac2:	3364      	adds	r3, #100	; 0x64
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ac8:	2394      	movs	r3, #148	; 0x94
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	50d1      	str	r1, [r2, r3]
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b003      	add	sp, #12
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40002000 	.word	0x40002000
 8000adc:	20000164 	.word	0x20000164
 8000ae0:	0098967f 	.word	0x0098967f
 8000ae4:	2000016c 	.word	0x2000016c
 8000ae8:	20000168 	.word	0x20000168

08000aec <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	0002      	movs	r2, r0
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_13)
 8000af8:	1dbb      	adds	r3, r7, #6
 8000afa:	881a      	ldrh	r2, [r3, #0]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	019b      	lsls	r3, r3, #6
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d10f      	bne.n	8000b24 <HAL_GPIO_EXTI_Rising_Callback+0x38>
	{
		Step_Task tmp = {set_steps, set_interval};
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	605a      	str	r2, [r3, #4]
		Stepper_Add_Task(&stepper, tmp);
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	f7ff fc7e 	bl	8000420 <Stepper_Add_Task>
	}
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b004      	add	sp, #16
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000004 	.word	0x20000004
 8000b30:	20000000 	.word	0x20000000
 8000b34:	2000016c 	.word	0x2000016c

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x44>)
 8000b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_MspInit+0x44>)
 8000b50:	2101      	movs	r1, #1
 8000b52:	430a      	orrs	r2, r1
 8000b54:	641a      	str	r2, [r3, #64]	; 0x40
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x44>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x44>)
 8000b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_MspInit+0x44>)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0549      	lsls	r1, r1, #21
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_MspInit+0x44>)
 8000b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	055b      	lsls	r3, r3, #21
 8000b78:	4013      	ands	r3, r2
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b091      	sub	sp, #68	; 0x44
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	232c      	movs	r3, #44	; 0x2c
 8000b96:	18fb      	adds	r3, r7, r3
 8000b98:	0018      	movs	r0, r3
 8000b9a:	2314      	movs	r3, #20
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f002 f814 	bl	8002bcc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	2410      	movs	r4, #16
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	231c      	movs	r3, #28
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f002 f80c 	bl	8002bcc <memset>
  if(hi2c->Instance==I2C1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <HAL_I2C_MspInit+0xb8>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d13e      	bne.n	8000c3c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2240      	movs	r2, #64	; 0x40
 8000bc2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 f8c1 	bl	8001d54 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bd6:	f7ff ffaf 	bl	8000b38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_I2C_MspInit+0xbc>)
 8000bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_I2C_MspInit+0xbc>)
 8000be0:	2102      	movs	r1, #2
 8000be2:	430a      	orrs	r2, r1
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_I2C_MspInit+0xbc>)
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	2202      	movs	r2, #2
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bf2:	212c      	movs	r1, #44	; 0x2c
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	22c0      	movs	r2, #192	; 0xc0
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2212      	movs	r2, #18
 8000c00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2206      	movs	r2, #6
 8000c12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_I2C_MspInit+0xc0>)
 8000c18:	0019      	movs	r1, r3
 8000c1a:	0010      	movs	r0, r2
 8000c1c:	f000 fa48 	bl	80010b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_I2C_MspInit+0xbc>)
 8000c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_I2C_MspInit+0xbc>)
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	0389      	lsls	r1, r1, #14
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_I2C_MspInit+0xbc>)
 8000c30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	039b      	lsls	r3, r3, #14
 8000c36:	4013      	ands	r3, r2
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b011      	add	sp, #68	; 0x44
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	40005400 	.word	0x40005400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	50000400 	.word	0x50000400

08000c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_TIM_Base_MspInit+0x48>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d115      	bne.n	8000c8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_TIM_Base_MspInit+0x4c>)
 8000c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_TIM_Base_MspInit+0x4c>)
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	0209      	lsls	r1, r1, #8
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_TIM_Base_MspInit+0x4c>)
 8000c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2013      	movs	r0, #19
 8000c84:	f000 f9e2 	bl	800104c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000c88:	2013      	movs	r0, #19
 8000c8a:	f000 f9f4 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b004      	add	sp, #16
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	40002000 	.word	0x40002000
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08b      	sub	sp, #44	; 0x2c
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	2414      	movs	r4, #20
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	0018      	movs	r0, r3
 8000cae:	2314      	movs	r3, #20
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f001 ff8a 	bl	8002bcc <memset>
  if(huart->Instance==USART2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <HAL_UART_MspInit+0x8c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d130      	bne.n	8000d24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	0289      	lsls	r1, r1, #10
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	029b      	lsls	r3, r3, #10
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2202      	movs	r2, #2
 8000d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2201      	movs	r2, #1
 8000d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	187a      	adds	r2, r7, r1
 8000d18:	23a0      	movs	r3, #160	; 0xa0
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	0011      	movs	r1, r2
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 f9c6 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b00b      	add	sp, #44	; 0x2c
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40021000 	.word	0x40021000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f8b0 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 fb30 	bl	80013d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <TIM14_IRQHandler+0x14>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f001 f97c 	bl	800207c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000084 	.word	0x20000084

08000d90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <SystemInit+0x14>)
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	0512      	lsls	r2, r2, #20
 8000d9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000daa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dac:	f7ff fff0 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000db0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000db2:	e003      	b.n	8000dbc <LoopCopyDataInit>

08000db4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000db6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000db8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dba:	3104      	adds	r1, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <LoopForever+0xa>)
  ldr r3, =_edata
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <LoopForever+0xe>)
  adds r2, r0, r1
 8000dc0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dc2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000dc4:	d3f6      	bcc.n	8000db4 <CopyDataInit>
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000dc8:	e002      	b.n	8000dd0 <LoopFillZerobss>

08000dca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  str  r3, [r2]
 8000dcc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dce:	3204      	adds	r2, #4

08000dd0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <LoopForever+0x16>)
  cmp r2, r3
 8000dd2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dd4:	d3f9      	bcc.n	8000dca <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000dd6:	f001 ff01 	bl	8002bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dda:	f7ff fc4f 	bl	800067c <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   r0, =_estack
 8000de0:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000de4:	08002ce4 	.word	0x08002ce4
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000dec:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000df0:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000df4:	2000029c 	.word	0x2000029c

08000df8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_IRQHandler>

08000dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e06:	2003      	movs	r0, #3
 8000e08:	f000 f80e 	bl	8000e28 <HAL_InitTick>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e001      	b.n	8000e1c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e18:	f7ff fe94 	bl	8000b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	781b      	ldrb	r3, [r3, #0]
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_InitTick+0x88>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d02b      	beq.n	8000e98 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_InitTick+0x8c>)
 8000e42:	681c      	ldr	r4, [r3, #0]
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <HAL_InitTick+0x88>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	0019      	movs	r1, r3
 8000e4a:	23fa      	movs	r3, #250	; 0xfa
 8000e4c:	0098      	lsls	r0, r3, #2
 8000e4e:	f7ff f95b 	bl	8000108 <__udivsi3>
 8000e52:	0003      	movs	r3, r0
 8000e54:	0019      	movs	r1, r3
 8000e56:	0020      	movs	r0, r4
 8000e58:	f7ff f956 	bl	8000108 <__udivsi3>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 f919 	bl	8001096 <HAL_SYSTICK_Config>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d112      	bne.n	8000e8e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d80a      	bhi.n	8000e84 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2301      	movs	r3, #1
 8000e72:	425b      	negs	r3, r3
 8000e74:	2200      	movs	r2, #0
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 f8e8 	bl	800104c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_InitTick+0x90>)
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	e00d      	b.n	8000ea0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e84:	230f      	movs	r3, #15
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	e008      	b.n	8000ea0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8e:	230f      	movs	r3, #15
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e003      	b.n	8000ea0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e98:	230f      	movs	r3, #15
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	781b      	ldrb	r3, [r3, #0]
}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b005      	add	sp, #20
 8000eac:	bd90      	pop	{r4, r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	20000010 	.word	0x20000010
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	2000000c 	.word	0x2000000c

08000ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_IncTick+0x1c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_IncTick+0x20>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	18d2      	adds	r2, r2, r3
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_IncTick+0x20>)
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	20000010 	.word	0x20000010
 8000edc:	20000298 	.word	0x20000298

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <HAL_GetTick+0x10>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	20000298 	.word	0x20000298

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	0002      	movs	r2, r0
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b7f      	cmp	r3, #127	; 0x7f
 8000f06:	d809      	bhi.n	8000f1c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	231f      	movs	r3, #31
 8000f10:	401a      	ands	r2, r3
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_EnableIRQ+0x30>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	4091      	lsls	r1, r2
 8000f18:	000a      	movs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	0002      	movs	r2, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3c:	d828      	bhi.n	8000f90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3e:	4a2f      	ldr	r2, [pc, #188]	; (8000ffc <__NVIC_SetPriority+0xd4>)
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	33c0      	adds	r3, #192	; 0xc0
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	589b      	ldr	r3, [r3, r2]
 8000f4e:	1dfa      	adds	r2, r7, #7
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	0011      	movs	r1, r2
 8000f54:	2203      	movs	r2, #3
 8000f56:	400a      	ands	r2, r1
 8000f58:	00d2      	lsls	r2, r2, #3
 8000f5a:	21ff      	movs	r1, #255	; 0xff
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	000a      	movs	r2, r1
 8000f60:	43d2      	mvns	r2, r2
 8000f62:	401a      	ands	r2, r3
 8000f64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	22ff      	movs	r2, #255	; 0xff
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	0018      	movs	r0, r3
 8000f74:	2303      	movs	r3, #3
 8000f76:	4003      	ands	r3, r0
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f7c:	481f      	ldr	r0, [pc, #124]	; (8000ffc <__NVIC_SetPriority+0xd4>)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	430a      	orrs	r2, r1
 8000f88:	33c0      	adds	r3, #192	; 0xc0
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f8e:	e031      	b.n	8000ff4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f90:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <__NVIC_SetPriority+0xd8>)
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	0019      	movs	r1, r3
 8000f98:	230f      	movs	r3, #15
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	3b08      	subs	r3, #8
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3306      	adds	r3, #6
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	18d3      	adds	r3, r2, r3
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	1dfa      	adds	r2, r7, #7
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	0011      	movs	r1, r2
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	00d2      	lsls	r2, r2, #3
 8000fb6:	21ff      	movs	r1, #255	; 0xff
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	43d2      	mvns	r2, r2
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	22ff      	movs	r2, #255	; 0xff
 8000fc8:	401a      	ands	r2, r3
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	0018      	movs	r0, r3
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	4003      	ands	r3, r0
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <__NVIC_SetPriority+0xd8>)
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	001c      	movs	r4, r3
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	4023      	ands	r3, r4
 8000fe4:	3b08      	subs	r3, #8
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	3306      	adds	r3, #6
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	18c3      	adds	r3, r0, r3
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b003      	add	sp, #12
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	1e5a      	subs	r2, r3, #1
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	045b      	lsls	r3, r3, #17
 8001014:	429a      	cmp	r2, r3
 8001016:	d301      	bcc.n	800101c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001018:	2301      	movs	r3, #1
 800101a:	e010      	b.n	800103e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <SysTick_Config+0x44>)
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	3a01      	subs	r2, #1
 8001022:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001024:	2301      	movs	r3, #1
 8001026:	425b      	negs	r3, r3
 8001028:	2103      	movs	r1, #3
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff ff7c 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x44>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x44>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	210f      	movs	r1, #15
 8001058:	187b      	adds	r3, r7, r1
 800105a:	1c02      	adds	r2, r0, #0
 800105c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	187b      	adds	r3, r7, r1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b25b      	sxtb	r3, r3
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b004      	add	sp, #16
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	0002      	movs	r2, r0
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b25b      	sxtb	r3, r3
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ff33 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff ffaf 	bl	8001004 <SysTick_Config>
 80010a6:	0003      	movs	r3, r0
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010be:	e153      	b.n	8001368 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2101      	movs	r1, #1
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4091      	lsls	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	4013      	ands	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d100      	bne.n	80010d8 <HAL_GPIO_Init+0x28>
 80010d6:	e144      	b.n	8001362 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x38>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b12      	cmp	r3, #18
 80010e6:	d125      	bne.n	8001134 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	0092      	lsls	r2, r2, #2
 80010f2:	58d3      	ldr	r3, [r2, r3]
 80010f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	2207      	movs	r2, #7
 80010fa:	4013      	ands	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	409a      	lsls	r2, r3
 8001102:	0013      	movs	r3, r2
 8001104:	43da      	mvns	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4013      	ands	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	220f      	movs	r2, #15
 8001112:	401a      	ands	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2107      	movs	r1, #7
 8001118:	400b      	ands	r3, r1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	409a      	lsls	r2, r3
 800111e:	0013      	movs	r3, r2
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4313      	orrs	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	6979      	ldr	r1, [r7, #20]
 8001132:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	409a      	lsls	r2, r3
 8001142:	0013      	movs	r3, r2
 8001144:	43da      	mvns	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	4013      	ands	r3, r2
 800114a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2203      	movs	r2, #3
 8001152:	401a      	ands	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	409a      	lsls	r2, r3
 800115a:	0013      	movs	r3, r2
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	4313      	orrs	r3, r2
 8001160:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d00b      	beq.n	8001188 <HAL_GPIO_Init+0xd8>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800117c:	2b11      	cmp	r3, #17
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b12      	cmp	r3, #18
 8001186:	d130      	bne.n	80011ea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	409a      	lsls	r2, r3
 8001196:	0013      	movs	r3, r2
 8001198:	43da      	mvns	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	4013      	ands	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011be:	2201      	movs	r2, #1
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	43da      	mvns	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	4013      	ands	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	2201      	movs	r2, #1
 80011d6:	401a      	ands	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d017      	beq.n	8001222 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	43da      	mvns	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	4013      	ands	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4313      	orrs	r3, r2
 800121a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	055b      	lsls	r3, r3, #21
 800122a:	4013      	ands	r3, r2
 800122c:	d100      	bne.n	8001230 <HAL_GPIO_Init+0x180>
 800122e:	e098      	b.n	8001362 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001230:	4a53      	ldr	r2, [pc, #332]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3318      	adds	r3, #24
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	589b      	ldr	r3, [r3, r2]
 800123c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	2203      	movs	r2, #3
 8001242:	4013      	ands	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	220f      	movs	r2, #15
 8001248:	409a      	lsls	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	43da      	mvns	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	4013      	ands	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	23a0      	movs	r3, #160	; 0xa0
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	429a      	cmp	r2, r3
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x1e2>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a48      	ldr	r2, [pc, #288]	; (8001384 <HAL_GPIO_Init+0x2d4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x1de>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a47      	ldr	r2, [pc, #284]	; (8001388 <HAL_GPIO_Init+0x2d8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x1da>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a46      	ldr	r2, [pc, #280]	; (800138c <HAL_GPIO_Init+0x2dc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x1d6>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a45      	ldr	r2, [pc, #276]	; (8001390 <HAL_GPIO_Init+0x2e0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x1d2>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x1e4>
 8001282:	2306      	movs	r3, #6
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x1e4>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x1e4>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x1e4>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x1e4>
 8001292:	2300      	movs	r3, #0
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	2103      	movs	r1, #3
 8001298:	400a      	ands	r2, r1
 800129a:	00d2      	lsls	r2, r2, #3
 800129c:	4093      	lsls	r3, r2
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80012a4:	4936      	ldr	r1, [pc, #216]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3318      	adds	r3, #24
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80012b2:	4a33      	ldr	r2, [pc, #204]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	58d3      	ldr	r3, [r2, r3]
 80012b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43da      	mvns	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	4013      	ands	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	025b      	lsls	r3, r3, #9
 80012cc:	4013      	ands	r3, r2
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80012d8:	4929      	ldr	r1, [pc, #164]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012e2:	2384      	movs	r3, #132	; 0x84
 80012e4:	58d3      	ldr	r3, [r2, r3]
 80012e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43da      	mvns	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	4013      	ands	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	029b      	lsls	r3, r3, #10
 80012fa:	4013      	ands	r3, r2
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001306:	491e      	ldr	r1, [pc, #120]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001308:	2284      	movs	r2, #132	; 0x84
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43da      	mvns	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4013      	ands	r3, r2
 800131c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	035b      	lsls	r3, r3, #13
 8001326:	4013      	ands	r3, r2
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43da      	mvns	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	4013      	ands	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	039b      	lsls	r3, r3, #14
 8001350:	4013      	ands	r3, r2
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	3301      	adds	r3, #1
 8001366:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	40da      	lsrs	r2, r3
 8001370:	1e13      	subs	r3, r2, #0
 8001372:	d000      	beq.n	8001376 <HAL_GPIO_Init+0x2c6>
 8001374:	e6a4      	b.n	80010c0 <HAL_GPIO_Init+0x10>
  }
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b006      	add	sp, #24
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021800 	.word	0x40021800
 8001384:	50000400 	.word	0x50000400
 8001388:	50000800 	.word	0x50000800
 800138c:	50000c00 	.word	0x50000c00
 8001390:	50001400 	.word	0x50001400

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	0008      	movs	r0, r1
 800139e:	0011      	movs	r1, r2
 80013a0:	1cbb      	adds	r3, r7, #2
 80013a2:	1c02      	adds	r2, r0, #0
 80013a4:	801a      	strh	r2, [r3, #0]
 80013a6:	1c7b      	adds	r3, r7, #1
 80013a8:	1c0a      	adds	r2, r1, #0
 80013aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	1c7b      	adds	r3, r7, #1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d004      	beq.n	80013be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b4:	1cbb      	adds	r3, r7, #2
 80013b6:	881a      	ldrh	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013bc:	e003      	b.n	80013c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013be:	1cbb      	adds	r3, r7, #2
 80013c0:	881a      	ldrh	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	0002      	movs	r2, r0
 80013d8:	1dbb      	adds	r3, r7, #6
 80013da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	1dba      	adds	r2, r7, #6
 80013e2:	8812      	ldrh	r2, [r2, #0]
 80013e4:	4013      	ands	r3, r2
 80013e6:	d008      	beq.n	80013fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80013ea:	1dba      	adds	r2, r7, #6
 80013ec:	8812      	ldrh	r2, [r2, #0]
 80013ee:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80013f0:	1dbb      	adds	r3, r7, #6
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fb79 	bl	8000aec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	1dba      	adds	r2, r7, #6
 8001400:	8812      	ldrh	r2, [r2, #0]
 8001402:	4013      	ands	r3, r2
 8001404:	d008      	beq.n	8001418 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001408:	1dba      	adds	r2, r7, #6
 800140a:	8812      	ldrh	r2, [r2, #0]
 800140c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800140e:	1dbb      	adds	r3, r7, #6
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	0018      	movs	r0, r3
 8001414:	f000 f806 	bl	8001424 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021800 	.word	0x40021800

08001424 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	0002      	movs	r2, r0
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e08f      	b.n	800156a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2241      	movs	r2, #65	; 0x41
 800144e:	5c9b      	ldrb	r3, [r3, r2]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d107      	bne.n	8001466 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	2100      	movs	r1, #0
 800145c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff fb93 	bl	8000b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2241      	movs	r2, #65	; 0x41
 800146a:	2124      	movs	r1, #36	; 0x24
 800146c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	438a      	bics	r2, r1
 800147c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	493b      	ldr	r1, [pc, #236]	; (8001574 <HAL_I2C_Init+0x13c>)
 8001488:	400a      	ands	r2, r1
 800148a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4938      	ldr	r1, [pc, #224]	; (8001578 <HAL_I2C_Init+0x140>)
 8001498:	400a      	ands	r2, r1
 800149a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d108      	bne.n	80014b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	0209      	lsls	r1, r1, #8
 80014b0:	430a      	orrs	r2, r1
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	e007      	b.n	80014c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2184      	movs	r1, #132	; 0x84
 80014c0:	0209      	lsls	r1, r1, #8
 80014c2:	430a      	orrs	r2, r1
 80014c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d109      	bne.n	80014e2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	0109      	lsls	r1, r1, #4
 80014dc:	430a      	orrs	r2, r1
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	e007      	b.n	80014f2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4923      	ldr	r1, [pc, #140]	; (800157c <HAL_I2C_Init+0x144>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4920      	ldr	r1, [pc, #128]	; (8001580 <HAL_I2C_Init+0x148>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	491a      	ldr	r1, [pc, #104]	; (8001578 <HAL_I2C_Init+0x140>)
 800150e:	400a      	ands	r2, r1
 8001510:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	431a      	orrs	r2, r3
 800151c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69d9      	ldr	r1, [r3, #28]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2101      	movs	r1, #1
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2241      	movs	r2, #65	; 0x41
 8001556:	2120      	movs	r1, #32
 8001558:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2242      	movs	r2, #66	; 0x42
 8001564:	2100      	movs	r1, #0
 8001566:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	f0ffffff 	.word	0xf0ffffff
 8001578:	ffff7fff 	.word	0xffff7fff
 800157c:	fffff7ff 	.word	0xfffff7ff
 8001580:	02008000 	.word	0x02008000

08001584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2241      	movs	r2, #65	; 0x41
 8001592:	5c9b      	ldrb	r3, [r3, r2]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b20      	cmp	r3, #32
 8001598:	d138      	bne.n	800160c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2240      	movs	r2, #64	; 0x40
 800159e:	5c9b      	ldrb	r3, [r3, r2]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e032      	b.n	800160e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2240      	movs	r2, #64	; 0x40
 80015ac:	2101      	movs	r1, #1
 80015ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2241      	movs	r2, #65	; 0x41
 80015b4:	2124      	movs	r1, #36	; 0x24
 80015b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2101      	movs	r1, #1
 80015c4:	438a      	bics	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4911      	ldr	r1, [pc, #68]	; (8001618 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2101      	movs	r1, #1
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2241      	movs	r2, #65	; 0x41
 80015fc:	2120      	movs	r1, #32
 80015fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2240      	movs	r2, #64	; 0x40
 8001604:	2100      	movs	r1, #0
 8001606:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	e000      	b.n	800160e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800160c:	2302      	movs	r3, #2
  }
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	ffffefff 	.word	0xffffefff

0800161c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2241      	movs	r2, #65	; 0x41
 800162a:	5c9b      	ldrb	r3, [r3, r2]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b20      	cmp	r3, #32
 8001630:	d139      	bne.n	80016a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2240      	movs	r2, #64	; 0x40
 8001636:	5c9b      	ldrb	r3, [r3, r2]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800163c:	2302      	movs	r3, #2
 800163e:	e033      	b.n	80016a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	2101      	movs	r1, #1
 8001646:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2241      	movs	r2, #65	; 0x41
 800164c:	2124      	movs	r1, #36	; 0x24
 800164e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2101      	movs	r1, #1
 800165c:	438a      	bics	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2101      	movs	r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2241      	movs	r2, #65	; 0x41
 8001696:	2120      	movs	r1, #32
 8001698:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	2100      	movs	r1, #0
 80016a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016a6:	2302      	movs	r3, #2
  }
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b004      	add	sp, #16
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	fffff0ff 	.word	0xfffff0ff

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1d0      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2201      	movs	r2, #1
 80016cc:	4013      	ands	r3, r2
 80016ce:	d100      	bne.n	80016d2 <HAL_RCC_OscConfig+0x1e>
 80016d0:	e069      	b.n	80017a6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	4bc8      	ldr	r3, [pc, #800]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2238      	movs	r2, #56	; 0x38
 80016d8:	4013      	ands	r3, r2
 80016da:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d105      	bne.n	80016ee <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d15d      	bne.n	80017a6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e1bc      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d107      	bne.n	800170a <HAL_RCC_OscConfig+0x56>
 80016fa:	4bbe      	ldr	r3, [pc, #760]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4bbd      	ldr	r3, [pc, #756]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	0249      	lsls	r1, r1, #9
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e020      	b.n	800174c <HAL_RCC_OscConfig+0x98>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	23a0      	movs	r3, #160	; 0xa0
 8001710:	02db      	lsls	r3, r3, #11
 8001712:	429a      	cmp	r2, r3
 8001714:	d10e      	bne.n	8001734 <HAL_RCC_OscConfig+0x80>
 8001716:	4bb7      	ldr	r3, [pc, #732]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4bb6      	ldr	r3, [pc, #728]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	02c9      	lsls	r1, r1, #11
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	4bb3      	ldr	r3, [pc, #716]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4bb2      	ldr	r3, [pc, #712]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	0249      	lsls	r1, r1, #9
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0x98>
 8001734:	4baf      	ldr	r3, [pc, #700]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4bae      	ldr	r3, [pc, #696]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 800173a:	49af      	ldr	r1, [pc, #700]	; (80019f8 <HAL_RCC_OscConfig+0x344>)
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	4bac      	ldr	r3, [pc, #688]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4bab      	ldr	r3, [pc, #684]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001746:	49ad      	ldr	r1, [pc, #692]	; (80019fc <HAL_RCC_OscConfig+0x348>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d014      	beq.n	800177e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fbc4 	bl	8000ee0 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800175e:	f7ff fbbf 	bl	8000ee0 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	; 0x64
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e17b      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001770:	4ba0      	ldr	r3, [pc, #640]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	029b      	lsls	r3, r3, #10
 8001778:	4013      	ands	r3, r2
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0xaa>
 800177c:	e013      	b.n	80017a6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fbaf 	bl	8000ee0 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001788:	f7ff fbaa 	bl	8000ee0 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e166      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179a:	4b96      	ldr	r3, [pc, #600]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	029b      	lsls	r3, r3, #10
 80017a2:	4013      	ands	r3, r2
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2202      	movs	r2, #2
 80017ac:	4013      	ands	r3, r2
 80017ae:	d100      	bne.n	80017b2 <HAL_RCC_OscConfig+0xfe>
 80017b0:	e086      	b.n	80018c0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b2:	4b90      	ldr	r3, [pc, #576]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2238      	movs	r2, #56	; 0x38
 80017b8:	4013      	ands	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d12f      	bne.n	8001822 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e14c      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a8b      	ldr	r2, [pc, #556]	; (8001a00 <HAL_RCC_OscConfig+0x34c>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	021a      	lsls	r2, r3, #8
 80017de:	4b85      	ldr	r3, [pc, #532]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d112      	bne.n	8001810 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017ea:	4b82      	ldr	r3, [pc, #520]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a85      	ldr	r2, [pc, #532]	; (8001a04 <HAL_RCC_OscConfig+0x350>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	4b7e      	ldr	r3, [pc, #504]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017fe:	4b7d      	ldr	r3, [pc, #500]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0adb      	lsrs	r3, r3, #11
 8001804:	2207      	movs	r2, #7
 8001806:	4013      	ands	r3, r2
 8001808:	4a7f      	ldr	r2, [pc, #508]	; (8001a08 <HAL_RCC_OscConfig+0x354>)
 800180a:	40da      	lsrs	r2, r3
 800180c:	4b7f      	ldr	r3, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0x358>)
 800180e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001810:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <HAL_RCC_OscConfig+0x35c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff fb07 	bl	8000e28 <HAL_InitTick>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d050      	beq.n	80018c0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e122      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d030      	beq.n	800188c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800182a:	4b72      	ldr	r3, [pc, #456]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a75      	ldr	r2, [pc, #468]	; (8001a04 <HAL_RCC_OscConfig+0x350>)
 8001830:	4013      	ands	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	4b6e      	ldr	r3, [pc, #440]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800183e:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	0049      	lsls	r1, r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fb48 	bl	8000ee0 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001856:	f7ff fb43 	bl	8000ee0 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0ff      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001868:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4013      	ands	r3, r2
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a61      	ldr	r2, [pc, #388]	; (8001a00 <HAL_RCC_OscConfig+0x34c>)
 800187a:	4013      	ands	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	021a      	lsls	r2, r3, #8
 8001884:	4b5b      	ldr	r3, [pc, #364]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001886:	430a      	orrs	r2, r1
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	e019      	b.n	80018c0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800188c:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001892:	4960      	ldr	r1, [pc, #384]	; (8001a14 <HAL_RCC_OscConfig+0x360>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fb22 	bl	8000ee0 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80018a2:	f7ff fb1d 	bl	8000ee0 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0d9      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b4:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2208      	movs	r2, #8
 80018c6:	4013      	ands	r3, r2
 80018c8:	d042      	beq.n	8001950 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80018ca:	4b4a      	ldr	r3, [pc, #296]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2238      	movs	r2, #56	; 0x38
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b18      	cmp	r3, #24
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d138      	bne.n	8001950 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0c2      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d019      	beq.n	800191e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80018ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ee:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	430a      	orrs	r2, r1
 80018f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff faf3 	bl	8000ee0 <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001900:	f7ff faee 	bl	8000ee0 <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0aa      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d0f1      	beq.n	8001900 <HAL_RCC_OscConfig+0x24c>
 800191c:	e018      	b.n	8001950 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001920:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001922:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001924:	2101      	movs	r1, #1
 8001926:	438a      	bics	r2, r1
 8001928:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff fad9 	bl	8000ee0 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001934:	f7ff fad4 	bl	8000ee0 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e090      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	2202      	movs	r2, #2
 800194c:	4013      	ands	r3, r2
 800194e:	d1f1      	bne.n	8001934 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2204      	movs	r2, #4
 8001956:	4013      	ands	r3, r2
 8001958:	d100      	bne.n	800195c <HAL_RCC_OscConfig+0x2a8>
 800195a:	e084      	b.n	8001a66 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195c:	230f      	movs	r3, #15
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2238      	movs	r2, #56	; 0x38
 800196a:	4013      	ands	r3, r2
 800196c:	2b20      	cmp	r3, #32
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d000      	beq.n	800197a <HAL_RCC_OscConfig+0x2c6>
 8001978:	e075      	b.n	8001a66 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e074      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d106      	bne.n	8001994 <HAL_RCC_OscConfig+0x2e0>
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001988:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 800198c:	2101      	movs	r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	65da      	str	r2, [r3, #92]	; 0x5c
 8001992:	e01c      	b.n	80019ce <HAL_RCC_OscConfig+0x31a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d10c      	bne.n	80019b6 <HAL_RCC_OscConfig+0x302>
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 800199e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019a2:	2104      	movs	r1, #4
 80019a4:	430a      	orrs	r2, r1
 80019a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80019b4:	e00b      	b.n	80019ce <HAL_RCC_OscConfig+0x31a>
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019bc:	2101      	movs	r1, #1
 80019be:	438a      	bics	r2, r1
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019c8:	2104      	movs	r1, #4
 80019ca:	438a      	bics	r2, r1
 80019cc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d028      	beq.n	8001a28 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff fa83 	bl	8000ee0 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80019de:	e01d      	b.n	8001a1c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f7ff fa7e 	bl	8000ee0 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <HAL_RCC_OscConfig+0x364>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d915      	bls.n	8001a1c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e039      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
 80019f4:	40021000 	.word	0x40021000
 80019f8:	fffeffff 	.word	0xfffeffff
 80019fc:	fffbffff 	.word	0xfffbffff
 8001a00:	ffff80ff 	.word	0xffff80ff
 8001a04:	ffffc7ff 	.word	0xffffc7ff
 8001a08:	02dc6c00 	.word	0x02dc6c00
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	2000000c 	.word	0x2000000c
 8001a14:	fffffeff 	.word	0xfffffeff
 8001a18:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_RCC_OscConfig+0x3bc>)
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d0dc      	beq.n	80019e0 <HAL_RCC_OscConfig+0x32c>
 8001a26:	e013      	b.n	8001a50 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa5a 	bl	8000ee0 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff fa55 	bl	8000ee0 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_RCC_OscConfig+0x3c0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e010      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_RCC_OscConfig+0x3bc>)
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a50:	230f      	movs	r3, #15
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d105      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_OscConfig+0x3bc>)
 8001a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_RCC_OscConfig+0x3bc>)
 8001a60:	4905      	ldr	r1, [pc, #20]	; (8001a78 <HAL_RCC_OscConfig+0x3c4>)
 8001a62:	400a      	ands	r2, r1
 8001a64:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b006      	add	sp, #24
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	00001388 	.word	0x00001388
 8001a78:	efffffff 	.word	0xefffffff

08001a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0e9      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b76      	ldr	r3, [pc, #472]	; (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2207      	movs	r2, #7
 8001a96:	4013      	ands	r3, r2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d91e      	bls.n	8001adc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b73      	ldr	r3, [pc, #460]	; (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	4b70      	ldr	r3, [pc, #448]	; (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ab0:	f7ff fa16 	bl	8000ee0 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7ff fa11 	bl	8000ee0 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_RCC_ClockConfig+0x1f4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0ca      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ace:	4b67      	ldr	r3, [pc, #412]	; (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1ee      	bne.n	8001aba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d017      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001af0:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <HAL_RCC_ClockConfig+0x1fc>)
 8001af6:	401a      	ands	r2, r3
 8001af8:	4b5e      	ldr	r3, [pc, #376]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001afa:	21b0      	movs	r1, #176	; 0xb0
 8001afc:	0109      	lsls	r1, r1, #4
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4a5d      	ldr	r2, [pc, #372]	; (8001c7c <HAL_RCC_ClockConfig+0x200>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d055      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001b20:	4b54      	ldr	r3, [pc, #336]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	221c      	movs	r2, #28
 8001b26:	4393      	bics	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	029b      	lsls	r3, r3, #10
 8001b44:	4013      	ands	r3, r2
 8001b46:	d11f      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e08b      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b54:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d113      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e07f      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b6c:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b70:	2202      	movs	r2, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e074      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e06d      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b9c:	f7ff f9a0 	bl	8000ee0 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	e009      	b.n	8001bba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba6:	f7ff f99b 	bl	8000ee0 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <HAL_RCC_ClockConfig+0x1f4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e054      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2238      	movs	r2, #56	; 0x38
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1ec      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d21e      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2207      	movs	r2, #7
 8001be0:	4393      	bics	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bec:	f7ff f978 	bl	8000ee0 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bf4:	e009      	b.n	8001c0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7ff f973 	bl	8000ee0 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <HAL_RCC_ClockConfig+0x1f4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e02c      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2207      	movs	r2, #7
 8001c10:	4013      	ands	r3, r2
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1ee      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <HAL_RCC_ClockConfig+0x204>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c36:	f000 f82b 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c3a:	0001      	movs	r1, r0
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	220f      	movs	r2, #15
 8001c44:	401a      	ands	r2, r3
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_RCC_ClockConfig+0x208>)
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	58d3      	ldr	r3, [r2, r3]
 8001c4c:	221f      	movs	r2, #31
 8001c4e:	4013      	ands	r3, r2
 8001c50:	000a      	movs	r2, r1
 8001c52:	40da      	lsrs	r2, r3
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_RCC_ClockConfig+0x20c>)
 8001c56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_RCC_ClockConfig+0x210>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7ff f8e3 	bl	8000e28 <HAL_InitTick>
 8001c62:	0003      	movs	r3, r0
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b004      	add	sp, #16
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40022000 	.word	0x40022000
 8001c70:	00001388 	.word	0x00001388
 8001c74:	40021000 	.word	0x40021000
 8001c78:	ffff84ff 	.word	0xffff84ff
 8001c7c:	fffff0ff 	.word	0xfffff0ff
 8001c80:	ffff8fff 	.word	0xffff8fff
 8001c84:	08002c64 	.word	0x08002c64
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	2000000c 	.word	0x2000000c

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x78>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2238      	movs	r2, #56	; 0x38
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d10f      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x78>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0adb      	lsrs	r3, r3, #11
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2201      	movs	r2, #1
 8001cac:	409a      	lsls	r2, r3
 8001cae:	0013      	movs	r3, r2
 8001cb0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001cb2:	6839      	ldr	r1, [r7, #0]
 8001cb4:	4815      	ldr	r0, [pc, #84]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x7c>)
 8001cb6:	f7fe fa27 	bl	8000108 <__udivsi3>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	e01e      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x78>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2238      	movs	r2, #56	; 0x38
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d102      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x7c>)
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x78>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2238      	movs	r2, #56	; 0x38
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	d103      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	e00b      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x78>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2238      	movs	r2, #56	; 0x38
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b18      	cmp	r3, #24
 8001cf0:	d103      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cf2:	23fa      	movs	r3, #250	; 0xfa
 8001cf4:	01db      	lsls	r3, r3, #7
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	e001      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001cfe:	687b      	ldr	r3, [r7, #4]
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b002      	add	sp, #8
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	02dc6c00 	.word	0x02dc6c00

08001d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b02      	ldr	r3, [pc, #8]	; (8001d20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	20000008 	.word	0x20000008

08001d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001d28:	f7ff fff2 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d2c:	0001      	movs	r1, r0
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0b1b      	lsrs	r3, r3, #12
 8001d34:	2207      	movs	r2, #7
 8001d36:	401a      	ands	r2, r3
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	58d3      	ldr	r3, [r2, r3]
 8001d3e:	221f      	movs	r2, #31
 8001d40:	4013      	ands	r3, r2
 8001d42:	40d9      	lsrs	r1, r3
 8001d44:	000b      	movs	r3, r1
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08002ca4 	.word	0x08002ca4

08001d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d5c:	2313      	movs	r3, #19
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d64:	2312      	movs	r3, #18
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	4013      	ands	r3, r2
 8001d76:	d100      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d78:	e079      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2011      	movs	r0, #17
 8001d7c:	183b      	adds	r3, r7, r0
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	055b      	lsls	r3, r3, #21
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d110      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d92:	4b60      	ldr	r3, [pc, #384]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0549      	lsls	r1, r1, #21
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d9c:	4b5d      	ldr	r3, [pc, #372]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	055b      	lsls	r3, r3, #21
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001db0:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001db2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db4:	23c0      	movs	r3, #192	; 0xc0
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d019      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d014      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001dcc:	4b51      	ldr	r3, [pc, #324]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dd6:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001dd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dda:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	0249      	lsls	r1, r1, #9
 8001de0:	430a      	orrs	r2, r1
 8001de2:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001de4:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001de8:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001dea:	494c      	ldr	r1, [pc, #304]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001df0:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d016      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfe:	f7ff f86f 	bl	8000ee0 <HAL_GetTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e06:	e00c      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff f86a 	bl	8000ee0 <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	4a43      	ldr	r2, [pc, #268]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d904      	bls.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001e18:	2313      	movs	r3, #19
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	701a      	strb	r2, [r3, #0]
          break;
 8001e20:	e004      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e22:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0ed      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001e2c:	2313      	movs	r3, #19
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	4a37      	ldr	r2, [pc, #220]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e46:	430a      	orrs	r2, r1
 8001e48:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e4a:	e005      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e4c:	2312      	movs	r3, #18
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2213      	movs	r2, #19
 8001e52:	18ba      	adds	r2, r7, r2
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e58:	2311      	movs	r3, #17
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e62:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e68:	492e      	ldr	r1, [pc, #184]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4013      	ands	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	4393      	bics	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	4013      	ands	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	01db      	lsls	r3, r3, #7
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	0899      	lsrs	r1, r3, #2
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da09      	bge.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	22e0      	movs	r2, #224	; 0xe0
 8001ef6:	4393      	bics	r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001f04:	2312      	movs	r3, #18
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	781b      	ldrb	r3, [r3, #0]
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b006      	add	sp, #24
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	40021000 	.word	0x40021000
 8001f18:	fffffcff 	.word	0xfffffcff
 8001f1c:	fffeffff 	.word	0xfffeffff
 8001f20:	00001388 	.word	0x00001388
 8001f24:	efffffff 	.word	0xefffffff
 8001f28:	ffffcfff 	.word	0xffffcfff
 8001f2c:	ffff3fff 	.word	0xffff3fff

08001f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e04a      	b.n	8001fd8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	223d      	movs	r2, #61	; 0x3d
 8001f46:	5c9b      	ldrb	r3, [r3, r2]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d107      	bne.n	8001f5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	223c      	movs	r2, #60	; 0x3c
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7fe fe79 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	223d      	movs	r2, #61	; 0x3d
 8001f62:	2102      	movs	r1, #2
 8001f64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	0019      	movs	r1, r3
 8001f70:	0010      	movs	r0, r2
 8001f72:	f000 f9a5 	bl	80022c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2248      	movs	r2, #72	; 0x48
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	223e      	movs	r2, #62	; 0x3e
 8001f82:	2101      	movs	r1, #1
 8001f84:	5499      	strb	r1, [r3, r2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	223f      	movs	r2, #63	; 0x3f
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2241      	movs	r2, #65	; 0x41
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2242      	movs	r2, #66	; 0x42
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2243      	movs	r2, #67	; 0x43
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2244      	movs	r2, #68	; 0x44
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	5499      	strb	r1, [r3, r2]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2245      	movs	r2, #69	; 0x45
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2246      	movs	r2, #70	; 0x46
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2247      	movs	r2, #71	; 0x47
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	223d      	movs	r2, #61	; 0x3d
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	223d      	movs	r2, #61	; 0x3d
 8001fec:	5c9b      	ldrb	r3, [r3, r2]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d001      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e037      	b.n	8002068 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	223d      	movs	r2, #61	; 0x3d
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2101      	movs	r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a16      	ldr	r2, [pc, #88]	; (8002070 <HAL_TIM_Base_Start_IT+0x90>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d004      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x44>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <HAL_TIM_Base_Start_IT+0x94>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d116      	bne.n	8002052 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <HAL_TIM_Base_Start_IT+0x98>)
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b06      	cmp	r3, #6
 8002034:	d016      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x84>
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	025b      	lsls	r3, r3, #9
 800203c:	429a      	cmp	r2, r3
 800203e:	d011      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002050:	e008      	b.n	8002064 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e000      	b.n	8002066 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002064:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	0018      	movs	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	b004      	add	sp, #16
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40000400 	.word	0x40000400
 8002078:	00010007 	.word	0x00010007

0800207c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2202      	movs	r2, #2
 8002098:	4013      	ands	r3, r2
 800209a:	d021      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d01d      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2203      	movs	r2, #3
 80020aa:	4252      	negs	r2, r2
 80020ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2203      	movs	r2, #3
 80020bc:	4013      	ands	r3, r2
 80020be:	d004      	beq.n	80020ca <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 f8e4 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 80020c8:	e007      	b.n	80020da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f8d7 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 f8e3 	bl	80022a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2204      	movs	r2, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	d022      	beq.n	800212e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2204      	movs	r2, #4
 80020ec:	4013      	ands	r3, r2
 80020ee:	d01e      	beq.n	800212e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2205      	movs	r2, #5
 80020f6:	4252      	negs	r2, r2
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	23c0      	movs	r3, #192	; 0xc0
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4013      	ands	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f000 f8bd 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 8002116:	e007      	b.n	8002128 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0018      	movs	r0, r3
 800211c:	f000 f8b0 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f8bc 	bl	80022a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2208      	movs	r2, #8
 8002132:	4013      	ands	r3, r2
 8002134:	d021      	beq.n	800217a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2208      	movs	r2, #8
 800213a:	4013      	ands	r3, r2
 800213c:	d01d      	beq.n	800217a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2209      	movs	r2, #9
 8002144:	4252      	negs	r2, r2
 8002146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2204      	movs	r2, #4
 800214c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2203      	movs	r2, #3
 8002156:	4013      	ands	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0018      	movs	r0, r3
 800215e:	f000 f897 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 8002162:	e007      	b.n	8002174 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	0018      	movs	r0, r3
 8002168:	f000 f88a 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0018      	movs	r0, r3
 8002170:	f000 f896 	bl	80022a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2210      	movs	r2, #16
 800217e:	4013      	ands	r3, r2
 8002180:	d022      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2210      	movs	r2, #16
 8002186:	4013      	ands	r3, r2
 8002188:	d01e      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2211      	movs	r2, #17
 8002190:	4252      	negs	r2, r2
 8002192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2208      	movs	r2, #8
 8002198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	23c0      	movs	r3, #192	; 0xc0
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f870 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 80021b0:	e007      	b.n	80021c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f863 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 f86f 	bl	80022a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2201      	movs	r2, #1
 80021cc:	4013      	ands	r3, r2
 80021ce:	d00c      	beq.n	80021ea <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d008      	beq.n	80021ea <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2202      	movs	r2, #2
 80021de:	4252      	negs	r2, r2
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7fe fc2b 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	4013      	ands	r3, r2
 80021f0:	d00c      	beq.n	800220c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	4013      	ands	r3, r2
 80021f8:	d008      	beq.n	800220c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2281      	movs	r2, #129	; 0x81
 8002200:	4252      	negs	r2, r2
 8002202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f8ce 	bl	80023a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d00b      	beq.n	800222e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2280      	movs	r2, #128	; 0x80
 800221a:	4013      	ands	r3, r2
 800221c:	d007      	beq.n	800222e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a16      	ldr	r2, [pc, #88]	; (800227c <HAL_TIM_IRQHandler+0x200>)
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	0018      	movs	r0, r3
 800222a:	f000 f8c5 	bl	80023b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	4013      	ands	r3, r2
 8002234:	d00c      	beq.n	8002250 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2240      	movs	r2, #64	; 0x40
 800223a:	4013      	ands	r3, r2
 800223c:	d008      	beq.n	8002250 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2241      	movs	r2, #65	; 0x41
 8002244:	4252      	negs	r2, r2
 8002246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f830 	bl	80022b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2220      	movs	r2, #32
 8002254:	4013      	ands	r3, r2
 8002256:	d00c      	beq.n	8002272 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	4013      	ands	r3, r2
 800225e:	d008      	beq.n	8002272 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2221      	movs	r2, #33	; 0x21
 8002266:	4252      	negs	r2, r2
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 f893 	bl	8002398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	b004      	add	sp, #16
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	fffffeff 	.word	0xfffffeff

08002280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b002      	add	sp, #8
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bd80      	pop	{r7, pc}

080022c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <TIM_Base_SetConfig+0xc0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d003      	beq.n	80022e0 <TIM_Base_SetConfig+0x20>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a2a      	ldr	r2, [pc, #168]	; (8002384 <TIM_Base_SetConfig+0xc4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d108      	bne.n	80022f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2270      	movs	r2, #112	; 0x70
 80022e4:	4393      	bics	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a22      	ldr	r2, [pc, #136]	; (8002380 <TIM_Base_SetConfig+0xc0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00f      	beq.n	800231a <TIM_Base_SetConfig+0x5a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a21      	ldr	r2, [pc, #132]	; (8002384 <TIM_Base_SetConfig+0xc4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00b      	beq.n	800231a <TIM_Base_SetConfig+0x5a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a20      	ldr	r2, [pc, #128]	; (8002388 <TIM_Base_SetConfig+0xc8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <TIM_Base_SetConfig+0x5a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a1f      	ldr	r2, [pc, #124]	; (800238c <TIM_Base_SetConfig+0xcc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d003      	beq.n	800231a <TIM_Base_SetConfig+0x5a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a1e      	ldr	r2, [pc, #120]	; (8002390 <TIM_Base_SetConfig+0xd0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d108      	bne.n	800232c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <TIM_Base_SetConfig+0xd4>)
 800231e:	4013      	ands	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	4393      	bics	r3, r2
 8002332:	001a      	movs	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <TIM_Base_SetConfig+0xc0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <TIM_Base_SetConfig+0xaa>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a0b      	ldr	r2, [pc, #44]	; (800238c <TIM_Base_SetConfig+0xcc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d003      	beq.n	800236a <TIM_Base_SetConfig+0xaa>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <TIM_Base_SetConfig+0xd0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d103      	bne.n	8002372 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	615a      	str	r2, [r3, #20]
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b004      	add	sp, #16
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40000400 	.word	0x40000400
 8002388:	40002000 	.word	0x40002000
 800238c:	40014400 	.word	0x40014400
 8002390:	40014800 	.word	0x40014800
 8002394:	fffffcff 	.word	0xfffffcff

08002398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e046      	b.n	8002468 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2288      	movs	r2, #136	; 0x88
 80023de:	589b      	ldr	r3, [r3, r2]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d107      	bne.n	80023f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2284      	movs	r2, #132	; 0x84
 80023e8:	2100      	movs	r1, #0
 80023ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7fe fc56 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2288      	movs	r2, #136	; 0x88
 80023f8:	2124      	movs	r1, #36	; 0x24
 80023fa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	438a      	bics	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	0018      	movs	r0, r3
 8002418:	f000 f9aa 	bl	8002770 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 f828 	bl	8002474 <UART_SetConfig>
 8002424:	0003      	movs	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e01c      	b.n	8002468 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	490d      	ldr	r1, [pc, #52]	; (8002470 <HAL_UART_Init+0xa8>)
 800243a:	400a      	ands	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	212a      	movs	r1, #42	; 0x2a
 800244a:	438a      	bics	r2, r1
 800244c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2101      	movs	r1, #1
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f000 fa39 	bl	80028d8 <UART_CheckIdleState>
 8002466:	0003      	movs	r3, r0
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}
 8002470:	ffffb7ff 	.word	0xffffb7ff

08002474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800247c:	231e      	movs	r3, #30
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4aab      	ldr	r2, [pc, #684]	; (8002750 <UART_SetConfig+0x2dc>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4aa6      	ldr	r2, [pc, #664]	; (8002754 <UART_SetConfig+0x2e0>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a9d      	ldr	r2, [pc, #628]	; (8002758 <UART_SetConfig+0x2e4>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	0019      	movs	r1, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	220f      	movs	r2, #15
 80024f8:	4393      	bics	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a93      	ldr	r2, [pc, #588]	; (800275c <UART_SetConfig+0x2e8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d127      	bne.n	8002562 <UART_SetConfig+0xee>
 8002512:	4b93      	ldr	r3, [pc, #588]	; (8002760 <UART_SetConfig+0x2ec>)
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	2203      	movs	r2, #3
 8002518:	4013      	ands	r3, r2
 800251a:	2b03      	cmp	r3, #3
 800251c:	d017      	beq.n	800254e <UART_SetConfig+0xda>
 800251e:	d81b      	bhi.n	8002558 <UART_SetConfig+0xe4>
 8002520:	2b02      	cmp	r3, #2
 8002522:	d00a      	beq.n	800253a <UART_SetConfig+0xc6>
 8002524:	d818      	bhi.n	8002558 <UART_SetConfig+0xe4>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <UART_SetConfig+0xbc>
 800252a:	2b01      	cmp	r3, #1
 800252c:	d00a      	beq.n	8002544 <UART_SetConfig+0xd0>
 800252e:	e013      	b.n	8002558 <UART_SetConfig+0xe4>
 8002530:	231f      	movs	r3, #31
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e021      	b.n	800257e <UART_SetConfig+0x10a>
 800253a:	231f      	movs	r3, #31
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e01c      	b.n	800257e <UART_SetConfig+0x10a>
 8002544:	231f      	movs	r3, #31
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2204      	movs	r2, #4
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e017      	b.n	800257e <UART_SetConfig+0x10a>
 800254e:	231f      	movs	r3, #31
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2208      	movs	r2, #8
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e012      	b.n	800257e <UART_SetConfig+0x10a>
 8002558:	231f      	movs	r3, #31
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2210      	movs	r2, #16
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e00d      	b.n	800257e <UART_SetConfig+0x10a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a7f      	ldr	r2, [pc, #508]	; (8002764 <UART_SetConfig+0x2f0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d104      	bne.n	8002576 <UART_SetConfig+0x102>
 800256c:	231f      	movs	r3, #31
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e003      	b.n	800257e <UART_SetConfig+0x10a>
 8002576:	231f      	movs	r3, #31
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2210      	movs	r2, #16
 800257c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	429a      	cmp	r2, r3
 8002588:	d000      	beq.n	800258c <UART_SetConfig+0x118>
 800258a:	e06f      	b.n	800266c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800258c:	231f      	movs	r3, #31
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b08      	cmp	r3, #8
 8002594:	d01f      	beq.n	80025d6 <UART_SetConfig+0x162>
 8002596:	dc22      	bgt.n	80025de <UART_SetConfig+0x16a>
 8002598:	2b04      	cmp	r3, #4
 800259a:	d017      	beq.n	80025cc <UART_SetConfig+0x158>
 800259c:	dc1f      	bgt.n	80025de <UART_SetConfig+0x16a>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <UART_SetConfig+0x134>
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d005      	beq.n	80025b2 <UART_SetConfig+0x13e>
 80025a6:	e01a      	b.n	80025de <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025a8:	f7ff fbbc 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 80025ac:	0003      	movs	r3, r0
 80025ae:	61bb      	str	r3, [r7, #24]
        break;
 80025b0:	e01c      	b.n	80025ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80025b2:	4b6b      	ldr	r3, [pc, #428]	; (8002760 <UART_SetConfig+0x2ec>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2207      	movs	r2, #7
 80025ba:	4013      	ands	r3, r2
 80025bc:	3301      	adds	r3, #1
 80025be:	0019      	movs	r1, r3
 80025c0:	4869      	ldr	r0, [pc, #420]	; (8002768 <UART_SetConfig+0x2f4>)
 80025c2:	f7fd fda1 	bl	8000108 <__udivsi3>
 80025c6:	0003      	movs	r3, r0
 80025c8:	61bb      	str	r3, [r7, #24]
        break;
 80025ca:	e00f      	b.n	80025ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025cc:	f7ff fb60 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 80025d0:	0003      	movs	r3, r0
 80025d2:	61bb      	str	r3, [r7, #24]
        break;
 80025d4:	e00a      	b.n	80025ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	61bb      	str	r3, [r7, #24]
        break;
 80025dc:	e006      	b.n	80025ec <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025e2:	231e      	movs	r3, #30
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
        break;
 80025ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d100      	bne.n	80025f4 <UART_SetConfig+0x180>
 80025f2:	e097      	b.n	8002724 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f8:	4b5c      	ldr	r3, [pc, #368]	; (800276c <UART_SetConfig+0x2f8>)
 80025fa:	0052      	lsls	r2, r2, #1
 80025fc:	5ad3      	ldrh	r3, [r2, r3]
 80025fe:	0019      	movs	r1, r3
 8002600:	69b8      	ldr	r0, [r7, #24]
 8002602:	f7fd fd81 	bl	8000108 <__udivsi3>
 8002606:	0003      	movs	r3, r0
 8002608:	005a      	lsls	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	18d2      	adds	r2, r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0019      	movs	r1, r3
 8002618:	0010      	movs	r0, r2
 800261a:	f7fd fd75 	bl	8000108 <__udivsi3>
 800261e:	0003      	movs	r3, r0
 8002620:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b0f      	cmp	r3, #15
 8002626:	d91c      	bls.n	8002662 <UART_SetConfig+0x1ee>
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	025b      	lsls	r3, r3, #9
 800262e:	429a      	cmp	r2, r3
 8002630:	d217      	bcs.n	8002662 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	b29a      	uxth	r2, r3
 8002636:	200e      	movs	r0, #14
 8002638:	183b      	adds	r3, r7, r0
 800263a:	210f      	movs	r1, #15
 800263c:	438a      	bics	r2, r1
 800263e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	b29b      	uxth	r3, r3
 8002646:	2207      	movs	r2, #7
 8002648:	4013      	ands	r3, r2
 800264a:	b299      	uxth	r1, r3
 800264c:	183b      	adds	r3, r7, r0
 800264e:	183a      	adds	r2, r7, r0
 8002650:	8812      	ldrh	r2, [r2, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	183a      	adds	r2, r7, r0
 800265c:	8812      	ldrh	r2, [r2, #0]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	e060      	b.n	8002724 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002662:	231e      	movs	r3, #30
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e05b      	b.n	8002724 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800266c:	231f      	movs	r3, #31
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b08      	cmp	r3, #8
 8002674:	d01f      	beq.n	80026b6 <UART_SetConfig+0x242>
 8002676:	dc22      	bgt.n	80026be <UART_SetConfig+0x24a>
 8002678:	2b04      	cmp	r3, #4
 800267a:	d017      	beq.n	80026ac <UART_SetConfig+0x238>
 800267c:	dc1f      	bgt.n	80026be <UART_SetConfig+0x24a>
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <UART_SetConfig+0x214>
 8002682:	2b02      	cmp	r3, #2
 8002684:	d005      	beq.n	8002692 <UART_SetConfig+0x21e>
 8002686:	e01a      	b.n	80026be <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002688:	f7ff fb4c 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 800268c:	0003      	movs	r3, r0
 800268e:	61bb      	str	r3, [r7, #24]
        break;
 8002690:	e01c      	b.n	80026cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002692:	4b33      	ldr	r3, [pc, #204]	; (8002760 <UART_SetConfig+0x2ec>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2207      	movs	r2, #7
 800269a:	4013      	ands	r3, r2
 800269c:	3301      	adds	r3, #1
 800269e:	0019      	movs	r1, r3
 80026a0:	4831      	ldr	r0, [pc, #196]	; (8002768 <UART_SetConfig+0x2f4>)
 80026a2:	f7fd fd31 	bl	8000108 <__udivsi3>
 80026a6:	0003      	movs	r3, r0
 80026a8:	61bb      	str	r3, [r7, #24]
        break;
 80026aa:	e00f      	b.n	80026cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ac:	f7ff faf0 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 80026b0:	0003      	movs	r3, r0
 80026b2:	61bb      	str	r3, [r7, #24]
        break;
 80026b4:	e00a      	b.n	80026cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	61bb      	str	r3, [r7, #24]
        break;
 80026bc:	e006      	b.n	80026cc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026c2:	231e      	movs	r3, #30
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
        break;
 80026ca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d028      	beq.n	8002724 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <UART_SetConfig+0x2f8>)
 80026d8:	0052      	lsls	r2, r2, #1
 80026da:	5ad3      	ldrh	r3, [r2, r3]
 80026dc:	0019      	movs	r1, r3
 80026de:	69b8      	ldr	r0, [r7, #24]
 80026e0:	f7fd fd12 	bl	8000108 <__udivsi3>
 80026e4:	0003      	movs	r3, r0
 80026e6:	001a      	movs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	18d2      	adds	r2, r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0019      	movs	r1, r3
 80026f6:	0010      	movs	r0, r2
 80026f8:	f7fd fd06 	bl	8000108 <__udivsi3>
 80026fc:	0003      	movs	r3, r0
 80026fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b0f      	cmp	r3, #15
 8002704:	d90a      	bls.n	800271c <UART_SetConfig+0x2a8>
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	025b      	lsls	r3, r3, #9
 800270c:	429a      	cmp	r2, r3
 800270e:	d205      	bcs.n	800271c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	b29a      	uxth	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	e003      	b.n	8002724 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800271c:	231e      	movs	r3, #30
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	226a      	movs	r2, #106	; 0x6a
 8002728:	2101      	movs	r1, #1
 800272a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2268      	movs	r2, #104	; 0x68
 8002730:	2101      	movs	r1, #1
 8002732:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002740:	231e      	movs	r3, #30
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	781b      	ldrb	r3, [r3, #0]
}
 8002746:	0018      	movs	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	b008      	add	sp, #32
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	cfff69f3 	.word	0xcfff69f3
 8002754:	ffffcfff 	.word	0xffffcfff
 8002758:	11fff4ff 	.word	0x11fff4ff
 800275c:	40013800 	.word	0x40013800
 8002760:	40021000 	.word	0x40021000
 8002764:	40004400 	.word	0x40004400
 8002768:	02dc6c00 	.word	0x02dc6c00
 800276c:	08002cc4 	.word	0x08002cc4

08002770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	2208      	movs	r2, #8
 800277e:	4013      	ands	r3, r2
 8002780:	d00b      	beq.n	800279a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a4a      	ldr	r2, [pc, #296]	; (80028b4 <UART_AdvFeatureConfig+0x144>)
 800278a:	4013      	ands	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	2201      	movs	r2, #1
 80027a0:	4013      	ands	r3, r2
 80027a2:	d00b      	beq.n	80027bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a43      	ldr	r2, [pc, #268]	; (80028b8 <UART_AdvFeatureConfig+0x148>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	0019      	movs	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d00b      	beq.n	80027de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4a3b      	ldr	r2, [pc, #236]	; (80028bc <UART_AdvFeatureConfig+0x14c>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	2204      	movs	r2, #4
 80027e4:	4013      	ands	r3, r2
 80027e6:	d00b      	beq.n	8002800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <UART_AdvFeatureConfig+0x150>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	0019      	movs	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	2210      	movs	r2, #16
 8002806:	4013      	ands	r3, r2
 8002808:	d00b      	beq.n	8002822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a2c      	ldr	r2, [pc, #176]	; (80028c4 <UART_AdvFeatureConfig+0x154>)
 8002812:	4013      	ands	r3, r2
 8002814:	0019      	movs	r1, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	2220      	movs	r2, #32
 8002828:	4013      	ands	r3, r2
 800282a:	d00b      	beq.n	8002844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <UART_AdvFeatureConfig+0x158>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	2240      	movs	r2, #64	; 0x40
 800284a:	4013      	ands	r3, r2
 800284c:	d01d      	beq.n	800288a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <UART_AdvFeatureConfig+0x15c>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	035b      	lsls	r3, r3, #13
 800286e:	429a      	cmp	r2, r3
 8002870:	d10b      	bne.n	800288a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <UART_AdvFeatureConfig+0x160>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	4013      	ands	r3, r2
 8002892:	d00b      	beq.n	80028ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <UART_AdvFeatureConfig+0x164>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
  }
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b002      	add	sp, #8
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	ffff7fff 	.word	0xffff7fff
 80028b8:	fffdffff 	.word	0xfffdffff
 80028bc:	fffeffff 	.word	0xfffeffff
 80028c0:	fffbffff 	.word	0xfffbffff
 80028c4:	ffffefff 	.word	0xffffefff
 80028c8:	ffffdfff 	.word	0xffffdfff
 80028cc:	ffefffff 	.word	0xffefffff
 80028d0:	ff9fffff 	.word	0xff9fffff
 80028d4:	fff7ffff 	.word	0xfff7ffff

080028d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b092      	sub	sp, #72	; 0x48
 80028dc:	af02      	add	r7, sp, #8
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2290      	movs	r2, #144	; 0x90
 80028e4:	2100      	movs	r1, #0
 80028e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028e8:	f7fe fafa 	bl	8000ee0 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2208      	movs	r2, #8
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d12d      	bne.n	800295a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	0391      	lsls	r1, r2, #14
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4a47      	ldr	r2, [pc, #284]	; (8002a24 <UART_CheckIdleState+0x14c>)
 8002908:	9200      	str	r2, [sp, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	f000 f88e 	bl	8002a2c <UART_WaitOnFlagUntilTimeout>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d022      	beq.n	800295a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002914:	f3ef 8310 	mrs	r3, PRIMASK
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800291c:	63bb      	str	r3, [r7, #56]	; 0x38
 800291e:	2301      	movs	r3, #1
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	f383 8810 	msr	PRIMASK, r3
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	438a      	bics	r2, r1
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	f383 8810 	msr	PRIMASK, r3
}
 8002944:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2288      	movs	r2, #136	; 0x88
 800294a:	2120      	movs	r1, #32
 800294c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2284      	movs	r2, #132	; 0x84
 8002952:	2100      	movs	r1, #0
 8002954:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e060      	b.n	8002a1c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2204      	movs	r2, #4
 8002962:	4013      	ands	r3, r2
 8002964:	2b04      	cmp	r3, #4
 8002966:	d146      	bne.n	80029f6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	03d1      	lsls	r1, r2, #15
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4a2c      	ldr	r2, [pc, #176]	; (8002a24 <UART_CheckIdleState+0x14c>)
 8002972:	9200      	str	r2, [sp, #0]
 8002974:	2200      	movs	r2, #0
 8002976:	f000 f859 	bl	8002a2c <UART_WaitOnFlagUntilTimeout>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d03b      	beq.n	80029f6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800297e:	f3ef 8310 	mrs	r3, PRIMASK
 8002982:	60fb      	str	r3, [r7, #12]
  return(result);
 8002984:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
 8002988:	2301      	movs	r3, #1
 800298a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f383 8810 	msr	PRIMASK, r3
}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4922      	ldr	r1, [pc, #136]	; (8002a28 <UART_CheckIdleState+0x150>)
 80029a0:	400a      	ands	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f383 8810 	msr	PRIMASK, r3
}
 80029ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029b0:	f3ef 8310 	mrs	r3, PRIMASK
 80029b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80029b6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
 80029ba:	2301      	movs	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f383 8810 	msr	PRIMASK, r3
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	438a      	bics	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	f383 8810 	msr	PRIMASK, r3
}
 80029e0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	228c      	movs	r2, #140	; 0x8c
 80029e6:	2120      	movs	r1, #32
 80029e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2284      	movs	r2, #132	; 0x84
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e012      	b.n	8002a1c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2288      	movs	r2, #136	; 0x88
 80029fa:	2120      	movs	r1, #32
 80029fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	228c      	movs	r2, #140	; 0x8c
 8002a02:	2120      	movs	r1, #32
 8002a04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2284      	movs	r2, #132	; 0x84
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b010      	add	sp, #64	; 0x40
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	01ffffff 	.word	0x01ffffff
 8002a28:	fffffedf 	.word	0xfffffedf

08002a2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3c:	e04b      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	3301      	adds	r3, #1
 8002a42:	d048      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a44:	f7fe fa4c 	bl	8000ee0 <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d302      	bcc.n	8002a5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e04b      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2204      	movs	r2, #4
 8002a66:	4013      	ands	r3, r2
 8002a68:	d035      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2208      	movs	r2, #8
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d111      	bne.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f83c 	bl	8002b00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2290      	movs	r2, #144	; 0x90
 8002a8c:	2108      	movs	r1, #8
 8002a8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2284      	movs	r2, #132	; 0x84
 8002a94:	2100      	movs	r1, #0
 8002a96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e02c      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d112      	bne.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 f81f 	bl	8002b00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2290      	movs	r2, #144	; 0x90
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2284      	movs	r2, #132	; 0x84
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e00f      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	425a      	negs	r2, r3
 8002ae6:	4153      	adcs	r3, r2
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	001a      	movs	r2, r3
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d0a4      	beq.n	8002a3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b004      	add	sp, #16
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	; 0x38
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b08:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0c:	617b      	str	r3, [r7, #20]
  return(result);
 8002b0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
 8002b12:	2301      	movs	r3, #1
 8002b14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f383 8810 	msr	PRIMASK, r3
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4926      	ldr	r1, [pc, #152]	; (8002bc4 <UART_EndRxTransfer+0xc4>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f383 8810 	msr	PRIMASK, r3
}
 8002b38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3e:	623b      	str	r3, [r7, #32]
  return(result);
 8002b40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b42:	633b      	str	r3, [r7, #48]	; 0x30
 8002b44:	2301      	movs	r3, #1
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	f383 8810 	msr	PRIMASK, r3
}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	491b      	ldr	r1, [pc, #108]	; (8002bc8 <UART_EndRxTransfer+0xc8>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d118      	bne.n	8002ba6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b74:	f3ef 8310 	mrs	r3, PRIMASK
 8002b78:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b7e:	2301      	movs	r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f383 8810 	msr	PRIMASK, r3
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2110      	movs	r1, #16
 8002b96:	438a      	bics	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f383 8810 	msr	PRIMASK, r3
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	228c      	movs	r2, #140	; 0x8c
 8002baa:	2120      	movs	r1, #32
 8002bac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b00e      	add	sp, #56	; 0x38
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	fffffedf 	.word	0xfffffedf
 8002bc8:	effffffe 	.word	0xeffffffe

08002bcc <memset>:
 8002bcc:	0003      	movs	r3, r0
 8002bce:	1882      	adds	r2, r0, r2
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d100      	bne.n	8002bd6 <memset+0xa>
 8002bd4:	4770      	bx	lr
 8002bd6:	7019      	strb	r1, [r3, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	e7f9      	b.n	8002bd0 <memset+0x4>

08002bdc <__libc_init_array>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	2600      	movs	r6, #0
 8002be0:	4c0c      	ldr	r4, [pc, #48]	; (8002c14 <__libc_init_array+0x38>)
 8002be2:	4d0d      	ldr	r5, [pc, #52]	; (8002c18 <__libc_init_array+0x3c>)
 8002be4:	1b64      	subs	r4, r4, r5
 8002be6:	10a4      	asrs	r4, r4, #2
 8002be8:	42a6      	cmp	r6, r4
 8002bea:	d109      	bne.n	8002c00 <__libc_init_array+0x24>
 8002bec:	2600      	movs	r6, #0
 8002bee:	f000 f819 	bl	8002c24 <_init>
 8002bf2:	4c0a      	ldr	r4, [pc, #40]	; (8002c1c <__libc_init_array+0x40>)
 8002bf4:	4d0a      	ldr	r5, [pc, #40]	; (8002c20 <__libc_init_array+0x44>)
 8002bf6:	1b64      	subs	r4, r4, r5
 8002bf8:	10a4      	asrs	r4, r4, #2
 8002bfa:	42a6      	cmp	r6, r4
 8002bfc:	d105      	bne.n	8002c0a <__libc_init_array+0x2e>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	00b3      	lsls	r3, r6, #2
 8002c02:	58eb      	ldr	r3, [r5, r3]
 8002c04:	4798      	blx	r3
 8002c06:	3601      	adds	r6, #1
 8002c08:	e7ee      	b.n	8002be8 <__libc_init_array+0xc>
 8002c0a:	00b3      	lsls	r3, r6, #2
 8002c0c:	58eb      	ldr	r3, [r5, r3]
 8002c0e:	4798      	blx	r3
 8002c10:	3601      	adds	r6, #1
 8002c12:	e7f2      	b.n	8002bfa <__libc_init_array+0x1e>
 8002c14:	08002cdc 	.word	0x08002cdc
 8002c18:	08002cdc 	.word	0x08002cdc
 8002c1c:	08002ce0 	.word	0x08002ce0
 8002c20:	08002cdc 	.word	0x08002cdc

08002c24 <_init>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2a:	bc08      	pop	{r3}
 8002c2c:	469e      	mov	lr, r3
 8002c2e:	4770      	bx	lr

08002c30 <_fini>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr
