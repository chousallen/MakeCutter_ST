
stepper_lib_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d00  08002d00  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002d00  08002d00  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d00  08002d00  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d04  08002d04  00012d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000014  08002d1c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08002d1c  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011dc7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e8  00000000  00000000  00031e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  00034130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c60  00000000  00000000  000350c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013dc6  00000000  00000000  00035d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001389e  00000000  00000000  00049ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f0f9  00000000  00000000  0005d384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003904  00000000  00000000  000dc480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000dfd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c48 	.word	0x08002c48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002c48 	.word	0x08002c48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b08c      	sub	sp, #48	; 0x30
 8000224:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fdfa 	bl	8000e1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f851 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f92b 	bl	8000488 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000232:	f000 f891 	bl	8000358 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f8f3 	bl	8000420 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 800023a:	f000 f8cd 	bl	80003d8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14); //for stepper_motor
 800023e:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <main+0x98>)
 8000240:	0018      	movs	r0, r3
 8000242:	f001 fedf 	bl	8002004 <HAL_TIM_Base_Start_IT>

	GPIO_TypeDef* ms_port[3] = {GPIOB, GPIOB, GPIOA};
 8000246:	2510      	movs	r5, #16
 8000248:	197b      	adds	r3, r7, r5
 800024a:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <main+0x9c>)
 800024c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024e:	c313      	stmia	r3!, {r0, r1, r4}
	uint16_t ms_pin[3] = {GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_15};
 8000250:	2408      	movs	r4, #8
 8000252:	193b      	adds	r3, r7, r4
 8000254:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <main+0xa0>)
 8000256:	6811      	ldr	r1, [r2, #0]
 8000258:	6019      	str	r1, [r3, #0]
 800025a:	8892      	ldrh	r2, [r2, #4]
 800025c:	809a      	strh	r2, [r3, #4]
	Stepper_Init(&stepper, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0, ms_port, ms_pin, FULL);
 800025e:	23a0      	movs	r3, #160	; 0xa0
 8000260:	05da      	lsls	r2, r3, #23
 8000262:	23a0      	movs	r3, #160	; 0xa0
 8000264:	05d9      	lsls	r1, r3, #23
 8000266:	4817      	ldr	r0, [pc, #92]	; (80002c4 <main+0xa4>)
 8000268:	2300      	movs	r3, #0
 800026a:	9303      	str	r3, [sp, #12]
 800026c:	193b      	adds	r3, r7, r4
 800026e:	9302      	str	r3, [sp, #8]
 8000270:	197b      	adds	r3, r7, r5
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	2301      	movs	r3, #1
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	0013      	movs	r3, r2
 800027a:	2202      	movs	r2, #2
 800027c:	f000 fa34 	bl	80006e8 <Stepper_Init>
	Step_Task tmp;
	for(int inter=10000; inter>=1000; inter-=1000)
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0xa8>)
 8000282:	61fb      	str	r3, [r7, #28]
 8000284:	e011      	b.n	80002aa <main+0x8a>
	{
		tmp.steps = 1000;
 8000286:	003b      	movs	r3, r7
 8000288:	22fa      	movs	r2, #250	; 0xfa
 800028a:	0092      	lsls	r2, r2, #2
 800028c:	601a      	str	r2, [r3, #0]
		tmp.interval = inter;
 800028e:	69fa      	ldr	r2, [r7, #28]
 8000290:	003b      	movs	r3, r7
 8000292:	605a      	str	r2, [r3, #4]
		Stepper_Add_Task(&stepper, tmp);
 8000294:	003b      	movs	r3, r7
 8000296:	480b      	ldr	r0, [pc, #44]	; (80002c4 <main+0xa4>)
 8000298:	6819      	ldr	r1, [r3, #0]
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	f000 fb36 	bl	800090c <Stepper_Add_Task>
	for(int inter=10000; inter>=1000; inter-=1000)
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <main+0xac>)
 80002a4:	4694      	mov	ip, r2
 80002a6:	4463      	add	r3, ip
 80002a8:	61fb      	str	r3, [r7, #28]
 80002aa:	69fa      	ldr	r2, [r7, #28]
 80002ac:	23fa      	movs	r3, #250	; 0xfa
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	429a      	cmp	r2, r3
 80002b2:	dae8      	bge.n	8000286 <main+0x66>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <main+0x94>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000084 	.word	0x20000084
 80002bc:	08002c60 	.word	0x08002c60
 80002c0:	08002c6c 	.word	0x08002c6c
 80002c4:	2000016c 	.word	0x2000016c
 80002c8:	00002710 	.word	0x00002710
 80002cc:	fffffc18 	.word	0xfffffc18

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b08d      	sub	sp, #52	; 0x34
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	2414      	movs	r4, #20
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	231c      	movs	r3, #28
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f002 fc85 	bl	8002bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	003b      	movs	r3, r7
 80002e8:	0018      	movs	r0, r3
 80002ea:	2314      	movs	r3, #20
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f002 fc7e 	bl	8002bf0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2202      	movs	r2, #2
 80002f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2280      	movs	r2, #128	; 0x80
 80002fe:	0052      	lsls	r2, r2, #1
 8000300:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2240      	movs	r2, #64	; 0x40
 800030c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	193b      	adds	r3, r7, r4
 8000310:	0018      	movs	r0, r3
 8000312:	f001 f9e1 	bl	80016d8 <HAL_RCC_OscConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800031a:	f000 f9df 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	003b      	movs	r3, r7
 8000320:	2207      	movs	r2, #7
 8000322:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000324:	003b      	movs	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	003b      	movs	r3, r7
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000330:	003b      	movs	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000336:	003b      	movs	r3, r7
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033c:	003b      	movs	r3, r7
 800033e:	2101      	movs	r1, #1
 8000340:	0018      	movs	r0, r3
 8000342:	f001 fbad 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800034a:	f000 f9c7 	bl	80006dc <Error_Handler>
  }
}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	46bd      	mov	sp, r7
 8000352:	b00d      	add	sp, #52	; 0x34
 8000354:	bd90      	pop	{r4, r7, pc}
	...

08000358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_I2C1_Init+0x74>)
 800035e:	4a1c      	ldr	r2, [pc, #112]	; (80003d0 <MX_I2C1_Init+0x78>)
 8000360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_I2C1_Init+0x74>)
 8000364:	4a1b      	ldr	r2, [pc, #108]	; (80003d4 <MX_I2C1_Init+0x7c>)
 8000366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <MX_I2C1_Init+0x74>)
 8000370:	2201      	movs	r2, #1
 8000372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_I2C1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_I2C1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_I2C1_Init+0x74>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 f861 	bl	800145c <HAL_I2C_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800039e:	f000 f99d 	bl	80006dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <MX_I2C1_Init+0x74>)
 80003a4:	2100      	movs	r1, #0
 80003a6:	0018      	movs	r0, r3
 80003a8:	f001 f8fe 	bl	80015a8 <HAL_I2CEx_ConfigAnalogFilter>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003b0:	f000 f994 	bl	80006dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <MX_I2C1_Init+0x74>)
 80003b6:	2100      	movs	r1, #0
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 f941 	bl	8001640 <HAL_I2CEx_ConfigDigitalFilter>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003c2:	f000 f98b 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000030 	.word	0x20000030
 80003d0:	40005400 	.word	0x40005400
 80003d4:	20303e5d 	.word	0x20303e5d

080003d8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80003dc:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_TIM14_Init+0x40>)
 80003de:	4a0f      	ldr	r2, [pc, #60]	; (800041c <MX_TIM14_Init+0x44>)
 80003e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47;
 80003e2:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <MX_TIM14_Init+0x40>)
 80003e4:	222f      	movs	r2, #47	; 0x2f
 80003e6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e8:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_TIM14_Init+0x40>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <MX_TIM14_Init+0x40>)
 80003f0:	2264      	movs	r2, #100	; 0x64
 80003f2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_TIM14_Init+0x40>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <MX_TIM14_Init+0x40>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_TIM14_Init+0x40>)
 8000402:	0018      	movs	r0, r3
 8000404:	f001 fda6 	bl	8001f54 <HAL_TIM_Base_Init>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800040c:	f000 f966 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	20000084 	.word	0x20000084
 800041c:	40002000 	.word	0x40002000

08000420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000424:	4b16      	ldr	r3, [pc, #88]	; (8000480 <MX_USART2_UART_Init+0x60>)
 8000426:	4a17      	ldr	r2, [pc, #92]	; (8000484 <MX_USART2_UART_Init+0x64>)
 8000428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_USART2_UART_Init+0x60>)
 800042c:	22e1      	movs	r2, #225	; 0xe1
 800042e:	0252      	lsls	r2, r2, #9
 8000430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b13      	ldr	r3, [pc, #76]	; (8000480 <MX_USART2_UART_Init+0x60>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_USART2_UART_Init+0x60>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <MX_USART2_UART_Init+0x60>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_USART2_UART_Init+0x60>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <MX_USART2_UART_Init+0x60>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_USART2_UART_Init+0x60>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <MX_USART2_UART_Init+0x60>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_USART2_UART_Init+0x60>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000462:	4b07      	ldr	r3, [pc, #28]	; (8000480 <MX_USART2_UART_Init+0x60>)
 8000464:	2200      	movs	r2, #0
 8000466:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <MX_USART2_UART_Init+0x60>)
 800046a:	0018      	movs	r0, r3
 800046c:	f001 ffbe 	bl	80023ec <HAL_UART_Init>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000474:	f000 f932 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	200000d0 	.word	0x200000d0
 8000484:	40004400 	.word	0x40004400

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b08b      	sub	sp, #44	; 0x2c
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	2414      	movs	r4, #20
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	2314      	movs	r3, #20
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f002 fba9 	bl	8002bf0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049e:	4b4c      	ldr	r3, [pc, #304]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a2:	4b4b      	ldr	r3, [pc, #300]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004a4:	2104      	movs	r1, #4
 80004a6:	430a      	orrs	r2, r1
 80004a8:	635a      	str	r2, [r3, #52]	; 0x34
 80004aa:	4b49      	ldr	r3, [pc, #292]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ae:	2204      	movs	r2, #4
 80004b0:	4013      	ands	r3, r2
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b6:	4b46      	ldr	r3, [pc, #280]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ba:	4b45      	ldr	r3, [pc, #276]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004bc:	2120      	movs	r1, #32
 80004be:	430a      	orrs	r2, r1
 80004c0:	635a      	str	r2, [r3, #52]	; 0x34
 80004c2:	4b43      	ldr	r3, [pc, #268]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c6:	2220      	movs	r2, #32
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b40      	ldr	r3, [pc, #256]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004d2:	4b3f      	ldr	r3, [pc, #252]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004d4:	2101      	movs	r1, #1
 80004d6:	430a      	orrs	r2, r1
 80004d8:	635a      	str	r2, [r3, #52]	; 0x34
 80004da:	4b3d      	ldr	r3, [pc, #244]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004de:	2201      	movs	r2, #1
 80004e0:	4013      	ands	r3, r2
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e6:	4b3a      	ldr	r3, [pc, #232]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ea:	4b39      	ldr	r3, [pc, #228]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004ec:	2102      	movs	r1, #2
 80004ee:	430a      	orrs	r2, r1
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
 80004f2:	4b37      	ldr	r3, [pc, #220]	; (80005d0 <MX_GPIO_Init+0x148>)
 80004f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004f6:	2202      	movs	r2, #2
 80004f8:	4013      	ands	r3, r2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 80004fe:	4935      	ldr	r1, [pc, #212]	; (80005d4 <MX_GPIO_Init+0x14c>)
 8000500:	23a0      	movs	r3, #160	; 0xa0
 8000502:	05db      	lsls	r3, r3, #23
 8000504:	2200      	movs	r2, #0
 8000506:	0018      	movs	r0, r3
 8000508:	f000 ff56 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 800050c:	23a0      	movs	r3, #160	; 0xa0
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	2201      	movs	r2, #1
 8000512:	2120      	movs	r1, #32
 8000514:	0018      	movs	r0, r3
 8000516:	f000 ff4f 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800051a:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <MX_GPIO_Init+0x150>)
 800051c:	2200      	movs	r2, #0
 800051e:	2130      	movs	r1, #48	; 0x30
 8000520:	0018      	movs	r0, r3
 8000522:	f000 ff49 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	0192      	lsls	r2, r2, #6
 800052c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	4a2a      	ldr	r2, [pc, #168]	; (80005dc <MX_GPIO_Init+0x154>)
 8000532:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	193b      	adds	r3, r7, r4
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053a:	193b      	adds	r3, r7, r4
 800053c:	4a28      	ldr	r2, [pc, #160]	; (80005e0 <MX_GPIO_Init+0x158>)
 800053e:	0019      	movs	r1, r3
 8000540:	0010      	movs	r0, r2
 8000542:	f000 fdc7 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <MX_GPIO_Init+0x14c>)
 800054a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2201      	movs	r2, #1
 8000550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	193a      	adds	r2, r7, r4
 8000560:	23a0      	movs	r3, #160	; 0xa0
 8000562:	05db      	lsls	r3, r3, #23
 8000564:	0011      	movs	r1, r2
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fdb4 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2220      	movs	r2, #32
 8000570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2201      	movs	r2, #1
 8000576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2203      	movs	r2, #3
 8000582:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000584:	193a      	adds	r2, r7, r4
 8000586:	23a0      	movs	r3, #160	; 0xa0
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	0011      	movs	r1, r2
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fda1 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000592:	0021      	movs	r1, r4
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2201      	movs	r2, #1
 800059e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <MX_GPIO_Init+0x150>)
 80005b0:	0019      	movs	r1, r3
 80005b2:	0010      	movs	r0, r2
 80005b4:	f000 fd8e 	bl	80010d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2007      	movs	r0, #7
 80005be:	f000 fd57 	bl	8001070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005c2:	2007      	movs	r0, #7
 80005c4:	f000 fd69 	bl	800109a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b00b      	add	sp, #44	; 0x2c
 80005ce:	bd90      	pop	{r4, r7, pc}
 80005d0:	40021000 	.word	0x40021000
 80005d4:	00008003 	.word	0x00008003
 80005d8:	50000400 	.word	0x50000400
 80005dc:	10110000 	.word	0x10110000
 80005e0:	50000800 	.word	0x50000800

080005e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM14)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a22      	ldr	r2, [pc, #136]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d13d      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		if(cnt14 < 10000000)
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a22      	ldr	r2, [pc, #136]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d805      	bhi.n	800060c <HAL_TIM_PeriodElapsedCallback+0x28>
			cnt14 ++;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	e002      	b.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x2e>
		else
			cnt14 = 0;
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]

		if(!Stepper_Empty(&stepper))
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000614:	0018      	movs	r0, r3
 8000616:	f000 f9b5 	bl	8000984 <Stepper_Empty>
 800061a:	0003      	movs	r3, r0
 800061c:	001a      	movs	r2, r3
 800061e:	2301      	movs	r3, #1
 8000620:	4053      	eors	r3, r2
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d024      	beq.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			if(stepper.time >= Stepper_Current_Interval(&stepper))
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800062a:	2394      	movs	r3, #148	; 0x94
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	58d4      	ldr	r4, [r2, r3]
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000632:	0018      	movs	r0, r3
 8000634:	f000 f9e3 	bl	80009fe <Stepper_Current_Interval>
 8000638:	0003      	movs	r3, r0
 800063a:	429c      	cmp	r4, r3
 800063c:	d30f      	bcc.n	800065e <HAL_TIM_PeriodElapsedCallback+0x7a>
			{
				checkpoint = 10-checkpoint;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	220a      	movs	r2, #10
 8000644:	1ad2      	subs	r2, r2, r3
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000648:	601a      	str	r2, [r3, #0]
				Stepper_Go_One_Step(&stepper);
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800064c:	0018      	movs	r0, r3
 800064e:	f000 f9f1 	bl	8000a34 <Stepper_Go_One_Step>
				stepper.time = 0;
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000654:	2394      	movs	r3, #148	; 0x94
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	2100      	movs	r1, #0
 800065a:	50d1      	str	r1, [r2, r3]
				stepper.time += 100;
			}
		}
	}

}
 800065c:	e009      	b.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x8e>
				stepper.time += 100;
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000660:	2394      	movs	r3, #148	; 0x94
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	58d3      	ldr	r3, [r2, r3]
 8000666:	3364      	adds	r3, #100	; 0x64
 8000668:	0019      	movs	r1, r3
 800066a:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800066c:	2394      	movs	r3, #148	; 0x94
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	50d1      	str	r1, [r2, r3]
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b003      	add	sp, #12
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40002000 	.word	0x40002000
 8000680:	20000164 	.word	0x20000164
 8000684:	0098967f 	.word	0x0098967f
 8000688:	2000016c 	.word	0x2000016c
 800068c:	20000168 	.word	0x20000168

08000690 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	0002      	movs	r2, r0
 8000698:	1dbb      	adds	r3, r7, #6
 800069a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_13) //Button
 800069c:	1dbb      	adds	r3, r7, #6
 800069e:	881a      	ldrh	r2, [r3, #0]
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	019b      	lsls	r3, r3, #6
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d10f      	bne.n	80006c8 <HAL_GPIO_EXTI_Rising_Callback+0x38>
	{
		Step_Task tmp = {set_steps, set_interval};
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	001a      	movs	r2, r3
 80006ae:	2108      	movs	r1, #8
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	605a      	str	r2, [r3, #4]
		Stepper_Add_Task(&stepper, tmp);
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 80006c0:	6819      	ldr	r1, [r3, #0]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	f000 f922 	bl	800090c <Stepper_Add_Task>
	}
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b004      	add	sp, #16
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000004 	.word	0x20000004
 80006d4:	20000000 	.word	0x20000000
 80006d8:	2000016c 	.word	0x2000016c

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <Stepper_Init>:
//#include "stm32c0xx_hal.h"
#include <stdbool.h>

void Stepper_Init(Stepper_Motor* motor, GPIO_TypeDef* step_port, uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin,
					GPIO_TypeDef* *ms_port, uint16_t *ms_pin, Microstep step_reso)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	1dbb      	adds	r3, r7, #6
 80006f6:	801a      	strh	r2, [r3, #0]
	motor->STEP_PORT = step_port;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	601a      	str	r2, [r3, #0]
	motor->STEP_PIN = step_pin;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	1dba      	adds	r2, r7, #6
 8000702:	8812      	ldrh	r2, [r2, #0]
 8000704:	809a      	strh	r2, [r3, #4]
	motor->DIR_PORT = dir_port;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	609a      	str	r2, [r3, #8]
	motor->DIR_PIN = dir_pin;
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	2320      	movs	r3, #32
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	8193      	strh	r3, [r2, #12]
	for(int i=0; i<3; i++)
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	e019      	b.n	8000750 <Stepper_Init+0x68>
	{
		motor->MS_PORT[i] = ms_port[i];
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000722:	18d3      	adds	r3, r2, r3
 8000724:	6819      	ldr	r1, [r3, #0]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	3204      	adds	r2, #4
 800072c:	0092      	lsls	r2, r2, #2
 800072e:	50d1      	str	r1, [r2, r3]
		motor->MS_PIN[i] = ms_pin[i];
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000736:	18d3      	adds	r3, r2, r3
 8000738:	8819      	ldrh	r1, [r3, #0]
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	330c      	adds	r3, #12
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	18d3      	adds	r3, r2, r3
 8000744:	3304      	adds	r3, #4
 8000746:	1c0a      	adds	r2, r1, #0
 8000748:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<3; i++)
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3301      	adds	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	2b02      	cmp	r3, #2
 8000754:	dde2      	ble.n	800071c <Stepper_Init+0x34>
	}
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, RESET);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	889b      	ldrh	r3, [r3, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	0019      	movs	r1, r3
 8000762:	f000 fe29 	bl	80013b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, SET);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	6898      	ldr	r0, [r3, #8]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	899b      	ldrh	r3, [r3, #12]
 800076e:	2201      	movs	r2, #1
 8000770:	0019      	movs	r1, r3
 8000772:	f000 fe21 	bl	80013b8 <HAL_GPIO_WritePin>

	Stepper_Set_StepReso(motor, step_reso);
 8000776:	232c      	movs	r3, #44	; 0x2c
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781a      	ldrb	r2, [r3, #0]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f000 f815 	bl	80007b0 <Stepper_Set_StepReso>

	motor->index_shift = 0;
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	2392      	movs	r3, #146	; 0x92
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	2100      	movs	r1, #0
 800078e:	52d1      	strh	r1, [r2, r3]
	motor->size = 0;
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	2393      	movs	r3, #147	; 0x93
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	2100      	movs	r1, #0
 8000798:	52d1      	strh	r1, [r2, r3]
	motor->time = 1000000; //1 second
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	2394      	movs	r3, #148	; 0x94
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4902      	ldr	r1, [pc, #8]	; (80007ac <Stepper_Init+0xc4>)
 80007a2:	50d1      	str	r1, [r2, r3]
	//motor->status = 0;
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b006      	add	sp, #24
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	000f4240 	.word	0x000f4240

080007b0 <Stepper_Set_StepReso>:

void Stepper_Set_StepReso(Stepper_Motor *motor, Microstep step_reso)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	000a      	movs	r2, r1
 80007ba:	1cfb      	adds	r3, r7, #3
 80007bc:	701a      	strb	r2, [r3, #0]
	switch(step_reso)
 80007be:	1cfb      	adds	r3, r7, #3
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d900      	bls.n	80007c8 <Stepper_Set_StepReso+0x18>
 80007c6:	e081      	b.n	80008cc <Stepper_Set_StepReso+0x11c>
 80007c8:	009a      	lsls	r2, r3, #2
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <Stepper_Set_StepReso+0x158>)
 80007cc:	18d3      	adds	r3, r2, r3
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	469f      	mov	pc, r3
		{
			case FULL:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6918      	ldr	r0, [r3, #16]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	8b9b      	ldrh	r3, [r3, #28]
 80007da:	2200      	movs	r2, #0
 80007dc:	0019      	movs	r1, r3
 80007de:	f000 fdeb 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6958      	ldr	r0, [r3, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	8bdb      	ldrh	r3, [r3, #30]
 80007ea:	2200      	movs	r2, #0
 80007ec:	0019      	movs	r1, r3
 80007ee:	f000 fde3 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6998      	ldr	r0, [r3, #24]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	8c1b      	ldrh	r3, [r3, #32]
 80007fa:	2200      	movs	r2, #0
 80007fc:	0019      	movs	r1, r3
 80007fe:	f000 fddb 	bl	80013b8 <HAL_GPIO_WritePin>
				break;
 8000802:	e07c      	b.n	80008fe <Stepper_Set_StepReso+0x14e>
			case HALF:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6918      	ldr	r0, [r3, #16]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	8b9b      	ldrh	r3, [r3, #28]
 800080c:	2201      	movs	r2, #1
 800080e:	0019      	movs	r1, r3
 8000810:	f000 fdd2 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6958      	ldr	r0, [r3, #20]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	8bdb      	ldrh	r3, [r3, #30]
 800081c:	2200      	movs	r2, #0
 800081e:	0019      	movs	r1, r3
 8000820:	f000 fdca 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6998      	ldr	r0, [r3, #24]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	8c1b      	ldrh	r3, [r3, #32]
 800082c:	2200      	movs	r2, #0
 800082e:	0019      	movs	r1, r3
 8000830:	f000 fdc2 	bl	80013b8 <HAL_GPIO_WritePin>
				break;
 8000834:	e063      	b.n	80008fe <Stepper_Set_StepReso+0x14e>
			case QUARTER:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6918      	ldr	r0, [r3, #16]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	8b9b      	ldrh	r3, [r3, #28]
 800083e:	2200      	movs	r2, #0
 8000840:	0019      	movs	r1, r3
 8000842:	f000 fdb9 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6958      	ldr	r0, [r3, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	8bdb      	ldrh	r3, [r3, #30]
 800084e:	2201      	movs	r2, #1
 8000850:	0019      	movs	r1, r3
 8000852:	f000 fdb1 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6998      	ldr	r0, [r3, #24]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	8c1b      	ldrh	r3, [r3, #32]
 800085e:	2200      	movs	r2, #0
 8000860:	0019      	movs	r1, r3
 8000862:	f000 fda9 	bl	80013b8 <HAL_GPIO_WritePin>
				break;
 8000866:	e04a      	b.n	80008fe <Stepper_Set_StepReso+0x14e>
			case EIGHTH:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6918      	ldr	r0, [r3, #16]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	8b9b      	ldrh	r3, [r3, #28]
 8000870:	2201      	movs	r2, #1
 8000872:	0019      	movs	r1, r3
 8000874:	f000 fda0 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6958      	ldr	r0, [r3, #20]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	8bdb      	ldrh	r3, [r3, #30]
 8000880:	2201      	movs	r2, #1
 8000882:	0019      	movs	r1, r3
 8000884:	f000 fd98 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6998      	ldr	r0, [r3, #24]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	8c1b      	ldrh	r3, [r3, #32]
 8000890:	2200      	movs	r2, #0
 8000892:	0019      	movs	r1, r3
 8000894:	f000 fd90 	bl	80013b8 <HAL_GPIO_WritePin>
				break;
 8000898:	e031      	b.n	80008fe <Stepper_Set_StepReso+0x14e>
			case SIXTEENTH:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], SET);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6918      	ldr	r0, [r3, #16]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	8b9b      	ldrh	r3, [r3, #28]
 80008a2:	2201      	movs	r2, #1
 80008a4:	0019      	movs	r1, r3
 80008a6:	f000 fd87 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], SET);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6958      	ldr	r0, [r3, #20]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8bdb      	ldrh	r3, [r3, #30]
 80008b2:	2201      	movs	r2, #1
 80008b4:	0019      	movs	r1, r3
 80008b6:	f000 fd7f 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], SET);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6998      	ldr	r0, [r3, #24]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	8c1b      	ldrh	r3, [r3, #32]
 80008c2:	2201      	movs	r2, #1
 80008c4:	0019      	movs	r1, r3
 80008c6:	f000 fd77 	bl	80013b8 <HAL_GPIO_WritePin>
				break;
 80008ca:	e018      	b.n	80008fe <Stepper_Set_StepReso+0x14e>
			default:
				HAL_GPIO_WritePin(motor->MS_PORT[0], motor->MS_PIN[0], RESET);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6918      	ldr	r0, [r3, #16]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	8b9b      	ldrh	r3, [r3, #28]
 80008d4:	2200      	movs	r2, #0
 80008d6:	0019      	movs	r1, r3
 80008d8:	f000 fd6e 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[1], motor->MS_PIN[1], RESET);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6958      	ldr	r0, [r3, #20]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	8bdb      	ldrh	r3, [r3, #30]
 80008e4:	2200      	movs	r2, #0
 80008e6:	0019      	movs	r1, r3
 80008e8:	f000 fd66 	bl	80013b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->MS_PORT[2], motor->MS_PIN[2], RESET);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6998      	ldr	r0, [r3, #24]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	8c1b      	ldrh	r3, [r3, #32]
 80008f4:	2200      	movs	r2, #0
 80008f6:	0019      	movs	r1, r3
 80008f8:	f000 fd5e 	bl	80013b8 <HAL_GPIO_WritePin>
				break;
 80008fc:	46c0      	nop			; (mov r8, r8)
		}
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	08002c74 	.word	0x08002c74

0800090c <Stepper_Add_Task>:

bool Stepper_Add_Task(Stepper_Motor* motor, Step_Task insert)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	6019      	str	r1, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
	if(motor->size >= QUEUE_SIZE)
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	2393      	movs	r3, #147	; 0x93
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	5ad3      	ldrh	r3, [r2, r3]
 8000922:	2b1f      	cmp	r3, #31
 8000924:	d901      	bls.n	800092a <Stepper_Add_Task+0x1e>
	{
		return false;
 8000926:	2300      	movs	r3, #0
 8000928:	e025      	b.n	8000976 <Stepper_Add_Task+0x6a>
	}
	motor->size++;
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	2393      	movs	r3, #147	; 0x93
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	5ad3      	ldrh	r3, [r2, r3]
 8000932:	3301      	adds	r3, #1
 8000934:	b299      	uxth	r1, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	2393      	movs	r3, #147	; 0x93
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	52d1      	strh	r1, [r2, r3]
	motor->Task_Queue[(motor->size -1 +motor->index_shift)%QUEUE_SIZE] = insert;
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	2393      	movs	r3, #147	; 0x93
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	5ad3      	ldrh	r3, [r2, r3]
 8000946:	3b01      	subs	r3, #1
 8000948:	68f9      	ldr	r1, [r7, #12]
 800094a:	2292      	movs	r2, #146	; 0x92
 800094c:	0052      	lsls	r2, r2, #1
 800094e:	5a8a      	ldrh	r2, [r1, r2]
 8000950:	189b      	adds	r3, r3, r2
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <Stepper_Add_Task+0x74>)
 8000954:	4013      	ands	r3, r2
 8000956:	d504      	bpl.n	8000962 <Stepper_Add_Task+0x56>
 8000958:	3b01      	subs	r3, #1
 800095a:	2220      	movs	r2, #32
 800095c:	4252      	negs	r2, r2
 800095e:	4313      	orrs	r3, r2
 8000960:	3301      	adds	r3, #1
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	3304      	adds	r3, #4
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	2104      	movs	r1, #4
 800096a:	18d3      	adds	r3, r2, r3
 800096c:	185b      	adds	r3, r3, r1
 800096e:	1d3a      	adds	r2, r7, #4
 8000970:	ca03      	ldmia	r2!, {r0, r1}
 8000972:	c303      	stmia	r3!, {r0, r1}
	return true;
 8000974:	2301      	movs	r3, #1
}
 8000976:	0018      	movs	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	b004      	add	sp, #16
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	8000001f 	.word	0x8000001f

08000984 <Stepper_Empty>:
	Stepper_Add_Task(motor, tmp);
	return true;
}

bool Stepper_Empty(Stepper_Motor* motor)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	return motor->size <= 0;
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	2393      	movs	r3, #147	; 0x93
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	5ad3      	ldrh	r3, [r2, r3]
 8000994:	425a      	negs	r2, r3
 8000996:	4153      	adcs	r3, r2
 8000998:	b2db      	uxtb	r3, r3
}
 800099a:	0018      	movs	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <Stepper_Pop_Task>:
	}
	return motor->Task_Queue[motor->index_shift];
}

void Stepper_Pop_Task(Stepper_Motor* motor) //delete a task
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
	if(motor->size <= 0)
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	2393      	movs	r3, #147	; 0x93
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	5ad3      	ldrh	r3, [r2, r3]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d01f      	beq.n	80009f6 <Stepper_Pop_Task+0x54>
		return;
	motor->size --;
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	2393      	movs	r3, #147	; 0x93
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	5ad3      	ldrh	r3, [r2, r3]
 80009be:	3b01      	subs	r3, #1
 80009c0:	b299      	uxth	r1, r3
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	2393      	movs	r3, #147	; 0x93
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	52d1      	strh	r1, [r2, r3]
	motor->index_shift ++;
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	2392      	movs	r3, #146	; 0x92
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	5ad3      	ldrh	r3, [r2, r3]
 80009d2:	3301      	adds	r3, #1
 80009d4:	b299      	uxth	r1, r3
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	2392      	movs	r3, #146	; 0x92
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	52d1      	strh	r1, [r2, r3]
	motor->index_shift %= QUEUE_SIZE;
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	2392      	movs	r3, #146	; 0x92
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	5ad3      	ldrh	r3, [r2, r3]
 80009e6:	221f      	movs	r2, #31
 80009e8:	4013      	ands	r3, r2
 80009ea:	b299      	uxth	r1, r3
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	2392      	movs	r3, #146	; 0x92
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	52d1      	strh	r1, [r2, r3]
 80009f4:	e000      	b.n	80009f8 <Stepper_Pop_Task+0x56>
		return;
 80009f6:	46c0      	nop			; (mov r8, r8)
}
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}

080009fe <Stepper_Current_Interval>:

unsigned int Stepper_Current_Interval(Stepper_Motor* motor)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
	if(motor->size <= 0)
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	2393      	movs	r3, #147	; 0x93
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	5ad3      	ldrh	r3, [r2, r3]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <Stepper_Current_Interval+0x18>
		return 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e009      	b.n	8000a2a <Stepper_Current_Interval+0x2c>
	return motor->Task_Queue[motor->index_shift].interval;
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	2392      	movs	r3, #146	; 0x92
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	5ad3      	ldrh	r3, [r2, r3]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	3304      	adds	r3, #4
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	18d3      	adds	r3, r2, r3
 8000a26:	3308      	adds	r3, #8
 8000a28:	681b      	ldr	r3, [r3, #0]
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <Stepper_Go_One_Step>:

bool Stepper_Go_One_Step(Stepper_Motor* motor)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	if(motor->size <= 0)
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	2393      	movs	r3, #147	; 0x93
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	5ad3      	ldrh	r3, [r2, r3]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <Stepper_Go_One_Step+0x18>
		return false;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e087      	b.n	8000b5c <Stepper_Go_One_Step+0x128>
	if(motor->Task_Queue[motor->index_shift].steps > 0)
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	2392      	movs	r3, #146	; 0x92
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	5ad3      	ldrh	r3, [r2, r3]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	3304      	adds	r3, #4
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	18d3      	adds	r3, r2, r3
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	dd19      	ble.n	8000a98 <Stepper_Go_One_Step+0x64>
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, SET);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6898      	ldr	r0, [r3, #8]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	899b      	ldrh	r3, [r3, #12]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	0019      	movs	r1, r3
 8000a70:	f000 fca2 	bl	80013b8 <HAL_GPIO_WritePin>
		motor->Task_Queue[motor->index_shift].steps --;
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	2392      	movs	r3, #146	; 0x92
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	5ad3      	ldrh	r3, [r2, r3]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	1d13      	adds	r3, r2, #4
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	18cb      	adds	r3, r1, r3
 8000a86:	3304      	adds	r3, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1e59      	subs	r1, r3, #1
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	1d13      	adds	r3, r2, #4
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	18c3      	adds	r3, r0, r3
 8000a94:	3304      	adds	r3, #4
 8000a96:	6019      	str	r1, [r3, #0]
	}
	if(motor->Task_Queue[motor->index_shift].steps < 0)
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	2392      	movs	r3, #146	; 0x92
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	5ad3      	ldrh	r3, [r2, r3]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	18d3      	adds	r3, r2, r3
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	da19      	bge.n	8000ae4 <Stepper_Go_One_Step+0xb0>
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, RESET);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6898      	ldr	r0, [r3, #8]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	899b      	ldrh	r3, [r3, #12]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0019      	movs	r1, r3
 8000abc:	f000 fc7c 	bl	80013b8 <HAL_GPIO_WritePin>
		motor->Task_Queue[motor->index_shift].steps ++;
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	2392      	movs	r3, #146	; 0x92
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	5ad3      	ldrh	r3, [r2, r3]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	1d13      	adds	r3, r2, #4
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	18cb      	adds	r3, r1, r3
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	1c59      	adds	r1, r3, #1
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	1d13      	adds	r3, r2, #4
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	18c3      	adds	r3, r0, r3
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	6019      	str	r1, [r3, #0]
	}
	unsigned short t = __HAL_TIM_GET_COUNTER(&htim14);
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <Stepper_Go_One_Step+0x130>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aea:	230e      	movs	r3, #14
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, SET);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	889b      	ldrh	r3, [r3, #4]
 8000af8:	2201      	movs	r2, #1
 8000afa:	0019      	movs	r1, r3
 8000afc:	f000 fc5c 	bl	80013b8 <HAL_GPIO_WritePin>
	if(motor->Task_Queue[motor->index_shift].steps == 0)
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	2392      	movs	r3, #146	; 0x92
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	5ad3      	ldrh	r3, [r2, r3]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	18d3      	adds	r3, r2, r3
 8000b10:	3304      	adds	r3, #4
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d103      	bne.n	8000b20 <Stepper_Go_One_Step+0xec>
	{
		Stepper_Pop_Task(motor);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f7ff ff41 	bl	80009a2 <Stepper_Pop_Task>
	}
	while(__HAL_TIM_GET_COUNTER(&htim14)-t <= 1 || t+__HAL_TIM_GET_COUNTER(&htim14) <= __HAL_TIM_GET_AUTORELOAD(&htim14))
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <Stepper_Go_One_Step+0x130>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b28:	210e      	movs	r1, #14
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d9f6      	bls.n	8000b22 <Stepper_Go_One_Step+0xee>
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	881a      	ldrh	r2, [r3, #0]
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <Stepper_Go_One_Step+0x130>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	18d2      	adds	r2, r2, r3
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <Stepper_Go_One_Step+0x130>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d9eb      	bls.n	8000b22 <Stepper_Go_One_Step+0xee>
	{}
	HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, RESET);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6818      	ldr	r0, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	889b      	ldrh	r3, [r3, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	0019      	movs	r1, r3
 8000b56:	f000 fc2f 	bl	80013b8 <HAL_GPIO_WritePin>

	return true;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b004      	add	sp, #16
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000084 	.word	0x20000084

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	641a      	str	r2, [r3, #64]	; 0x40
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4013      	ands	r3, r2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0549      	lsls	r1, r1, #21
 8000b90:	430a      	orrs	r2, r1
 8000b92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_MspInit+0x44>)
 8000b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	055b      	lsls	r3, r3, #21
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b091      	sub	sp, #68	; 0x44
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	232c      	movs	r3, #44	; 0x2c
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f002 f814 	bl	8002bf0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	2410      	movs	r4, #16
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	231c      	movs	r3, #28
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f002 f80c 	bl	8002bf0 <memset>
  if(hi2c->Instance==I2C1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_I2C_MspInit+0xb8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d13e      	bne.n	8000c60 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2240      	movs	r2, #64	; 0x40
 8000be6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f001 f8c1 	bl	8001d78 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bfa:	f7ff fd6f 	bl	80006dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c04:	2102      	movs	r1, #2
 8000c06:	430a      	orrs	r2, r1
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c16:	212c      	movs	r1, #44	; 0x2c
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	22c0      	movs	r2, #192	; 0xc0
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2212      	movs	r2, #18
 8000c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2206      	movs	r2, #6
 8000c36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_I2C_MspInit+0xc0>)
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	0010      	movs	r0, r2
 8000c40:	f000 fa48 	bl	80010d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	0389      	lsls	r1, r1, #14
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	039b      	lsls	r3, r3, #14
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b011      	add	sp, #68	; 0x44
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	40005400 	.word	0x40005400
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	50000400 	.word	0x50000400

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_TIM_Base_MspInit+0x48>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d115      	bne.n	8000cb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	0209      	lsls	r1, r1, #8
 8000c90:	430a      	orrs	r2, r1
 8000c92:	641a      	str	r2, [r3, #64]	; 0x40
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2013      	movs	r0, #19
 8000ca8:	f000 f9e2 	bl	8001070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000cac:	2013      	movs	r0, #19
 8000cae:	f000 f9f4 	bl	800109a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b004      	add	sp, #16
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40002000 	.word	0x40002000
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b08b      	sub	sp, #44	; 0x2c
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	2414      	movs	r4, #20
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	2314      	movs	r3, #20
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	f001 ff8a 	bl	8002bf0 <memset>
  if(huart->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <HAL_UART_MspInit+0x8c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d130      	bne.n	8000d48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0289      	lsls	r1, r1, #10
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	029b      	lsls	r3, r3, #10
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000d08:	2101      	movs	r1, #1
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d12:	2201      	movs	r2, #1
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d1a:	0021      	movs	r1, r4
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2202      	movs	r2, #2
 8000d26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2201      	movs	r2, #1
 8000d38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	187a      	adds	r2, r7, r1
 8000d3c:	23a0      	movs	r3, #160	; 0xa0
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	0011      	movs	r1, r2
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 f9c6 	bl	80010d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b00b      	add	sp, #44	; 0x2c
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	40004400 	.word	0x40004400
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f8b0 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 fb30 	bl	80013f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <TIM14_IRQHandler+0x14>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f001 f97c 	bl	80020a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	20000084 	.word	0x20000084

08000db4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <SystemInit+0x14>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	0512      	lsls	r2, r2, #20
 8000dbe:	609a      	str	r2, [r3, #8]
#endif
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd0:	f7ff fff0 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dd6:	e003      	b.n	8000de0 <LoopCopyDataInit>

08000dd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000dda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ddc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dde:	3104      	adds	r1, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <LoopForever+0xa>)
  ldr r3, =_edata
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <LoopForever+0xe>)
  adds r2, r0, r1
 8000de4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000de6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000de8:	d3f6      	bcc.n	8000dd8 <CopyDataInit>
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LoopForever+0x12>)
  b LoopFillZerobss
 8000dec:	e002      	b.n	8000df4 <LoopFillZerobss>

08000dee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  str  r3, [r2]
 8000df0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df2:	3204      	adds	r2, #4

08000df4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <LoopForever+0x16>)
  cmp r2, r3
 8000df6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000df8:	d3f9      	bcc.n	8000dee <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000dfa:	f001 ff01 	bl	8002c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfe:	f7ff fa0f 	bl	8000220 <main>

08000e02 <LoopForever>:

LoopForever:
    b LoopForever
 8000e02:	e7fe      	b.n	8000e02 <LoopForever>
  ldr   r0, =_estack
 8000e04:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000e08:	08002d08 	.word	0x08002d08
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e10:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000e14:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000e18:	2000029c 	.word	0x2000029c

08000e1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC1_IRQHandler>

08000e1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f000 f80e 	bl	8000e4c <HAL_InitTick>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	e001      	b.n	8000e40 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e3c:	f7ff fe94 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	781b      	ldrb	r3, [r3, #0]
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e54:	230f      	movs	r3, #15
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <HAL_InitTick+0x88>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d02b      	beq.n	8000ebc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_InitTick+0x8c>)
 8000e66:	681c      	ldr	r4, [r3, #0]
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <HAL_InitTick+0x88>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	23fa      	movs	r3, #250	; 0xfa
 8000e70:	0098      	lsls	r0, r3, #2
 8000e72:	f7ff f949 	bl	8000108 <__udivsi3>
 8000e76:	0003      	movs	r3, r0
 8000e78:	0019      	movs	r1, r3
 8000e7a:	0020      	movs	r0, r4
 8000e7c:	f7ff f944 	bl	8000108 <__udivsi3>
 8000e80:	0003      	movs	r3, r0
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 f919 	bl	80010ba <HAL_SYSTICK_Config>
 8000e88:	1e03      	subs	r3, r0, #0
 8000e8a:	d112      	bne.n	8000eb2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d80a      	bhi.n	8000ea8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	2301      	movs	r3, #1
 8000e96:	425b      	negs	r3, r3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f8e8 	bl	8001070 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_InitTick+0x90>)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e00d      	b.n	8000ec4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	18fb      	adds	r3, r7, r3
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e008      	b.n	8000ec4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
 8000eba:	e003      	b.n	8000ec4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	781b      	ldrb	r3, [r3, #0]
}
 8000eca:	0018      	movs	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b005      	add	sp, #20
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	20000010 	.word	0x20000010
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	2000000c 	.word	0x2000000c

08000ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x1c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	001a      	movs	r2, r3
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x20>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	18d2      	adds	r2, r2, r3
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_IncTick+0x20>)
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	20000010 	.word	0x20000010
 8000f00:	20000298 	.word	0x20000298

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <HAL_GetTick+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000298 	.word	0x20000298

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	0002      	movs	r2, r0
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2a:	d809      	bhi.n	8000f40 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2c:	1dfb      	adds	r3, r7, #7
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	001a      	movs	r2, r3
 8000f32:	231f      	movs	r3, #31
 8000f34:	401a      	ands	r2, r3
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_EnableIRQ+0x30>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4091      	lsls	r1, r2
 8000f3c:	000a      	movs	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	0002      	movs	r2, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f60:	d828      	bhi.n	8000fb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f62:	4a2f      	ldr	r2, [pc, #188]	; (8001020 <__NVIC_SetPriority+0xd4>)
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	33c0      	adds	r3, #192	; 0xc0
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	589b      	ldr	r3, [r3, r2]
 8000f72:	1dfa      	adds	r2, r7, #7
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	0011      	movs	r1, r2
 8000f78:	2203      	movs	r2, #3
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	00d2      	lsls	r2, r2, #3
 8000f7e:	21ff      	movs	r1, #255	; 0xff
 8000f80:	4091      	lsls	r1, r2
 8000f82:	000a      	movs	r2, r1
 8000f84:	43d2      	mvns	r2, r2
 8000f86:	401a      	ands	r2, r3
 8000f88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	22ff      	movs	r2, #255	; 0xff
 8000f90:	401a      	ands	r2, r3
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	0018      	movs	r0, r3
 8000f98:	2303      	movs	r3, #3
 8000f9a:	4003      	ands	r3, r0
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa0:	481f      	ldr	r0, [pc, #124]	; (8001020 <__NVIC_SetPriority+0xd4>)
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	430a      	orrs	r2, r1
 8000fac:	33c0      	adds	r3, #192	; 0xc0
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fb2:	e031      	b.n	8001018 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <__NVIC_SetPriority+0xd8>)
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	0019      	movs	r1, r3
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	3b08      	subs	r3, #8
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3306      	adds	r3, #6
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	18d3      	adds	r3, r2, r3
 8000fca:	3304      	adds	r3, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	1dfa      	adds	r2, r7, #7
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	00d2      	lsls	r2, r2, #3
 8000fda:	21ff      	movs	r1, #255	; 0xff
 8000fdc:	4091      	lsls	r1, r2
 8000fde:	000a      	movs	r2, r1
 8000fe0:	43d2      	mvns	r2, r2
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	401a      	ands	r2, r3
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	4003      	ands	r3, r0
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <__NVIC_SetPriority+0xd8>)
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	001c      	movs	r4, r3
 8001004:	230f      	movs	r3, #15
 8001006:	4023      	ands	r3, r4
 8001008:	3b08      	subs	r3, #8
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	430a      	orrs	r2, r1
 800100e:	3306      	adds	r3, #6
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	18c3      	adds	r3, r0, r3
 8001014:	3304      	adds	r3, #4
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b003      	add	sp, #12
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	045b      	lsls	r3, r3, #17
 8001038:	429a      	cmp	r2, r3
 800103a:	d301      	bcc.n	8001040 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103c:	2301      	movs	r3, #1
 800103e:	e010      	b.n	8001062 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <SysTick_Config+0x44>)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	3a01      	subs	r2, #1
 8001046:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001048:	2301      	movs	r3, #1
 800104a:	425b      	negs	r3, r3
 800104c:	2103      	movs	r1, #3
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff ff7c 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SysTick_Config+0x44>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Config+0x44>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	210f      	movs	r1, #15
 800107c:	187b      	adds	r3, r7, r1
 800107e:	1c02      	adds	r2, r0, #0
 8001080:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	187b      	adds	r3, r7, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b25b      	sxtb	r3, r3
 800108a:	0011      	movs	r1, r2
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b004      	add	sp, #16
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	0002      	movs	r2, r0
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff ff33 	bl	8000f18 <__NVIC_EnableIRQ>
}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff ffaf 	bl	8001028 <SysTick_Config>
 80010ca:	0003      	movs	r3, r0
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010e2:	e153      	b.n	800138c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2101      	movs	r1, #1
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4091      	lsls	r1, r2
 80010ee:	000a      	movs	r2, r1
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d100      	bne.n	80010fc <HAL_GPIO_Init+0x28>
 80010fa:	e144      	b.n	8001386 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x38>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b12      	cmp	r3, #18
 800110a:	d125      	bne.n	8001158 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	58d3      	ldr	r3, [r2, r3]
 8001118:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	2207      	movs	r2, #7
 800111e:	4013      	ands	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	409a      	lsls	r2, r3
 8001126:	0013      	movs	r3, r2
 8001128:	43da      	mvns	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	220f      	movs	r2, #15
 8001136:	401a      	ands	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2107      	movs	r1, #7
 800113c:	400b      	ands	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	409a      	lsls	r2, r3
 8001142:	0013      	movs	r3, r2
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	4313      	orrs	r3, r2
 8001148:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	6979      	ldr	r1, [r7, #20]
 8001156:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2203      	movs	r2, #3
 8001176:	401a      	ands	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	409a      	lsls	r2, r3
 800117e:	0013      	movs	r3, r2
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	4313      	orrs	r3, r2
 8001184:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d00b      	beq.n	80011ac <HAL_GPIO_Init+0xd8>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d007      	beq.n	80011ac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a0:	2b11      	cmp	r3, #17
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b12      	cmp	r3, #18
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	409a      	lsls	r2, r3
 80011ba:	0013      	movs	r3, r2
 80011bc:	43da      	mvns	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	409a      	lsls	r2, r3
 80011ce:	0013      	movs	r3, r2
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	43da      	mvns	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	4013      	ands	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	2201      	movs	r2, #1
 80011fa:	401a      	ands	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4313      	orrs	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d017      	beq.n	8001246 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	43da      	mvns	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	4013      	ands	r3, r2
 800122c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	409a      	lsls	r2, r3
 8001238:	0013      	movs	r3, r2
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4313      	orrs	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	055b      	lsls	r3, r3, #21
 800124e:	4013      	ands	r3, r2
 8001250:	d100      	bne.n	8001254 <HAL_GPIO_Init+0x180>
 8001252:	e098      	b.n	8001386 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001254:	4a53      	ldr	r2, [pc, #332]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3318      	adds	r3, #24
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	589b      	ldr	r3, [r3, r2]
 8001260:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	2203      	movs	r2, #3
 8001266:	4013      	ands	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	220f      	movs	r2, #15
 800126c:	409a      	lsls	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	43da      	mvns	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	23a0      	movs	r3, #160	; 0xa0
 800127c:	05db      	lsls	r3, r3, #23
 800127e:	429a      	cmp	r2, r3
 8001280:	d019      	beq.n	80012b6 <HAL_GPIO_Init+0x1e2>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a48      	ldr	r2, [pc, #288]	; (80013a8 <HAL_GPIO_Init+0x2d4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0x1de>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a47      	ldr	r2, [pc, #284]	; (80013ac <HAL_GPIO_Init+0x2d8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00d      	beq.n	80012ae <HAL_GPIO_Init+0x1da>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <HAL_GPIO_Init+0x2dc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x1d6>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a45      	ldr	r2, [pc, #276]	; (80013b4 <HAL_GPIO_Init+0x2e0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_GPIO_Init+0x1d2>
 80012a2:	2305      	movs	r3, #5
 80012a4:	e008      	b.n	80012b8 <HAL_GPIO_Init+0x1e4>
 80012a6:	2306      	movs	r3, #6
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x1e4>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e004      	b.n	80012b8 <HAL_GPIO_Init+0x1e4>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_Init+0x1e4>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x1e4>
 80012b6:	2300      	movs	r3, #0
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	2103      	movs	r1, #3
 80012bc:	400a      	ands	r2, r1
 80012be:	00d2      	lsls	r2, r2, #3
 80012c0:	4093      	lsls	r3, r2
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80012c8:	4936      	ldr	r1, [pc, #216]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3318      	adds	r3, #24
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80012d6:	4a33      	ldr	r2, [pc, #204]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	58d3      	ldr	r3, [r2, r3]
 80012dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43da      	mvns	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4013      	ands	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	025b      	lsls	r3, r3, #9
 80012f0:	4013      	ands	r3, r2
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80012fc:	4929      	ldr	r1, [pc, #164]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001304:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001306:	2384      	movs	r3, #132	; 0x84
 8001308:	58d3      	ldr	r3, [r2, r3]
 800130a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43da      	mvns	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	4013      	ands	r3, r2
 8001314:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	029b      	lsls	r3, r3, #10
 800131e:	4013      	ands	r3, r2
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800132a:	491e      	ldr	r1, [pc, #120]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 800132c:	2284      	movs	r2, #132	; 0x84
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43da      	mvns	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	4013      	ands	r3, r2
 8001340:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	035b      	lsls	r3, r3, #13
 800134a:	4013      	ands	r3, r2
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43da      	mvns	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	4013      	ands	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	039b      	lsls	r3, r3, #14
 8001374:	4013      	ands	r3, r2
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	3301      	adds	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	40da      	lsrs	r2, r3
 8001394:	1e13      	subs	r3, r2, #0
 8001396:	d000      	beq.n	800139a <HAL_GPIO_Init+0x2c6>
 8001398:	e6a4      	b.n	80010e4 <HAL_GPIO_Init+0x10>
  }
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b006      	add	sp, #24
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021800 	.word	0x40021800
 80013a8:	50000400 	.word	0x50000400
 80013ac:	50000800 	.word	0x50000800
 80013b0:	50000c00 	.word	0x50000c00
 80013b4:	50001400 	.word	0x50001400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	0008      	movs	r0, r1
 80013c2:	0011      	movs	r1, r2
 80013c4:	1cbb      	adds	r3, r7, #2
 80013c6:	1c02      	adds	r2, r0, #0
 80013c8:	801a      	strh	r2, [r3, #0]
 80013ca:	1c7b      	adds	r3, r7, #1
 80013cc:	1c0a      	adds	r2, r1, #0
 80013ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d0:	1c7b      	adds	r3, r7, #1
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d8:	1cbb      	adds	r3, r7, #2
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e2:	1cbb      	adds	r3, r7, #2
 80013e4:	881a      	ldrh	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	0002      	movs	r2, r0
 80013fc:	1dbb      	adds	r3, r7, #6
 80013fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	1dba      	adds	r2, r7, #6
 8001406:	8812      	ldrh	r2, [r2, #0]
 8001408:	4013      	ands	r3, r2
 800140a:	d008      	beq.n	800141e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800140e:	1dba      	adds	r2, r7, #6
 8001410:	8812      	ldrh	r2, [r2, #0]
 8001412:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001414:	1dbb      	adds	r3, r7, #6
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff f939 	bl	8000690 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	1dba      	adds	r2, r7, #6
 8001424:	8812      	ldrh	r2, [r2, #0]
 8001426:	4013      	ands	r3, r2
 8001428:	d008      	beq.n	800143c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800142c:	1dba      	adds	r2, r7, #6
 800142e:	8812      	ldrh	r2, [r2, #0]
 8001430:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001432:	1dbb      	adds	r3, r7, #6
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	0018      	movs	r0, r3
 8001438:	f000 f806 	bl	8001448 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b002      	add	sp, #8
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021800 	.word	0x40021800

08001448 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	0002      	movs	r2, r0
 8001450:	1dbb      	adds	r3, r7, #6
 8001452:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b002      	add	sp, #8
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e08f      	b.n	800158e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2241      	movs	r2, #65	; 0x41
 8001472:	5c9b      	ldrb	r3, [r3, r2]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2240      	movs	r2, #64	; 0x40
 800147e:	2100      	movs	r1, #0
 8001480:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff fb93 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2241      	movs	r2, #65	; 0x41
 800148e:	2124      	movs	r1, #36	; 0x24
 8001490:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	438a      	bics	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	493b      	ldr	r1, [pc, #236]	; (8001598 <HAL_I2C_Init+0x13c>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4938      	ldr	r1, [pc, #224]	; (800159c <HAL_I2C_Init+0x140>)
 80014bc:	400a      	ands	r2, r1
 80014be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d108      	bne.n	80014da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	0209      	lsls	r1, r1, #8
 80014d4:	430a      	orrs	r2, r1
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	e007      	b.n	80014ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2184      	movs	r1, #132	; 0x84
 80014e4:	0209      	lsls	r1, r1, #8
 80014e6:	430a      	orrs	r2, r1
 80014e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d109      	bne.n	8001506 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0109      	lsls	r1, r1, #4
 8001500:	430a      	orrs	r2, r1
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	e007      	b.n	8001516 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4923      	ldr	r1, [pc, #140]	; (80015a0 <HAL_I2C_Init+0x144>)
 8001512:	400a      	ands	r2, r1
 8001514:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4920      	ldr	r1, [pc, #128]	; (80015a4 <HAL_I2C_Init+0x148>)
 8001522:	430a      	orrs	r2, r1
 8001524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	491a      	ldr	r1, [pc, #104]	; (800159c <HAL_I2C_Init+0x140>)
 8001532:	400a      	ands	r2, r1
 8001534:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	431a      	orrs	r2, r3
 8001540:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69d9      	ldr	r1, [r3, #28]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1a      	ldr	r2, [r3, #32]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2101      	movs	r1, #1
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2241      	movs	r2, #65	; 0x41
 800157a:	2120      	movs	r1, #32
 800157c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2242      	movs	r2, #66	; 0x42
 8001588:	2100      	movs	r1, #0
 800158a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b002      	add	sp, #8
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	f0ffffff 	.word	0xf0ffffff
 800159c:	ffff7fff 	.word	0xffff7fff
 80015a0:	fffff7ff 	.word	0xfffff7ff
 80015a4:	02008000 	.word	0x02008000

080015a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2241      	movs	r2, #65	; 0x41
 80015b6:	5c9b      	ldrb	r3, [r3, r2]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b20      	cmp	r3, #32
 80015bc:	d138      	bne.n	8001630 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2240      	movs	r2, #64	; 0x40
 80015c2:	5c9b      	ldrb	r3, [r3, r2]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e032      	b.n	8001632 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	2101      	movs	r1, #1
 80015d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2241      	movs	r2, #65	; 0x41
 80015d8:	2124      	movs	r1, #36	; 0x24
 80015da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2101      	movs	r1, #1
 80015e8:	438a      	bics	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4911      	ldr	r1, [pc, #68]	; (800163c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6819      	ldr	r1, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2101      	movs	r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2241      	movs	r2, #65	; 0x41
 8001620:	2120      	movs	r1, #32
 8001622:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2240      	movs	r2, #64	; 0x40
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	e000      	b.n	8001632 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001630:	2302      	movs	r3, #2
  }
}
 8001632:	0018      	movs	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	b002      	add	sp, #8
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	ffffefff 	.word	0xffffefff

08001640 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2241      	movs	r2, #65	; 0x41
 800164e:	5c9b      	ldrb	r3, [r3, r2]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b20      	cmp	r3, #32
 8001654:	d139      	bne.n	80016ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2240      	movs	r2, #64	; 0x40
 800165a:	5c9b      	ldrb	r3, [r3, r2]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001660:	2302      	movs	r3, #2
 8001662:	e033      	b.n	80016cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2240      	movs	r2, #64	; 0x40
 8001668:	2101      	movs	r1, #1
 800166a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2241      	movs	r2, #65	; 0x41
 8001670:	2124      	movs	r1, #36	; 0x24
 8001672:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2101      	movs	r1, #1
 8001680:	438a      	bics	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2241      	movs	r2, #65	; 0x41
 80016ba:	2120      	movs	r1, #32
 80016bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2240      	movs	r2, #64	; 0x40
 80016c2:	2100      	movs	r1, #0
 80016c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016ca:	2302      	movs	r3, #2
  }
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b004      	add	sp, #16
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	fffff0ff 	.word	0xfffff0ff

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e1d0      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2201      	movs	r2, #1
 80016f0:	4013      	ands	r3, r2
 80016f2:	d100      	bne.n	80016f6 <HAL_RCC_OscConfig+0x1e>
 80016f4:	e069      	b.n	80017ca <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f6:	4bc8      	ldr	r3, [pc, #800]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2238      	movs	r2, #56	; 0x38
 80016fc:	4013      	ands	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b08      	cmp	r3, #8
 8001704:	d105      	bne.n	8001712 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d15d      	bne.n	80017ca <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e1bc      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	429a      	cmp	r2, r3
 800171c:	d107      	bne.n	800172e <HAL_RCC_OscConfig+0x56>
 800171e:	4bbe      	ldr	r3, [pc, #760]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4bbd      	ldr	r3, [pc, #756]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	0249      	lsls	r1, r1, #9
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e020      	b.n	8001770 <HAL_RCC_OscConfig+0x98>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	23a0      	movs	r3, #160	; 0xa0
 8001734:	02db      	lsls	r3, r3, #11
 8001736:	429a      	cmp	r2, r3
 8001738:	d10e      	bne.n	8001758 <HAL_RCC_OscConfig+0x80>
 800173a:	4bb7      	ldr	r3, [pc, #732]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4bb6      	ldr	r3, [pc, #728]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	02c9      	lsls	r1, r1, #11
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	4bb3      	ldr	r3, [pc, #716]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4bb2      	ldr	r3, [pc, #712]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0249      	lsls	r1, r1, #9
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0x98>
 8001758:	4baf      	ldr	r3, [pc, #700]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4bae      	ldr	r3, [pc, #696]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800175e:	49af      	ldr	r1, [pc, #700]	; (8001a1c <HAL_RCC_OscConfig+0x344>)
 8001760:	400a      	ands	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	4bac      	ldr	r3, [pc, #688]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4bab      	ldr	r3, [pc, #684]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800176a:	49ad      	ldr	r1, [pc, #692]	; (8001a20 <HAL_RCC_OscConfig+0x348>)
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d014      	beq.n	80017a2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fbc4 	bl	8000f04 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001782:	f7ff fbbf 	bl	8000f04 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	; 0x64
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e17b      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001794:	4ba0      	ldr	r3, [pc, #640]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0xaa>
 80017a0:	e013      	b.n	80017ca <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff fbaf 	bl	8000f04 <HAL_GetTick>
 80017a6:	0003      	movs	r3, r0
 80017a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fbaa 	bl	8000f04 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e166      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017be:	4b96      	ldr	r3, [pc, #600]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	029b      	lsls	r3, r3, #10
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2202      	movs	r2, #2
 80017d0:	4013      	ands	r3, r2
 80017d2:	d100      	bne.n	80017d6 <HAL_RCC_OscConfig+0xfe>
 80017d4:	e086      	b.n	80018e4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d6:	4b90      	ldr	r3, [pc, #576]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2238      	movs	r2, #56	; 0x38
 80017dc:	4013      	ands	r3, r2
 80017de:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d12f      	bne.n	8001846 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e14c      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	4b89      	ldr	r3, [pc, #548]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a8b      	ldr	r2, [pc, #556]	; (8001a24 <HAL_RCC_OscConfig+0x34c>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	021a      	lsls	r2, r3, #8
 8001802:	4b85      	ldr	r3, [pc, #532]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d112      	bne.n	8001834 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800180e:	4b82      	ldr	r3, [pc, #520]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a85      	ldr	r2, [pc, #532]	; (8001a28 <HAL_RCC_OscConfig+0x350>)
 8001814:	4013      	ands	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	4b7e      	ldr	r3, [pc, #504]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001822:	4b7d      	ldr	r3, [pc, #500]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	0adb      	lsrs	r3, r3, #11
 8001828:	2207      	movs	r2, #7
 800182a:	4013      	ands	r3, r2
 800182c:	4a7f      	ldr	r2, [pc, #508]	; (8001a2c <HAL_RCC_OscConfig+0x354>)
 800182e:	40da      	lsrs	r2, r3
 8001830:	4b7f      	ldr	r3, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0x358>)
 8001832:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001834:	4b7f      	ldr	r3, [pc, #508]	; (8001a34 <HAL_RCC_OscConfig+0x35c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff fb07 	bl	8000e4c <HAL_InitTick>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d050      	beq.n	80018e4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e122      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d030      	beq.n	80018b0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800184e:	4b72      	ldr	r3, [pc, #456]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a75      	ldr	r2, [pc, #468]	; (8001a28 <HAL_RCC_OscConfig+0x350>)
 8001854:	4013      	ands	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	4b6e      	ldr	r3, [pc, #440]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001862:	4b6d      	ldr	r3, [pc, #436]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	0049      	lsls	r1, r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fb48 	bl	8000f04 <HAL_GetTick>
 8001874:	0003      	movs	r3, r0
 8001876:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800187a:	f7ff fb43 	bl	8000f04 <HAL_GetTick>
 800187e:	0002      	movs	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e0ff      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800188c:	4b62      	ldr	r3, [pc, #392]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4013      	ands	r3, r2
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a61      	ldr	r2, [pc, #388]	; (8001a24 <HAL_RCC_OscConfig+0x34c>)
 800189e:	4013      	ands	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	021a      	lsls	r2, r3, #8
 80018a8:	4b5b      	ldr	r3, [pc, #364]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	e019      	b.n	80018e4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b58      	ldr	r3, [pc, #352]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80018b6:	4960      	ldr	r1, [pc, #384]	; (8001a38 <HAL_RCC_OscConfig+0x360>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fb22 	bl	8000f04 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80018c6:	f7ff fb1d 	bl	8000f04 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0d9      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d8:	4b4f      	ldr	r3, [pc, #316]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4013      	ands	r3, r2
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2208      	movs	r2, #8
 80018ea:	4013      	ands	r3, r2
 80018ec:	d042      	beq.n	8001974 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2238      	movs	r2, #56	; 0x38
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b18      	cmp	r3, #24
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d138      	bne.n	8001974 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0c2      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800190e:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001910:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001914:	2101      	movs	r1, #1
 8001916:	430a      	orrs	r2, r1
 8001918:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff faf3 	bl	8000f04 <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001924:	f7ff faee 	bl	8000f04 <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0aa      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001936:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d0f1      	beq.n	8001924 <HAL_RCC_OscConfig+0x24c>
 8001940:	e018      	b.n	8001974 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001942:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001944:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001946:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001948:	2101      	movs	r1, #1
 800194a:	438a      	bics	r2, r1
 800194c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff fad9 	bl	8000f04 <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001958:	f7ff fad4 	bl	8000f04 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e090      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196e:	2202      	movs	r2, #2
 8001970:	4013      	ands	r3, r2
 8001972:	d1f1      	bne.n	8001958 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2204      	movs	r2, #4
 800197a:	4013      	ands	r3, r2
 800197c:	d100      	bne.n	8001980 <HAL_RCC_OscConfig+0x2a8>
 800197e:	e084      	b.n	8001a8a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001980:	230f      	movs	r3, #15
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001988:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2238      	movs	r2, #56	; 0x38
 800198e:	4013      	ands	r3, r2
 8001990:	2b20      	cmp	r3, #32
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d000      	beq.n	800199e <HAL_RCC_OscConfig+0x2c6>
 800199c:	e075      	b.n	8001a8a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e074      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d106      	bne.n	80019b8 <HAL_RCC_OscConfig+0x2e0>
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80019ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80019b0:	2101      	movs	r1, #1
 80019b2:	430a      	orrs	r2, r1
 80019b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80019b6:	e01c      	b.n	80019f2 <HAL_RCC_OscConfig+0x31a>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x302>
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80019c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80019c6:	2104      	movs	r1, #4
 80019c8:	430a      	orrs	r2, r1
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80019ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80019d2:	2101      	movs	r1, #1
 80019d4:	430a      	orrs	r2, r1
 80019d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x31a>
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80019dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	438a      	bics	r2, r1
 80019e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80019e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80019ec:	2104      	movs	r1, #4
 80019ee:	438a      	bics	r2, r1
 80019f0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d028      	beq.n	8001a4c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff fa83 	bl	8000f04 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a02:	e01d      	b.n	8001a40 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff fa7e 	bl	8000f04 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <HAL_RCC_OscConfig+0x364>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d915      	bls.n	8001a40 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e039      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	fffeffff 	.word	0xfffeffff
 8001a20:	fffbffff 	.word	0xfffbffff
 8001a24:	ffff80ff 	.word	0xffff80ff
 8001a28:	ffffc7ff 	.word	0xffffc7ff
 8001a2c:	02dc6c00 	.word	0x02dc6c00
 8001a30:	20000008 	.word	0x20000008
 8001a34:	2000000c 	.word	0x2000000c
 8001a38:	fffffeff 	.word	0xfffffeff
 8001a3c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_RCC_OscConfig+0x3bc>)
 8001a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a44:	2202      	movs	r2, #2
 8001a46:	4013      	ands	r3, r2
 8001a48:	d0dc      	beq.n	8001a04 <HAL_RCC_OscConfig+0x32c>
 8001a4a:	e013      	b.n	8001a74 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fa5a 	bl	8000f04 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001a54:	e009      	b.n	8001a6a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff fa55 	bl	8000f04 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_RCC_OscConfig+0x3c0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e010      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_RCC_OscConfig+0x3bc>)
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a74:	230f      	movs	r3, #15
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d105      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_RCC_OscConfig+0x3bc>)
 8001a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_RCC_OscConfig+0x3bc>)
 8001a84:	4905      	ldr	r1, [pc, #20]	; (8001a9c <HAL_RCC_OscConfig+0x3c4>)
 8001a86:	400a      	ands	r2, r1
 8001a88:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b006      	add	sp, #24
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	00001388 	.word	0x00001388
 8001a9c:	efffffff 	.word	0xefffffff

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0e9      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2207      	movs	r2, #7
 8001aba:	4013      	ands	r3, r2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d91e      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	4393      	bics	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ad4:	f7ff fa16 	bl	8000f04 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001adc:	e009      	b.n	8001af2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ade:	f7ff fa11 	bl	8000f04 <HAL_GetTick>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	4a6a      	ldr	r2, [pc, #424]	; (8001c94 <HAL_RCC_ClockConfig+0x1f4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e0ca      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001af2:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2207      	movs	r2, #7
 8001af8:	4013      	ands	r3, r2
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1ee      	bne.n	8001ade <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2202      	movs	r2, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	d017      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4013      	ands	r3, r2
 8001b12:	d008      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b14:	4b60      	ldr	r3, [pc, #384]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a60      	ldr	r2, [pc, #384]	; (8001c9c <HAL_RCC_ClockConfig+0x1fc>)
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1e:	21b0      	movs	r1, #176	; 0xb0
 8001b20:	0109      	lsls	r1, r1, #4
 8001b22:	430a      	orrs	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b26:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4a5d      	ldr	r2, [pc, #372]	; (8001ca0 <HAL_RCC_ClockConfig+0x200>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b36:	430a      	orrs	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	d055      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001b44:	4b54      	ldr	r3, [pc, #336]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	221c      	movs	r2, #28
 8001b4a:	4393      	bics	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b60:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	029b      	lsls	r3, r3, #10
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d11f      	bne.n	8001bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e08b      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b78:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4013      	ands	r3, r2
 8001b82:	d113      	bne.n	8001bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e07f      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b90:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e074      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e06d      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bac:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc0:	f7ff f9a0 	bl	8000f04 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc8:	e009      	b.n	8001bde <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f7ff f99b 	bl	8000f04 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a2f      	ldr	r2, [pc, #188]	; (8001c94 <HAL_RCC_ClockConfig+0x1f4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e054      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2238      	movs	r2, #56	; 0x38
 8001be4:	401a      	ands	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1ec      	bne.n	8001bca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d21e      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2207      	movs	r2, #7
 8001c04:	4393      	bics	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c10:	f7ff f978 	bl	8000f04 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c18:	e009      	b.n	8001c2e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1a:	f7ff f973 	bl	8000f04 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_RCC_ClockConfig+0x1f4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e02c      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2207      	movs	r2, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2204      	movs	r2, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	d009      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_RCC_ClockConfig+0x204>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c5a:	f000 f82b 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c5e:	0001      	movs	r1, r0
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	220f      	movs	r2, #15
 8001c68:	401a      	ands	r2, r3
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_RCC_ClockConfig+0x208>)
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	58d3      	ldr	r3, [r2, r3]
 8001c70:	221f      	movs	r2, #31
 8001c72:	4013      	ands	r3, r2
 8001c74:	000a      	movs	r2, r1
 8001c76:	40da      	lsrs	r2, r3
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_RCC_ClockConfig+0x20c>)
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <HAL_RCC_ClockConfig+0x210>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff f8e3 	bl	8000e4c <HAL_InitTick>
 8001c86:	0003      	movs	r3, r0
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b004      	add	sp, #16
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000
 8001c94:	00001388 	.word	0x00001388
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	ffff84ff 	.word	0xffff84ff
 8001ca0:	fffff0ff 	.word	0xfffff0ff
 8001ca4:	ffff8fff 	.word	0xffff8fff
 8001ca8:	08002c88 	.word	0x08002c88
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	2000000c 	.word	0x2000000c

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x78>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2238      	movs	r2, #56	; 0x38
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d10f      	bne.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x78>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0adb      	lsrs	r3, r3, #11
 8001cca:	2207      	movs	r2, #7
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2201      	movs	r2, #1
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	4815      	ldr	r0, [pc, #84]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001cda:	f7fe fa15 	bl	8000108 <__udivsi3>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	e01e      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x78>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2238      	movs	r2, #56	; 0x38
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x78>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2238      	movs	r2, #56	; 0x38
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d103      	bne.n	8001d0a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	e00b      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x78>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2238      	movs	r2, #56	; 0x38
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b18      	cmp	r3, #24
 8001d14:	d103      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d16:	23fa      	movs	r3, #250	; 0xfa
 8001d18:	01db      	lsls	r3, r3, #7
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	e001      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001d22:	687b      	ldr	r3, [r7, #4]
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	02dc6c00 	.word	0x02dc6c00

08001d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	20000008 	.word	0x20000008

08001d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001d4c:	f7ff fff2 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d50:	0001      	movs	r1, r0
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	0b1b      	lsrs	r3, r3, #12
 8001d58:	2207      	movs	r2, #7
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	58d3      	ldr	r3, [r2, r3]
 8001d62:	221f      	movs	r2, #31
 8001d64:	4013      	ands	r3, r2
 8001d66:	40d9      	lsrs	r1, r3
 8001d68:	000b      	movs	r3, r1
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08002cc8 	.word	0x08002cc8

08001d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d80:	2313      	movs	r3, #19
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d88:	2312      	movs	r3, #18
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	029b      	lsls	r3, r3, #10
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d100      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d9c:	e079      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2011      	movs	r0, #17
 8001da0:	183b      	adds	r3, r7, r0
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001da8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	055b      	lsls	r3, r3, #21
 8001dae:	4013      	ands	r3, r2
 8001db0:	d110      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001db6:	4b60      	ldr	r3, [pc, #384]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0549      	lsls	r1, r1, #21
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dc0:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	055b      	lsls	r3, r3, #21
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dce:	183b      	adds	r3, r7, r0
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001dd4:	4b58      	ldr	r3, [pc, #352]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001dd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dd8:	23c0      	movs	r3, #192	; 0xc0
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d019      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d014      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001df0:	4b51      	ldr	r3, [pc, #324]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dfa:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e00:	2180      	movs	r1, #128	; 0x80
 8001e02:	0249      	lsls	r1, r1, #9
 8001e04:	430a      	orrs	r2, r1
 8001e06:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e08:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e0c:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e0e:	494c      	ldr	r1, [pc, #304]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001e14:	4b48      	ldr	r3, [pc, #288]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d016      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff f86f 	bl	8000f04 <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e2a:	e00c      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f86a 	bl	8000f04 <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	4a43      	ldr	r2, [pc, #268]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d904      	bls.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001e3c:	2313      	movs	r3, #19
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2203      	movs	r2, #3
 8001e42:	701a      	strb	r2, [r3, #0]
          break;
 8001e44:	e004      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e46:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d0ed      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001e50:	2313      	movs	r3, #19
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e5a:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	4a37      	ldr	r2, [pc, #220]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e6e:	e005      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e70:	2312      	movs	r3, #18
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	2213      	movs	r2, #19
 8001e76:	18ba      	adds	r2, r7, r2
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e7c:	2311      	movs	r3, #17
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d105      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e8c:	492e      	ldr	r1, [pc, #184]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8e:	400a      	ands	r2, r1
 8001e90:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d009      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	4393      	bics	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d009      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	4a23      	ldr	r2, [pc, #140]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	01db      	lsls	r3, r3, #7
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d008      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	0899      	lsrs	r1, r3, #2
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da09      	bge.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	22e0      	movs	r2, #224	; 0xe0
 8001f1a:	4393      	bics	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b006      	add	sp, #24
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	fffffcff 	.word	0xfffffcff
 8001f40:	fffeffff 	.word	0xfffeffff
 8001f44:	00001388 	.word	0x00001388
 8001f48:	efffffff 	.word	0xefffffff
 8001f4c:	ffffcfff 	.word	0xffffcfff
 8001f50:	ffff3fff 	.word	0xffff3fff

08001f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e04a      	b.n	8001ffc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	223d      	movs	r2, #61	; 0x3d
 8001f6a:	5c9b      	ldrb	r3, [r3, r2]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	223c      	movs	r2, #60	; 0x3c
 8001f76:	2100      	movs	r1, #0
 8001f78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7fe fe79 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	223d      	movs	r2, #61	; 0x3d
 8001f86:	2102      	movs	r1, #2
 8001f88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	0019      	movs	r1, r3
 8001f94:	0010      	movs	r0, r2
 8001f96:	f000 f9a5 	bl	80022e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2248      	movs	r2, #72	; 0x48
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	223e      	movs	r2, #62	; 0x3e
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	223f      	movs	r2, #63	; 0x3f
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2241      	movs	r2, #65	; 0x41
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2242      	movs	r2, #66	; 0x42
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2243      	movs	r2, #67	; 0x43
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2244      	movs	r2, #68	; 0x44
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	5499      	strb	r1, [r3, r2]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2245      	movs	r2, #69	; 0x45
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2246      	movs	r2, #70	; 0x46
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2247      	movs	r2, #71	; 0x47
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	223d      	movs	r2, #61	; 0x3d
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	223d      	movs	r2, #61	; 0x3d
 8002010:	5c9b      	ldrb	r3, [r3, r2]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d001      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e037      	b.n	800208c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	223d      	movs	r2, #61	; 0x3d
 8002020:	2102      	movs	r1, #2
 8002022:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2101      	movs	r1, #1
 8002030:	430a      	orrs	r2, r1
 8002032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_TIM_Base_Start_IT+0x90>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x44>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a15      	ldr	r2, [pc, #84]	; (8002098 <HAL_TIM_Base_Start_IT+0x94>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d116      	bne.n	8002076 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4a13      	ldr	r2, [pc, #76]	; (800209c <HAL_TIM_Base_Start_IT+0x98>)
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b06      	cmp	r3, #6
 8002058:	d016      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x84>
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	025b      	lsls	r3, r3, #9
 8002060:	429a      	cmp	r2, r3
 8002062:	d011      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002074:	e008      	b.n	8002088 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e000      	b.n	800208a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002088:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40012c00 	.word	0x40012c00
 8002098:	40000400 	.word	0x40000400
 800209c:	00010007 	.word	0x00010007

080020a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2202      	movs	r2, #2
 80020bc:	4013      	ands	r3, r2
 80020be:	d021      	beq.n	8002104 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2202      	movs	r2, #2
 80020c4:	4013      	ands	r3, r2
 80020c6:	d01d      	beq.n	8002104 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2203      	movs	r2, #3
 80020ce:	4252      	negs	r2, r2
 80020d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2203      	movs	r2, #3
 80020e0:	4013      	ands	r3, r2
 80020e2:	d004      	beq.n	80020ee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 f8e4 	bl	80022b4 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e007      	b.n	80020fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 f8d7 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 f8e3 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2204      	movs	r2, #4
 8002108:	4013      	ands	r3, r2
 800210a:	d022      	beq.n	8002152 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2204      	movs	r2, #4
 8002110:	4013      	ands	r3, r2
 8002112:	d01e      	beq.n	8002152 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2205      	movs	r2, #5
 800211a:	4252      	negs	r2, r2
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	23c0      	movs	r3, #192	; 0xc0
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d004      	beq.n	800213c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0018      	movs	r0, r3
 8002136:	f000 f8bd 	bl	80022b4 <HAL_TIM_IC_CaptureCallback>
 800213a:	e007      	b.n	800214c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 f8b0 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 f8bc 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2208      	movs	r2, #8
 8002156:	4013      	ands	r3, r2
 8002158:	d021      	beq.n	800219e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2208      	movs	r2, #8
 800215e:	4013      	ands	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2209      	movs	r2, #9
 8002168:	4252      	negs	r2, r2
 800216a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2204      	movs	r2, #4
 8002170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2203      	movs	r2, #3
 800217a:	4013      	ands	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f000 f897 	bl	80022b4 <HAL_TIM_IC_CaptureCallback>
 8002186:	e007      	b.n	8002198 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	0018      	movs	r0, r3
 800218c:	f000 f88a 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0018      	movs	r0, r3
 8002194:	f000 f896 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2210      	movs	r2, #16
 80021a2:	4013      	ands	r3, r2
 80021a4:	d022      	beq.n	80021ec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2210      	movs	r2, #16
 80021aa:	4013      	ands	r3, r2
 80021ac:	d01e      	beq.n	80021ec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2211      	movs	r2, #17
 80021b4:	4252      	negs	r2, r2
 80021b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2208      	movs	r2, #8
 80021bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	69da      	ldr	r2, [r3, #28]
 80021c4:	23c0      	movs	r3, #192	; 0xc0
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 f870 	bl	80022b4 <HAL_TIM_IC_CaptureCallback>
 80021d4:	e007      	b.n	80021e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f863 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f86f 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2201      	movs	r2, #1
 80021f0:	4013      	ands	r3, r2
 80021f2:	d00c      	beq.n	800220e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	4013      	ands	r3, r2
 80021fa:	d008      	beq.n	800220e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2202      	movs	r2, #2
 8002202:	4252      	negs	r2, r2
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f7fe f9eb 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	4013      	ands	r3, r2
 8002214:	d00c      	beq.n	8002230 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2280      	movs	r2, #128	; 0x80
 800221a:	4013      	ands	r3, r2
 800221c:	d008      	beq.n	8002230 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2281      	movs	r2, #129	; 0x81
 8002224:	4252      	negs	r2, r2
 8002226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	0018      	movs	r0, r3
 800222c:	f000 f8ce 	bl	80023cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4013      	ands	r3, r2
 8002238:	d00b      	beq.n	8002252 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	4013      	ands	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <HAL_TIM_IRQHandler+0x200>)
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	0018      	movs	r0, r3
 800224e:	f000 f8c5 	bl	80023dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	4013      	ands	r3, r2
 8002258:	d00c      	beq.n	8002274 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2240      	movs	r2, #64	; 0x40
 800225e:	4013      	ands	r3, r2
 8002260:	d008      	beq.n	8002274 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2241      	movs	r2, #65	; 0x41
 8002268:	4252      	negs	r2, r2
 800226a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	0018      	movs	r0, r3
 8002270:	f000 f830 	bl	80022d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2220      	movs	r2, #32
 8002278:	4013      	ands	r3, r2
 800227a:	d00c      	beq.n	8002296 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	4013      	ands	r3, r2
 8002282:	d008      	beq.n	8002296 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2221      	movs	r2, #33	; 0x21
 800228a:	4252      	negs	r2, r2
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	0018      	movs	r0, r3
 8002292:	f000 f893 	bl	80023bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	46bd      	mov	sp, r7
 800229a:	b004      	add	sp, #16
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	fffffeff 	.word	0xfffffeff

080022a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b002      	add	sp, #8
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a2b      	ldr	r2, [pc, #172]	; (80023a4 <TIM_Base_SetConfig+0xc0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <TIM_Base_SetConfig+0x20>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <TIM_Base_SetConfig+0xc4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d108      	bne.n	8002316 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2270      	movs	r2, #112	; 0x70
 8002308:	4393      	bics	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <TIM_Base_SetConfig+0xc0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00f      	beq.n	800233e <TIM_Base_SetConfig+0x5a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <TIM_Base_SetConfig+0xc4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00b      	beq.n	800233e <TIM_Base_SetConfig+0x5a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a20      	ldr	r2, [pc, #128]	; (80023ac <TIM_Base_SetConfig+0xc8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <TIM_Base_SetConfig+0x5a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <TIM_Base_SetConfig+0xcc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <TIM_Base_SetConfig+0x5a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <TIM_Base_SetConfig+0xd0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d108      	bne.n	8002350 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <TIM_Base_SetConfig+0xd4>)
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2280      	movs	r2, #128	; 0x80
 8002354:	4393      	bics	r3, r2
 8002356:	001a      	movs	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <TIM_Base_SetConfig+0xc0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <TIM_Base_SetConfig+0xaa>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <TIM_Base_SetConfig+0xcc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d003      	beq.n	800238e <TIM_Base_SetConfig+0xaa>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <TIM_Base_SetConfig+0xd0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d103      	bne.n	8002396 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	615a      	str	r2, [r3, #20]
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b004      	add	sp, #16
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40002000 	.word	0x40002000
 80023b0:	40014400 	.word	0x40014400
 80023b4:	40014800 	.word	0x40014800
 80023b8:	fffffcff 	.word	0xfffffcff

080023bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e046      	b.n	800248c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2288      	movs	r2, #136	; 0x88
 8002402:	589b      	ldr	r3, [r3, r2]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d107      	bne.n	8002418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2284      	movs	r2, #132	; 0x84
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f7fe fc56 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2288      	movs	r2, #136	; 0x88
 800241c:	2124      	movs	r1, #36	; 0x24
 800241e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2101      	movs	r1, #1
 800242c:	438a      	bics	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	0018      	movs	r0, r3
 800243c:	f000 f9aa 	bl	8002794 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	f000 f828 	bl	8002498 <UART_SetConfig>
 8002448:	0003      	movs	r3, r0
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e01c      	b.n	800248c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	490d      	ldr	r1, [pc, #52]	; (8002494 <HAL_UART_Init+0xa8>)
 800245e:	400a      	ands	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	212a      	movs	r1, #42	; 0x2a
 800246e:	438a      	bics	r2, r1
 8002470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	0018      	movs	r0, r3
 8002486:	f000 fa39 	bl	80028fc <UART_CheckIdleState>
 800248a:	0003      	movs	r3, r0
}
 800248c:	0018      	movs	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}
 8002494:	ffffb7ff 	.word	0xffffb7ff

08002498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024a0:	231e      	movs	r3, #30
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4aab      	ldr	r2, [pc, #684]	; (8002774 <UART_SetConfig+0x2dc>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4aa6      	ldr	r2, [pc, #664]	; (8002778 <UART_SetConfig+0x2e0>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a9d      	ldr	r2, [pc, #628]	; (800277c <UART_SetConfig+0x2e4>)
 8002506:	4013      	ands	r3, r2
 8002508:	0019      	movs	r1, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	430a      	orrs	r2, r1
 8002512:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	220f      	movs	r2, #15
 800251c:	4393      	bics	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a93      	ldr	r2, [pc, #588]	; (8002780 <UART_SetConfig+0x2e8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d127      	bne.n	8002586 <UART_SetConfig+0xee>
 8002536:	4b93      	ldr	r3, [pc, #588]	; (8002784 <UART_SetConfig+0x2ec>)
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	2203      	movs	r2, #3
 800253c:	4013      	ands	r3, r2
 800253e:	2b03      	cmp	r3, #3
 8002540:	d017      	beq.n	8002572 <UART_SetConfig+0xda>
 8002542:	d81b      	bhi.n	800257c <UART_SetConfig+0xe4>
 8002544:	2b02      	cmp	r3, #2
 8002546:	d00a      	beq.n	800255e <UART_SetConfig+0xc6>
 8002548:	d818      	bhi.n	800257c <UART_SetConfig+0xe4>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <UART_SetConfig+0xbc>
 800254e:	2b01      	cmp	r3, #1
 8002550:	d00a      	beq.n	8002568 <UART_SetConfig+0xd0>
 8002552:	e013      	b.n	800257c <UART_SetConfig+0xe4>
 8002554:	231f      	movs	r3, #31
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e021      	b.n	80025a2 <UART_SetConfig+0x10a>
 800255e:	231f      	movs	r3, #31
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2202      	movs	r2, #2
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	e01c      	b.n	80025a2 <UART_SetConfig+0x10a>
 8002568:	231f      	movs	r3, #31
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	2204      	movs	r2, #4
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	e017      	b.n	80025a2 <UART_SetConfig+0x10a>
 8002572:	231f      	movs	r3, #31
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2208      	movs	r2, #8
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e012      	b.n	80025a2 <UART_SetConfig+0x10a>
 800257c:	231f      	movs	r3, #31
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2210      	movs	r2, #16
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	e00d      	b.n	80025a2 <UART_SetConfig+0x10a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7f      	ldr	r2, [pc, #508]	; (8002788 <UART_SetConfig+0x2f0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d104      	bne.n	800259a <UART_SetConfig+0x102>
 8002590:	231f      	movs	r3, #31
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e003      	b.n	80025a2 <UART_SetConfig+0x10a>
 800259a:	231f      	movs	r3, #31
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2210      	movs	r2, #16
 80025a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d000      	beq.n	80025b0 <UART_SetConfig+0x118>
 80025ae:	e06f      	b.n	8002690 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80025b0:	231f      	movs	r3, #31
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d01f      	beq.n	80025fa <UART_SetConfig+0x162>
 80025ba:	dc22      	bgt.n	8002602 <UART_SetConfig+0x16a>
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d017      	beq.n	80025f0 <UART_SetConfig+0x158>
 80025c0:	dc1f      	bgt.n	8002602 <UART_SetConfig+0x16a>
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <UART_SetConfig+0x134>
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d005      	beq.n	80025d6 <UART_SetConfig+0x13e>
 80025ca:	e01a      	b.n	8002602 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025cc:	f7ff fbbc 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 80025d0:	0003      	movs	r3, r0
 80025d2:	61bb      	str	r3, [r7, #24]
        break;
 80025d4:	e01c      	b.n	8002610 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80025d6:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <UART_SetConfig+0x2ec>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2207      	movs	r2, #7
 80025de:	4013      	ands	r3, r2
 80025e0:	3301      	adds	r3, #1
 80025e2:	0019      	movs	r1, r3
 80025e4:	4869      	ldr	r0, [pc, #420]	; (800278c <UART_SetConfig+0x2f4>)
 80025e6:	f7fd fd8f 	bl	8000108 <__udivsi3>
 80025ea:	0003      	movs	r3, r0
 80025ec:	61bb      	str	r3, [r7, #24]
        break;
 80025ee:	e00f      	b.n	8002610 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025f0:	f7ff fb60 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61bb      	str	r3, [r7, #24]
        break;
 80025f8:	e00a      	b.n	8002610 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	61bb      	str	r3, [r7, #24]
        break;
 8002600:	e006      	b.n	8002610 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002606:	231e      	movs	r3, #30
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
        break;
 800260e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d100      	bne.n	8002618 <UART_SetConfig+0x180>
 8002616:	e097      	b.n	8002748 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800261c:	4b5c      	ldr	r3, [pc, #368]	; (8002790 <UART_SetConfig+0x2f8>)
 800261e:	0052      	lsls	r2, r2, #1
 8002620:	5ad3      	ldrh	r3, [r2, r3]
 8002622:	0019      	movs	r1, r3
 8002624:	69b8      	ldr	r0, [r7, #24]
 8002626:	f7fd fd6f 	bl	8000108 <__udivsi3>
 800262a:	0003      	movs	r3, r0
 800262c:	005a      	lsls	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	18d2      	adds	r2, r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	0019      	movs	r1, r3
 800263c:	0010      	movs	r0, r2
 800263e:	f7fd fd63 	bl	8000108 <__udivsi3>
 8002642:	0003      	movs	r3, r0
 8002644:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b0f      	cmp	r3, #15
 800264a:	d91c      	bls.n	8002686 <UART_SetConfig+0x1ee>
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	025b      	lsls	r3, r3, #9
 8002652:	429a      	cmp	r2, r3
 8002654:	d217      	bcs.n	8002686 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	b29a      	uxth	r2, r3
 800265a:	200e      	movs	r0, #14
 800265c:	183b      	adds	r3, r7, r0
 800265e:	210f      	movs	r1, #15
 8002660:	438a      	bics	r2, r1
 8002662:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	2207      	movs	r2, #7
 800266c:	4013      	ands	r3, r2
 800266e:	b299      	uxth	r1, r3
 8002670:	183b      	adds	r3, r7, r0
 8002672:	183a      	adds	r2, r7, r0
 8002674:	8812      	ldrh	r2, [r2, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	183a      	adds	r2, r7, r0
 8002680:	8812      	ldrh	r2, [r2, #0]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	e060      	b.n	8002748 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002686:	231e      	movs	r3, #30
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e05b      	b.n	8002748 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002690:	231f      	movs	r3, #31
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b08      	cmp	r3, #8
 8002698:	d01f      	beq.n	80026da <UART_SetConfig+0x242>
 800269a:	dc22      	bgt.n	80026e2 <UART_SetConfig+0x24a>
 800269c:	2b04      	cmp	r3, #4
 800269e:	d017      	beq.n	80026d0 <UART_SetConfig+0x238>
 80026a0:	dc1f      	bgt.n	80026e2 <UART_SetConfig+0x24a>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <UART_SetConfig+0x214>
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d005      	beq.n	80026b6 <UART_SetConfig+0x21e>
 80026aa:	e01a      	b.n	80026e2 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ac:	f7ff fb4c 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 80026b0:	0003      	movs	r3, r0
 80026b2:	61bb      	str	r3, [r7, #24]
        break;
 80026b4:	e01c      	b.n	80026f0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80026b6:	4b33      	ldr	r3, [pc, #204]	; (8002784 <UART_SetConfig+0x2ec>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2207      	movs	r2, #7
 80026be:	4013      	ands	r3, r2
 80026c0:	3301      	adds	r3, #1
 80026c2:	0019      	movs	r1, r3
 80026c4:	4831      	ldr	r0, [pc, #196]	; (800278c <UART_SetConfig+0x2f4>)
 80026c6:	f7fd fd1f 	bl	8000108 <__udivsi3>
 80026ca:	0003      	movs	r3, r0
 80026cc:	61bb      	str	r3, [r7, #24]
        break;
 80026ce:	e00f      	b.n	80026f0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026d0:	f7ff faf0 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 80026d4:	0003      	movs	r3, r0
 80026d6:	61bb      	str	r3, [r7, #24]
        break;
 80026d8:	e00a      	b.n	80026f0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	61bb      	str	r3, [r7, #24]
        break;
 80026e0:	e006      	b.n	80026f0 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026e6:	231e      	movs	r3, #30
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
        break;
 80026ee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d028      	beq.n	8002748 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026fa:	4b25      	ldr	r3, [pc, #148]	; (8002790 <UART_SetConfig+0x2f8>)
 80026fc:	0052      	lsls	r2, r2, #1
 80026fe:	5ad3      	ldrh	r3, [r2, r3]
 8002700:	0019      	movs	r1, r3
 8002702:	69b8      	ldr	r0, [r7, #24]
 8002704:	f7fd fd00 	bl	8000108 <__udivsi3>
 8002708:	0003      	movs	r3, r0
 800270a:	001a      	movs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	18d2      	adds	r2, r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0019      	movs	r1, r3
 800271a:	0010      	movs	r0, r2
 800271c:	f7fd fcf4 	bl	8000108 <__udivsi3>
 8002720:	0003      	movs	r3, r0
 8002722:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b0f      	cmp	r3, #15
 8002728:	d90a      	bls.n	8002740 <UART_SetConfig+0x2a8>
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	025b      	lsls	r3, r3, #9
 8002730:	429a      	cmp	r2, r3
 8002732:	d205      	bcs.n	8002740 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	b29a      	uxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	e003      	b.n	8002748 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002740:	231e      	movs	r3, #30
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	226a      	movs	r2, #106	; 0x6a
 800274c:	2101      	movs	r1, #1
 800274e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2268      	movs	r2, #104	; 0x68
 8002754:	2101      	movs	r1, #1
 8002756:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002764:	231e      	movs	r3, #30
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	781b      	ldrb	r3, [r3, #0]
}
 800276a:	0018      	movs	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	b008      	add	sp, #32
 8002770:	bd80      	pop	{r7, pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	cfff69f3 	.word	0xcfff69f3
 8002778:	ffffcfff 	.word	0xffffcfff
 800277c:	11fff4ff 	.word	0x11fff4ff
 8002780:	40013800 	.word	0x40013800
 8002784:	40021000 	.word	0x40021000
 8002788:	40004400 	.word	0x40004400
 800278c:	02dc6c00 	.word	0x02dc6c00
 8002790:	08002ce8 	.word	0x08002ce8

08002794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	2208      	movs	r2, #8
 80027a2:	4013      	ands	r3, r2
 80027a4:	d00b      	beq.n	80027be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a4a      	ldr	r2, [pc, #296]	; (80028d8 <UART_AdvFeatureConfig+0x144>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d00b      	beq.n	80027e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4a43      	ldr	r2, [pc, #268]	; (80028dc <UART_AdvFeatureConfig+0x148>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d00b      	beq.n	8002802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a3b      	ldr	r2, [pc, #236]	; (80028e0 <UART_AdvFeatureConfig+0x14c>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	2204      	movs	r2, #4
 8002808:	4013      	ands	r3, r2
 800280a:	d00b      	beq.n	8002824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4a34      	ldr	r2, [pc, #208]	; (80028e4 <UART_AdvFeatureConfig+0x150>)
 8002814:	4013      	ands	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	2210      	movs	r2, #16
 800282a:	4013      	ands	r3, r2
 800282c:	d00b      	beq.n	8002846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <UART_AdvFeatureConfig+0x154>)
 8002836:	4013      	ands	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	2220      	movs	r2, #32
 800284c:	4013      	ands	r3, r2
 800284e:	d00b      	beq.n	8002868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	4a25      	ldr	r2, [pc, #148]	; (80028ec <UART_AdvFeatureConfig+0x158>)
 8002858:	4013      	ands	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	4013      	ands	r3, r2
 8002870:	d01d      	beq.n	80028ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <UART_AdvFeatureConfig+0x15c>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	035b      	lsls	r3, r3, #13
 8002892:	429a      	cmp	r2, r3
 8002894:	d10b      	bne.n	80028ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <UART_AdvFeatureConfig+0x160>)
 800289e:	4013      	ands	r3, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	2280      	movs	r2, #128	; 0x80
 80028b4:	4013      	ands	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <UART_AdvFeatureConfig+0x164>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
  }
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	ffff7fff 	.word	0xffff7fff
 80028dc:	fffdffff 	.word	0xfffdffff
 80028e0:	fffeffff 	.word	0xfffeffff
 80028e4:	fffbffff 	.word	0xfffbffff
 80028e8:	ffffefff 	.word	0xffffefff
 80028ec:	ffffdfff 	.word	0xffffdfff
 80028f0:	ffefffff 	.word	0xffefffff
 80028f4:	ff9fffff 	.word	0xff9fffff
 80028f8:	fff7ffff 	.word	0xfff7ffff

080028fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b092      	sub	sp, #72	; 0x48
 8002900:	af02      	add	r7, sp, #8
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2290      	movs	r2, #144	; 0x90
 8002908:	2100      	movs	r1, #0
 800290a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800290c:	f7fe fafa 	bl	8000f04 <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2208      	movs	r2, #8
 800291c:	4013      	ands	r3, r2
 800291e:	2b08      	cmp	r3, #8
 8002920:	d12d      	bne.n	800297e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	0391      	lsls	r1, r2, #14
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4a47      	ldr	r2, [pc, #284]	; (8002a48 <UART_CheckIdleState+0x14c>)
 800292c:	9200      	str	r2, [sp, #0]
 800292e:	2200      	movs	r2, #0
 8002930:	f000 f88e 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 8002934:	1e03      	subs	r3, r0, #0
 8002936:	d022      	beq.n	800297e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002938:	f3ef 8310 	mrs	r3, PRIMASK
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002940:	63bb      	str	r3, [r7, #56]	; 0x38
 8002942:	2301      	movs	r3, #1
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	f383 8810 	msr	PRIMASK, r3
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	438a      	bics	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	f383 8810 	msr	PRIMASK, r3
}
 8002968:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2288      	movs	r2, #136	; 0x88
 800296e:	2120      	movs	r1, #32
 8002970:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2284      	movs	r2, #132	; 0x84
 8002976:	2100      	movs	r1, #0
 8002978:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e060      	b.n	8002a40 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2204      	movs	r2, #4
 8002986:	4013      	ands	r3, r2
 8002988:	2b04      	cmp	r3, #4
 800298a:	d146      	bne.n	8002a1a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298e:	2280      	movs	r2, #128	; 0x80
 8002990:	03d1      	lsls	r1, r2, #15
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4a2c      	ldr	r2, [pc, #176]	; (8002a48 <UART_CheckIdleState+0x14c>)
 8002996:	9200      	str	r2, [sp, #0]
 8002998:	2200      	movs	r2, #0
 800299a:	f000 f859 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d03b      	beq.n	8002a1a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029a2:	f3ef 8310 	mrs	r3, PRIMASK
 80029a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80029a8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
 80029ac:	2301      	movs	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f383 8810 	msr	PRIMASK, r3
}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4922      	ldr	r1, [pc, #136]	; (8002a4c <UART_CheckIdleState+0x150>)
 80029c4:	400a      	ands	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f383 8810 	msr	PRIMASK, r3
}
 80029d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029d4:	f3ef 8310 	mrs	r3, PRIMASK
 80029d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80029da:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
 80029de:	2301      	movs	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f383 8810 	msr	PRIMASK, r3
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2101      	movs	r1, #1
 80029f6:	438a      	bics	r2, r1
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	f383 8810 	msr	PRIMASK, r3
}
 8002a04:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	228c      	movs	r2, #140	; 0x8c
 8002a0a:	2120      	movs	r1, #32
 8002a0c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2284      	movs	r2, #132	; 0x84
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e012      	b.n	8002a40 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2288      	movs	r2, #136	; 0x88
 8002a1e:	2120      	movs	r1, #32
 8002a20:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	228c      	movs	r2, #140	; 0x8c
 8002a26:	2120      	movs	r1, #32
 8002a28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2284      	movs	r2, #132	; 0x84
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b010      	add	sp, #64	; 0x40
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	01ffffff 	.word	0x01ffffff
 8002a4c:	fffffedf 	.word	0xfffffedf

08002a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	1dfb      	adds	r3, r7, #7
 8002a5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a60:	e04b      	b.n	8002afa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3301      	adds	r3, #1
 8002a66:	d048      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a68:	f7fe fa4c 	bl	8000f04 <HAL_GetTick>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d302      	bcc.n	8002a7e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e04b      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d035      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2208      	movs	r2, #8
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d111      	bne.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f83c 	bl	8002b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2290      	movs	r2, #144	; 0x90
 8002ab0:	2108      	movs	r1, #8
 8002ab2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2284      	movs	r2, #132	; 0x84
 8002ab8:	2100      	movs	r1, #0
 8002aba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e02c      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	401a      	ands	r2, r3
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d112      	bne.n	8002afa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f000 f81f 	bl	8002b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2290      	movs	r2, #144	; 0x90
 8002aea:	2120      	movs	r1, #32
 8002aec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2284      	movs	r2, #132	; 0x84
 8002af2:	2100      	movs	r1, #0
 8002af4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e00f      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	4013      	ands	r3, r2
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	425a      	negs	r2, r3
 8002b0a:	4153      	adcs	r3, r2
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	001a      	movs	r2, r3
 8002b10:	1dfb      	adds	r3, r7, #7
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d0a4      	beq.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b30:	617b      	str	r3, [r7, #20]
  return(result);
 8002b32:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	2301      	movs	r3, #1
 8002b38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f383 8810 	msr	PRIMASK, r3
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4926      	ldr	r1, [pc, #152]	; (8002be8 <UART_EndRxTransfer+0xc4>)
 8002b4e:	400a      	ands	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f383 8810 	msr	PRIMASK, r3
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b62:	623b      	str	r3, [r7, #32]
  return(result);
 8002b64:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
 8002b68:	2301      	movs	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	f383 8810 	msr	PRIMASK, r3
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	491b      	ldr	r1, [pc, #108]	; (8002bec <UART_EndRxTransfer+0xc8>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	f383 8810 	msr	PRIMASK, r3
}
 8002b8e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d118      	bne.n	8002bca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b98:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f383 8810 	msr	PRIMASK, r3
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2110      	movs	r1, #16
 8002bba:	438a      	bics	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f383 8810 	msr	PRIMASK, r3
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	228c      	movs	r2, #140	; 0x8c
 8002bce:	2120      	movs	r1, #32
 8002bd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b00e      	add	sp, #56	; 0x38
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	fffffedf 	.word	0xfffffedf
 8002bec:	effffffe 	.word	0xeffffffe

08002bf0 <memset>:
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	1882      	adds	r2, r0, r2
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <memset+0xa>
 8002bf8:	4770      	bx	lr
 8002bfa:	7019      	strb	r1, [r3, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	e7f9      	b.n	8002bf4 <memset+0x4>

08002c00 <__libc_init_array>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	2600      	movs	r6, #0
 8002c04:	4c0c      	ldr	r4, [pc, #48]	; (8002c38 <__libc_init_array+0x38>)
 8002c06:	4d0d      	ldr	r5, [pc, #52]	; (8002c3c <__libc_init_array+0x3c>)
 8002c08:	1b64      	subs	r4, r4, r5
 8002c0a:	10a4      	asrs	r4, r4, #2
 8002c0c:	42a6      	cmp	r6, r4
 8002c0e:	d109      	bne.n	8002c24 <__libc_init_array+0x24>
 8002c10:	2600      	movs	r6, #0
 8002c12:	f000 f819 	bl	8002c48 <_init>
 8002c16:	4c0a      	ldr	r4, [pc, #40]	; (8002c40 <__libc_init_array+0x40>)
 8002c18:	4d0a      	ldr	r5, [pc, #40]	; (8002c44 <__libc_init_array+0x44>)
 8002c1a:	1b64      	subs	r4, r4, r5
 8002c1c:	10a4      	asrs	r4, r4, #2
 8002c1e:	42a6      	cmp	r6, r4
 8002c20:	d105      	bne.n	8002c2e <__libc_init_array+0x2e>
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	00b3      	lsls	r3, r6, #2
 8002c26:	58eb      	ldr	r3, [r5, r3]
 8002c28:	4798      	blx	r3
 8002c2a:	3601      	adds	r6, #1
 8002c2c:	e7ee      	b.n	8002c0c <__libc_init_array+0xc>
 8002c2e:	00b3      	lsls	r3, r6, #2
 8002c30:	58eb      	ldr	r3, [r5, r3]
 8002c32:	4798      	blx	r3
 8002c34:	3601      	adds	r6, #1
 8002c36:	e7f2      	b.n	8002c1e <__libc_init_array+0x1e>
 8002c38:	08002d00 	.word	0x08002d00
 8002c3c:	08002d00 	.word	0x08002d00
 8002c40:	08002d04 	.word	0x08002d04
 8002c44:	08002d00 	.word	0x08002d00

08002c48 <_init>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr

08002c54 <_fini>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5a:	bc08      	pop	{r3}
 8002c5c:	469e      	mov	lr, r3
 8002c5e:	4770      	bx	lr
